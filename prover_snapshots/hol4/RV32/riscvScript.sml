(*Generated by Lem from generated_definitions/lem/RV32/riscv.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_pervasives_extraTheory sail2_instr_kindsTheory sail2_valuesTheory sail2_prompt_monadTheory sail2_operators_mwordsTheory sail2_promptTheory sail2_stringTheory riscv_typesTheory mem_metadataTheory riscv_extras_fdextTheory riscv_extrasTheory;

val _ = numLib.prefer_num();



val _ = new_theory "riscv"

(*Generated by Sail from riscv.*)
(*open import Pervasives_extra*)
(*open import Sail2_instr_kinds*)
(*open import Sail2_values*)
(*open import Sail2_string*)
(*open import Sail2_operators_mwords*)
(*open import Sail2_prompt_monad*)
(*open import Sail2_prompt*)
(*open import Riscv_types*)
(*open import Mem_metadata*)
(*open import Riscv_extras_fdext*)
(*open import Riscv_extras*)

(*val is_none : forall 'a. maybe 'a -> bool*)

val _ = Define `
 ((is_none:'a option -> bool) opt=  ((case opt of   SOME (_) => F | NONE => T )))`;


(*val is_some : forall 'a. maybe 'a -> bool*)

val _ = Define `
 ((is_some:'a option -> bool) opt=  ((case opt of   SOME (_) => T | NONE => F )))`;


(*val eq_unit : unit -> unit -> bool*)

val _ = Define `
 ((eq_unit:unit -> unit -> bool) _ _=  T)`;




(*val neq_bool : bool -> bool -> bool*)

val _ = Define `
 ((neq_bool:bool -> bool -> bool) x y=  (~ (((x = y)))))`;


(*val __id : integer -> integer*)

val _ = Define `
 ((id:int -> int) x=  x)`;


(*val _shl_int_general : ii -> ii -> ii*)

val _ = Define `
 ((shl_int_general:int -> int -> int) (m : ii) (n : ii)=
    (if ((n >= (( 0 : int):ii))) then shl_int m n
   else shr_int m ((~ n))))`;


(*val _shr_int_general : ii -> ii -> ii*)

val _ = Define `
 ((shr_int_general:int -> int -> int) (m : ii) (n : ii)=
    (if ((n >= (( 0 : int):ii))) then shr_int m n
   else shl_int m ((~ n))))`;


(*val fdiv_int : ii -> ii -> ii*)

val _ = Define `
 ((fdiv_int:int -> int -> int) (n : ii) (m : ii)=
    (if (((((n < (( 0 : int):ii))) /\ ((m > (( 0 : int):ii)))))) then
     ((tdiv_int ((n + (( 1 : int):ii))) m)) - (( 1 : int):ii)
   else if (((((n > (( 0 : int):ii))) /\ ((m < (( 0 : int):ii)))))) then
     ((tdiv_int ((n - (( 1 : int):ii))) m)) - (( 1 : int):ii)
   else tdiv_int n m))`;


(*val fmod_int : ii -> ii -> ii*)

val _ = Define `
 ((fmod_int:int -> int -> int) (n : ii) (m : ii)=  (n - ((m * ((fdiv_int n m))))))`;


(*val concat_str_bits : forall 'n. Size 'n => string -> mword 'n -> string*)

val _ = Define `
 ((concat_str_bits:string -> 'n words$word -> string) str x=  (STRCAT str ((string_of_bits x))))`;


(*val concat_str_dec : string -> ii -> string*)

val _ = Define `
 ((concat_str_dec:string -> int -> string) str x=  (STRCAT str ((dec_str x))))`;




(*val sail_mask : forall 'len 'v. Size 'len, Size 'v => integer -> mword 'v -> mword 'len*)

val _ = Define `
 ((sail_mask:int -> 'v words$word -> 'len words$word) len v=
    (if ((len <= ((int_of_num (words$word_len v))))) then (vector_truncate v len  :  'len words$word)
   else (zero_extend v len  :  'len words$word)))`;


(*val sail_ones : forall 'n. Size 'n => integer -> mword 'n*)

val _ = Define `
 ((sail_ones:int -> 'n words$word) n=  ((not_vec ((zeros n  :  'n words$word))  :  'n words$word)))`;


(*val slice_mask : forall 'n. Size 'n => integer -> ii -> ii -> mword 'n*)

val _ = Define `
 ((slice_mask:int -> int -> int -> 'n words$word) n i l=
    (if ((l >= n)) then (shiftl ((sail_ones n  :  'n words$word)) i  :  'n words$word)
   else
     let (one1 :  'n words$word) = ((sail_mask n (0b1w :  1 words$word)  :  'n words$word)) in
     (shiftl ((sub_vec ((shiftl one1 l  :  'n words$word)) one1  :  'n words$word)) i  :  'n words$word)))`;


(*val read_kind_of_num : integer -> read_kind*)

val _ = Define `
 ((read_kind_of_num:int -> read_kind) arg_=
    (let l__299 = arg_ in
   if (((l__299 = (( 0 : int):ii)))) then Read_plain
   else if (((l__299 = (( 1 : int):ii)))) then Read_reserve
   else if (((l__299 = (( 2 : int):ii)))) then Read_acquire
   else if (((l__299 = (( 3 : int):ii)))) then Read_exclusive
   else if (((l__299 = (( 4 : int):ii)))) then Read_exclusive_acquire
   else if (((l__299 = (( 5 : int):ii)))) then Read_stream
   else if (((l__299 = (( 6 : int):ii)))) then Read_RISCV_acquire
   else if (((l__299 = (( 7 : int):ii)))) then Read_RISCV_strong_acquire
   else if (((l__299 = (( 8 : int):ii)))) then Read_RISCV_reserved
   else if (((l__299 = (( 9 : int):ii)))) then Read_RISCV_reserved_acquire
   else if (((l__299 = (( 10 : int):ii)))) then Read_RISCV_reserved_strong_acquire
   else Read_X86_locked))`;


(*val num_of_read_kind : read_kind -> integer*)

val _ = Define `
 ((num_of_read_kind:read_kind -> int) arg_=
    ((case arg_ of
     Read_plain => (( 0 : int):ii)
   | Read_reserve => (( 1 : int):ii)
   | Read_acquire => (( 2 : int):ii)
   | Read_exclusive => (( 3 : int):ii)
   | Read_exclusive_acquire => (( 4 : int):ii)
   | Read_stream => (( 5 : int):ii)
   | Read_RISCV_acquire => (( 6 : int):ii)
   | Read_RISCV_strong_acquire => (( 7 : int):ii)
   | Read_RISCV_reserved => (( 8 : int):ii)
   | Read_RISCV_reserved_acquire => (( 9 : int):ii)
   | Read_RISCV_reserved_strong_acquire => (( 10 : int):ii)
   | Read_X86_locked => (( 11 : int):ii)
   )))`;


(*val write_kind_of_num : integer -> write_kind*)

val _ = Define `
 ((write_kind_of_num:int -> write_kind) arg_=
    (let l__289 = arg_ in
   if (((l__289 = (( 0 : int):ii)))) then Write_plain
   else if (((l__289 = (( 1 : int):ii)))) then Write_conditional
   else if (((l__289 = (( 2 : int):ii)))) then Write_release
   else if (((l__289 = (( 3 : int):ii)))) then Write_exclusive
   else if (((l__289 = (( 4 : int):ii)))) then Write_exclusive_release
   else if (((l__289 = (( 5 : int):ii)))) then Write_RISCV_release
   else if (((l__289 = (( 6 : int):ii)))) then Write_RISCV_strong_release
   else if (((l__289 = (( 7 : int):ii)))) then Write_RISCV_conditional
   else if (((l__289 = (( 8 : int):ii)))) then Write_RISCV_conditional_release
   else if (((l__289 = (( 9 : int):ii)))) then Write_RISCV_conditional_strong_release
   else Write_X86_locked))`;


(*val num_of_write_kind : write_kind -> integer*)

val _ = Define `
 ((num_of_write_kind:write_kind -> int) arg_=
    ((case arg_ of
     Write_plain => (( 0 : int):ii)
   | Write_conditional => (( 1 : int):ii)
   | Write_release => (( 2 : int):ii)
   | Write_exclusive => (( 3 : int):ii)
   | Write_exclusive_release => (( 4 : int):ii)
   | Write_RISCV_release => (( 5 : int):ii)
   | Write_RISCV_strong_release => (( 6 : int):ii)
   | Write_RISCV_conditional => (( 7 : int):ii)
   | Write_RISCV_conditional_release => (( 8 : int):ii)
   | Write_RISCV_conditional_strong_release => (( 9 : int):ii)
   | Write_X86_locked => (( 10 : int):ii)
   )))`;


(*val a64_barrier_domain_of_num : integer -> a64_barrier_domain*)

val _ = Define `
 ((a64_barrier_domain_of_num:int -> a64_barrier_domain) arg_=
    (let l__286 = arg_ in
   if (((l__286 = (( 0 : int):ii)))) then A64_FullShare
   else if (((l__286 = (( 1 : int):ii)))) then A64_InnerShare
   else if (((l__286 = (( 2 : int):ii)))) then A64_OuterShare
   else A64_NonShare))`;


(*val num_of_a64_barrier_domain : a64_barrier_domain -> integer*)

val _ = Define `
 ((num_of_a64_barrier_domain:a64_barrier_domain -> int) arg_=
    ((case arg_ of
     A64_FullShare => (( 0 : int):ii)
   | A64_InnerShare => (( 1 : int):ii)
   | A64_OuterShare => (( 2 : int):ii)
   | A64_NonShare => (( 3 : int):ii)
   )))`;


(*val a64_barrier_type_of_num : integer -> a64_barrier_type*)

val _ = Define `
 ((a64_barrier_type_of_num:int -> a64_barrier_type) arg_=
    (let l__284 = arg_ in
   if (((l__284 = (( 0 : int):ii)))) then A64_barrier_all
   else if (((l__284 = (( 1 : int):ii)))) then A64_barrier_LD
   else A64_barrier_ST))`;


(*val num_of_a64_barrier_type : a64_barrier_type -> integer*)

val _ = Define `
 ((num_of_a64_barrier_type:a64_barrier_type -> int) arg_=
    ((case arg_ of
     A64_barrier_all => (( 0 : int):ii)
   | A64_barrier_LD => (( 1 : int):ii)
   | A64_barrier_ST => (( 2 : int):ii)
   )))`;


(*val trans_kind_of_num : integer -> trans_kind*)

val _ = Define `
 ((trans_kind_of_num:int -> trans_kind) arg_=
    (let l__282 = arg_ in
   if (((l__282 = (( 0 : int):ii)))) then Transaction_start
   else if (((l__282 = (( 1 : int):ii)))) then Transaction_commit
   else Transaction_abort))`;


(*val num_of_trans_kind : trans_kind -> integer*)

val _ = Define `
 ((num_of_trans_kind:trans_kind -> int) arg_=
    ((case arg_ of
     Transaction_start => (( 0 : int):ii)
   | Transaction_commit => (( 1 : int):ii)
   | Transaction_abort => (( 2 : int):ii)
   )))`;


(*val cache_op_kind_of_num : integer -> cache_op_kind*)

val _ = Define `
 ((cache_op_kind_of_num:int -> cache_op_kind) arg_=
    (let l__272 = arg_ in
   if (((l__272 = (( 0 : int):ii)))) then Cache_op_D_IVAC
   else if (((l__272 = (( 1 : int):ii)))) then Cache_op_D_ISW
   else if (((l__272 = (( 2 : int):ii)))) then Cache_op_D_CSW
   else if (((l__272 = (( 3 : int):ii)))) then Cache_op_D_CISW
   else if (((l__272 = (( 4 : int):ii)))) then Cache_op_D_ZVA
   else if (((l__272 = (( 5 : int):ii)))) then Cache_op_D_CVAC
   else if (((l__272 = (( 6 : int):ii)))) then Cache_op_D_CVAU
   else if (((l__272 = (( 7 : int):ii)))) then Cache_op_D_CIVAC
   else if (((l__272 = (( 8 : int):ii)))) then Cache_op_I_IALLUIS
   else if (((l__272 = (( 9 : int):ii)))) then Cache_op_I_IALLU
   else Cache_op_I_IVAU))`;


(*val num_of_cache_op_kind : cache_op_kind -> integer*)

val _ = Define `
 ((num_of_cache_op_kind:cache_op_kind -> int) arg_=
    ((case arg_ of
     Cache_op_D_IVAC => (( 0 : int):ii)
   | Cache_op_D_ISW => (( 1 : int):ii)
   | Cache_op_D_CSW => (( 2 : int):ii)
   | Cache_op_D_CISW => (( 3 : int):ii)
   | Cache_op_D_ZVA => (( 4 : int):ii)
   | Cache_op_D_CVAC => (( 5 : int):ii)
   | Cache_op_D_CVAU => (( 6 : int):ii)
   | Cache_op_D_CIVAC => (( 7 : int):ii)
   | Cache_op_I_IALLUIS => (( 8 : int):ii)
   | Cache_op_I_IALLU => (( 9 : int):ii)
   | Cache_op_I_IVAU => (( 10 : int):ii)
   )))`;


(*val not_bit : bitU -> bitU*)

val _ = Define `
 ((not_bit0:bitU -> bitU) b=  (if (((b = B1))) then B0 else B1))`;






(*val string_of_bit : bitU -> string*)

val _ = Define `
 ((string_of_bit:bitU -> string) b=  ((case b of   B0 => "0b0" | B1 => "0b1" )))`;


(*val get_config_print_instr : unit -> bool*)

(*val get_config_print_reg : unit -> bool*)

(*val get_config_print_mem : unit -> bool*)

(*val get_config_print_platform : unit -> bool*)

val _ = Define `
 ((get_config_print_instr:unit -> bool) () =  F)`;


val _ = Define `
 ((get_config_print_reg:unit -> bool) () =  F)`;


val _ = Define `
 ((get_config_print_mem:unit -> bool) () =  F)`;


val _ = Define `
 ((get_config_print_platform:unit -> bool) () =  F)`;


(*val EXTS : forall 'm 'n. Size 'm, Size 'n => integer -> mword 'n -> mword 'm*)

(*val EXTZ : forall 'm 'n. Size 'm, Size 'n => integer -> mword 'n -> mword 'm*)

val _ = Define `
 ((EXTS:int -> 'n words$word -> 'm words$word) m v=  ((sign_extend v m  :  'm words$word)))`;


val _ = Define `
 ((EXTZ:int -> 'n words$word -> 'm words$word) m v=  ((zero_extend v m  :  'm words$word)))`;


(*val zeros_implicit : forall 'n. Size 'n => integer -> mword 'n*)

val _ = Define `
 ((zeros_implicit:int -> 'n words$word) n=  ((zeros n  :  'n words$word)))`;


(*val ones : forall 'n. Size 'n => integer -> mword 'n*)

val _ = Define `
 ((ones:int -> 'n words$word) n=  ((sail_ones n  :  'n words$word)))`;


(*val bool_to_bits : bool -> mword ty1*)

val _ = Define `
 ((bool_to_bits:bool ->(1)words$word) x=  (if x then (0b1w :  1 words$word) else (0b0w :  1 words$word)))`;


(*val bit_to_bool : bitU -> bool*)

val _ = Define `
 ((bit_to_bool:bitU -> bool) b=  ((case b of   B1 => T | B0 => F )))`;


(*val to_bits : forall 'l. Size 'l => integer -> ii -> mword 'l*)

val _ = Define `
 ((to_bits:int -> int -> 'l words$word) l n=  ((get_slice_int l n (( 0 : int):ii)  :  'l words$word)))`;


(*val zopz0zI_s : forall 'n. Size 'n => mword 'n -> mword 'n -> bool*)

(*val zopz0zKzJ_s : forall 'n. Size 'n => mword 'n -> mword 'n -> bool*)

(*val zopz0zI_u : forall 'n. Size 'n => mword 'n -> mword 'n -> bool*)

(*val zopz0zKzJ_u : forall 'n. Size 'n => mword 'n -> mword 'n -> bool*)

(*val zopz0zIzJ_u : forall 'n. Size 'n => mword 'n -> mword 'n -> bool*)

val _ = Define `
 ((zopz0zI_s:'n words$word -> 'n words$word -> bool) x y=  (((integer_word$w2i x)) < ((integer_word$w2i y))))`;


val _ = Define `
 ((zopz0zKzJ_s:'n words$word -> 'n words$word -> bool) x y=  (((integer_word$w2i x)) >= ((integer_word$w2i y))))`;


val _ = Define `
 ((zopz0zI_u:'n words$word -> 'n words$word -> bool) x y=  (((lem$w2ui x)) < ((lem$w2ui y))))`;


val _ = Define `
 ((zopz0zKzJ_u:'n words$word -> 'n words$word -> bool) x y=  (((lem$w2ui x)) >= ((lem$w2ui y))))`;


val _ = Define `
 ((zopz0zIzJ_u:'n words$word -> 'n words$word -> bool) x y=  (((lem$w2ui x)) <= ((lem$w2ui y))))`;


(*val shift_right_arith64 : mword ty64 -> mword ty6 -> mword ty64*)

val _ = Define `
 ((shift_right_arith64:(64)words$word ->(6)words$word ->(64)words$word) (v : 64 bits) (shift : 6 bits)=
    (let (v128 : 128 bits) = ((EXTS (( 128 : int):ii) v  :  128 words$word)) in
   (subrange_vec_dec ((shift_bits_right v128 shift  :  128 words$word)) (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)))`;


(*val shift_right_arith32 : mword ty32 -> mword ty5 -> mword ty32*)

val _ = Define `
 ((shift_right_arith32:(32)words$word ->(5)words$word ->(32)words$word) (v : 32 bits) (shift : 5 bits)=
    (let (v64 : 64 bits) = ((EXTS (( 64 : int):ii) v  :  64 words$word)) in
   (subrange_vec_dec ((shift_bits_right v64 shift  :  64 words$word)) (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)))`;


(*val spc_forwards : unit -> string*)

(*val spc_backwards : string -> unit*)

(*val spc_forwards_matches : unit -> bool*)

(*val spc_backwards_matches : string -> bool*)

(*val spc_matches_prefix : string -> maybe ((unit * ii))*)

(*val opt_spc_forwards : unit -> string*)

(*val opt_spc_backwards : string -> unit*)

(*val opt_spc_forwards_matches : unit -> bool*)

(*val opt_spc_backwards_matches : string -> bool*)

(*val opt_spc_matches_prefix : string -> maybe ((unit * ii))*)

(*val def_spc_forwards : unit -> string*)

(*val def_spc_backwards : string -> unit*)

(*val def_spc_forwards_matches : unit -> bool*)

(*val def_spc_backwards_matches : string -> bool*)

(*val def_spc_matches_prefix : string -> maybe ((unit * ii))*)

(*val hex_bits_forwards : forall 'n. Size 'n => (integer * mword 'n) -> string*)

(*val hex_bits_backwards : forall 'n. Size 'n => string -> (integer * mword 'n)*)

(*val hex_bits_forwards_matches : forall 'n. Size 'n => (integer * mword 'n) -> bool*)

(*val hex_bits_backwards_matches : string -> bool*)

(*val hex_bits_matches_prefix : forall 'n. Size 'n => string -> maybe (((integer * mword 'n) * ii))*)

(*val n_leading_spaces : string -> ii*)

 val n_leading_spaces0_defn = Hol_defn "n_leading_spaces0" `
 ((n_leading_spaces0:string -> int) s=
    (let p0_ = s in
   if (((p0_ = ""))) then (( 0 : int):ii)
   else
     let p0_ = (string_take s (( 1 : int):ii)) in
     if (((p0_ = " "))) then (( 1 : int):ii) + ((n_leading_spaces0 ((string_drop s (( 1 : int):ii)))))
     else (( 0 : int):ii)))`;

val _ = Lib.with_flag (computeLib.auto_import_definitions, false) Defn.save_defn n_leading_spaces0_defn;

val _ = Define `
 ((spc_forwards:unit -> string) () =  " ")`;


val _ = Define `
 ((spc_backwards:string -> unit) s=  () )`;


val _ = Define `
 ((spc_matches_prefix0:string ->(unit#int)option) s=
    (let n = (n_leading_spaces0 s) in
   let l__271 = n in
   if (((l__271 = (( 0 : int):ii)))) then NONE
   else SOME (() , n)))`;


val _ = Define `
 ((opt_spc_forwards:unit -> string) () =  "")`;


val _ = Define `
 ((opt_spc_backwards:string -> unit) s=  () )`;


val _ = Define `
 ((opt_spc_matches_prefix0:string ->(unit#int)option) s=  (SOME (() , n_leading_spaces0 s)))`;


val _ = Define `
 ((def_spc_forwards:unit -> string) () =  " ")`;


val _ = Define `
 ((def_spc_backwards:string -> unit) s=  () )`;


val _ = Define `
 ((def_spc_matches_prefix:string ->(unit#ii)option) s=  (opt_spc_matches_prefix0 s))`;


(*val hex_bits_1_backwards : string -> M (mword ty1)*)

(*val hex_bits_1_forwards_matches : mword ty1 -> bool*)

(*val hex_bits_1_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_1_forwards_matches:(1)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_1_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_1_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 1 words$word # ii)) option)) of
             SOME ((g__362, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_1_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((1)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_1_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 1 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 49:2 - 51:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 49:2 - 51:3") (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_2_backwards : string -> M (mword ty2)*)

(*val hex_bits_2_forwards_matches : mword ty2 -> bool*)

(*val hex_bits_2_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_2_forwards_matches:(2)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_2_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_2_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 2 words$word # ii)) option)) of
             SOME ((g__361, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_2_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((2)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_2_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 2 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 68:2 - 70:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 68:2 - 70:3") (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_3_backwards : string -> M (mword ty3)*)

(*val hex_bits_3_forwards_matches : mword ty3 -> bool*)

(*val hex_bits_3_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_3_forwards_matches:(3)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_3_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_3_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 3 words$word # ii)) option)) of
             SOME ((g__360, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_3_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((3)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_3_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 3 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 87:2 - 89:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 87:2 - 89:3") (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_4_backwards : string -> M (mword ty4)*)

(*val hex_bits_4_forwards_matches : mword ty4 -> bool*)

(*val hex_bits_4_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_4_forwards_matches:(4)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_4_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_4_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 4 words$word # ii)) option)) of
             SOME ((g__359, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_4_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((4)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_4_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 4 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 106:2 - 108:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 106:2 - 108:3")
      (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_5_backwards : string -> M (mword ty5)*)

(*val hex_bits_5_forwards_matches : mword ty5 -> bool*)

(*val hex_bits_5_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_5_forwards_matches:(5)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_5_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_5_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 5 words$word # ii)) option)) of
             SOME ((g__358, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_5_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_5_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 5 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 125:2 - 127:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 125:2 - 127:3")
      (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_6_backwards : string -> M (mword ty6)*)

(*val hex_bits_6_forwards_matches : mword ty6 -> bool*)

(*val hex_bits_6_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_6_forwards_matches:(6)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_6_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_6_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 6 words$word # ii)) option)) of
             SOME ((g__357, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_6_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((6)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_6_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 6 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 144:2 - 146:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 144:2 - 146:3")
      (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_7_backwards : string -> M (mword ty7)*)

(*val hex_bits_7_forwards_matches : mword ty7 -> bool*)

(*val hex_bits_7_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_7_forwards_matches:(7)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_7_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_7_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 7 words$word # ii)) option)) of
             SOME ((g__356, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_7_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((7)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_7_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 7 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 163:2 - 165:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 163:2 - 165:3")
      (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_8_backwards : string -> M (mword ty8)*)

(*val hex_bits_8_forwards_matches : mword ty8 -> bool*)

(*val hex_bits_8_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_8_forwards_matches:(8)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_8_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_8_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 8 words$word # ii)) option)) of
             SOME ((g__355, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_8_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((8)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_8_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 8 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 182:2 - 184:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 182:2 - 184:3")
      (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_9_backwards : string -> M (mword ty9)*)

(*val hex_bits_9_forwards_matches : mword ty9 -> bool*)

(*val hex_bits_9_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_9_forwards_matches:(9)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_9_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_9_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 9 words$word # ii)) option)) of
             SOME ((g__354, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_9_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((9)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_9_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 9 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 201:2 - 203:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 201:2 - 203:3")
      (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_10_backwards : string -> M (mword ty10)*)

(*val hex_bits_10_forwards_matches : mword ty10 -> bool*)

(*val hex_bits_10_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_10_forwards_matches:(10)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_10_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_10_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 10 words$word # ii)) option)) of
             SOME ((g__353, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_10_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((10)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_10_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 10 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 220:2 - 222:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 220:2 - 222:3")
      (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_11_backwards : string -> M (mword ty11)*)

(*val hex_bits_11_forwards_matches : mword ty11 -> bool*)

(*val hex_bits_11_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_11_forwards_matches:(11)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_11_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_11_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 11 words$word # ii)) option)) of
             SOME ((g__352, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_11_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((11)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_11_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 11 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 239:2 - 241:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 239:2 - 241:3")
      (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_12_backwards : string -> M (mword ty12)*)

(*val hex_bits_12_forwards_matches : mword ty12 -> bool*)

(*val hex_bits_12_backwards_matches : string -> bool*)

(*val hex_bits_12_matches_prefix : string -> maybe ((mword ty12 * ii))*)

val _ = Define `
 ((hex_bits_12_forwards_matches:(12)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_12_matches_prefix0:string ->((12)words$word#ii)option) s=  NONE)`;


val _ = Define `
 ((hex_bits_12_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_12_matches_prefix0 s : (( 12 words$word # ii)) option)) of
             SOME ((g__351, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_12_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((12)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_12_matches_prefix0 s  :  (( 12 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 262:2 - 264:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 262:2 - 264:3")
      (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_13_backwards : string -> M (mword ty13)*)

(*val hex_bits_13_forwards_matches : mword ty13 -> bool*)

(*val hex_bits_13_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_13_forwards_matches:(13)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_13_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_13_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 13 words$word # ii)) option)) of
             SOME ((g__350, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_13_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((13)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_13_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 13 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 281:2 - 283:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 281:2 - 283:3")
      (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_14_backwards : string -> M (mword ty14)*)

(*val hex_bits_14_forwards_matches : mword ty14 -> bool*)

(*val hex_bits_14_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_14_forwards_matches:(14)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_14_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_14_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 14 words$word # ii)) option)) of
             SOME ((g__349, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_14_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((14)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_14_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 14 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 300:2 - 302:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 300:2 - 302:3")
      (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_15_backwards : string -> M (mword ty15)*)

(*val hex_bits_15_forwards_matches : mword ty15 -> bool*)

(*val hex_bits_15_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_15_forwards_matches:(15)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_15_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_15_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 15 words$word # ii)) option)) of
             SOME ((g__348, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_15_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((15)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_15_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 15 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 319:2 - 321:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 319:2 - 321:3")
      (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_16_backwards : string -> M (mword ty16)*)

(*val hex_bits_16_forwards_matches : mword ty16 -> bool*)

(*val hex_bits_16_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_16_forwards_matches:(16)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_16_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_16_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 16 words$word # ii)) option)) of
             SOME ((g__347, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_16_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((16)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_16_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 16 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 338:2 - 340:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 338:2 - 340:3")
      (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_17_backwards : string -> M (mword ty17)*)

(*val hex_bits_17_forwards_matches : mword ty17 -> bool*)

(*val hex_bits_17_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_17_forwards_matches:(17)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_17_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_17_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 17 words$word # ii)) option)) of
             SOME ((g__346, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_17_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((17)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_17_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 17 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 357:2 - 359:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 357:2 - 359:3")
      (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_18_backwards : string -> M (mword ty18)*)

(*val hex_bits_18_forwards_matches : mword ty18 -> bool*)

(*val hex_bits_18_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_18_forwards_matches:(18)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_18_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_18_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 18 words$word # ii)) option)) of
             SOME ((g__345, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_18_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((18)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_18_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 18 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 376:2 - 378:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 376:2 - 378:3")
      (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_19_backwards : string -> M (mword ty19)*)

(*val hex_bits_19_forwards_matches : mword ty19 -> bool*)

(*val hex_bits_19_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_19_forwards_matches:(19)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_19_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_19_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 19 words$word # ii)) option)) of
             SOME ((g__344, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_19_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((19)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_19_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 19 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 395:2 - 397:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 395:2 - 397:3")
      (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_20_backwards : string -> M (mword ty20)*)

(*val hex_bits_20_forwards_matches : mword ty20 -> bool*)

(*val hex_bits_20_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_20_forwards_matches:(20)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_20_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_20_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 20 words$word # ii)) option)) of
             SOME ((g__343, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_20_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((20)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_20_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 20 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 414:2 - 416:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 414:2 - 416:3")
      (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_21_backwards : string -> M (mword ty21)*)

(*val hex_bits_21_forwards_matches : mword ty21 -> bool*)

(*val hex_bits_21_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_21_forwards_matches:(21)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_21_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_21_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 21 words$word # ii)) option)) of
             SOME ((g__342, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_21_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((21)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_21_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 21 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 433:2 - 435:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 433:2 - 435:3")
      (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_22_backwards : string -> M (mword ty22)*)

(*val hex_bits_22_forwards_matches : mword ty22 -> bool*)

(*val hex_bits_22_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_22_forwards_matches:(22)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_22_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_22_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 22 words$word # ii)) option)) of
             SOME ((g__341, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_22_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((22)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_22_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 22 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 452:2 - 454:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 452:2 - 454:3")
      (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_23_backwards : string -> M (mword ty23)*)

(*val hex_bits_23_forwards_matches : mword ty23 -> bool*)

(*val hex_bits_23_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_23_forwards_matches:(23)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_23_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_23_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 23 words$word # ii)) option)) of
             SOME ((g__340, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_23_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((23)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_23_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 23 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 471:2 - 473:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 471:2 - 473:3")
      (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_24_backwards : string -> M (mword ty24)*)

(*val hex_bits_24_forwards_matches : mword ty24 -> bool*)

(*val hex_bits_24_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_24_forwards_matches:(24)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_24_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_24_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 24 words$word # ii)) option)) of
             SOME ((g__339, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_24_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((24)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_24_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 24 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 490:2 - 492:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 490:2 - 492:3")
      (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_25_backwards : string -> M (mword ty25)*)

(*val hex_bits_25_forwards_matches : mword ty25 -> bool*)

(*val hex_bits_25_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_25_forwards_matches:(25)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_25_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_25_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 25 words$word # ii)) option)) of
             SOME ((g__338, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_25_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((25)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_25_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 25 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 509:2 - 511:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 509:2 - 511:3")
      (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_26_backwards : string -> M (mword ty26)*)

(*val hex_bits_26_forwards_matches : mword ty26 -> bool*)

(*val hex_bits_26_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_26_forwards_matches:(26)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_26_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_26_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 26 words$word # ii)) option)) of
             SOME ((g__337, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_26_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((26)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_26_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 26 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 528:2 - 530:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 528:2 - 530:3")
      (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_27_backwards : string -> M (mword ty27)*)

(*val hex_bits_27_forwards_matches : mword ty27 -> bool*)

(*val hex_bits_27_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_27_forwards_matches:(27)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_27_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_27_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 27 words$word # ii)) option)) of
             SOME ((g__336, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_27_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((27)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_27_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 27 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 547:2 - 549:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 547:2 - 549:3")
      (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_28_backwards : string -> M (mword ty28)*)

(*val hex_bits_28_forwards_matches : mword ty28 -> bool*)

(*val hex_bits_28_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_28_forwards_matches:(28)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_28_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_28_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 28 words$word # ii)) option)) of
             SOME ((g__335, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_28_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((28)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_28_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 28 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 566:2 - 568:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 566:2 - 568:3")
      (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_29_backwards : string -> M (mword ty29)*)

(*val hex_bits_29_forwards_matches : mword ty29 -> bool*)

(*val hex_bits_29_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_29_forwards_matches:(29)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_29_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_29_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 29 words$word # ii)) option)) of
             SOME ((g__334, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_29_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((29)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_29_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 29 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 585:2 - 587:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 585:2 - 587:3")
      (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_30_backwards : string -> M (mword ty30)*)

(*val hex_bits_30_forwards_matches : mword ty30 -> bool*)

(*val hex_bits_30_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_30_forwards_matches:(30)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_30_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_30_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 30 words$word # ii)) option)) of
             SOME ((g__333, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_30_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((30)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_30_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 30 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 604:2 - 606:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 604:2 - 606:3")
      (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_31_backwards : string -> M (mword ty31)*)

(*val hex_bits_31_forwards_matches : mword ty31 -> bool*)

(*val hex_bits_31_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_31_forwards_matches:(31)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_31_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_31_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 31 words$word # ii)) option)) of
             SOME ((g__332, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_31_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((31)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_31_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 31 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 623:2 - 625:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 623:2 - 625:3")
      (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_32_backwards : string -> M (mword ty32)*)

(*val hex_bits_32_forwards_matches : mword ty32 -> bool*)

(*val hex_bits_32_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_32_forwards_matches:(32)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_32_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_32_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 32 words$word # ii)) option)) of
             SOME ((g__331, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_32_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_32_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 32 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 642:2 - 644:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 642:2 - 644:3")
      (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_33_backwards : string -> M (mword ty33)*)

(*val hex_bits_33_forwards_matches : mword ty33 -> bool*)

(*val hex_bits_33_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_33_forwards_matches:(33)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_33_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_33_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 33 words$word # ii)) option)) of
             SOME ((g__330, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_33_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((33)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_33_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 33 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 661:2 - 663:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 661:2 - 663:3")
      (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_48_backwards : string -> M (mword ty48)*)

(*val hex_bits_48_forwards_matches : mword ty48 -> bool*)

(*val hex_bits_48_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_48_forwards_matches:(48)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_48_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_48_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 48 words$word # ii)) option)) of
             SOME ((g__329, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_48_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((48)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_48_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 48 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 680:2 - 682:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 680:2 - 682:3")
      (sail2_state_monad$exitS () )
   )))`;


(*val hex_bits_64_backwards : string -> M (mword ty64)*)

(*val hex_bits_64_forwards_matches : mword ty64 -> bool*)

(*val hex_bits_64_backwards_matches : string -> bool*)

val _ = Define `
 ((hex_bits_64_forwards_matches:(64)words$word -> bool) bv=  T)`;


val _ = Define `
 ((hex_bits_64_backwards_matches:string -> bool) s= 
  ((case s of
         s =>
   if ((case ((hex_bits_64_matches_prefix
                 instance_Sail2_values_Bitvector_Machine_word_mword_dict 
               s : (( 64 words$word # ii)) option)) of
             SOME ((g__328, n)) =>
       if (((n = ((string_length s))))) then T else F
         | _ => F
       )) then T else F
   )))`;


val _ = Define `
 ((hex_bits_64_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((64)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=
    ((case ((hex_bits_64_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict s  :  (( 64 words$word # ii))option)) of
     SOME ((bv, n)) =>
      if (((n = ((string_length s))))) then sail2_state_monad$returnS bv
      else sail2_state_monad$seqS
        (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 699:2 - 701:3")
        (sail2_state_monad$exitS () )
   | _ => sail2_state_monad$seqS
      (sail2_state_monad$assert_expS F "Pattern match failure at model/prelude_mapping.sail 699:2 - 701:3")
      (sail2_state_monad$exitS () )
   )))`;


val _ = Define `
((default_meta:unit)=  () )`;


(*val __WriteRAM_Meta : mword ty32 -> integer -> unit -> M unit*)

val _ = Define `
 ((WriteRAM_Meta:(32)words$word -> int -> unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) addr width meta=  (sail2_state_monad$returnS () ))`;


(*val __ReadRAM_Meta : mword ty32 -> integer -> M unit*)

val _ = Define `
 ((ReadRAM_Meta:(32)words$word -> int ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) addr width=  (sail2_state_monad$returnS () ))`;




(*val write_ram_ea : write_kind -> mword ty32 -> integer -> M unit*)

val _ = Define `
 ((write_ram_ea:write_kind ->(32)words$word -> int ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) wk addr width=  (sail2_state_monad$returnS () ))`;




(*val __TraceMemoryWrite : forall 'm 'int8_times_n. Size 'm, Size 'int8_times_n => integer -> mword 'm -> mword 'int8_times_n -> unit*)

(*val __TraceMemoryRead : forall 'm 'int8_times_n. Size 'm, Size 'int8_times_n => integer -> mword 'm -> mword 'int8_times_n -> unit*)

val _ = Define `
((init_ext_ptw:unit)=  () )`;


(*val ext_translate_exception : unit -> unit*)

val _ = Define `
 ((ext_translate_exception:unit -> unit) e=  e)`;


(*val ext_exc_type_to_bits : unit -> mword ty8*)

val _ = Define `
 ((ext_exc_type_to_bits:unit ->(8)words$word) e=  ((0x18w :  8 words$word)))`;


(*val num_of_ext_exc_type : unit -> integer*)

val _ = Define `
 ((num_of_ext_exc_type:unit -> int) e=  ((( 24 : int):ii)))`;


(*val ext_exc_type_to_str : unit -> string*)

val _ = Define `
 ((ext_exc_type_to_str:unit -> string) e=  "extension-exception")`;


val _ = Define `
((xlen_val:int)=  ((( 32 : int):ii)))`;


val _ = Define `
((xlen_max_unsigned:int)=  ((( 4294967295 : int):ii)))`;


val _ = Define `
((xlen_max_signed:int)=  ((( 2147483647 : int):ii)))`;


val _ = Define `
((xlen_min_signed:int)=  (((( 0 : int)-( 2147483648 : int)):ii)))`;


(*val regidx_to_regno : mword ty5 -> integer*)

val _ = Define `
 ((regidx_to_regno:(5)words$word -> int) b=
    (let r = (lem$w2ui b) in
   r))`;


(*val creg2reg_idx : mword ty3 -> mword ty5*)

val _ = Define `
 ((creg2reg_idx:(3)words$word ->(5)words$word) creg=  ((concat_vec (0b01w :  2 words$word) creg  :  5 words$word)))`;


val _ = Define `
((zreg:(5)words$word)=  ((0b00000w :  5 words$word)))`;


val _ = Define `
((ra:(5)words$word)=  ((0b00001w :  5 words$word)))`;


val _ = Define `
((sp:(5)words$word)=  ((0b00010w :  5 words$word)))`;


(*val Architecture_of_num : integer -> Architecture*)

val _ = Define `
 ((Architecture_of_num:int -> Architecture) arg_=
    (let l__269 = arg_ in
   if (((l__269 = (( 0 : int):ii)))) then RV32
   else if (((l__269 = (( 1 : int):ii)))) then RV64
   else RV128))`;


(*val num_of_Architecture : Architecture -> integer*)

val _ = Define `
 ((num_of_Architecture:Architecture -> int) arg_=
    ((case arg_ of   RV32 => (( 0 : int):ii) | RV64 => (( 1 : int):ii) | RV128 => (( 2 : int):ii) )))`;


(*val architecture : mword ty2 -> maybe Architecture*)

val _ = Define `
 ((architecture:(2)words$word ->(Architecture)option) a=
    (let b__0 = a in
   if (((b__0 = (0b01w :  2 words$word)))) then SOME RV32
   else if (((b__0 = (0b10w :  2 words$word)))) then SOME RV64
   else if (((b__0 = (0b11w :  2 words$word)))) then SOME RV128
   else NONE))`;


(*val arch_to_bits : Architecture -> mword ty2*)

val _ = Define `
 ((arch_to_bits:Architecture ->(2)words$word) a=
    ((case a of
     RV32 => (0b01w :  2 words$word)
   | RV64 => (0b10w :  2 words$word)
   | RV128 => (0b11w :  2 words$word)
   )))`;


(*val Privilege_of_num : integer -> Privilege*)

val _ = Define `
 ((Privilege_of_num:int -> Privilege) arg_=
    (let l__267 = arg_ in
   if (((l__267 = (( 0 : int):ii)))) then User
   else if (((l__267 = (( 1 : int):ii)))) then Supervisor
   else Machine))`;


(*val num_of_Privilege : Privilege -> integer*)

val _ = Define `
 ((num_of_Privilege:Privilege -> int) arg_=
    ((case arg_ of   User => (( 0 : int):ii) | Supervisor => (( 1 : int):ii) | Machine => (( 2 : int):ii) )))`;


(*val privLevel_to_bits : Privilege -> mword ty2*)

val _ = Define `
 ((privLevel_to_bits:Privilege ->(2)words$word) p=
    ((case p of
     User => (0b00w :  2 words$word)
   | Supervisor => (0b01w :  2 words$word)
   | Machine => (0b11w :  2 words$word)
   )))`;


(*val privLevel_of_bits : mword ty2 -> M Privilege*)

val _ = Define `
 ((privLevel_of_bits:(2)words$word ->(regstate)sail2_state_monad$sequential_state ->(((Privilege),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) p=
    (let b__0 = p in
   if (((b__0 = (0b00w :  2 words$word)))) then sail2_state_monad$returnS User
   else if (((b__0 = (0b01w :  2 words$word)))) then sail2_state_monad$returnS Supervisor
   else if (((b__0 = (0b11w :  2 words$word)))) then sail2_state_monad$returnS Machine
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at model/riscv_types.sail 78:2 - 82:3") (sail2_state_monad$exitS () )))`;


(*val privLevel_to_str : Privilege -> string*)

val _ = Define `
 ((privLevel_to_str:Privilege -> string) p=  ((case p of   User => "U" | Supervisor => "S" | Machine => "M" )))`;


(*val accessType_to_str : AccessType unit -> string*)

(*val csr_name : mword ty12 -> string*)

(*val exceptionType_to_str : ExceptionType -> string*)

(*val print_insn : ast -> M string*)

(*val ptw_error_to_str : PTW_Error -> string*)

(*val reg_name_abi : mword ty5 -> M string*)

(*val Retired_of_num : integer -> Retired*)

val _ = Define `
 ((Retired_of_num:int -> Retired) arg_=
    (let l__266 = arg_ in
   if (((l__266 = (( 0 : int):ii)))) then RETIRE_SUCCESS
   else RETIRE_FAIL))`;


(*val num_of_Retired : Retired -> integer*)

val _ = Define `
 ((num_of_Retired:Retired -> int) arg_=  ((case arg_ of   RETIRE_SUCCESS => (( 0 : int):ii) | RETIRE_FAIL => (( 1 : int):ii) )))`;


(*val word_width_of_num : integer -> word_width*)

val _ = Define `
 ((word_width_of_num:int -> word_width) arg_=
    (let l__263 = arg_ in
   if (((l__263 = (( 0 : int):ii)))) then BYTE
   else if (((l__263 = (( 1 : int):ii)))) then HALF
   else if (((l__263 = (( 2 : int):ii)))) then WORD
   else DOUBLE))`;


(*val num_of_word_width : word_width -> integer*)

val _ = Define `
 ((num_of_word_width:word_width -> int) arg_=
    ((case arg_ of   BYTE => (( 0 : int):ii) | HALF => (( 1 : int):ii) | WORD => (( 2 : int):ii) | DOUBLE => (( 3 : int):ii) )))`;


(*val InterruptType_of_num : integer -> InterruptType*)

val _ = Define `
 ((InterruptType_of_num:int -> InterruptType) arg_=
    (let l__255 = arg_ in
   if (((l__255 = (( 0 : int):ii)))) then I_U_Software
   else if (((l__255 = (( 1 : int):ii)))) then I_S_Software
   else if (((l__255 = (( 2 : int):ii)))) then I_M_Software
   else if (((l__255 = (( 3 : int):ii)))) then I_U_Timer
   else if (((l__255 = (( 4 : int):ii)))) then I_S_Timer
   else if (((l__255 = (( 5 : int):ii)))) then I_M_Timer
   else if (((l__255 = (( 6 : int):ii)))) then I_U_External
   else if (((l__255 = (( 7 : int):ii)))) then I_S_External
   else I_M_External))`;


(*val num_of_InterruptType : InterruptType -> integer*)

val _ = Define `
 ((num_of_InterruptType:InterruptType -> int) arg_=
    ((case arg_ of
     I_U_Software => (( 0 : int):ii)
   | I_S_Software => (( 1 : int):ii)
   | I_M_Software => (( 2 : int):ii)
   | I_U_Timer => (( 3 : int):ii)
   | I_S_Timer => (( 4 : int):ii)
   | I_M_Timer => (( 5 : int):ii)
   | I_U_External => (( 6 : int):ii)
   | I_S_External => (( 7 : int):ii)
   | I_M_External => (( 8 : int):ii)
   )))`;


(*val interruptType_to_bits : InterruptType -> mword ty8*)

val _ = Define `
 ((interruptType_to_bits:InterruptType ->(8)words$word) i=
    ((case i of
     I_U_Software => (0x00w :  8 words$word)
   | I_S_Software => (0x01w :  8 words$word)
   | I_M_Software => (0x03w :  8 words$word)
   | I_U_Timer => (0x04w :  8 words$word)
   | I_S_Timer => (0x05w :  8 words$word)
   | I_M_Timer => (0x07w :  8 words$word)
   | I_U_External => (0x08w :  8 words$word)
   | I_S_External => (0x09w :  8 words$word)
   | I_M_External => (0x0Bw :  8 words$word)
   )))`;


(*val exceptionType_to_bits : ExceptionType -> mword ty8*)

val _ = Define `
 ((exceptionType_to_bits:ExceptionType ->(8)words$word) e=
    ((case e of
     E_Fetch_Addr_Align (() ) => (0x00w :  8 words$word)
   | E_Fetch_Access_Fault (() ) => (0x01w :  8 words$word)
   | E_Illegal_Instr (() ) => (0x02w :  8 words$word)
   | E_Breakpoint (() ) => (0x03w :  8 words$word)
   | E_Load_Addr_Align (() ) => (0x04w :  8 words$word)
   | E_Load_Access_Fault (() ) => (0x05w :  8 words$word)
   | E_SAMO_Addr_Align (() ) => (0x06w :  8 words$word)
   | E_SAMO_Access_Fault (() ) => (0x07w :  8 words$word)
   | E_U_EnvCall (() ) => (0x08w :  8 words$word)
   | E_S_EnvCall (() ) => (0x09w :  8 words$word)
   | E_Reserved_10 (() ) => (0x0Aw :  8 words$word)
   | E_M_EnvCall (() ) => (0x0Bw :  8 words$word)
   | E_Fetch_Page_Fault (() ) => (0x0Cw :  8 words$word)
   | E_Load_Page_Fault (() ) => (0x0Dw :  8 words$word)
   | E_Reserved_14 (() ) => (0x0Ew :  8 words$word)
   | E_SAMO_Page_Fault (() ) => (0x0Fw :  8 words$word)
   | E_Extension (e) => (ext_exc_type_to_bits e  :  8 words$word)
   )))`;


(*val num_of_ExceptionType : ExceptionType -> integer*)

val _ = Define `
 ((num_of_ExceptionType:ExceptionType -> int) e=
    ((case e of
     E_Fetch_Addr_Align (() ) => (( 0 : int):ii)
   | E_Fetch_Access_Fault (() ) => (( 1 : int):ii)
   | E_Illegal_Instr (() ) => (( 2 : int):ii)
   | E_Breakpoint (() ) => (( 3 : int):ii)
   | E_Load_Addr_Align (() ) => (( 4 : int):ii)
   | E_Load_Access_Fault (() ) => (( 5 : int):ii)
   | E_SAMO_Addr_Align (() ) => (( 6 : int):ii)
   | E_SAMO_Access_Fault (() ) => (( 7 : int):ii)
   | E_U_EnvCall (() ) => (( 8 : int):ii)
   | E_S_EnvCall (() ) => (( 9 : int):ii)
   | E_Reserved_10 (() ) => (( 10 : int):ii)
   | E_M_EnvCall (() ) => (( 11 : int):ii)
   | E_Fetch_Page_Fault (() ) => (( 12 : int):ii)
   | E_Load_Page_Fault (() ) => (( 13 : int):ii)
   | E_Reserved_14 (() ) => (( 14 : int):ii)
   | E_SAMO_Page_Fault (() ) => (( 15 : int):ii)
   | E_Extension (e) => num_of_ext_exc_type e
   )))`;


val _ = Define `
 ((exceptionType_to_str:ExceptionType -> string) e=
    ((case e of
     E_Fetch_Addr_Align (() ) => "misaligned-fetch"
   | E_Fetch_Access_Fault (() ) => "fetch-access-fault"
   | E_Illegal_Instr (() ) => "illegal-instruction"
   | E_Breakpoint (() ) => "breakpoint"
   | E_Load_Addr_Align (() ) => "misaligned-load"
   | E_Load_Access_Fault (() ) => "load-access-fault"
   | E_SAMO_Addr_Align (() ) => "misaliged-store/amo"
   | E_SAMO_Access_Fault (() ) => "store/amo-access-fault"
   | E_U_EnvCall (() ) => "u-call"
   | E_S_EnvCall (() ) => "s-call"
   | E_Reserved_10 (() ) => "reserved-0"
   | E_M_EnvCall (() ) => "m-call"
   | E_Fetch_Page_Fault (() ) => "fetch-page-fault"
   | E_Load_Page_Fault (() ) => "load-page-fault"
   | E_Reserved_14 (() ) => "reserved-1"
   | E_SAMO_Page_Fault (() ) => "store/amo-page-fault"
   | E_Extension (e) => ext_exc_type_to_str e
   )))`;


(*val not_implemented : forall 'a. string -> M 'a*)

val _ = Define `
 ((not_implemented:string ->(regstate)sail2_state_monad$sequential_state ->(('a,(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) message=  (sail2_state_monad$throwS (Error_not_implemented message)))`;


(*val internal_error : forall 'a. string -> M 'a*)

val _ = Define `
 ((internal_error:string ->(regstate)sail2_state_monad$sequential_state ->(('a,(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=  (sail2_state_monad$seqS (sail2_state_monad$assert_expS F s) (sail2_state_monad$exitS () )))`;


(*val TrapVectorMode_of_num : integer -> TrapVectorMode*)

val _ = Define `
 ((TrapVectorMode_of_num:int -> TrapVectorMode) arg_=
    (let l__253 = arg_ in
   if (((l__253 = (( 0 : int):ii)))) then TV_Direct
   else if (((l__253 = (( 1 : int):ii)))) then TV_Vector
   else TV_Reserved))`;


(*val num_of_TrapVectorMode : TrapVectorMode -> integer*)

val _ = Define `
 ((num_of_TrapVectorMode:TrapVectorMode -> int) arg_=
    ((case arg_ of   TV_Direct => (( 0 : int):ii) | TV_Vector => (( 1 : int):ii) | TV_Reserved => (( 2 : int):ii) )))`;


(*val trapVectorMode_of_bits : mword ty2 -> TrapVectorMode*)

val _ = Define `
 ((trapVectorMode_of_bits:(2)words$word -> TrapVectorMode) m=
    (let b__0 = m in
   if (((b__0 = (0b00w :  2 words$word)))) then TV_Direct
   else if (((b__0 = (0b01w :  2 words$word)))) then TV_Vector
   else TV_Reserved))`;


(*val ExtStatus_of_num : integer -> ExtStatus*)

val _ = Define `
 ((ExtStatus_of_num:int -> ExtStatus) arg_=
    (let l__250 = arg_ in
   if (((l__250 = (( 0 : int):ii)))) then Off
   else if (((l__250 = (( 1 : int):ii)))) then Initial
   else if (((l__250 = (( 2 : int):ii)))) then Clean
   else Dirty))`;


(*val num_of_ExtStatus : ExtStatus -> integer*)

val _ = Define `
 ((num_of_ExtStatus:ExtStatus -> int) arg_=
    ((case arg_ of   Off => (( 0 : int):ii) | Initial => (( 1 : int):ii) | Clean => (( 2 : int):ii) | Dirty => (( 3 : int):ii) )))`;


(*val extStatus_to_bits : ExtStatus -> mword ty2*)

val _ = Define `
 ((extStatus_to_bits:ExtStatus ->(2)words$word) e=
    ((case e of
     Off => (0b00w :  2 words$word)
   | Initial => (0b01w :  2 words$word)
   | Clean => (0b10w :  2 words$word)
   | Dirty => (0b11w :  2 words$word)
   )))`;


(*val extStatus_of_bits : mword ty2 -> M ExtStatus*)

val _ = Define `
 ((extStatus_of_bits:(2)words$word ->(regstate)sail2_state_monad$sequential_state ->(((ExtStatus),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) e=
    (let b__0 = e in
   if (((b__0 = (0b00w :  2 words$word)))) then sail2_state_monad$returnS Off
   else if (((b__0 = (0b01w :  2 words$word)))) then sail2_state_monad$returnS Initial
   else if (((b__0 = (0b10w :  2 words$word)))) then sail2_state_monad$returnS Clean
   else if (((b__0 = (0b11w :  2 words$word)))) then sail2_state_monad$returnS Dirty
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at model/riscv_types.sail 281:2 - 286:3") (sail2_state_monad$exitS () )))`;


(*val SATPMode_of_num : integer -> SATPMode*)

val _ = Define `
 ((SATPMode_of_num:int -> SATPMode) arg_=
    (let l__247 = arg_ in
   if (((l__247 = (( 0 : int):ii)))) then Sbare
   else if (((l__247 = (( 1 : int):ii)))) then Sv32
   else if (((l__247 = (( 2 : int):ii)))) then Sv39
   else Sv48))`;


(*val num_of_SATPMode : SATPMode -> integer*)

val _ = Define `
 ((num_of_SATPMode:SATPMode -> int) arg_=
    ((case arg_ of   Sbare => (( 0 : int):ii) | Sv32 => (( 1 : int):ii) | Sv39 => (( 2 : int):ii) | Sv48 => (( 3 : int):ii) )))`;


(*val satp64Mode_of_bits : Architecture -> mword ty4 -> maybe SATPMode*)

val _ = Define `
 ((satp64Mode_of_bits:Architecture ->(4)words$word ->(SATPMode)option) (a : Architecture) (m : satp_mode)=
    ((case (a, m) of
     (g__327, b__0) =>
      if (((b__0 = (0x0w :  4 words$word)))) then SOME Sbare
      else
        (case (g__327, b__0) of
          (RV32, b__0) =>
           if (((b__0 = (0x1w :  4 words$word)))) then SOME Sv32
           else (case (RV32, b__0) of   (_, _) => NONE )
        | (RV64, b__0) =>
           if (((b__0 = (0x8w :  4 words$word)))) then SOME Sv39
           else if (((b__0 = (0x9w :  4 words$word)))) then SOME Sv48
           else (case (RV64, b__0) of   (_, _) => NONE )
        | (_, _) => NONE
        )
   )))`;


(*val uop_of_num : integer -> uop*)

val _ = Define `
 ((uop_of_num:int -> uop) arg_=
    (let l__246 = arg_ in
   if (((l__246 = (( 0 : int):ii)))) then RISCV_LUI
   else RISCV_AUIPC))`;


(*val num_of_uop : uop -> integer*)

val _ = Define `
 ((num_of_uop:uop -> int) arg_=  ((case arg_ of   RISCV_LUI => (( 0 : int):ii) | RISCV_AUIPC => (( 1 : int):ii) )))`;


(*val bop_of_num : integer -> bop*)

val _ = Define `
 ((bop_of_num:int -> bop) arg_=
    (let l__241 = arg_ in
   if (((l__241 = (( 0 : int):ii)))) then RISCV_BEQ
   else if (((l__241 = (( 1 : int):ii)))) then RISCV_BNE
   else if (((l__241 = (( 2 : int):ii)))) then RISCV_BLT
   else if (((l__241 = (( 3 : int):ii)))) then RISCV_BGE
   else if (((l__241 = (( 4 : int):ii)))) then RISCV_BLTU
   else RISCV_BGEU))`;


(*val num_of_bop : bop -> integer*)

val _ = Define `
 ((num_of_bop:bop -> int) arg_=
    ((case arg_ of
     RISCV_BEQ => (( 0 : int):ii)
   | RISCV_BNE => (( 1 : int):ii)
   | RISCV_BLT => (( 2 : int):ii)
   | RISCV_BGE => (( 3 : int):ii)
   | RISCV_BLTU => (( 4 : int):ii)
   | RISCV_BGEU => (( 5 : int):ii)
   )))`;


(*val iop_of_num : integer -> iop*)

val _ = Define `
 ((iop_of_num:int -> iop) arg_=
    (let l__236 = arg_ in
   if (((l__236 = (( 0 : int):ii)))) then RISCV_ADDI
   else if (((l__236 = (( 1 : int):ii)))) then RISCV_SLTI
   else if (((l__236 = (( 2 : int):ii)))) then RISCV_SLTIU
   else if (((l__236 = (( 3 : int):ii)))) then RISCV_XORI
   else if (((l__236 = (( 4 : int):ii)))) then RISCV_ORI
   else RISCV_ANDI))`;


(*val num_of_iop : iop -> integer*)

val _ = Define `
 ((num_of_iop:iop -> int) arg_=
    ((case arg_ of
     RISCV_ADDI => (( 0 : int):ii)
   | RISCV_SLTI => (( 1 : int):ii)
   | RISCV_SLTIU => (( 2 : int):ii)
   | RISCV_XORI => (( 3 : int):ii)
   | RISCV_ORI => (( 4 : int):ii)
   | RISCV_ANDI => (( 5 : int):ii)
   )))`;


(*val sop_of_num : integer -> sop*)

val _ = Define `
 ((sop_of_num:int -> sop) arg_=
    (let l__234 = arg_ in
   if (((l__234 = (( 0 : int):ii)))) then RISCV_SLLI
   else if (((l__234 = (( 1 : int):ii)))) then RISCV_SRLI
   else RISCV_SRAI))`;


(*val num_of_sop : sop -> integer*)

val _ = Define `
 ((num_of_sop:sop -> int) arg_=
    ((case arg_ of   RISCV_SLLI => (( 0 : int):ii) | RISCV_SRLI => (( 1 : int):ii) | RISCV_SRAI => (( 2 : int):ii) )))`;


(*val rop_of_num : integer -> rop*)

val _ = Define `
 ((rop_of_num:int -> rop) arg_=
    (let l__225 = arg_ in
   if (((l__225 = (( 0 : int):ii)))) then RISCV_ADD
   else if (((l__225 = (( 1 : int):ii)))) then RISCV_SUB
   else if (((l__225 = (( 2 : int):ii)))) then RISCV_SLL
   else if (((l__225 = (( 3 : int):ii)))) then RISCV_SLT
   else if (((l__225 = (( 4 : int):ii)))) then RISCV_SLTU
   else if (((l__225 = (( 5 : int):ii)))) then RISCV_XOR
   else if (((l__225 = (( 6 : int):ii)))) then RISCV_SRL
   else if (((l__225 = (( 7 : int):ii)))) then RISCV_SRA
   else if (((l__225 = (( 8 : int):ii)))) then RISCV_OR
   else RISCV_AND))`;


(*val num_of_rop : rop -> integer*)

val _ = Define `
 ((num_of_rop:rop -> int) arg_=
    ((case arg_ of
     RISCV_ADD => (( 0 : int):ii)
   | RISCV_SUB => (( 1 : int):ii)
   | RISCV_SLL => (( 2 : int):ii)
   | RISCV_SLT => (( 3 : int):ii)
   | RISCV_SLTU => (( 4 : int):ii)
   | RISCV_XOR => (( 5 : int):ii)
   | RISCV_SRL => (( 6 : int):ii)
   | RISCV_SRA => (( 7 : int):ii)
   | RISCV_OR => (( 8 : int):ii)
   | RISCV_AND => (( 9 : int):ii)
   )))`;


(*val ropw_of_num : integer -> ropw*)

val _ = Define `
 ((ropw_of_num:int -> ropw) arg_=
    (let l__221 = arg_ in
   if (((l__221 = (( 0 : int):ii)))) then RISCV_ADDW
   else if (((l__221 = (( 1 : int):ii)))) then RISCV_SUBW
   else if (((l__221 = (( 2 : int):ii)))) then RISCV_SLLW
   else if (((l__221 = (( 3 : int):ii)))) then RISCV_SRLW
   else RISCV_SRAW))`;


(*val num_of_ropw : ropw -> integer*)

val _ = Define `
 ((num_of_ropw:ropw -> int) arg_=
    ((case arg_ of
     RISCV_ADDW => (( 0 : int):ii)
   | RISCV_SUBW => (( 1 : int):ii)
   | RISCV_SLLW => (( 2 : int):ii)
   | RISCV_SRLW => (( 3 : int):ii)
   | RISCV_SRAW => (( 4 : int):ii)
   )))`;


(*val sopw_of_num : integer -> sopw*)

val _ = Define `
 ((sopw_of_num:int -> sopw) arg_=
    (let l__219 = arg_ in
   if (((l__219 = (( 0 : int):ii)))) then RISCV_SLLIW
   else if (((l__219 = (( 1 : int):ii)))) then RISCV_SRLIW
   else RISCV_SRAIW))`;


(*val num_of_sopw : sopw -> integer*)

val _ = Define `
 ((num_of_sopw:sopw -> int) arg_=
    ((case arg_ of   RISCV_SLLIW => (( 0 : int):ii) | RISCV_SRLIW => (( 1 : int):ii) | RISCV_SRAIW => (( 2 : int):ii) )))`;


(*val amoop_of_num : integer -> amoop*)

val _ = Define `
 ((amoop_of_num:int -> amoop) arg_=
    (let l__211 = arg_ in
   if (((l__211 = (( 0 : int):ii)))) then AMOSWAP
   else if (((l__211 = (( 1 : int):ii)))) then AMOADD
   else if (((l__211 = (( 2 : int):ii)))) then AMOXOR
   else if (((l__211 = (( 3 : int):ii)))) then AMOAND
   else if (((l__211 = (( 4 : int):ii)))) then AMOOR
   else if (((l__211 = (( 5 : int):ii)))) then AMOMIN
   else if (((l__211 = (( 6 : int):ii)))) then AMOMAX
   else if (((l__211 = (( 7 : int):ii)))) then AMOMINU
   else AMOMAXU))`;


(*val num_of_amoop : amoop -> integer*)

val _ = Define `
 ((num_of_amoop:amoop -> int) arg_=
    ((case arg_ of
     AMOSWAP => (( 0 : int):ii)
   | AMOADD => (( 1 : int):ii)
   | AMOXOR => (( 2 : int):ii)
   | AMOAND => (( 3 : int):ii)
   | AMOOR => (( 4 : int):ii)
   | AMOMIN => (( 5 : int):ii)
   | AMOMAX => (( 6 : int):ii)
   | AMOMINU => (( 7 : int):ii)
   | AMOMAXU => (( 8 : int):ii)
   )))`;


(*val csrop_of_num : integer -> csrop*)

val _ = Define `
 ((csrop_of_num:int -> csrop) arg_=
    (let l__209 = arg_ in
   if (((l__209 = (( 0 : int):ii)))) then CSRRW
   else if (((l__209 = (( 1 : int):ii)))) then CSRRS
   else CSRRC))`;


(*val num_of_csrop : csrop -> integer*)

val _ = Define `
 ((num_of_csrop:csrop -> int) arg_=  ((case arg_ of   CSRRW => (( 0 : int):ii) | CSRRS => (( 1 : int):ii) | CSRRC => (( 2 : int):ii) )))`;


(*val sep_forwards : unit -> string*)

(*val sep_backwards : string -> M unit*)

(*val sep_forwards_matches : unit -> bool*)

(*val sep_backwards_matches : string -> bool*)

(*val sep_matches_prefix : string -> maybe ((unit * ii))*)

val _ = Define `
 ((sep_forwards:unit -> string) arg_=
    ((case arg_ of
     ()  =>
      string_append ((opt_spc_forwards () ))
        ((string_append "," ((string_append ((def_spc_forwards () )) ""))))
   )))`;


(*val _s0_ : string -> maybe unit*)

val _ = Define `
 ((s0_:string ->(unit)option) s1_0= 
  ((case s1_0 of
         s2_0 =>
   (case ((opt_spc_matches_prefix0 s2_0)) of
         SOME ((() , s3_0)) =>
   let s4_0 = (string_drop s2_0 s3_0) in
   if ((string_startswith s4_0 ",")) then
     (case ((string_drop s4_0 ((string_length ",")))) of
           s5_0 =>
     (case ((def_spc_matches_prefix s5_0)) of
           SOME ((() , s6_0)) =>
     let p0_ = (string_drop s5_0 s6_0) in
     if (((p0_ = ""))) then SOME ()  else NONE
       | _ => NONE
     )
     ) else NONE
     | _ => NONE
   )
   )))`;


val _ = Define `
 ((sep_backwards:string ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let s7_0 = arg_ in
   if ((case ((s0_ s7_0)) of   SOME (() ) => T | _ => F )) then  
  (case s0_ s7_0 of (SOME (() )) => sail2_state_monad$returnS ()  )
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((sep_forwards_matches:unit -> bool) arg_= 
  ((case arg_ of   ()  => T )))`;


(*val _s8_ : string -> maybe unit*)

val _ = Define `
 ((s8_:string ->(unit)option) s9_0= 
  ((case s9_0 of
         s10_0 =>
   (case ((opt_spc_matches_prefix0 s10_0)) of
         SOME ((() , s11_0)) =>
   let s12_0 = (string_drop s10_0 s11_0) in
   if ((string_startswith s12_0 ",")) then
     (case ((string_drop s12_0 ((string_length ",")))) of
           s13_0 =>
     (case ((def_spc_matches_prefix s13_0)) of
           SOME ((() , s14_0)) =>
     let p0_ = (string_drop s13_0 s14_0) in
     if (((p0_ = ""))) then SOME ()  else NONE
       | _ => NONE
     )
     ) else NONE
     | _ => NONE
   )
   )))`;


val _ = Define `
 ((sep_backwards_matches:string -> bool) arg_=
    (let s15_0 = arg_ in
   if ((case ((s8_ s15_0)) of   SOME (() ) => T | _ => F )) then  
  (case s8_ s15_0 of (SOME (() )) => T )
   else F))`;


(*val _s16_ : string -> maybe string*)

val _ = Define `
 ((s16_:string ->(string)option) s17_0= 
  ((case s17_0 of
         s18_0 =>
   (case ((opt_spc_matches_prefix0 s18_0)) of
         SOME ((() , s19_0)) =>
   let s20_0 = (string_drop s18_0 s19_0) in
   if ((string_startswith s20_0 ",")) then
     (case ((string_drop s20_0 ((string_length ",")))) of
           s21_0 =>
     (case ((def_spc_matches_prefix s21_0)) of
           SOME ((() , s22_0)) =>
     (case ((string_drop s21_0 s22_0)) of   s_ => SOME s_ )
       | _ => NONE
     )
     ) else NONE
     | _ => NONE
   )
   )))`;


val _ = Define `
 ((sep_matches_prefix:string ->(unit#int)option) arg_=
    (let s23_0 = arg_ in
   if ((case ((s16_ s23_0)) of   SOME (s_) => T | _ => F )) then  
  (case s16_ s23_0 of
      (SOME (s_)) =>
  SOME (() , ((string_length arg_)) - ((string_length s_)))
  )
   else NONE))`;


(*val bool_bits_forwards : bool -> mword ty1*)

(*val bool_bits_backwards : mword ty1 -> M bool*)

(*val bool_bits_forwards_matches : bool -> bool*)

(*val bool_bits_backwards_matches : mword ty1 -> bool*)

val _ = Define `
 ((bool_bits_forwards:bool ->(1)words$word) arg_=
    ((case arg_ of   T => (0b1w :  1 words$word) | F => (0b0w :  1 words$word) )))`;


val _ = Define `
 ((bool_bits_backwards:(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b1w :  1 words$word)))) then sail2_state_monad$returnS T
   else if (((b__0 = (0b0w :  1 words$word)))) then sail2_state_monad$returnS F
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((bool_bits_forwards_matches:bool -> bool) arg_= 
  ((case arg_ of   T => T | F => T )))`;


val _ = Define `
 ((bool_bits_backwards_matches:(1)words$word -> bool) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b1w :  1 words$word)))) then T
   else if (((b__0 = (0b0w :  1 words$word)))) then T
   else F))`;


(*val bool_not_bits_forwards : bool -> mword ty1*)

(*val bool_not_bits_backwards : mword ty1 -> M bool*)

(*val bool_not_bits_forwards_matches : bool -> bool*)

(*val bool_not_bits_backwards_matches : mword ty1 -> bool*)

val _ = Define `
 ((bool_not_bits_forwards:bool ->(1)words$word) arg_=
    ((case arg_ of   T => (0b0w :  1 words$word) | F => (0b1w :  1 words$word) )))`;


val _ = Define `
 ((bool_not_bits_backwards:(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b0w :  1 words$word)))) then sail2_state_monad$returnS T
   else if (((b__0 = (0b1w :  1 words$word)))) then sail2_state_monad$returnS F
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((bool_not_bits_forwards_matches:bool -> bool) arg_= 
  ((case arg_ of   T => T | F => T )))`;


val _ = Define `
 ((bool_not_bits_backwards_matches:(1)words$word -> bool) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b0w :  1 words$word)))) then T
   else if (((b__0 = (0b1w :  1 words$word)))) then T
   else F))`;


(*val size_bits_forwards : word_width -> mword ty2*)

(*val size_bits_backwards : mword ty2 -> M word_width*)

(*val size_bits_forwards_matches : word_width -> bool*)

(*val size_bits_backwards_matches : mword ty2 -> bool*)

val _ = Define `
 ((size_bits_forwards:word_width ->(2)words$word) arg_=
    ((case arg_ of
     BYTE => (0b00w :  2 words$word)
   | HALF => (0b01w :  2 words$word)
   | WORD => (0b10w :  2 words$word)
   | DOUBLE => (0b11w :  2 words$word)
   )))`;


val _ = Define `
 ((size_bits_backwards:(2)words$word ->(regstate)sail2_state_monad$sequential_state ->(((word_width),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b00w :  2 words$word)))) then sail2_state_monad$returnS BYTE
   else if (((b__0 = (0b01w :  2 words$word)))) then sail2_state_monad$returnS HALF
   else if (((b__0 = (0b10w :  2 words$word)))) then sail2_state_monad$returnS WORD
   else if (((b__0 = (0b11w :  2 words$word)))) then sail2_state_monad$returnS DOUBLE
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((size_bits_forwards_matches:word_width -> bool) arg_= 
  ((case arg_ of   BYTE => T | HALF => T | WORD => T | DOUBLE => T )))`;


val _ = Define `
 ((size_bits_backwards_matches:(2)words$word -> bool) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b00w :  2 words$word)))) then T
   else if (((b__0 = (0b01w :  2 words$word)))) then T
   else if (((b__0 = (0b10w :  2 words$word)))) then T
   else if (((b__0 = (0b11w :  2 words$word)))) then T
   else F))`;


(*val size_mnemonic_forwards : word_width -> string*)

(*val size_mnemonic_backwards : string -> M word_width*)

(*val size_mnemonic_forwards_matches : word_width -> bool*)

(*val size_mnemonic_backwards_matches : string -> bool*)

(*val size_mnemonic_matches_prefix : string -> maybe ((word_width * ii))*)

val _ = Define `
 ((size_mnemonic_forwards:word_width -> string) arg_=
    ((case arg_ of   BYTE => "b" | HALF => "h" | WORD => "w" | DOUBLE => "d" )))`;


val _ = Define `
 ((size_mnemonic_backwards:string ->(regstate)sail2_state_monad$sequential_state ->(((word_width),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "b"))) then sail2_state_monad$returnS BYTE
   else if (((p0_ = "h"))) then sail2_state_monad$returnS HALF
   else if (((p0_ = "w"))) then sail2_state_monad$returnS WORD
   else if (((p0_ = "d"))) then sail2_state_monad$returnS DOUBLE
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((size_mnemonic_forwards_matches:word_width -> bool) arg_= 
  ((case arg_ of   BYTE => T | HALF => T | WORD => T | DOUBLE => T )))`;


val _ = Define `
 ((size_mnemonic_backwards_matches:string -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "b"))) then T
   else if (((p0_ = "h"))) then T
   else if (((p0_ = "w"))) then T
   else if (((p0_ = "d"))) then T
   else F))`;


(*val _s36_ : string -> maybe string*)

val _ = Define `
 ((s36_:string ->(string)option) s37_0=
    (let s38_0 = s37_0 in
   if ((string_startswith s38_0 "d")) then  
  (case ((string_drop s38_0 ((string_length "d")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s32_ : string -> maybe string*)

val _ = Define `
 ((s32_:string ->(string)option) s33_0=
    (let s34_0 = s33_0 in
   if ((string_startswith s34_0 "w")) then  
  (case ((string_drop s34_0 ((string_length "w")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s28_ : string -> maybe string*)

val _ = Define `
 ((s28_:string ->(string)option) s29_0=
    (let s30_0 = s29_0 in
   if ((string_startswith s30_0 "h")) then  
  (case ((string_drop s30_0 ((string_length "h")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s24_ : string -> maybe string*)

val _ = Define `
 ((s24_:string ->(string)option) s25_0=
    (let s26_0 = s25_0 in
   if ((string_startswith s26_0 "b")) then  
  (case ((string_drop s26_0 ((string_length "b")))) of   s_ => SOME s_ )
   else NONE))`;


val _ = Define `
 ((size_mnemonic_matches_prefix:string ->(word_width#int)option) arg_=
    (let s27_0 = arg_ in
   if ((case ((s24_ s27_0)) of   SOME (s_) => T | _ => F )) then  
  (case s24_ s27_0 of
      (SOME (s_)) =>
  SOME (BYTE, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s28_ s27_0)) of   SOME (s_) => T | _ => F )) then  
  (case s28_ s27_0 of
      (SOME (s_)) =>
  SOME (HALF, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s32_ s27_0)) of   SOME (s_) => T | _ => F )) then  
  (case s32_ s27_0 of
      (SOME (s_)) =>
  SOME (WORD, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s36_ s27_0)) of   SOME (s_) => T | _ => F )) then  
  (case s36_ s27_0 of
      (SOME (s_)) =>
  SOME (DOUBLE, ((string_length arg_)) - ((string_length s_)))
  )
   else NONE))`;


(*val word_width_bytes : word_width -> integer*)

val _ = Define `
 ((word_width_bytes:word_width -> int) width=
    ((case width of   BYTE => (( 1 : int):ii) | HALF => (( 2 : int):ii) | WORD => (( 4 : int):ii) | DOUBLE => (( 8 : int):ii) )))`;


val _ = Define `
((Data:unit)=  () )`;


val _ = Define `
((default_write_acc:unit)=  () )`;


val _ = Define `
 ((accessType_to_str:(unit)AccessType -> string) a=
    ((case a of
     Read (_) => "R"
   | Write (_) => "W"
   | ReadWrite ((_, _)) => "RW"
   | Execute (() ) => "X"
   )))`;


val _ = Define `
((zero_reg:(32)words$word)=  ((0x00000000w :  32 words$word)))`;


(*val RegStr : mword ty32 -> string*)

val _ = Define `
 ((RegStr:(32)words$word -> string) r=  (string_of_bits r))`;


(*val regval_from_reg : mword ty32 -> mword ty32*)

val _ = Define `
 ((regval_from_reg:(32)words$word ->(32)words$word) r=  r)`;


(*val regval_into_reg : mword ty32 -> mword ty32*)

val _ = Define `
 ((regval_into_reg:(32)words$word ->(32)words$word) v=  v)`;


val _ = Define `
((zero_freg:(32)words$word)=  ((0x00000000w :  32 words$word)))`;


(*val FRegStr : mword ty32 -> string*)

val _ = Define `
 ((FRegStr:(32)words$word -> string) r=  (string_of_bits r))`;


(*val fregval_from_freg : mword ty32 -> mword ty32*)

val _ = Define `
 ((fregval_from_freg:(32)words$word ->(32)words$word) r=  r)`;


(*val fregval_into_freg : mword ty32 -> mword ty32*)

val _ = Define `
 ((fregval_into_freg:(32)words$word ->(32)words$word) v=  v)`;


(*val rounding_mode_of_num : integer -> rounding_mode*)

val _ = Define `
 ((rounding_mode_of_num:int -> rounding_mode) arg_=
    (let l__204 = arg_ in
   if (((l__204 = (( 0 : int):ii)))) then RM_RNE
   else if (((l__204 = (( 1 : int):ii)))) then RM_RTZ
   else if (((l__204 = (( 2 : int):ii)))) then RM_RDN
   else if (((l__204 = (( 3 : int):ii)))) then RM_RUP
   else if (((l__204 = (( 4 : int):ii)))) then RM_RMM
   else RM_DYN))`;


(*val num_of_rounding_mode : rounding_mode -> integer*)

val _ = Define `
 ((num_of_rounding_mode:rounding_mode -> int) arg_=
    ((case arg_ of
     RM_RNE => (( 0 : int):ii)
   | RM_RTZ => (( 1 : int):ii)
   | RM_RDN => (( 2 : int):ii)
   | RM_RUP => (( 3 : int):ii)
   | RM_RMM => (( 4 : int):ii)
   | RM_DYN => (( 5 : int):ii)
   )))`;


(*val f_madd_op_S_of_num : integer -> f_madd_op_S*)

val _ = Define `
 ((f_madd_op_S_of_num:int -> f_madd_op_S) arg_=
    (let l__201 = arg_ in
   if (((l__201 = (( 0 : int):ii)))) then FMADD_S
   else if (((l__201 = (( 1 : int):ii)))) then FMSUB_S
   else if (((l__201 = (( 2 : int):ii)))) then FNMSUB_S
   else FNMADD_S))`;


(*val num_of_f_madd_op_S : f_madd_op_S -> integer*)

val _ = Define `
 ((num_of_f_madd_op_S:f_madd_op_S -> int) arg_=
    ((case arg_ of
     FMADD_S => (( 0 : int):ii)
   | FMSUB_S => (( 1 : int):ii)
   | FNMSUB_S => (( 2 : int):ii)
   | FNMADD_S => (( 3 : int):ii)
   )))`;


(*val f_bin_rm_op_S_of_num : integer -> f_bin_rm_op_S*)

val _ = Define `
 ((f_bin_rm_op_S_of_num:int -> f_bin_rm_op_S) arg_=
    (let l__198 = arg_ in
   if (((l__198 = (( 0 : int):ii)))) then FADD_S
   else if (((l__198 = (( 1 : int):ii)))) then FSUB_S
   else if (((l__198 = (( 2 : int):ii)))) then FMUL_S
   else FDIV_S))`;


(*val num_of_f_bin_rm_op_S : f_bin_rm_op_S -> integer*)

val _ = Define `
 ((num_of_f_bin_rm_op_S:f_bin_rm_op_S -> int) arg_=
    ((case arg_ of   FADD_S => (( 0 : int):ii) | FSUB_S => (( 1 : int):ii) | FMUL_S => (( 2 : int):ii) | FDIV_S => (( 3 : int):ii) )))`;


(*val f_un_rm_op_S_of_num : integer -> f_un_rm_op_S*)

val _ = Define `
 ((f_un_rm_op_S_of_num:int -> f_un_rm_op_S) arg_=
    (let l__190 = arg_ in
   if (((l__190 = (( 0 : int):ii)))) then FSQRT_S
   else if (((l__190 = (( 1 : int):ii)))) then FCVT_W_S
   else if (((l__190 = (( 2 : int):ii)))) then FCVT_WU_S
   else if (((l__190 = (( 3 : int):ii)))) then FCVT_S_W
   else if (((l__190 = (( 4 : int):ii)))) then FCVT_S_WU
   else if (((l__190 = (( 5 : int):ii)))) then FCVT_L_S
   else if (((l__190 = (( 6 : int):ii)))) then FCVT_LU_S
   else if (((l__190 = (( 7 : int):ii)))) then FCVT_S_L
   else FCVT_S_LU))`;


(*val num_of_f_un_rm_op_S : f_un_rm_op_S -> integer*)

val _ = Define `
 ((num_of_f_un_rm_op_S:f_un_rm_op_S -> int) arg_=
    ((case arg_ of
     FSQRT_S => (( 0 : int):ii)
   | FCVT_W_S => (( 1 : int):ii)
   | FCVT_WU_S => (( 2 : int):ii)
   | FCVT_S_W => (( 3 : int):ii)
   | FCVT_S_WU => (( 4 : int):ii)
   | FCVT_L_S => (( 5 : int):ii)
   | FCVT_LU_S => (( 6 : int):ii)
   | FCVT_S_L => (( 7 : int):ii)
   | FCVT_S_LU => (( 8 : int):ii)
   )))`;


(*val f_un_op_S_of_num : integer -> f_un_op_S*)

val _ = Define `
 ((f_un_op_S_of_num:int -> f_un_op_S) arg_=
    (let l__188 = arg_ in
   if (((l__188 = (( 0 : int):ii)))) then FCLASS_S
   else if (((l__188 = (( 1 : int):ii)))) then FMV_X_W
   else FMV_W_X))`;


(*val num_of_f_un_op_S : f_un_op_S -> integer*)

val _ = Define `
 ((num_of_f_un_op_S:f_un_op_S -> int) arg_=
    ((case arg_ of   FCLASS_S => (( 0 : int):ii) | FMV_X_W => (( 1 : int):ii) | FMV_W_X => (( 2 : int):ii) )))`;


(*val f_bin_op_S_of_num : integer -> f_bin_op_S*)

val _ = Define `
 ((f_bin_op_S_of_num:int -> f_bin_op_S) arg_=
    (let l__181 = arg_ in
   if (((l__181 = (( 0 : int):ii)))) then FSGNJ_S
   else if (((l__181 = (( 1 : int):ii)))) then FSGNJN_S
   else if (((l__181 = (( 2 : int):ii)))) then FSGNJX_S
   else if (((l__181 = (( 3 : int):ii)))) then FMIN_S
   else if (((l__181 = (( 4 : int):ii)))) then FMAX_S
   else if (((l__181 = (( 5 : int):ii)))) then FEQ_S
   else if (((l__181 = (( 6 : int):ii)))) then FLT_S
   else FLE_S))`;


(*val num_of_f_bin_op_S : f_bin_op_S -> integer*)

val _ = Define `
 ((num_of_f_bin_op_S:f_bin_op_S -> int) arg_=
    ((case arg_ of
     FSGNJ_S => (( 0 : int):ii)
   | FSGNJN_S => (( 1 : int):ii)
   | FSGNJX_S => (( 2 : int):ii)
   | FMIN_S => (( 3 : int):ii)
   | FMAX_S => (( 4 : int):ii)
   | FEQ_S => (( 5 : int):ii)
   | FLT_S => (( 6 : int):ii)
   | FLE_S => (( 7 : int):ii)
   )))`;


(*val f_madd_op_D_of_num : integer -> f_madd_op_D*)

val _ = Define `
 ((f_madd_op_D_of_num:int -> f_madd_op_D) arg_=
    (let l__178 = arg_ in
   if (((l__178 = (( 0 : int):ii)))) then FMADD_D
   else if (((l__178 = (( 1 : int):ii)))) then FMSUB_D
   else if (((l__178 = (( 2 : int):ii)))) then FNMSUB_D
   else FNMADD_D))`;


(*val num_of_f_madd_op_D : f_madd_op_D -> integer*)

val _ = Define `
 ((num_of_f_madd_op_D:f_madd_op_D -> int) arg_=
    ((case arg_ of
     FMADD_D => (( 0 : int):ii)
   | FMSUB_D => (( 1 : int):ii)
   | FNMSUB_D => (( 2 : int):ii)
   | FNMADD_D => (( 3 : int):ii)
   )))`;


(*val f_bin_rm_op_D_of_num : integer -> f_bin_rm_op_D*)

val _ = Define `
 ((f_bin_rm_op_D_of_num:int -> f_bin_rm_op_D) arg_=
    (let l__175 = arg_ in
   if (((l__175 = (( 0 : int):ii)))) then FADD_D
   else if (((l__175 = (( 1 : int):ii)))) then FSUB_D
   else if (((l__175 = (( 2 : int):ii)))) then FMUL_D
   else FDIV_D))`;


(*val num_of_f_bin_rm_op_D : f_bin_rm_op_D -> integer*)

val _ = Define `
 ((num_of_f_bin_rm_op_D:f_bin_rm_op_D -> int) arg_=
    ((case arg_ of   FADD_D => (( 0 : int):ii) | FSUB_D => (( 1 : int):ii) | FMUL_D => (( 2 : int):ii) | FDIV_D => (( 3 : int):ii) )))`;


(*val f_un_rm_op_D_of_num : integer -> f_un_rm_op_D*)

val _ = Define `
 ((f_un_rm_op_D_of_num:int -> f_un_rm_op_D) arg_=
    (let l__165 = arg_ in
   if (((l__165 = (( 0 : int):ii)))) then FSQRT_D
   else if (((l__165 = (( 1 : int):ii)))) then FCVT_W_D
   else if (((l__165 = (( 2 : int):ii)))) then FCVT_WU_D
   else if (((l__165 = (( 3 : int):ii)))) then FCVT_D_W
   else if (((l__165 = (( 4 : int):ii)))) then FCVT_D_WU
   else if (((l__165 = (( 5 : int):ii)))) then FCVT_S_D
   else if (((l__165 = (( 6 : int):ii)))) then FCVT_D_S
   else if (((l__165 = (( 7 : int):ii)))) then FCVT_L_D
   else if (((l__165 = (( 8 : int):ii)))) then FCVT_LU_D
   else if (((l__165 = (( 9 : int):ii)))) then FCVT_D_L
   else FCVT_D_LU))`;


(*val num_of_f_un_rm_op_D : f_un_rm_op_D -> integer*)

val _ = Define `
 ((num_of_f_un_rm_op_D:f_un_rm_op_D -> int) arg_=
    ((case arg_ of
     FSQRT_D => (( 0 : int):ii)
   | FCVT_W_D => (( 1 : int):ii)
   | FCVT_WU_D => (( 2 : int):ii)
   | FCVT_D_W => (( 3 : int):ii)
   | FCVT_D_WU => (( 4 : int):ii)
   | FCVT_S_D => (( 5 : int):ii)
   | FCVT_D_S => (( 6 : int):ii)
   | FCVT_L_D => (( 7 : int):ii)
   | FCVT_LU_D => (( 8 : int):ii)
   | FCVT_D_L => (( 9 : int):ii)
   | FCVT_D_LU => (( 10 : int):ii)
   )))`;


(*val f_bin_op_D_of_num : integer -> f_bin_op_D*)

val _ = Define `
 ((f_bin_op_D_of_num:int -> f_bin_op_D) arg_=
    (let l__158 = arg_ in
   if (((l__158 = (( 0 : int):ii)))) then FSGNJ_D
   else if (((l__158 = (( 1 : int):ii)))) then FSGNJN_D
   else if (((l__158 = (( 2 : int):ii)))) then FSGNJX_D
   else if (((l__158 = (( 3 : int):ii)))) then FMIN_D
   else if (((l__158 = (( 4 : int):ii)))) then FMAX_D
   else if (((l__158 = (( 5 : int):ii)))) then FEQ_D
   else if (((l__158 = (( 6 : int):ii)))) then FLT_D
   else FLE_D))`;


(*val num_of_f_bin_op_D : f_bin_op_D -> integer*)

val _ = Define `
 ((num_of_f_bin_op_D:f_bin_op_D -> int) arg_=
    ((case arg_ of
     FSGNJ_D => (( 0 : int):ii)
   | FSGNJN_D => (( 1 : int):ii)
   | FSGNJX_D => (( 2 : int):ii)
   | FMIN_D => (( 3 : int):ii)
   | FMAX_D => (( 4 : int):ii)
   | FEQ_D => (( 5 : int):ii)
   | FLT_D => (( 6 : int):ii)
   | FLE_D => (( 7 : int):ii)
   )))`;


(*val f_un_op_D_of_num : integer -> f_un_op_D*)

val _ = Define `
 ((f_un_op_D_of_num:int -> f_un_op_D) arg_=
    (let l__156 = arg_ in
   if (((l__156 = (( 0 : int):ii)))) then FCLASS_D
   else if (((l__156 = (( 1 : int):ii)))) then FMV_X_D
   else FMV_D_X))`;


(*val num_of_f_un_op_D : f_un_op_D -> integer*)

val _ = Define `
 ((num_of_f_un_op_D:f_un_op_D -> int) arg_=
    ((case arg_ of   FCLASS_D => (( 0 : int):ii) | FMV_X_D => (( 1 : int):ii) | FMV_D_X => (( 2 : int):ii) )))`;


(*val rX : integer -> M (mword ty32)*)

val _ = Define `
 ((rX:int ->(regstate)sail2_state_monad$sequential_state ->((((32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r=
    (let l__124 = r in sail2_state_monad$bindS
   (if (((l__124 = (( 0 : int):ii)))) then sail2_state_monad$returnS zero_reg
    else if (((l__124 = (( 1 : int):ii)))) then (sail2_state_monad$read_regS x1_ref  : ( 32 words$word) M)
    else if (((l__124 = (( 2 : int):ii)))) then (sail2_state_monad$read_regS x2_ref  : ( 32 words$word) M)
    else if (((l__124 = (( 3 : int):ii)))) then (sail2_state_monad$read_regS x3_ref  : ( 32 words$word) M)
    else if (((l__124 = (( 4 : int):ii)))) then (sail2_state_monad$read_regS x4_ref  : ( 32 words$word) M)
    else if (((l__124 = (( 5 : int):ii)))) then (sail2_state_monad$read_regS x5_ref  : ( 32 words$word) M)
    else if (((l__124 = (( 6 : int):ii)))) then (sail2_state_monad$read_regS x6_ref  : ( 32 words$word) M)
    else if (((l__124 = (( 7 : int):ii)))) then (sail2_state_monad$read_regS x7_ref  : ( 32 words$word) M)
    else if (((l__124 = (( 8 : int):ii)))) then (sail2_state_monad$read_regS x8_ref  : ( 32 words$word) M)
    else if (((l__124 = (( 9 : int):ii)))) then (sail2_state_monad$read_regS x9_ref  : ( 32 words$word) M)
    else if (((l__124 = (( 10 : int):ii)))) then (sail2_state_monad$read_regS x10_ref  : ( 32 words$word) M)
    else if (((l__124 = (( 11 : int):ii)))) then (sail2_state_monad$read_regS x11_ref  : ( 32 words$word) M)
    else if (((l__124 = (( 12 : int):ii)))) then (sail2_state_monad$read_regS x12_ref  : ( 32 words$word) M)
    else if (((l__124 = (( 13 : int):ii)))) then (sail2_state_monad$read_regS x13_ref  : ( 32 words$word) M)
    else if (((l__124 = (( 14 : int):ii)))) then (sail2_state_monad$read_regS x14_ref  : ( 32 words$word) M)
    else if (((l__124 = (( 15 : int):ii)))) then (sail2_state_monad$read_regS x15_ref  : ( 32 words$word) M)
    else if (((l__124 = (( 16 : int):ii)))) then (sail2_state_monad$read_regS x16_ref  : ( 32 words$word) M)
    else if (((l__124 = (( 17 : int):ii)))) then (sail2_state_monad$read_regS x17_ref  : ( 32 words$word) M)
    else if (((l__124 = (( 18 : int):ii)))) then (sail2_state_monad$read_regS x18_ref  : ( 32 words$word) M)
    else if (((l__124 = (( 19 : int):ii)))) then (sail2_state_monad$read_regS x19_ref  : ( 32 words$word) M)
    else if (((l__124 = (( 20 : int):ii)))) then (sail2_state_monad$read_regS x20_ref  : ( 32 words$word) M)
    else if (((l__124 = (( 21 : int):ii)))) then (sail2_state_monad$read_regS x21_ref  : ( 32 words$word) M)
    else if (((l__124 = (( 22 : int):ii)))) then (sail2_state_monad$read_regS x22_ref  : ( 32 words$word) M)
    else if (((l__124 = (( 23 : int):ii)))) then (sail2_state_monad$read_regS x23_ref  : ( 32 words$word) M)
    else if (((l__124 = (( 24 : int):ii)))) then (sail2_state_monad$read_regS x24_ref  : ( 32 words$word) M)
    else if (((l__124 = (( 25 : int):ii)))) then (sail2_state_monad$read_regS x25_ref  : ( 32 words$word) M)
    else if (((l__124 = (( 26 : int):ii)))) then (sail2_state_monad$read_regS x26_ref  : ( 32 words$word) M)
    else if (((l__124 = (( 27 : int):ii)))) then (sail2_state_monad$read_regS x27_ref  : ( 32 words$word) M)
    else if (((l__124 = (( 28 : int):ii)))) then (sail2_state_monad$read_regS x28_ref  : ( 32 words$word) M)
    else if (((l__124 = (( 29 : int):ii)))) then (sail2_state_monad$read_regS x29_ref  : ( 32 words$word) M)
    else if (((l__124 = (( 30 : int):ii)))) then (sail2_state_monad$read_regS x30_ref  : ( 32 words$word) M)
    else if (((l__124 = (( 31 : int):ii)))) then (sail2_state_monad$read_regS x31_ref  : ( 32 words$word) M)
    else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "invalid register number") (sail2_state_monad$exitS () )) (\ (v : regtype) . 
   sail2_state_monad$returnS ((regval_from_reg v  :  32 words$word)))))`;


(*val rvfi_wX : integer -> mword ty32 -> unit*)

val _ = Define `
 ((rvfi_wX:int ->(32)words$word -> unit) r v=  () )`;


(*val wX : integer -> mword ty32 -> M unit*)

val _ = Define `
 ((wX:int ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r in_v=
    (let v = ((regval_into_reg in_v  :  32 words$word)) in
   let l__92 = r in sail2_state_monad$seqS
   (if (((l__92 = (( 0 : int):ii)))) then sail2_state_monad$returnS () 
    else if (((l__92 = (( 1 : int):ii)))) then sail2_state_monad$write_regS x1_ref v
    else if (((l__92 = (( 2 : int):ii)))) then sail2_state_monad$write_regS x2_ref v
    else if (((l__92 = (( 3 : int):ii)))) then sail2_state_monad$write_regS x3_ref v
    else if (((l__92 = (( 4 : int):ii)))) then sail2_state_monad$write_regS x4_ref v
    else if (((l__92 = (( 5 : int):ii)))) then sail2_state_monad$write_regS x5_ref v
    else if (((l__92 = (( 6 : int):ii)))) then sail2_state_monad$write_regS x6_ref v
    else if (((l__92 = (( 7 : int):ii)))) then sail2_state_monad$write_regS x7_ref v
    else if (((l__92 = (( 8 : int):ii)))) then sail2_state_monad$write_regS x8_ref v
    else if (((l__92 = (( 9 : int):ii)))) then sail2_state_monad$write_regS x9_ref v
    else if (((l__92 = (( 10 : int):ii)))) then sail2_state_monad$write_regS x10_ref v
    else if (((l__92 = (( 11 : int):ii)))) then sail2_state_monad$write_regS x11_ref v
    else if (((l__92 = (( 12 : int):ii)))) then sail2_state_monad$write_regS x12_ref v
    else if (((l__92 = (( 13 : int):ii)))) then sail2_state_monad$write_regS x13_ref v
    else if (((l__92 = (( 14 : int):ii)))) then sail2_state_monad$write_regS x14_ref v
    else if (((l__92 = (( 15 : int):ii)))) then sail2_state_monad$write_regS x15_ref v
    else if (((l__92 = (( 16 : int):ii)))) then sail2_state_monad$write_regS x16_ref v
    else if (((l__92 = (( 17 : int):ii)))) then sail2_state_monad$write_regS x17_ref v
    else if (((l__92 = (( 18 : int):ii)))) then sail2_state_monad$write_regS x18_ref v
    else if (((l__92 = (( 19 : int):ii)))) then sail2_state_monad$write_regS x19_ref v
    else if (((l__92 = (( 20 : int):ii)))) then sail2_state_monad$write_regS x20_ref v
    else if (((l__92 = (( 21 : int):ii)))) then sail2_state_monad$write_regS x21_ref v
    else if (((l__92 = (( 22 : int):ii)))) then sail2_state_monad$write_regS x22_ref v
    else if (((l__92 = (( 23 : int):ii)))) then sail2_state_monad$write_regS x23_ref v
    else if (((l__92 = (( 24 : int):ii)))) then sail2_state_monad$write_regS x24_ref v
    else if (((l__92 = (( 25 : int):ii)))) then sail2_state_monad$write_regS x25_ref v
    else if (((l__92 = (( 26 : int):ii)))) then sail2_state_monad$write_regS x26_ref v
    else if (((l__92 = (( 27 : int):ii)))) then sail2_state_monad$write_regS x27_ref v
    else if (((l__92 = (( 28 : int):ii)))) then sail2_state_monad$write_regS x28_ref v
    else if (((l__92 = (( 29 : int):ii)))) then sail2_state_monad$write_regS x29_ref v
    else if (((l__92 = (( 30 : int):ii)))) then sail2_state_monad$write_regS x30_ref v
    else if (((l__92 = (( 31 : int):ii)))) then sail2_state_monad$write_regS x31_ref v
    else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "invalid register number") (sail2_state_monad$exitS () ))
   (sail2_state_monad$returnS (if (((r <> (( 0 : int):ii)))) then
             let (_ : unit) = (rvfi_wX r in_v) in
             if ((get_config_print_reg () )) then
               print_dbg
                 ((STRCAT "x"
                     ((STRCAT ((stringFromInteger r)) ((STRCAT " <- " ((RegStr v))))))))
             else () 
           else () ))))`;


(*val rX_bits : mword ty5 -> M (mword ty32)*)

val _ = Define `
 ((rX_bits:(5)words$word ->(regstate)sail2_state_monad$sequential_state ->((((32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) i=  ((rX ((lem$w2ui i))  : ( 32 words$word) M)))`;


(*val wX_bits : mword ty5 -> mword ty32 -> M unit*)

val _ = Define `
 ((wX_bits:(5)words$word ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (i : 5 bits) (data : xlenbits)=  (wX ((lem$w2ui i)) data))`;


val _ = Define `
 ((reg_name_abi:(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((string),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r=
    (let b__0 = r in
   if (((b__0 = (0b00000w :  5 words$word)))) then sail2_state_monad$returnS "zero"
   else if (((b__0 = (0b00001w :  5 words$word)))) then sail2_state_monad$returnS "ra"
   else if (((b__0 = (0b00010w :  5 words$word)))) then sail2_state_monad$returnS "sp"
   else if (((b__0 = (0b00011w :  5 words$word)))) then sail2_state_monad$returnS "gp"
   else if (((b__0 = (0b00100w :  5 words$word)))) then sail2_state_monad$returnS "tp"
   else if (((b__0 = (0b00101w :  5 words$word)))) then sail2_state_monad$returnS "t0"
   else if (((b__0 = (0b00110w :  5 words$word)))) then sail2_state_monad$returnS "t1"
   else if (((b__0 = (0b00111w :  5 words$word)))) then sail2_state_monad$returnS "t2"
   else if (((b__0 = (0b01000w :  5 words$word)))) then sail2_state_monad$returnS "fp"
   else if (((b__0 = (0b01001w :  5 words$word)))) then sail2_state_monad$returnS "s1"
   else if (((b__0 = (0b01010w :  5 words$word)))) then sail2_state_monad$returnS "a0"
   else if (((b__0 = (0b01011w :  5 words$word)))) then sail2_state_monad$returnS "a1"
   else if (((b__0 = (0b01100w :  5 words$word)))) then sail2_state_monad$returnS "a2"
   else if (((b__0 = (0b01101w :  5 words$word)))) then sail2_state_monad$returnS "a3"
   else if (((b__0 = (0b01110w :  5 words$word)))) then sail2_state_monad$returnS "a4"
   else if (((b__0 = (0b01111w :  5 words$word)))) then sail2_state_monad$returnS "a5"
   else if (((b__0 = (0b10000w :  5 words$word)))) then sail2_state_monad$returnS "a6"
   else if (((b__0 = (0b10001w :  5 words$word)))) then sail2_state_monad$returnS "a7"
   else if (((b__0 = (0b10010w :  5 words$word)))) then sail2_state_monad$returnS "s2"
   else if (((b__0 = (0b10011w :  5 words$word)))) then sail2_state_monad$returnS "s3"
   else if (((b__0 = (0b10100w :  5 words$word)))) then sail2_state_monad$returnS "s4"
   else if (((b__0 = (0b10101w :  5 words$word)))) then sail2_state_monad$returnS "s5"
   else if (((b__0 = (0b10110w :  5 words$word)))) then sail2_state_monad$returnS "s6"
   else if (((b__0 = (0b10111w :  5 words$word)))) then sail2_state_monad$returnS "s7"
   else if (((b__0 = (0b11000w :  5 words$word)))) then sail2_state_monad$returnS "s8"
   else if (((b__0 = (0b11001w :  5 words$word)))) then sail2_state_monad$returnS "s9"
   else if (((b__0 = (0b11010w :  5 words$word)))) then sail2_state_monad$returnS "s10"
   else if (((b__0 = (0b11011w :  5 words$word)))) then sail2_state_monad$returnS "s11"
   else if (((b__0 = (0b11100w :  5 words$word)))) then sail2_state_monad$returnS "t3"
   else if (((b__0 = (0b11101w :  5 words$word)))) then sail2_state_monad$returnS "t4"
   else if (((b__0 = (0b11110w :  5 words$word)))) then sail2_state_monad$returnS "t5"
   else if (((b__0 = (0b11111w :  5 words$word)))) then sail2_state_monad$returnS "t6"
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at model/riscv_regs.sail 154:2 - 187:3") (sail2_state_monad$exitS () )))`;


(*val reg_name_forwards : mword ty5 -> M string*)

(*val reg_name_backwards : string -> M (mword ty5)*)

(*val reg_name_forwards_matches : mword ty5 -> bool*)

(*val reg_name_backwards_matches : string -> bool*)

(*val reg_name_matches_prefix : string -> maybe ((mword ty5 * ii))*)

val _ = Define `
 ((reg_name_forwards:(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((string),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b00000w :  5 words$word)))) then sail2_state_monad$returnS "zero"
   else if (((b__0 = (0b00001w :  5 words$word)))) then sail2_state_monad$returnS "ra"
   else if (((b__0 = (0b00010w :  5 words$word)))) then sail2_state_monad$returnS "sp"
   else if (((b__0 = (0b00011w :  5 words$word)))) then sail2_state_monad$returnS "gp"
   else if (((b__0 = (0b00100w :  5 words$word)))) then sail2_state_monad$returnS "tp"
   else if (((b__0 = (0b00101w :  5 words$word)))) then sail2_state_monad$returnS "t0"
   else if (((b__0 = (0b00110w :  5 words$word)))) then sail2_state_monad$returnS "t1"
   else if (((b__0 = (0b00111w :  5 words$word)))) then sail2_state_monad$returnS "t2"
   else if (((b__0 = (0b01000w :  5 words$word)))) then sail2_state_monad$returnS "fp"
   else if (((b__0 = (0b01001w :  5 words$word)))) then sail2_state_monad$returnS "s1"
   else if (((b__0 = (0b01010w :  5 words$word)))) then sail2_state_monad$returnS "a0"
   else if (((b__0 = (0b01011w :  5 words$word)))) then sail2_state_monad$returnS "a1"
   else if (((b__0 = (0b01100w :  5 words$word)))) then sail2_state_monad$returnS "a2"
   else if (((b__0 = (0b01101w :  5 words$word)))) then sail2_state_monad$returnS "a3"
   else if (((b__0 = (0b01110w :  5 words$word)))) then sail2_state_monad$returnS "a4"
   else if (((b__0 = (0b01111w :  5 words$word)))) then sail2_state_monad$returnS "a5"
   else if (((b__0 = (0b10000w :  5 words$word)))) then sail2_state_monad$returnS "a6"
   else if (((b__0 = (0b10001w :  5 words$word)))) then sail2_state_monad$returnS "a7"
   else if (((b__0 = (0b10010w :  5 words$word)))) then sail2_state_monad$returnS "s2"
   else if (((b__0 = (0b10011w :  5 words$word)))) then sail2_state_monad$returnS "s3"
   else if (((b__0 = (0b10100w :  5 words$word)))) then sail2_state_monad$returnS "s4"
   else if (((b__0 = (0b10101w :  5 words$word)))) then sail2_state_monad$returnS "s5"
   else if (((b__0 = (0b10110w :  5 words$word)))) then sail2_state_monad$returnS "s6"
   else if (((b__0 = (0b10111w :  5 words$word)))) then sail2_state_monad$returnS "s7"
   else if (((b__0 = (0b11000w :  5 words$word)))) then sail2_state_monad$returnS "s8"
   else if (((b__0 = (0b11001w :  5 words$word)))) then sail2_state_monad$returnS "s9"
   else if (((b__0 = (0b11010w :  5 words$word)))) then sail2_state_monad$returnS "s10"
   else if (((b__0 = (0b11011w :  5 words$word)))) then sail2_state_monad$returnS "s11"
   else if (((b__0 = (0b11100w :  5 words$word)))) then sail2_state_monad$returnS "t3"
   else if (((b__0 = (0b11101w :  5 words$word)))) then sail2_state_monad$returnS "t4"
   else if (((b__0 = (0b11110w :  5 words$word)))) then sail2_state_monad$returnS "t5"
   else if (((b__0 = (0b11111w :  5 words$word)))) then sail2_state_monad$returnS "t6"
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((reg_name_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "zero"))) then sail2_state_monad$returnS (0b00000w :  5 words$word)
   else if (((p0_ = "ra"))) then sail2_state_monad$returnS (0b00001w :  5 words$word)
   else if (((p0_ = "sp"))) then sail2_state_monad$returnS (0b00010w :  5 words$word)
   else if (((p0_ = "gp"))) then sail2_state_monad$returnS (0b00011w :  5 words$word)
   else if (((p0_ = "tp"))) then sail2_state_monad$returnS (0b00100w :  5 words$word)
   else if (((p0_ = "t0"))) then sail2_state_monad$returnS (0b00101w :  5 words$word)
   else if (((p0_ = "t1"))) then sail2_state_monad$returnS (0b00110w :  5 words$word)
   else if (((p0_ = "t2"))) then sail2_state_monad$returnS (0b00111w :  5 words$word)
   else if (((p0_ = "fp"))) then sail2_state_monad$returnS (0b01000w :  5 words$word)
   else if (((p0_ = "s1"))) then sail2_state_monad$returnS (0b01001w :  5 words$word)
   else if (((p0_ = "a0"))) then sail2_state_monad$returnS (0b01010w :  5 words$word)
   else if (((p0_ = "a1"))) then sail2_state_monad$returnS (0b01011w :  5 words$word)
   else if (((p0_ = "a2"))) then sail2_state_monad$returnS (0b01100w :  5 words$word)
   else if (((p0_ = "a3"))) then sail2_state_monad$returnS (0b01101w :  5 words$word)
   else if (((p0_ = "a4"))) then sail2_state_monad$returnS (0b01110w :  5 words$word)
   else if (((p0_ = "a5"))) then sail2_state_monad$returnS (0b01111w :  5 words$word)
   else if (((p0_ = "a6"))) then sail2_state_monad$returnS (0b10000w :  5 words$word)
   else if (((p0_ = "a7"))) then sail2_state_monad$returnS (0b10001w :  5 words$word)
   else if (((p0_ = "s2"))) then sail2_state_monad$returnS (0b10010w :  5 words$word)
   else if (((p0_ = "s3"))) then sail2_state_monad$returnS (0b10011w :  5 words$word)
   else if (((p0_ = "s4"))) then sail2_state_monad$returnS (0b10100w :  5 words$word)
   else if (((p0_ = "s5"))) then sail2_state_monad$returnS (0b10101w :  5 words$word)
   else if (((p0_ = "s6"))) then sail2_state_monad$returnS (0b10110w :  5 words$word)
   else if (((p0_ = "s7"))) then sail2_state_monad$returnS (0b10111w :  5 words$word)
   else if (((p0_ = "s8"))) then sail2_state_monad$returnS (0b11000w :  5 words$word)
   else if (((p0_ = "s9"))) then sail2_state_monad$returnS (0b11001w :  5 words$word)
   else if (((p0_ = "s10"))) then sail2_state_monad$returnS (0b11010w :  5 words$word)
   else if (((p0_ = "s11"))) then sail2_state_monad$returnS (0b11011w :  5 words$word)
   else if (((p0_ = "t3"))) then sail2_state_monad$returnS (0b11100w :  5 words$word)
   else if (((p0_ = "t4"))) then sail2_state_monad$returnS (0b11101w :  5 words$word)
   else if (((p0_ = "t5"))) then sail2_state_monad$returnS (0b11110w :  5 words$word)
   else if (((p0_ = "t6"))) then sail2_state_monad$returnS (0b11111w :  5 words$word)
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((reg_name_forwards_matches:(5)words$word -> bool) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b00000w :  5 words$word)))) then T
   else if (((b__0 = (0b00001w :  5 words$word)))) then T
   else if (((b__0 = (0b00010w :  5 words$word)))) then T
   else if (((b__0 = (0b00011w :  5 words$word)))) then T
   else if (((b__0 = (0b00100w :  5 words$word)))) then T
   else if (((b__0 = (0b00101w :  5 words$word)))) then T
   else if (((b__0 = (0b00110w :  5 words$word)))) then T
   else if (((b__0 = (0b00111w :  5 words$word)))) then T
   else if (((b__0 = (0b01000w :  5 words$word)))) then T
   else if (((b__0 = (0b01001w :  5 words$word)))) then T
   else if (((b__0 = (0b01010w :  5 words$word)))) then T
   else if (((b__0 = (0b01011w :  5 words$word)))) then T
   else if (((b__0 = (0b01100w :  5 words$word)))) then T
   else if (((b__0 = (0b01101w :  5 words$word)))) then T
   else if (((b__0 = (0b01110w :  5 words$word)))) then T
   else if (((b__0 = (0b01111w :  5 words$word)))) then T
   else if (((b__0 = (0b10000w :  5 words$word)))) then T
   else if (((b__0 = (0b10001w :  5 words$word)))) then T
   else if (((b__0 = (0b10010w :  5 words$word)))) then T
   else if (((b__0 = (0b10011w :  5 words$word)))) then T
   else if (((b__0 = (0b10100w :  5 words$word)))) then T
   else if (((b__0 = (0b10101w :  5 words$word)))) then T
   else if (((b__0 = (0b10110w :  5 words$word)))) then T
   else if (((b__0 = (0b10111w :  5 words$word)))) then T
   else if (((b__0 = (0b11000w :  5 words$word)))) then T
   else if (((b__0 = (0b11001w :  5 words$word)))) then T
   else if (((b__0 = (0b11010w :  5 words$word)))) then T
   else if (((b__0 = (0b11011w :  5 words$word)))) then T
   else if (((b__0 = (0b11100w :  5 words$word)))) then T
   else if (((b__0 = (0b11101w :  5 words$word)))) then T
   else if (((b__0 = (0b11110w :  5 words$word)))) then T
   else if (((b__0 = (0b11111w :  5 words$word)))) then T
   else F))`;


val _ = Define `
 ((reg_name_backwards_matches:string -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "zero"))) then T
   else if (((p0_ = "ra"))) then T
   else if (((p0_ = "sp"))) then T
   else if (((p0_ = "gp"))) then T
   else if (((p0_ = "tp"))) then T
   else if (((p0_ = "t0"))) then T
   else if (((p0_ = "t1"))) then T
   else if (((p0_ = "t2"))) then T
   else if (((p0_ = "fp"))) then T
   else if (((p0_ = "s1"))) then T
   else if (((p0_ = "a0"))) then T
   else if (((p0_ = "a1"))) then T
   else if (((p0_ = "a2"))) then T
   else if (((p0_ = "a3"))) then T
   else if (((p0_ = "a4"))) then T
   else if (((p0_ = "a5"))) then T
   else if (((p0_ = "a6"))) then T
   else if (((p0_ = "a7"))) then T
   else if (((p0_ = "s2"))) then T
   else if (((p0_ = "s3"))) then T
   else if (((p0_ = "s4"))) then T
   else if (((p0_ = "s5"))) then T
   else if (((p0_ = "s6"))) then T
   else if (((p0_ = "s7"))) then T
   else if (((p0_ = "s8"))) then T
   else if (((p0_ = "s9"))) then T
   else if (((p0_ = "s10"))) then T
   else if (((p0_ = "s11"))) then T
   else if (((p0_ = "t3"))) then T
   else if (((p0_ = "t4"))) then T
   else if (((p0_ = "t5"))) then T
   else if (((p0_ = "t6"))) then T
   else F))`;


(*val _s164_ : string -> maybe string*)

val _ = Define `
 ((s164_:string ->(string)option) s165_0=
    (let s166_0 = s165_0 in
   if ((string_startswith s166_0 "t6")) then  
  (case ((string_drop s166_0 ((string_length "t6")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s160_ : string -> maybe string*)

val _ = Define `
 ((s160_:string ->(string)option) s161_0=
    (let s162_0 = s161_0 in
   if ((string_startswith s162_0 "t5")) then  
  (case ((string_drop s162_0 ((string_length "t5")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s156_ : string -> maybe string*)

val _ = Define `
 ((s156_:string ->(string)option) s157_0=
    (let s158_0 = s157_0 in
   if ((string_startswith s158_0 "t4")) then  
  (case ((string_drop s158_0 ((string_length "t4")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s152_ : string -> maybe string*)

val _ = Define `
 ((s152_:string ->(string)option) s153_0=
    (let s154_0 = s153_0 in
   if ((string_startswith s154_0 "t3")) then  
  (case ((string_drop s154_0 ((string_length "t3")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s148_ : string -> maybe string*)

val _ = Define `
 ((s148_:string ->(string)option) s149_0=
    (let s150_0 = s149_0 in
   if ((string_startswith s150_0 "s11")) then  
  (case ((string_drop s150_0 ((string_length "s11")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s144_ : string -> maybe string*)

val _ = Define `
 ((s144_:string ->(string)option) s145_0=
    (let s146_0 = s145_0 in
   if ((string_startswith s146_0 "s10")) then  
  (case ((string_drop s146_0 ((string_length "s10")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s140_ : string -> maybe string*)

val _ = Define `
 ((s140_:string ->(string)option) s141_0=
    (let s142_0 = s141_0 in
   if ((string_startswith s142_0 "s9")) then  
  (case ((string_drop s142_0 ((string_length "s9")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s136_ : string -> maybe string*)

val _ = Define `
 ((s136_:string ->(string)option) s137_0=
    (let s138_0 = s137_0 in
   if ((string_startswith s138_0 "s8")) then  
  (case ((string_drop s138_0 ((string_length "s8")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s132_ : string -> maybe string*)

val _ = Define `
 ((s132_:string ->(string)option) s133_0=
    (let s134_0 = s133_0 in
   if ((string_startswith s134_0 "s7")) then  
  (case ((string_drop s134_0 ((string_length "s7")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s128_ : string -> maybe string*)

val _ = Define `
 ((s128_:string ->(string)option) s129_0=
    (let s130_0 = s129_0 in
   if ((string_startswith s130_0 "s6")) then  
  (case ((string_drop s130_0 ((string_length "s6")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s124_ : string -> maybe string*)

val _ = Define `
 ((s124_:string ->(string)option) s125_0=
    (let s126_0 = s125_0 in
   if ((string_startswith s126_0 "s5")) then  
  (case ((string_drop s126_0 ((string_length "s5")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s120_ : string -> maybe string*)

val _ = Define `
 ((s120_:string ->(string)option) s121_0=
    (let s122_0 = s121_0 in
   if ((string_startswith s122_0 "s4")) then  
  (case ((string_drop s122_0 ((string_length "s4")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s116_ : string -> maybe string*)

val _ = Define `
 ((s116_:string ->(string)option) s117_0=
    (let s118_0 = s117_0 in
   if ((string_startswith s118_0 "s3")) then  
  (case ((string_drop s118_0 ((string_length "s3")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s112_ : string -> maybe string*)

val _ = Define `
 ((s112_:string ->(string)option) s113_0=
    (let s114_0 = s113_0 in
   if ((string_startswith s114_0 "s2")) then  
  (case ((string_drop s114_0 ((string_length "s2")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s108_ : string -> maybe string*)

val _ = Define `
 ((s108_:string ->(string)option) s109_0=
    (let s110_0 = s109_0 in
   if ((string_startswith s110_0 "a7")) then  
  (case ((string_drop s110_0 ((string_length "a7")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s104_ : string -> maybe string*)

val _ = Define `
 ((s104_:string ->(string)option) s105_0=
    (let s106_0 = s105_0 in
   if ((string_startswith s106_0 "a6")) then  
  (case ((string_drop s106_0 ((string_length "a6")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s100_ : string -> maybe string*)

val _ = Define `
 ((s100_:string ->(string)option) s101_0=
    (let s102_0 = s101_0 in
   if ((string_startswith s102_0 "a5")) then  
  (case ((string_drop s102_0 ((string_length "a5")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s96_ : string -> maybe string*)

val _ = Define `
 ((s96_:string ->(string)option) s97_0=
    (let s98_0 = s97_0 in
   if ((string_startswith s98_0 "a4")) then  
  (case ((string_drop s98_0 ((string_length "a4")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s92_ : string -> maybe string*)

val _ = Define `
 ((s92_:string ->(string)option) s93_0=
    (let s94_0 = s93_0 in
   if ((string_startswith s94_0 "a3")) then  
  (case ((string_drop s94_0 ((string_length "a3")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s88_ : string -> maybe string*)

val _ = Define `
 ((s88_:string ->(string)option) s89_0=
    (let s90_0 = s89_0 in
   if ((string_startswith s90_0 "a2")) then  
  (case ((string_drop s90_0 ((string_length "a2")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s84_ : string -> maybe string*)

val _ = Define `
 ((s84_:string ->(string)option) s85_0=
    (let s86_0 = s85_0 in
   if ((string_startswith s86_0 "a1")) then  
  (case ((string_drop s86_0 ((string_length "a1")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s80_ : string -> maybe string*)

val _ = Define `
 ((s80_:string ->(string)option) s81_0=
    (let s82_0 = s81_0 in
   if ((string_startswith s82_0 "a0")) then  
  (case ((string_drop s82_0 ((string_length "a0")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s76_ : string -> maybe string*)

val _ = Define `
 ((s76_:string ->(string)option) s77_0=
    (let s78_0 = s77_0 in
   if ((string_startswith s78_0 "s1")) then  
  (case ((string_drop s78_0 ((string_length "s1")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s72_ : string -> maybe string*)

val _ = Define `
 ((s72_:string ->(string)option) s73_0=
    (let s74_0 = s73_0 in
   if ((string_startswith s74_0 "fp")) then  
  (case ((string_drop s74_0 ((string_length "fp")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s68_ : string -> maybe string*)

val _ = Define `
 ((s68_:string ->(string)option) s69_0=
    (let s70_0 = s69_0 in
   if ((string_startswith s70_0 "t2")) then  
  (case ((string_drop s70_0 ((string_length "t2")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s64_ : string -> maybe string*)

val _ = Define `
 ((s64_:string ->(string)option) s65_0=
    (let s66_0 = s65_0 in
   if ((string_startswith s66_0 "t1")) then  
  (case ((string_drop s66_0 ((string_length "t1")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s60_ : string -> maybe string*)

val _ = Define `
 ((s60_:string ->(string)option) s61_0=
    (let s62_0 = s61_0 in
   if ((string_startswith s62_0 "t0")) then  
  (case ((string_drop s62_0 ((string_length "t0")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s56_ : string -> maybe string*)

val _ = Define `
 ((s56_:string ->(string)option) s57_0=
    (let s58_0 = s57_0 in
   if ((string_startswith s58_0 "tp")) then  
  (case ((string_drop s58_0 ((string_length "tp")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s52_ : string -> maybe string*)

val _ = Define `
 ((s52_:string ->(string)option) s53_0=
    (let s54_0 = s53_0 in
   if ((string_startswith s54_0 "gp")) then  
  (case ((string_drop s54_0 ((string_length "gp")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s48_ : string -> maybe string*)

val _ = Define `
 ((s48_:string ->(string)option) s49_0=
    (let s50_0 = s49_0 in
   if ((string_startswith s50_0 "sp")) then  
  (case ((string_drop s50_0 ((string_length "sp")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s44_ : string -> maybe string*)

val _ = Define `
 ((s44_:string ->(string)option) s45_0=
    (let s46_0 = s45_0 in
   if ((string_startswith s46_0 "ra")) then  
  (case ((string_drop s46_0 ((string_length "ra")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s40_ : string -> maybe string*)

val _ = Define `
 ((s40_:string ->(string)option) s41_0=
    (let s42_0 = s41_0 in
   if ((string_startswith s42_0 "zero")) then  
  (case ((string_drop s42_0 ((string_length "zero")))) of   s_ => SOME s_ )
   else NONE))`;


val _ = Define `
 ((reg_name_matches_prefix:string ->((5)words$word#int)option) arg_=
    (let s43_0 = arg_ in
   if ((case ((s40_ s43_0)) of   SOME (s_) => T | _ => F )) then  
  (case s40_ s43_0 of
      (SOME (s_)) =>
  SOME
    ((0b00000w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s44_ s43_0)) of   SOME (s_) => T | _ => F )) then  
  (case s44_ s43_0 of
      (SOME (s_)) =>
  SOME
    ((0b00001w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s48_ s43_0)) of   SOME (s_) => T | _ => F )) then  
  (case s48_ s43_0 of
      (SOME (s_)) =>
  SOME
    ((0b00010w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s52_ s43_0)) of   SOME (s_) => T | _ => F )) then  
  (case s52_ s43_0 of
      (SOME (s_)) =>
  SOME
    ((0b00011w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s56_ s43_0)) of   SOME (s_) => T | _ => F )) then  
  (case s56_ s43_0 of
      (SOME (s_)) =>
  SOME
    ((0b00100w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s60_ s43_0)) of   SOME (s_) => T | _ => F )) then  
  (case s60_ s43_0 of
      (SOME (s_)) =>
  SOME
    ((0b00101w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s64_ s43_0)) of   SOME (s_) => T | _ => F )) then  
  (case s64_ s43_0 of
      (SOME (s_)) =>
  SOME
    ((0b00110w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s68_ s43_0)) of   SOME (s_) => T | _ => F )) then  
  (case s68_ s43_0 of
      (SOME (s_)) =>
  SOME
    ((0b00111w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s72_ s43_0)) of   SOME (s_) => T | _ => F )) then  
  (case s72_ s43_0 of
      (SOME (s_)) =>
  SOME
    ((0b01000w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s76_ s43_0)) of   SOME (s_) => T | _ => F )) then  
  (case s76_ s43_0 of
      (SOME (s_)) =>
  SOME
    ((0b01001w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s80_ s43_0)) of   SOME (s_) => T | _ => F )) then  
  (case s80_ s43_0 of
      (SOME (s_)) =>
  SOME
    ((0b01010w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s84_ s43_0)) of   SOME (s_) => T | _ => F )) then  
  (case s84_ s43_0 of
      (SOME (s_)) =>
  SOME
    ((0b01011w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s88_ s43_0)) of   SOME (s_) => T | _ => F )) then  
  (case s88_ s43_0 of
      (SOME (s_)) =>
  SOME
    ((0b01100w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s92_ s43_0)) of   SOME (s_) => T | _ => F )) then  
  (case s92_ s43_0 of
      (SOME (s_)) =>
  SOME
    ((0b01101w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s96_ s43_0)) of   SOME (s_) => T | _ => F )) then  
  (case s96_ s43_0 of
      (SOME (s_)) =>
  SOME
    ((0b01110w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s100_ s43_0)) of   SOME (s_) => T | _ => F )) then  
  (case s100_ s43_0 of
      (SOME (s_)) =>
  SOME
    ((0b01111w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s104_ s43_0)) of   SOME (s_) => T | _ => F )) then  
  (case s104_ s43_0 of
      (SOME (s_)) =>
  SOME
    ((0b10000w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s108_ s43_0)) of   SOME (s_) => T | _ => F )) then  
  (case s108_ s43_0 of
      (SOME (s_)) =>
  SOME
    ((0b10001w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s112_ s43_0)) of   SOME (s_) => T | _ => F )) then  
  (case s112_ s43_0 of
      (SOME (s_)) =>
  SOME
    ((0b10010w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s116_ s43_0)) of   SOME (s_) => T | _ => F )) then  
  (case s116_ s43_0 of
      (SOME (s_)) =>
  SOME
    ((0b10011w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s120_ s43_0)) of   SOME (s_) => T | _ => F )) then  
  (case s120_ s43_0 of
      (SOME (s_)) =>
  SOME
    ((0b10100w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s124_ s43_0)) of   SOME (s_) => T | _ => F )) then  
  (case s124_ s43_0 of
      (SOME (s_)) =>
  SOME
    ((0b10101w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s128_ s43_0)) of   SOME (s_) => T | _ => F )) then  
  (case s128_ s43_0 of
      (SOME (s_)) =>
  SOME
    ((0b10110w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s132_ s43_0)) of   SOME (s_) => T | _ => F )) then  
  (case s132_ s43_0 of
      (SOME (s_)) =>
  SOME
    ((0b10111w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s136_ s43_0)) of   SOME (s_) => T | _ => F )) then  
  (case s136_ s43_0 of
      (SOME (s_)) =>
  SOME
    ((0b11000w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s140_ s43_0)) of   SOME (s_) => T | _ => F )) then  
  (case s140_ s43_0 of
      (SOME (s_)) =>
  SOME
    ((0b11001w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s144_ s43_0)) of   SOME (s_) => T | _ => F )) then  
  (case s144_ s43_0 of
      (SOME (s_)) =>
  SOME
    ((0b11010w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s148_ s43_0)) of   SOME (s_) => T | _ => F )) then  
  (case s148_ s43_0 of
      (SOME (s_)) =>
  SOME
    ((0b11011w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s152_ s43_0)) of   SOME (s_) => T | _ => F )) then  
  (case s152_ s43_0 of
      (SOME (s_)) =>
  SOME
    ((0b11100w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s156_ s43_0)) of   SOME (s_) => T | _ => F )) then  
  (case s156_ s43_0 of
      (SOME (s_)) =>
  SOME
    ((0b11101w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s160_ s43_0)) of   SOME (s_) => T | _ => F )) then  
  (case s160_ s43_0 of
      (SOME (s_)) =>
  SOME
    ((0b11110w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s164_ s43_0)) of   SOME (s_) => T | _ => F )) then  
  (case s164_ s43_0 of
      (SOME (s_)) =>
  SOME
    ((0b11111w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else NONE))`;


(*val creg_name_forwards : mword ty3 -> M string*)

(*val creg_name_backwards : string -> M (mword ty3)*)

(*val creg_name_forwards_matches : mword ty3 -> bool*)

(*val creg_name_backwards_matches : string -> bool*)

(*val creg_name_matches_prefix : string -> maybe ((mword ty3 * ii))*)

val _ = Define `
 ((creg_name_forwards:(3)words$word ->(regstate)sail2_state_monad$sequential_state ->(((string),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b000w :  3 words$word)))) then sail2_state_monad$returnS "s0"
   else if (((b__0 = (0b001w :  3 words$word)))) then sail2_state_monad$returnS "s1"
   else if (((b__0 = (0b010w :  3 words$word)))) then sail2_state_monad$returnS "a0"
   else if (((b__0 = (0b011w :  3 words$word)))) then sail2_state_monad$returnS "a1"
   else if (((b__0 = (0b100w :  3 words$word)))) then sail2_state_monad$returnS "a2"
   else if (((b__0 = (0b101w :  3 words$word)))) then sail2_state_monad$returnS "a3"
   else if (((b__0 = (0b110w :  3 words$word)))) then sail2_state_monad$returnS "a4"
   else if (((b__0 = (0b111w :  3 words$word)))) then sail2_state_monad$returnS "a5"
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((creg_name_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((3)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "s0"))) then sail2_state_monad$returnS (0b000w :  3 words$word)
   else if (((p0_ = "s1"))) then sail2_state_monad$returnS (0b001w :  3 words$word)
   else if (((p0_ = "a0"))) then sail2_state_monad$returnS (0b010w :  3 words$word)
   else if (((p0_ = "a1"))) then sail2_state_monad$returnS (0b011w :  3 words$word)
   else if (((p0_ = "a2"))) then sail2_state_monad$returnS (0b100w :  3 words$word)
   else if (((p0_ = "a3"))) then sail2_state_monad$returnS (0b101w :  3 words$word)
   else if (((p0_ = "a4"))) then sail2_state_monad$returnS (0b110w :  3 words$word)
   else if (((p0_ = "a5"))) then sail2_state_monad$returnS (0b111w :  3 words$word)
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((creg_name_forwards_matches:(3)words$word -> bool) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b000w :  3 words$word)))) then T
   else if (((b__0 = (0b001w :  3 words$word)))) then T
   else if (((b__0 = (0b010w :  3 words$word)))) then T
   else if (((b__0 = (0b011w :  3 words$word)))) then T
   else if (((b__0 = (0b100w :  3 words$word)))) then T
   else if (((b__0 = (0b101w :  3 words$word)))) then T
   else if (((b__0 = (0b110w :  3 words$word)))) then T
   else if (((b__0 = (0b111w :  3 words$word)))) then T
   else F))`;


val _ = Define `
 ((creg_name_backwards_matches:string -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "s0"))) then T
   else if (((p0_ = "s1"))) then T
   else if (((p0_ = "a0"))) then T
   else if (((p0_ = "a1"))) then T
   else if (((p0_ = "a2"))) then T
   else if (((p0_ = "a3"))) then T
   else if (((p0_ = "a4"))) then T
   else if (((p0_ = "a5"))) then T
   else F))`;


(*val _s196_ : string -> maybe string*)

val _ = Define `
 ((s196_:string ->(string)option) s197_0=
    (let s198_0 = s197_0 in
   if ((string_startswith s198_0 "a5")) then  
  (case ((string_drop s198_0 ((string_length "a5")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s192_ : string -> maybe string*)

val _ = Define `
 ((s192_:string ->(string)option) s193_0=
    (let s194_0 = s193_0 in
   if ((string_startswith s194_0 "a4")) then  
  (case ((string_drop s194_0 ((string_length "a4")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s188_ : string -> maybe string*)

val _ = Define `
 ((s188_:string ->(string)option) s189_0=
    (let s190_0 = s189_0 in
   if ((string_startswith s190_0 "a3")) then  
  (case ((string_drop s190_0 ((string_length "a3")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s184_ : string -> maybe string*)

val _ = Define `
 ((s184_:string ->(string)option) s185_0=
    (let s186_0 = s185_0 in
   if ((string_startswith s186_0 "a2")) then  
  (case ((string_drop s186_0 ((string_length "a2")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s180_ : string -> maybe string*)

val _ = Define `
 ((s180_:string ->(string)option) s181_0=
    (let s182_0 = s181_0 in
   if ((string_startswith s182_0 "a1")) then  
  (case ((string_drop s182_0 ((string_length "a1")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s176_ : string -> maybe string*)

val _ = Define `
 ((s176_:string ->(string)option) s177_0=
    (let s178_0 = s177_0 in
   if ((string_startswith s178_0 "a0")) then  
  (case ((string_drop s178_0 ((string_length "a0")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s172_ : string -> maybe string*)

val _ = Define `
 ((s172_:string ->(string)option) s173_0=
    (let s174_0 = s173_0 in
   if ((string_startswith s174_0 "s1")) then  
  (case ((string_drop s174_0 ((string_length "s1")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s168_ : string -> maybe string*)

val _ = Define `
 ((s168_:string ->(string)option) s169_0=
    (let s170_0 = s169_0 in
   if ((string_startswith s170_0 "s0")) then  
  (case ((string_drop s170_0 ((string_length "s0")))) of   s_ => SOME s_ )
   else NONE))`;


val _ = Define `
 ((creg_name_matches_prefix:string ->((3)words$word#int)option) arg_=
    (let s171_0 = arg_ in
   if ((case ((s168_ s171_0)) of   SOME (s_) => T | _ => F )) then  
  (case s168_ s171_0 of
      (SOME (s_)) =>
  SOME
    ((0b000w : 3 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s172_ s171_0)) of   SOME (s_) => T | _ => F )) then  
  (case s172_ s171_0 of
      (SOME (s_)) =>
  SOME
    ((0b001w : 3 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s176_ s171_0)) of   SOME (s_) => T | _ => F )) then  
  (case s176_ s171_0 of
      (SOME (s_)) =>
  SOME
    ((0b010w : 3 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s180_ s171_0)) of   SOME (s_) => T | _ => F )) then  
  (case s180_ s171_0 of
      (SOME (s_)) =>
  SOME
    ((0b011w : 3 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s184_ s171_0)) of   SOME (s_) => T | _ => F )) then  
  (case s184_ s171_0 of
      (SOME (s_)) =>
  SOME
    ((0b100w : 3 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s188_ s171_0)) of   SOME (s_) => T | _ => F )) then  
  (case s188_ s171_0 of
      (SOME (s_)) =>
  SOME
    ((0b101w : 3 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s192_ s171_0)) of   SOME (s_) => T | _ => F )) then  
  (case s192_ s171_0 of
      (SOME (s_)) =>
  SOME
    ((0b110w : 3 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s196_ s171_0)) of   SOME (s_) => T | _ => F )) then  
  (case s196_ s171_0 of
      (SOME (s_)) =>
  SOME
    ((0b111w : 3 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else NONE))`;


(*val init_base_regs : unit -> M unit*)

val _ = Define `
 ((init_base_regs:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS x1_ref zero_reg)
   (sail2_state_monad$write_regS x2_ref zero_reg))
   (sail2_state_monad$write_regS x3_ref zero_reg))
   (sail2_state_monad$write_regS x4_ref zero_reg))
   (sail2_state_monad$write_regS x5_ref zero_reg))
   (sail2_state_monad$write_regS x6_ref zero_reg))
   (sail2_state_monad$write_regS x7_ref zero_reg))
   (sail2_state_monad$write_regS x8_ref zero_reg))
   (sail2_state_monad$write_regS x9_ref zero_reg))
   (sail2_state_monad$write_regS x10_ref zero_reg))
   (sail2_state_monad$write_regS x11_ref zero_reg))
   (sail2_state_monad$write_regS x12_ref zero_reg))
   (sail2_state_monad$write_regS x13_ref zero_reg))
   (sail2_state_monad$write_regS x14_ref zero_reg))
   (sail2_state_monad$write_regS x15_ref zero_reg))
   (sail2_state_monad$write_regS x16_ref zero_reg))
   (sail2_state_monad$write_regS x17_ref zero_reg))
   (sail2_state_monad$write_regS x18_ref zero_reg))
   (sail2_state_monad$write_regS x19_ref zero_reg))
   (sail2_state_monad$write_regS x20_ref zero_reg))
   (sail2_state_monad$write_regS x21_ref zero_reg))
   (sail2_state_monad$write_regS x22_ref zero_reg))
   (sail2_state_monad$write_regS x23_ref zero_reg))
   (sail2_state_monad$write_regS x24_ref zero_reg))
   (sail2_state_monad$write_regS x25_ref zero_reg))
   (sail2_state_monad$write_regS x26_ref zero_reg))
   (sail2_state_monad$write_regS x27_ref zero_reg))
   (sail2_state_monad$write_regS x28_ref zero_reg))
   (sail2_state_monad$write_regS x29_ref zero_reg)) (sail2_state_monad$write_regS x30_ref zero_reg)) (sail2_state_monad$write_regS x31_ref zero_reg)))`;


(*
  Retrieves the architectural PC value. This is not necessarily the value
  found in the PC register as extensions may choose to override this function.
  The value in the PC register is the absolute virtual address of the instruction
  to fetch.
*)
(*val get_arch_pc : unit -> M (mword ty32)*)

val _ = Define `
 ((get_arch_pc:unit ->(regstate)sail2_state_monad$sequential_state ->((((32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  ((sail2_state_monad$read_regS PC_ref  : ( 32 words$word) M)))`;


(*val get_next_pc : unit -> M (mword ty32)*)

val _ = Define `
 ((get_next_pc:unit ->(regstate)sail2_state_monad$sequential_state ->((((32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  ((sail2_state_monad$read_regS nextPC_ref  : ( 32 words$word) M)))`;


(*val set_next_pc : mword ty32 -> M unit*)

val _ = Define `
 ((set_next_pc:(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) pc=  (sail2_state_monad$write_regS nextPC_ref pc))`;


(*val tick_pc : unit -> M unit*)

val _ = Define `
 ((tick_pc:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS nextPC_ref  : ( 32 words$word) M) (\ (w__0 :  32 words$word) .  sail2_state_monad$write_regS PC_ref w__0)))`;


(*val Mk_Misa : mword ty32 -> Misa*)

val _ = Define `
 ((Mk_Misa:(32)words$word -> Misa) v=  (<| Misa_Misa_chunk_0 := ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) |>))`;


(*val _get_Misa_bits : Misa -> mword ty32*)

val _ = Define `
 ((get_Misa_bits:Misa ->(32)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)))`;


(*val _set_Misa_bits : register_ref regstate register_value Misa -> mword ty32 -> M unit*)

val _ = Define `
 ((set_Misa_bits:((regstate),(register_value),(Misa))register_ref ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_bits : Misa -> mword ty32 -> Misa*)

val _ = Define `
 ((update_Misa_bits:Misa ->(32)words$word -> Misa) v x=
    (( v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
          :  32 words$word)) |>)))`;


(*val _update_Counteren_bits : Counteren -> mword ty32 -> Counteren*)

(*val _update_Counterin_bits : Counterin -> mword ty32 -> Counterin*)

(*val _update_Fcsr_bits : Fcsr -> mword ty32 -> Fcsr*)

(*val _update_Mcause_bits : Mcause -> mword ty32 -> Mcause*)

(*val _update_Medeleg_bits : Medeleg -> mword ty32 -> Medeleg*)

(*val _update_Minterrupts_bits : Minterrupts -> mword ty32 -> Minterrupts*)

(*val _update_Mstatus_bits : Mstatus -> mword ty32 -> Mstatus*)

(*val _update_Mstatush_bits : Mstatush -> mword ty32 -> Mstatush*)

(*val _update_Mtvec_bits : Mtvec -> mword ty32 -> Mtvec*)

(*val _update_PTE_Bits_bits : PTE_Bits -> mword ty8 -> PTE_Bits*)

(*val _update_Pmpcfg_ent_bits : Pmpcfg_ent -> mword ty8 -> Pmpcfg_ent*)

(*val _update_SV32_PTE_bits : SV32_PTE -> mword ty32 -> SV32_PTE*)

(*val _update_SV32_Paddr_bits : SV32_Paddr -> mword ty34 -> SV32_Paddr*)

(*val _update_SV32_Vaddr_bits : SV32_Vaddr -> mword ty32 -> SV32_Vaddr*)

(*val _update_SV39_PTE_bits : SV39_PTE -> mword ty64 -> SV39_PTE*)

(*val _update_SV39_Paddr_bits : SV39_Paddr -> mword ty56 -> SV39_Paddr*)

(*val _update_SV39_Vaddr_bits : SV39_Vaddr -> mword ty39 -> SV39_Vaddr*)

(*val _update_SV48_PTE_bits : SV48_PTE -> mword ty64 -> SV48_PTE*)

(*val _update_SV48_Paddr_bits : SV48_Paddr -> mword ty56 -> SV48_Paddr*)

(*val _update_SV48_Vaddr_bits : SV48_Vaddr -> mword ty48 -> SV48_Vaddr*)

(*val _update_Satp32_bits : Satp32 -> mword ty32 -> Satp32*)

(*val _update_Satp64_bits : Satp64 -> mword ty64 -> Satp64*)

(*val _update_Sedeleg_bits : Sedeleg -> mword ty32 -> Sedeleg*)

(*val _update_Sinterrupts_bits : Sinterrupts -> mword ty32 -> Sinterrupts*)

(*val _update_Sstatus_bits : Sstatus -> mword ty32 -> Sstatus*)

(*val _update_Uinterrupts_bits : Uinterrupts -> mword ty32 -> Uinterrupts*)

(*val _update_Ustatus_bits : Ustatus -> mword ty32 -> Ustatus*)

(*val _update_htif_cmd_bits : htif_cmd -> mword ty64 -> htif_cmd*)

(*val _get_Counteren_bits : Counteren -> mword ty32*)

(*val _get_Counterin_bits : Counterin -> mword ty32*)

(*val _get_Fcsr_bits : Fcsr -> mword ty32*)

(*val _get_Mcause_bits : Mcause -> mword ty32*)

(*val _get_Medeleg_bits : Medeleg -> mword ty32*)

(*val _get_Minterrupts_bits : Minterrupts -> mword ty32*)

(*val _get_Mstatus_bits : Mstatus -> mword ty32*)

(*val _get_Mstatush_bits : Mstatush -> mword ty32*)

(*val _get_Mtvec_bits : Mtvec -> mword ty32*)

(*val _get_PTE_Bits_bits : PTE_Bits -> mword ty8*)

(*val _get_Pmpcfg_ent_bits : Pmpcfg_ent -> mword ty8*)

(*val _get_SV32_PTE_bits : SV32_PTE -> mword ty32*)

(*val _get_SV32_Paddr_bits : SV32_Paddr -> mword ty34*)

(*val _get_SV32_Vaddr_bits : SV32_Vaddr -> mword ty32*)

(*val _get_SV39_PTE_bits : SV39_PTE -> mword ty64*)

(*val _get_SV39_Paddr_bits : SV39_Paddr -> mword ty56*)

(*val _get_SV39_Vaddr_bits : SV39_Vaddr -> mword ty39*)

(*val _get_SV48_PTE_bits : SV48_PTE -> mword ty64*)

(*val _get_SV48_Paddr_bits : SV48_Paddr -> mword ty56*)

(*val _get_SV48_Vaddr_bits : SV48_Vaddr -> mword ty48*)

(*val _get_Satp32_bits : Satp32 -> mword ty32*)

(*val _get_Satp64_bits : Satp64 -> mword ty64*)

(*val _get_Sedeleg_bits : Sedeleg -> mword ty32*)

(*val _get_Sinterrupts_bits : Sinterrupts -> mword ty32*)

(*val _get_Sstatus_bits : Sstatus -> mword ty32*)

(*val _get_Uinterrupts_bits : Uinterrupts -> mword ty32*)

(*val _get_Ustatus_bits : Ustatus -> mword ty32*)

(*val _get_htif_cmd_bits : htif_cmd -> mword ty64*)

(*val _set_Counteren_bits : register_ref regstate register_value Counteren -> mword ty32 -> M unit*)

(*val _set_Counterin_bits : register_ref regstate register_value Counterin -> mword ty32 -> M unit*)

(*val _set_Fcsr_bits : register_ref regstate register_value Fcsr -> mword ty32 -> M unit*)

(*val _set_Mcause_bits : register_ref regstate register_value Mcause -> mword ty32 -> M unit*)

(*val _set_Medeleg_bits : register_ref regstate register_value Medeleg -> mword ty32 -> M unit*)

(*val _set_Minterrupts_bits : register_ref regstate register_value Minterrupts -> mword ty32 -> M unit*)

(*val _set_Mstatus_bits : register_ref regstate register_value Mstatus -> mword ty32 -> M unit*)

(*val _set_Mstatush_bits : register_ref regstate register_value Mstatush -> mword ty32 -> M unit*)

(*val _set_Mtvec_bits : register_ref regstate register_value Mtvec -> mword ty32 -> M unit*)

(*val _set_PTE_Bits_bits : register_ref regstate register_value PTE_Bits -> mword ty8 -> M unit*)

(*val _set_Pmpcfg_ent_bits : register_ref regstate register_value Pmpcfg_ent -> mword ty8 -> M unit*)

(*val _set_SV32_PTE_bits : register_ref regstate register_value SV32_PTE -> mword ty32 -> M unit*)

(*val _set_SV32_Paddr_bits : register_ref regstate register_value SV32_Paddr -> mword ty34 -> M unit*)

(*val _set_SV32_Vaddr_bits : register_ref regstate register_value SV32_Vaddr -> mword ty32 -> M unit*)

(*val _set_SV39_PTE_bits : register_ref regstate register_value SV39_PTE -> mword ty64 -> M unit*)

(*val _set_SV39_Paddr_bits : register_ref regstate register_value SV39_Paddr -> mword ty56 -> M unit*)

(*val _set_SV39_Vaddr_bits : register_ref regstate register_value SV39_Vaddr -> mword ty39 -> M unit*)

(*val _set_SV48_PTE_bits : register_ref regstate register_value SV48_PTE -> mword ty64 -> M unit*)

(*val _set_SV48_Paddr_bits : register_ref regstate register_value SV48_Paddr -> mword ty56 -> M unit*)

(*val _set_SV48_Vaddr_bits : register_ref regstate register_value SV48_Vaddr -> mword ty48 -> M unit*)

(*val _set_Satp32_bits : register_ref regstate register_value Satp32 -> mword ty32 -> M unit*)

(*val _set_Satp64_bits : register_ref regstate register_value Satp64 -> mword ty64 -> M unit*)

(*val _set_Sedeleg_bits : register_ref regstate register_value Sedeleg -> mword ty32 -> M unit*)

(*val _set_Sinterrupts_bits : register_ref regstate register_value Sinterrupts -> mword ty32 -> M unit*)

(*val _set_Sstatus_bits : register_ref regstate register_value Sstatus -> mword ty32 -> M unit*)

(*val _set_Uinterrupts_bits : register_ref regstate register_value Uinterrupts -> mword ty32 -> M unit*)

(*val _set_Ustatus_bits : register_ref regstate register_value Ustatus -> mword ty32 -> M unit*)

(*val _set_htif_cmd_bits : register_ref regstate register_value htif_cmd -> mword ty64 -> M unit*)

(*val _get_Misa_MXL : Misa -> mword ty2*)

val _ = Define `
 ((get_Misa_MXL:Misa ->(2)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 31 : int):ii) (( 30 : int):ii)  :  2 words$word)))`;


(*val _set_Misa_MXL : register_ref regstate register_value Misa -> mword ty2 -> M unit*)

val _ = Define `
 ((set_Misa_MXL:((regstate),(register_value),(Misa))register_ref ->(2)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 31 : int):ii) (( 30 : int):ii)
             ((subrange_vec_dec v (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_MXL : Misa -> mword ty2 -> Misa*)

val _ = Define `
 ((update_Misa_MXL:Misa ->(2)words$word -> Misa) v x=
    (( v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 31 : int):ii) (( 30 : int):ii)
           ((subrange_vec_dec x (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Misa_Z : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_Z:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 25 : int):ii) (( 25 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_Z : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_Z:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 25 : int):ii) (( 25 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_Z : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_Z:Misa ->(1)words$word -> Misa) v x=
    (( v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 25 : int):ii) (( 25 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Misa_Y : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_Y:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 24 : int):ii) (( 24 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_Y : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_Y:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 24 : int):ii) (( 24 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_Y : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_Y:Misa ->(1)words$word -> Misa) v x=
    (( v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 24 : int):ii) (( 24 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Misa_X : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_X:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 23 : int):ii) (( 23 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_X : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_X:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 23 : int):ii) (( 23 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_X : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_X:Misa ->(1)words$word -> Misa) v x=
    (( v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 23 : int):ii) (( 23 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_PTE_Bits_X : PTE_Bits -> mword ty1 -> PTE_Bits*)

(*val _update_Pmpcfg_ent_X : Pmpcfg_ent -> mword ty1 -> Pmpcfg_ent*)

(*val _get_PTE_Bits_X : PTE_Bits -> mword ty1*)

(*val _get_Pmpcfg_ent_X : Pmpcfg_ent -> mword ty1*)

(*val _set_PTE_Bits_X : register_ref regstate register_value PTE_Bits -> mword ty1 -> M unit*)

(*val _set_Pmpcfg_ent_X : register_ref regstate register_value Pmpcfg_ent -> mword ty1 -> M unit*)

(*val _get_Misa_W : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_W:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 22 : int):ii) (( 22 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_W : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_W:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 22 : int):ii) (( 22 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_W : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_W:Misa ->(1)words$word -> Misa) v x=
    (( v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 22 : int):ii) (( 22 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_PTE_Bits_W : PTE_Bits -> mword ty1 -> PTE_Bits*)

(*val _update_Pmpcfg_ent_W : Pmpcfg_ent -> mword ty1 -> Pmpcfg_ent*)

(*val _get_PTE_Bits_W : PTE_Bits -> mword ty1*)

(*val _get_Pmpcfg_ent_W : Pmpcfg_ent -> mword ty1*)

(*val _set_PTE_Bits_W : register_ref regstate register_value PTE_Bits -> mword ty1 -> M unit*)

(*val _set_Pmpcfg_ent_W : register_ref regstate register_value Pmpcfg_ent -> mword ty1 -> M unit*)

(*val _get_Misa_V : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_V:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 21 : int):ii) (( 21 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_V : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_V:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 21 : int):ii) (( 21 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_V : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_V:Misa ->(1)words$word -> Misa) v x=
    (( v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 21 : int):ii) (( 21 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_PTE_Bits_V : PTE_Bits -> mword ty1 -> PTE_Bits*)

(*val _get_PTE_Bits_V : PTE_Bits -> mword ty1*)

(*val _set_PTE_Bits_V : register_ref regstate register_value PTE_Bits -> mword ty1 -> M unit*)

(*val _get_Misa_U : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_U:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 20 : int):ii) (( 20 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_U : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_U:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 20 : int):ii) (( 20 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_U : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_U:Misa ->(1)words$word -> Misa) v x=
    (( v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 20 : int):ii) (( 20 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_PTE_Bits_U : PTE_Bits -> mword ty1 -> PTE_Bits*)

(*val _get_PTE_Bits_U : PTE_Bits -> mword ty1*)

(*val _set_PTE_Bits_U : register_ref regstate register_value PTE_Bits -> mword ty1 -> M unit*)

(*val _get_Misa_T : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_T:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 19 : int):ii) (( 19 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_T : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_T:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 19 : int):ii) (( 19 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_T : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_T:Misa ->(1)words$word -> Misa) v x=
    (( v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 19 : int):ii) (( 19 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Misa_S : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_S:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 18 : int):ii) (( 18 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_S : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_S:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 18 : int):ii) (( 18 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_S : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_S:Misa ->(1)words$word -> Misa) v x=
    (( v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 18 : int):ii) (( 18 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Misa_R : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_R:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 17 : int):ii) (( 17 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_R : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_R:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 17 : int):ii) (( 17 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_R : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_R:Misa ->(1)words$word -> Misa) v x=
    (( v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 17 : int):ii) (( 17 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_PTE_Bits_R : PTE_Bits -> mword ty1 -> PTE_Bits*)

(*val _update_Pmpcfg_ent_R : Pmpcfg_ent -> mword ty1 -> Pmpcfg_ent*)

(*val _get_PTE_Bits_R : PTE_Bits -> mword ty1*)

(*val _get_Pmpcfg_ent_R : Pmpcfg_ent -> mword ty1*)

(*val _set_PTE_Bits_R : register_ref regstate register_value PTE_Bits -> mword ty1 -> M unit*)

(*val _set_Pmpcfg_ent_R : register_ref regstate register_value Pmpcfg_ent -> mword ty1 -> M unit*)

(*val _get_Misa_Q : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_Q:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 16 : int):ii) (( 16 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_Q : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_Q:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 16 : int):ii) (( 16 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_Q : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_Q:Misa ->(1)words$word -> Misa) v x=
    (( v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 16 : int):ii) (( 16 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Misa_P : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_P:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 15 : int):ii) (( 15 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_P : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_P:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 15 : int):ii) (( 15 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_P : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_P:Misa ->(1)words$word -> Misa) v x=
    (( v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 15 : int):ii) (( 15 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Misa_O : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_O:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_O : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_O:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 14 : int):ii) (( 14 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_O : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_O:Misa ->(1)words$word -> Misa) v x=
    (( v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 14 : int):ii) (( 14 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Misa_N : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_N:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 13 : int):ii) (( 13 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_N : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_N:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 13 : int):ii) (( 13 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_N : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_N:Misa ->(1)words$word -> Misa) v x=
    (( v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 13 : int):ii) (( 13 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Misa_M : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_M:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_M : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_M:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 12 : int):ii) (( 12 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_M : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_M:Misa ->(1)words$word -> Misa) v x=
    (( v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 12 : int):ii) (( 12 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Misa_L : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_L:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 11 : int):ii) (( 11 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_L : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_L:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 11 : int):ii) (( 11 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_L : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_L:Misa ->(1)words$word -> Misa) v x=
    (( v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 11 : int):ii) (( 11 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_Pmpcfg_ent_L : Pmpcfg_ent -> mword ty1 -> Pmpcfg_ent*)

(*val _get_Pmpcfg_ent_L : Pmpcfg_ent -> mword ty1*)

(*val _set_Pmpcfg_ent_L : register_ref regstate register_value Pmpcfg_ent -> mword ty1 -> M unit*)

(*val _get_Misa_K : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_K:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 10 : int):ii) (( 10 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_K : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_K:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 10 : int):ii) (( 10 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_K : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_K:Misa ->(1)words$word -> Misa) v x=
    (( v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 10 : int):ii) (( 10 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Misa_J : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_J:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 9 : int):ii) (( 9 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_J : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_J:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 9 : int):ii) (( 9 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_J : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_J:Misa ->(1)words$word -> Misa) v x=
    (( v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 9 : int):ii) (( 9 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Misa_I : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_I:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 8 : int):ii) (( 8 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_I : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_I:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 8 : int):ii) (( 8 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_I : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_I:Misa ->(1)words$word -> Misa) v x=
    (( v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 8 : int):ii) (( 8 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Misa_H : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_H:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 7 : int):ii) (( 7 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_H : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_H:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 7 : int):ii) (( 7 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_H : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_H:Misa ->(1)words$word -> Misa) v x=
    (( v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 7 : int):ii) (( 7 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Misa_G : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_G:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 6 : int):ii) (( 6 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_G : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_G:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 6 : int):ii) (( 6 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_G : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_G:Misa ->(1)words$word -> Misa) v x=
    (( v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 6 : int):ii) (( 6 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_PTE_Bits_G : PTE_Bits -> mword ty1 -> PTE_Bits*)

(*val _get_PTE_Bits_G : PTE_Bits -> mword ty1*)

(*val _set_PTE_Bits_G : register_ref regstate register_value PTE_Bits -> mword ty1 -> M unit*)

(*val _get_Misa_F : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_F:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_F : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_F:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_F : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_F:Misa ->(1)words$word -> Misa) v x=
    (( v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Misa_E : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_E:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 4 : int):ii) (( 4 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_E : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_E:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_E : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_E:Misa ->(1)words$word -> Misa) v x=
    (( v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Misa_D : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_D:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 3 : int):ii) (( 3 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_D : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_D:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 3 : int):ii) (( 3 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_D : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_D:Misa ->(1)words$word -> Misa) v x=
    (( v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 3 : int):ii) (( 3 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_PTE_Bits_D : PTE_Bits -> mword ty1 -> PTE_Bits*)

(*val _get_PTE_Bits_D : PTE_Bits -> mword ty1*)

(*val _set_PTE_Bits_D : register_ref regstate register_value PTE_Bits -> mword ty1 -> M unit*)

(*val _get_Misa_C : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_C:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_C : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_C:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 2 : int):ii) (( 2 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_C : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_C:Misa ->(1)words$word -> Misa) v x=
    (( v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 2 : int):ii) (( 2 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Misa_B : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_B:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_B : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_B:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_B : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_B:Misa ->(1)words$word -> Misa) v x=
    (( v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Misa_A : Misa -> mword ty1*)

val _ = Define `
 ((get_Misa_A:Misa ->(1)words$word) v=  ((subrange_vec_dec v.Misa_Misa_chunk_0 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)))`;


(*val _set_Misa_A : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Misa_A:((regstate),(register_value),(Misa))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec r.Misa_Misa_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Misa_A : Misa -> mword ty1 -> Misa*)

val _ = Define `
 ((update_Misa_A:Misa ->(1)words$word -> Misa) v x=
    (( v with<|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec v.Misa_Misa_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_PTE_Bits_A : PTE_Bits -> mword ty1 -> PTE_Bits*)

(*val _update_Pmpcfg_ent_A : Pmpcfg_ent -> mword ty2 -> Pmpcfg_ent*)

(*val _get_PTE_Bits_A : PTE_Bits -> mword ty1*)

(*val _get_Pmpcfg_ent_A : Pmpcfg_ent -> mword ty2*)

(*val _set_PTE_Bits_A : register_ref regstate register_value PTE_Bits -> mword ty1 -> M unit*)

(*val _set_Pmpcfg_ent_A : register_ref regstate register_value Pmpcfg_ent -> mword ty2 -> M unit*)

(*val ext_veto_disable_C : unit -> M bool*)

(*val legalize_misa : Misa -> mword ty32 -> M Misa*)

val _ = Define `
 ((ext_veto_disable_C:unit ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$returnS F))`;


val _ = Define `
 ((legalize_misa:Misa ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((Misa),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (m : Misa) (v : xlenbits)=
    (if ((sys_enable_writable_misa () )) then
     let v = (Mk_Misa v) in sail2_state_monad$bindS
     (sail2_state$or_boolS
       (sail2_state$and_boolS (sail2_state_monad$returnS (((((get_Misa_C v  :  1 words$word)) = (0b0w :  1 words$word)))))
          (sail2_state$or_boolS
             ( sail2_state_monad$bindS(sail2_state_monad$read_regS nextPC_ref  : ( 32 words$word) M) (\ (w__0 :  32 words$word) . 
              sail2_state_monad$returnS (((((access_vec_dec w__0 (( 1 : int):ii))) = B1))))) ((ext_veto_disable_C () ))))
       (sail2_state_monad$returnS ((~ ((sys_enable_rvc () )))))) (\ (w__4 : bool) . 
     let m = (if w__4 then m else update_Misa_C m ((get_Misa_C v  :  1 words$word))) in
     sail2_state_monad$returnS (if (((((~ ((sys_enable_fdext () )))) \/ ((((((((get_Misa_D v  :  1 words$word)) = (0b1w :  1 words$word)))) /\ (((((get_Misa_F v  :  1 words$word)) = (0b0w :  1 words$word)))))))))) then
               m
             else
               update_Misa_D ((update_Misa_F m ((get_Misa_F v  :  1 words$word))))
                 ((get_Misa_D v  :  1 words$word))))
   else sail2_state_monad$returnS m))`;


(*val haveAtomics : unit -> M bool*)

val _ = Define `
 ((haveAtomics:unit ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS misa_ref) (\ (w__0 : Misa) . 
   sail2_state_monad$returnS (((((get_Misa_A w__0  :  1 words$word)) = (0b1w :  1 words$word)))))))`;


(*val haveRVC : unit -> M bool*)

val _ = Define `
 ((haveRVC:unit ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS misa_ref) (\ (w__0 : Misa) . 
   sail2_state_monad$returnS (((((get_Misa_C w__0  :  1 words$word)) = (0b1w :  1 words$word)))))))`;


(*val haveMulDiv : unit -> M bool*)

val _ = Define `
 ((haveMulDiv:unit ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS misa_ref) (\ (w__0 : Misa) . 
   sail2_state_monad$returnS (((((get_Misa_M w__0  :  1 words$word)) = (0b1w :  1 words$word)))))))`;


(*val haveSupMode : unit -> M bool*)

val _ = Define `
 ((haveSupMode:unit ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS misa_ref) (\ (w__0 : Misa) . 
   sail2_state_monad$returnS (((((get_Misa_S w__0  :  1 words$word)) = (0b1w :  1 words$word)))))))`;


(*val haveUsrMode : unit -> M bool*)

val _ = Define `
 ((haveUsrMode:unit ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS misa_ref) (\ (w__0 : Misa) . 
   sail2_state_monad$returnS (((((get_Misa_U w__0  :  1 words$word)) = (0b1w :  1 words$word)))))))`;


(*val haveNExt : unit -> M bool*)

val _ = Define `
 ((haveNExt:unit ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS misa_ref) (\ (w__0 : Misa) . 
   sail2_state_monad$returnS (((((get_Misa_N w__0  :  1 words$word)) = (0b1w :  1 words$word)))))))`;


(*val Mk_Mstatush : mword ty32 -> Mstatush*)

val _ = Define `
 ((Mk_Mstatush:(32)words$word -> Mstatush) v=
    (<| Mstatush_Mstatush_chunk_0 := ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) |>))`;


val _ = Define `
 ((get_Mstatush_bits:Mstatush ->(32)words$word) v=
    ((subrange_vec_dec v.Mstatush_Mstatush_chunk_0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)))`;


val _ = Define `
 ((set_Mstatush_bits:((regstate),(register_value),(Mstatush))register_ref ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Mstatush_Mstatush_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatush_Mstatush_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Mstatush_bits:Mstatush ->(32)words$word -> Mstatush) v x=
    (( v with<|
     Mstatush_Mstatush_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatush_Mstatush_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Mstatush_MBE : Mstatush -> mword ty1*)

val _ = Define `
 ((get_Mstatush_MBE:Mstatush ->(1)words$word) v=  ((subrange_vec_dec v.Mstatush_Mstatush_chunk_0 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)))`;


(*val _set_Mstatush_MBE : register_ref regstate register_value Mstatush -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Mstatush_MBE:((regstate),(register_value),(Mstatush))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Mstatush_Mstatush_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatush_Mstatush_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatush_MBE : Mstatush -> mword ty1 -> Mstatush*)

val _ = Define `
 ((update_Mstatush_MBE:Mstatush ->(1)words$word -> Mstatush) v x=
    (( v with<|
     Mstatush_Mstatush_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatush_Mstatush_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Mstatush_SBE : Mstatush -> mword ty1*)

val _ = Define `
 ((get_Mstatush_SBE:Mstatush ->(1)words$word) v=  ((subrange_vec_dec v.Mstatush_Mstatush_chunk_0 (( 4 : int):ii) (( 4 : int):ii)  :  1 words$word)))`;


(*val _set_Mstatush_SBE : register_ref regstate register_value Mstatush -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Mstatush_SBE:((regstate),(register_value),(Mstatush))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Mstatush_Mstatush_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatush_Mstatush_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatush_SBE : Mstatush -> mword ty1 -> Mstatush*)

val _ = Define `
 ((update_Mstatush_SBE:Mstatush ->(1)words$word -> Mstatush) v x=
    (( v with<|
     Mstatush_Mstatush_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatush_Mstatush_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val Mk_Mstatus : mword ty32 -> Mstatus*)

val _ = Define `
 ((Mk_Mstatus:(32)words$word -> Mstatus) v=
    (<| Mstatus_Mstatus_chunk_0 := ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) |>))`;


val _ = Define `
 ((get_Mstatus_bits:Mstatus ->(32)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)))`;


val _ = Define `
 ((set_Mstatus_bits:((regstate),(register_value),(Mstatus))register_ref ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Mstatus_bits:Mstatus ->(32)words$word -> Mstatus) v x=
    (( v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Mstatus_SD : Mstatus -> mword ty1*)

val _ = Define `
 ((get_Mstatus_SD:Mstatus ->(1)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 31 : int):ii) (( 31 : int):ii)  :  1 words$word)))`;


(*val _set_Mstatus_SD : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Mstatus_SD:((regstate),(register_value),(Mstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 31 : int):ii) (( 31 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_SD : Mstatus -> mword ty1 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_SD:Mstatus ->(1)words$word -> Mstatus) v x=
    (( v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 31 : int):ii) (( 31 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_Sstatus_SD : Sstatus -> mword ty1 -> Sstatus*)

(*val _get_Sstatus_SD : Sstatus -> mword ty1*)

(*val _set_Sstatus_SD : register_ref regstate register_value Sstatus -> mword ty1 -> M unit*)

(*val _get_Mstatus_TSR : Mstatus -> mword ty1*)

val _ = Define `
 ((get_Mstatus_TSR:Mstatus ->(1)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 22 : int):ii) (( 22 : int):ii)  :  1 words$word)))`;


(*val _set_Mstatus_TSR : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Mstatus_TSR:((regstate),(register_value),(Mstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 22 : int):ii) (( 22 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_TSR : Mstatus -> mword ty1 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_TSR:Mstatus ->(1)words$word -> Mstatus) v x=
    (( v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 22 : int):ii) (( 22 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Mstatus_TW : Mstatus -> mword ty1*)

val _ = Define `
 ((get_Mstatus_TW:Mstatus ->(1)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 21 : int):ii) (( 21 : int):ii)  :  1 words$word)))`;


(*val _set_Mstatus_TW : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Mstatus_TW:((regstate),(register_value),(Mstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 21 : int):ii) (( 21 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_TW : Mstatus -> mword ty1 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_TW:Mstatus ->(1)words$word -> Mstatus) v x=
    (( v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 21 : int):ii) (( 21 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Mstatus_TVM : Mstatus -> mword ty1*)

val _ = Define `
 ((get_Mstatus_TVM:Mstatus ->(1)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 20 : int):ii) (( 20 : int):ii)  :  1 words$word)))`;


(*val _set_Mstatus_TVM : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Mstatus_TVM:((regstate),(register_value),(Mstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 20 : int):ii) (( 20 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_TVM : Mstatus -> mword ty1 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_TVM:Mstatus ->(1)words$word -> Mstatus) v x=
    (( v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 20 : int):ii) (( 20 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Mstatus_MXR : Mstatus -> mword ty1*)

val _ = Define `
 ((get_Mstatus_MXR:Mstatus ->(1)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 19 : int):ii) (( 19 : int):ii)  :  1 words$word)))`;


(*val _set_Mstatus_MXR : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Mstatus_MXR:((regstate),(register_value),(Mstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 19 : int):ii) (( 19 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_MXR : Mstatus -> mword ty1 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_MXR:Mstatus ->(1)words$word -> Mstatus) v x=
    (( v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 19 : int):ii) (( 19 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_Sstatus_MXR : Sstatus -> mword ty1 -> Sstatus*)

(*val _get_Sstatus_MXR : Sstatus -> mword ty1*)

(*val _set_Sstatus_MXR : register_ref regstate register_value Sstatus -> mword ty1 -> M unit*)

(*val _get_Mstatus_SUM : Mstatus -> mword ty1*)

val _ = Define `
 ((get_Mstatus_SUM:Mstatus ->(1)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 18 : int):ii) (( 18 : int):ii)  :  1 words$word)))`;


(*val _set_Mstatus_SUM : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Mstatus_SUM:((regstate),(register_value),(Mstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 18 : int):ii) (( 18 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_SUM : Mstatus -> mword ty1 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_SUM:Mstatus ->(1)words$word -> Mstatus) v x=
    (( v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 18 : int):ii) (( 18 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_Sstatus_SUM : Sstatus -> mword ty1 -> Sstatus*)

(*val _get_Sstatus_SUM : Sstatus -> mword ty1*)

(*val _set_Sstatus_SUM : register_ref regstate register_value Sstatus -> mword ty1 -> M unit*)

(*val _get_Mstatus_MPRV : Mstatus -> mword ty1*)

val _ = Define `
 ((get_Mstatus_MPRV:Mstatus ->(1)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 17 : int):ii) (( 17 : int):ii)  :  1 words$word)))`;


(*val _set_Mstatus_MPRV : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Mstatus_MPRV:((regstate),(register_value),(Mstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 17 : int):ii) (( 17 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_MPRV : Mstatus -> mword ty1 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_MPRV:Mstatus ->(1)words$word -> Mstatus) v x=
    (( v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 17 : int):ii) (( 17 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Mstatus_XS : Mstatus -> mword ty2*)

val _ = Define `
 ((get_Mstatus_XS:Mstatus ->(2)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 16 : int):ii) (( 15 : int):ii)  :  2 words$word)))`;


(*val _set_Mstatus_XS : register_ref regstate register_value Mstatus -> mword ty2 -> M unit*)

val _ = Define `
 ((set_Mstatus_XS:((regstate),(register_value),(Mstatus))register_ref ->(2)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 16 : int):ii) (( 15 : int):ii)
             ((subrange_vec_dec v (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_XS : Mstatus -> mword ty2 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_XS:Mstatus ->(2)words$word -> Mstatus) v x=
    (( v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 16 : int):ii) (( 15 : int):ii)
           ((subrange_vec_dec x (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
          :  32 words$word)) |>)))`;


(*val _update_Sstatus_XS : Sstatus -> mword ty2 -> Sstatus*)

(*val _get_Sstatus_XS : Sstatus -> mword ty2*)

(*val _set_Sstatus_XS : register_ref regstate register_value Sstatus -> mword ty2 -> M unit*)

(*val _get_Mstatus_FS : Mstatus -> mword ty2*)

val _ = Define `
 ((get_Mstatus_FS:Mstatus ->(2)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 14 : int):ii) (( 13 : int):ii)  :  2 words$word)))`;


(*val _set_Mstatus_FS : register_ref regstate register_value Mstatus -> mword ty2 -> M unit*)

val _ = Define `
 ((set_Mstatus_FS:((regstate),(register_value),(Mstatus))register_ref ->(2)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 14 : int):ii) (( 13 : int):ii)
             ((subrange_vec_dec v (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_FS : Mstatus -> mword ty2 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_FS:Mstatus ->(2)words$word -> Mstatus) v x=
    (( v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 14 : int):ii) (( 13 : int):ii)
           ((subrange_vec_dec x (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
          :  32 words$word)) |>)))`;


(*val _update_Sstatus_FS : Sstatus -> mword ty2 -> Sstatus*)

(*val _get_Sstatus_FS : Sstatus -> mword ty2*)

(*val _set_Sstatus_FS : register_ref regstate register_value Sstatus -> mword ty2 -> M unit*)

(*val _get_Mstatus_MPP : Mstatus -> mword ty2*)

val _ = Define `
 ((get_Mstatus_MPP:Mstatus ->(2)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 12 : int):ii) (( 11 : int):ii)  :  2 words$word)))`;


(*val _set_Mstatus_MPP : register_ref regstate register_value Mstatus -> mword ty2 -> M unit*)

val _ = Define `
 ((set_Mstatus_MPP:((regstate),(register_value),(Mstatus))register_ref ->(2)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 12 : int):ii) (( 11 : int):ii)
             ((subrange_vec_dec v (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_MPP : Mstatus -> mword ty2 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_MPP:Mstatus ->(2)words$word -> Mstatus) v x=
    (( v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 12 : int):ii) (( 11 : int):ii)
           ((subrange_vec_dec x (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Mstatus_SPP : Mstatus -> mword ty1*)

val _ = Define `
 ((get_Mstatus_SPP:Mstatus ->(1)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 8 : int):ii) (( 8 : int):ii)  :  1 words$word)))`;


(*val _set_Mstatus_SPP : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Mstatus_SPP:((regstate),(register_value),(Mstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 8 : int):ii) (( 8 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_SPP : Mstatus -> mword ty1 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_SPP:Mstatus ->(1)words$word -> Mstatus) v x=
    (( v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 8 : int):ii) (( 8 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_Sstatus_SPP : Sstatus -> mword ty1 -> Sstatus*)

(*val _get_Sstatus_SPP : Sstatus -> mword ty1*)

(*val _set_Sstatus_SPP : register_ref regstate register_value Sstatus -> mword ty1 -> M unit*)

(*val _get_Mstatus_MPIE : Mstatus -> mword ty1*)

val _ = Define `
 ((get_Mstatus_MPIE:Mstatus ->(1)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 7 : int):ii) (( 7 : int):ii)  :  1 words$word)))`;


(*val _set_Mstatus_MPIE : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Mstatus_MPIE:((regstate),(register_value),(Mstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 7 : int):ii) (( 7 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_MPIE : Mstatus -> mword ty1 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_MPIE:Mstatus ->(1)words$word -> Mstatus) v x=
    (( v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 7 : int):ii) (( 7 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Mstatus_SPIE : Mstatus -> mword ty1*)

val _ = Define `
 ((get_Mstatus_SPIE:Mstatus ->(1)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)))`;


(*val _set_Mstatus_SPIE : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Mstatus_SPIE:((regstate),(register_value),(Mstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_SPIE : Mstatus -> mword ty1 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_SPIE:Mstatus ->(1)words$word -> Mstatus) v x=
    (( v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_Sstatus_SPIE : Sstatus -> mword ty1 -> Sstatus*)

(*val _get_Sstatus_SPIE : Sstatus -> mword ty1*)

(*val _set_Sstatus_SPIE : register_ref regstate register_value Sstatus -> mword ty1 -> M unit*)

(*val _get_Mstatus_UPIE : Mstatus -> mword ty1*)

val _ = Define `
 ((get_Mstatus_UPIE:Mstatus ->(1)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 4 : int):ii) (( 4 : int):ii)  :  1 words$word)))`;


(*val _set_Mstatus_UPIE : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Mstatus_UPIE:((regstate),(register_value),(Mstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_UPIE : Mstatus -> mword ty1 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_UPIE:Mstatus ->(1)words$word -> Mstatus) v x=
    (( v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_Sstatus_UPIE : Sstatus -> mword ty1 -> Sstatus*)

(*val _update_Ustatus_UPIE : Ustatus -> mword ty1 -> Ustatus*)

(*val _get_Sstatus_UPIE : Sstatus -> mword ty1*)

(*val _get_Ustatus_UPIE : Ustatus -> mword ty1*)

(*val _set_Sstatus_UPIE : register_ref regstate register_value Sstatus -> mword ty1 -> M unit*)

(*val _set_Ustatus_UPIE : register_ref regstate register_value Ustatus -> mword ty1 -> M unit*)

(*val _get_Mstatus_MIE : Mstatus -> mword ty1*)

val _ = Define `
 ((get_Mstatus_MIE:Mstatus ->(1)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 3 : int):ii) (( 3 : int):ii)  :  1 words$word)))`;


(*val _set_Mstatus_MIE : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Mstatus_MIE:((regstate),(register_value),(Mstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 3 : int):ii) (( 3 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_MIE : Mstatus -> mword ty1 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_MIE:Mstatus ->(1)words$word -> Mstatus) v x=
    (( v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 3 : int):ii) (( 3 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Mstatus_SIE : Mstatus -> mword ty1*)

val _ = Define `
 ((get_Mstatus_SIE:Mstatus ->(1)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)))`;


(*val _set_Mstatus_SIE : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Mstatus_SIE:((regstate),(register_value),(Mstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_SIE : Mstatus -> mword ty1 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_SIE:Mstatus ->(1)words$word -> Mstatus) v x=
    (( v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_Sstatus_SIE : Sstatus -> mword ty1 -> Sstatus*)

(*val _get_Sstatus_SIE : Sstatus -> mword ty1*)

(*val _set_Sstatus_SIE : register_ref regstate register_value Sstatus -> mword ty1 -> M unit*)

(*val _get_Mstatus_UIE : Mstatus -> mword ty1*)

val _ = Define `
 ((get_Mstatus_UIE:Mstatus ->(1)words$word) v=  ((subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)))`;


(*val _set_Mstatus_UIE : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Mstatus_UIE:((regstate),(register_value),(Mstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Mstatus_Mstatus_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mstatus_UIE : Mstatus -> mword ty1 -> Mstatus*)

val _ = Define `
 ((update_Mstatus_UIE:Mstatus ->(1)words$word -> Mstatus) v x=
    (( v with<|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Mstatus_Mstatus_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_Sstatus_UIE : Sstatus -> mword ty1 -> Sstatus*)

(*val _update_Ustatus_UIE : Ustatus -> mword ty1 -> Ustatus*)

(*val _get_Sstatus_UIE : Sstatus -> mword ty1*)

(*val _get_Ustatus_UIE : Ustatus -> mword ty1*)

(*val _set_Sstatus_UIE : register_ref regstate register_value Sstatus -> mword ty1 -> M unit*)

(*val _set_Ustatus_UIE : register_ref regstate register_value Ustatus -> mword ty1 -> M unit*)

(*val effectivePrivilege : AccessType unit -> Mstatus -> Privilege -> M Privilege*)

val _ = Define `
 ((effectivePrivilege:(ext_access_type)AccessType -> Mstatus -> Privilege ->(regstate)sail2_state_monad$sequential_state ->(((Privilege),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (t : ext_access_type AccessType) (m : Mstatus) (priv : Privilege)=
    (if ((((((t <> (Execute () )))) /\ (((((get_Mstatus_MPRV m  :  1 words$word)) = (0b1w :  1 words$word))))))) then
     privLevel_of_bits ((get_Mstatus_MPP m  :  2 words$word))
   else sail2_state_monad$returnS priv))`;


(*val get_mstatus_SXL : Mstatus -> mword ty2*)

val _ = Define `
 ((get_mstatus_SXL:Mstatus ->(2)words$word) m=  ((arch_to_bits RV32  :  2 words$word)))`;


(*val set_mstatus_SXL : Mstatus -> mword ty2 -> Mstatus*)

val _ = Define `
 ((set_mstatus_SXL:Mstatus ->(2)words$word -> Mstatus) (m : Mstatus) (a : arch_xlen)=  m)`;


(*val get_mstatus_UXL : Mstatus -> mword ty2*)

val _ = Define `
 ((get_mstatus_UXL:Mstatus ->(2)words$word) m=  ((arch_to_bits RV32  :  2 words$word)))`;


(*val set_mstatus_UXL : Mstatus -> mword ty2 -> Mstatus*)

val _ = Define `
 ((set_mstatus_UXL:Mstatus ->(2)words$word -> Mstatus) (m : Mstatus) (a : arch_xlen)=  m)`;


(*val legalize_mstatus : Mstatus -> mword ty32 -> M Mstatus*)

val _ = Define `
 ((legalize_mstatus:Mstatus ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((Mstatus),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (o1 : Mstatus) (v : xlenbits)=
    (let (m : Mstatus) =
     (Mk_Mstatus
       ((EXTZ (( 32 : int):ii)
           ((concat_vec ((subrange_vec_dec v (( 22 : int):ii) (( 11 : int):ii)  :  12 words$word))
               ((concat_vec (0b00w :  2 words$word)
                   ((concat_vec ((subrange_vec_dec v (( 8 : int):ii) (( 7 : int):ii)  :  2 words$word))
                       ((concat_vec (0b0w :  1 words$word)
                           ((concat_vec ((subrange_vec_dec v (( 5 : int):ii) (( 3 : int):ii)  :  3 words$word))
                               ((concat_vec (0b0w :  1 words$word)
                                   ((subrange_vec_dec v (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
                                  :  3 words$word))
                              :  6 words$word))
                          :  7 words$word))
                      :  9 words$word))
                  :  11 words$word))
              :  23 words$word))
          :  32 words$word))) in
   let m = (update_Mstatus_XS m ((extStatus_to_bits Off  :  2 words$word))) in sail2_state_monad$bindS
   (sail2_state$or_boolS
     ( sail2_state_monad$bindS(extStatus_of_bits ((get_Mstatus_FS m  :  2 words$word))) (\ (w__0 : ExtStatus) . 
      sail2_state_monad$returnS (((w__0 = Dirty)))))
     ( sail2_state_monad$bindS(extStatus_of_bits ((get_Mstatus_XS m  :  2 words$word))) (\ (w__1 : ExtStatus) . 
      sail2_state_monad$returnS (((w__1 = Dirty)))))) (\ dirty . 
   let m = (update_Mstatus_SD m ((bool_to_bits dirty  :  1 words$word))) in
   let m = (set_mstatus_SXL m ((get_mstatus_SXL o1  :  2 words$word))) in
   let m = (set_mstatus_UXL m ((get_mstatus_UXL o1  :  2 words$word))) in
   let m = m in sail2_state_monad$bindS
   (haveNExt () ) (\ (w__2 : bool) . 
   let m =
     (if ((~ w__2)) then
       let m = (update_Mstatus_UPIE m (0b0w :  1 words$word)) in
       update_Mstatus_UIE m (0b0w :  1 words$word)
     else m) in sail2_state_monad$bindS
   (haveUsrMode () ) (\ (w__3 : bool) . 
   sail2_state_monad$returnS (if ((~ w__3)) then update_Mstatus_MPRV m (0b0w :  1 words$word)
           else m))))))`;


(*val cur_Architecture : unit -> M Architecture*)

val _ = Define `
 ((cur_Architecture:unit ->(regstate)sail2_state_monad$sequential_state ->(((Architecture),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__0 : Privilege) .  sail2_state_monad$bindS
   (case w__0 of
     Machine => sail2_state_monad$bindS
      (sail2_state_monad$read_regS misa_ref) (\ (w__1 : Misa) .  sail2_state_monad$returnS ((get_Misa_MXL w__1  :  2 words$word)))
   | Supervisor => sail2_state_monad$bindS
      (sail2_state_monad$read_regS mstatus_ref) (\ (w__2 : Mstatus) .  sail2_state_monad$returnS ((get_mstatus_SXL w__2  :  2 words$word)))
   | User => sail2_state_monad$bindS
      (sail2_state_monad$read_regS mstatus_ref) (\ (w__3 : Mstatus) .  sail2_state_monad$returnS ((get_mstatus_UXL w__3  :  2 words$word)))
   ) (\ (a : arch_xlen) . 
   (case ((architecture a)) of
     SOME (a) => sail2_state_monad$returnS a
   | NONE => internal_error "Invalid current architecture"
   )))))`;


(*val in32BitMode : unit -> M bool*)

val _ = Define `
 ((in32BitMode:unit ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS (cur_Architecture () ) (\ (w__0 : Architecture) .  sail2_state_monad$returnS (((w__0 = RV32))))))`;


(*val haveFExt : unit -> M bool*)

val _ = Define `
 ((haveFExt:unit ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =
    (sail2_state$and_boolS
     ( sail2_state_monad$bindS(sail2_state_monad$read_regS misa_ref) (\ (w__0 : Misa) . 
      sail2_state_monad$returnS (((((get_Misa_F w__0  :  1 words$word)) = (0b1w :  1 words$word))))))
     ( sail2_state_monad$bindS(sail2_state_monad$read_regS mstatus_ref) (\ (w__1 : Mstatus) . 
      sail2_state_monad$returnS (((((get_Mstatus_FS w__1  :  2 words$word)) <> (0b00w :  2 words$word))))))))`;


(*val haveDExt : unit -> M bool*)

val _ = Define `
 ((haveDExt:unit ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =
    (sail2_state$and_boolS
     ( sail2_state_monad$bindS(sail2_state_monad$read_regS misa_ref) (\ (w__0 : Misa) . 
      sail2_state_monad$returnS (((((get_Misa_D w__0  :  1 words$word)) = (0b1w :  1 words$word))))))
     ( sail2_state_monad$bindS(sail2_state_monad$read_regS mstatus_ref) (\ (w__1 : Mstatus) . 
      sail2_state_monad$returnS (((((get_Mstatus_FS w__1  :  2 words$word)) <> (0b00w :  2 words$word))))))))`;


(*val Mk_Minterrupts : mword ty32 -> Minterrupts*)

val _ = Define `
 ((Mk_Minterrupts:(32)words$word -> Minterrupts) v=
    (<| Minterrupts_Minterrupts_chunk_0 := ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) |>))`;


val _ = Define `
 ((get_Minterrupts_bits:Minterrupts ->(32)words$word) v=
    ((subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)))`;


val _ = Define `
 ((set_Minterrupts_bits:((regstate),(register_value),(Minterrupts))register_ref ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Minterrupts_Minterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Minterrupts_Minterrupts_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Minterrupts_bits:Minterrupts ->(32)words$word -> Minterrupts) v x=
    (( v with<|
     Minterrupts_Minterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Minterrupts_MEI : Minterrupts -> mword ty1*)

val _ = Define `
 ((get_Minterrupts_MEI:Minterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 11 : int):ii) (( 11 : int):ii)  :  1 words$word)))`;


(*val _set_Minterrupts_MEI : register_ref regstate register_value Minterrupts -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Minterrupts_MEI:((regstate),(register_value),(Minterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Minterrupts_Minterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Minterrupts_Minterrupts_chunk_0 (( 11 : int):ii) (( 11 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Minterrupts_MEI : Minterrupts -> mword ty1 -> Minterrupts*)

val _ = Define `
 ((update_Minterrupts_MEI:Minterrupts ->(1)words$word -> Minterrupts) v x=
    (( v with<|
     Minterrupts_Minterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 11 : int):ii) (( 11 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Minterrupts_SEI : Minterrupts -> mword ty1*)

val _ = Define `
 ((get_Minterrupts_SEI:Minterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 9 : int):ii) (( 9 : int):ii)  :  1 words$word)))`;


(*val _set_Minterrupts_SEI : register_ref regstate register_value Minterrupts -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Minterrupts_SEI:((regstate),(register_value),(Minterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Minterrupts_Minterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Minterrupts_Minterrupts_chunk_0 (( 9 : int):ii) (( 9 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Minterrupts_SEI : Minterrupts -> mword ty1 -> Minterrupts*)

val _ = Define `
 ((update_Minterrupts_SEI:Minterrupts ->(1)words$word -> Minterrupts) v x=
    (( v with<|
     Minterrupts_Minterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 9 : int):ii) (( 9 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_Sinterrupts_SEI : Sinterrupts -> mword ty1 -> Sinterrupts*)

(*val _get_Sinterrupts_SEI : Sinterrupts -> mword ty1*)

(*val _set_Sinterrupts_SEI : register_ref regstate register_value Sinterrupts -> mword ty1 -> M unit*)

(*val _get_Minterrupts_UEI : Minterrupts -> mword ty1*)

val _ = Define `
 ((get_Minterrupts_UEI:Minterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 8 : int):ii) (( 8 : int):ii)  :  1 words$word)))`;


(*val _set_Minterrupts_UEI : register_ref regstate register_value Minterrupts -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Minterrupts_UEI:((regstate),(register_value),(Minterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Minterrupts_Minterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Minterrupts_Minterrupts_chunk_0 (( 8 : int):ii) (( 8 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Minterrupts_UEI : Minterrupts -> mword ty1 -> Minterrupts*)

val _ = Define `
 ((update_Minterrupts_UEI:Minterrupts ->(1)words$word -> Minterrupts) v x=
    (( v with<|
     Minterrupts_Minterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 8 : int):ii) (( 8 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_Sinterrupts_UEI : Sinterrupts -> mword ty1 -> Sinterrupts*)

(*val _update_Uinterrupts_UEI : Uinterrupts -> mword ty1 -> Uinterrupts*)

(*val _get_Sinterrupts_UEI : Sinterrupts -> mword ty1*)

(*val _get_Uinterrupts_UEI : Uinterrupts -> mword ty1*)

(*val _set_Sinterrupts_UEI : register_ref regstate register_value Sinterrupts -> mword ty1 -> M unit*)

(*val _set_Uinterrupts_UEI : register_ref regstate register_value Uinterrupts -> mword ty1 -> M unit*)

(*val _get_Minterrupts_MTI : Minterrupts -> mword ty1*)

val _ = Define `
 ((get_Minterrupts_MTI:Minterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 7 : int):ii) (( 7 : int):ii)  :  1 words$word)))`;


(*val _set_Minterrupts_MTI : register_ref regstate register_value Minterrupts -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Minterrupts_MTI:((regstate),(register_value),(Minterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Minterrupts_Minterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Minterrupts_Minterrupts_chunk_0 (( 7 : int):ii) (( 7 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Minterrupts_MTI : Minterrupts -> mword ty1 -> Minterrupts*)

val _ = Define `
 ((update_Minterrupts_MTI:Minterrupts ->(1)words$word -> Minterrupts) v x=
    (( v with<|
     Minterrupts_Minterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 7 : int):ii) (( 7 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Minterrupts_STI : Minterrupts -> mword ty1*)

val _ = Define `
 ((get_Minterrupts_STI:Minterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)))`;


(*val _set_Minterrupts_STI : register_ref regstate register_value Minterrupts -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Minterrupts_STI:((regstate),(register_value),(Minterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Minterrupts_Minterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Minterrupts_Minterrupts_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Minterrupts_STI : Minterrupts -> mword ty1 -> Minterrupts*)

val _ = Define `
 ((update_Minterrupts_STI:Minterrupts ->(1)words$word -> Minterrupts) v x=
    (( v with<|
     Minterrupts_Minterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_Sinterrupts_STI : Sinterrupts -> mword ty1 -> Sinterrupts*)

(*val _get_Sinterrupts_STI : Sinterrupts -> mword ty1*)

(*val _set_Sinterrupts_STI : register_ref regstate register_value Sinterrupts -> mword ty1 -> M unit*)

(*val _get_Minterrupts_UTI : Minterrupts -> mword ty1*)

val _ = Define `
 ((get_Minterrupts_UTI:Minterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 4 : int):ii) (( 4 : int):ii)  :  1 words$word)))`;


(*val _set_Minterrupts_UTI : register_ref regstate register_value Minterrupts -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Minterrupts_UTI:((regstate),(register_value),(Minterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Minterrupts_Minterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Minterrupts_Minterrupts_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Minterrupts_UTI : Minterrupts -> mword ty1 -> Minterrupts*)

val _ = Define `
 ((update_Minterrupts_UTI:Minterrupts ->(1)words$word -> Minterrupts) v x=
    (( v with<|
     Minterrupts_Minterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_Sinterrupts_UTI : Sinterrupts -> mword ty1 -> Sinterrupts*)

(*val _update_Uinterrupts_UTI : Uinterrupts -> mword ty1 -> Uinterrupts*)

(*val _get_Sinterrupts_UTI : Sinterrupts -> mword ty1*)

(*val _get_Uinterrupts_UTI : Uinterrupts -> mword ty1*)

(*val _set_Sinterrupts_UTI : register_ref regstate register_value Sinterrupts -> mword ty1 -> M unit*)

(*val _set_Uinterrupts_UTI : register_ref regstate register_value Uinterrupts -> mword ty1 -> M unit*)

(*val _get_Minterrupts_MSI : Minterrupts -> mword ty1*)

val _ = Define `
 ((get_Minterrupts_MSI:Minterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 3 : int):ii) (( 3 : int):ii)  :  1 words$word)))`;


(*val _set_Minterrupts_MSI : register_ref regstate register_value Minterrupts -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Minterrupts_MSI:((regstate),(register_value),(Minterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Minterrupts_Minterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Minterrupts_Minterrupts_chunk_0 (( 3 : int):ii) (( 3 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Minterrupts_MSI : Minterrupts -> mword ty1 -> Minterrupts*)

val _ = Define `
 ((update_Minterrupts_MSI:Minterrupts ->(1)words$word -> Minterrupts) v x=
    (( v with<|
     Minterrupts_Minterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 3 : int):ii) (( 3 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Minterrupts_SSI : Minterrupts -> mword ty1*)

val _ = Define `
 ((get_Minterrupts_SSI:Minterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)))`;


(*val _set_Minterrupts_SSI : register_ref regstate register_value Minterrupts -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Minterrupts_SSI:((regstate),(register_value),(Minterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Minterrupts_Minterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Minterrupts_Minterrupts_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Minterrupts_SSI : Minterrupts -> mword ty1 -> Minterrupts*)

val _ = Define `
 ((update_Minterrupts_SSI:Minterrupts ->(1)words$word -> Minterrupts) v x=
    (( v with<|
     Minterrupts_Minterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_Sinterrupts_SSI : Sinterrupts -> mword ty1 -> Sinterrupts*)

(*val _get_Sinterrupts_SSI : Sinterrupts -> mword ty1*)

(*val _set_Sinterrupts_SSI : register_ref regstate register_value Sinterrupts -> mword ty1 -> M unit*)

(*val _get_Minterrupts_USI : Minterrupts -> mword ty1*)

val _ = Define `
 ((get_Minterrupts_USI:Minterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)))`;


(*val _set_Minterrupts_USI : register_ref regstate register_value Minterrupts -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Minterrupts_USI:((regstate),(register_value),(Minterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Minterrupts_Minterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Minterrupts_Minterrupts_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Minterrupts_USI : Minterrupts -> mword ty1 -> Minterrupts*)

val _ = Define `
 ((update_Minterrupts_USI:Minterrupts ->(1)words$word -> Minterrupts) v x=
    (( v with<|
     Minterrupts_Minterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Minterrupts_Minterrupts_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_Sinterrupts_USI : Sinterrupts -> mword ty1 -> Sinterrupts*)

(*val _update_Uinterrupts_USI : Uinterrupts -> mword ty1 -> Uinterrupts*)

(*val _get_Sinterrupts_USI : Sinterrupts -> mword ty1*)

(*val _get_Uinterrupts_USI : Uinterrupts -> mword ty1*)

(*val _set_Sinterrupts_USI : register_ref regstate register_value Sinterrupts -> mword ty1 -> M unit*)

(*val _set_Uinterrupts_USI : register_ref regstate register_value Uinterrupts -> mword ty1 -> M unit*)

(*val legalize_mip : Minterrupts -> mword ty32 -> M Minterrupts*)

val _ = Define `
 ((legalize_mip:Minterrupts ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((Minterrupts),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (o1 : Minterrupts) (v : xlenbits)=
    (let v = (Mk_Minterrupts v) in
   let m = (update_Minterrupts_SEI o1 ((get_Minterrupts_SEI v  :  1 words$word))) in
   let m = (update_Minterrupts_STI m ((get_Minterrupts_STI v  :  1 words$word))) in
   let m = (update_Minterrupts_SSI m ((get_Minterrupts_SSI v  :  1 words$word))) in sail2_state_monad$bindS
   (sail2_state$and_boolS ((haveUsrMode () )) ((haveNExt () ))) (\ (w__2 : bool) . 
   sail2_state_monad$returnS (if w__2 then
             let m = (update_Minterrupts_UEI m ((get_Minterrupts_UEI v  :  1 words$word))) in
             let m = (update_Minterrupts_UTI m ((get_Minterrupts_UTI v  :  1 words$word))) in
             update_Minterrupts_USI m ((get_Minterrupts_USI v  :  1 words$word))
           else m))))`;


(*val legalize_mie : Minterrupts -> mword ty32 -> M Minterrupts*)

val _ = Define `
 ((legalize_mie:Minterrupts ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((Minterrupts),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (o1 : Minterrupts) (v : xlenbits)=
    (let v = (Mk_Minterrupts v) in
   let m = (update_Minterrupts_MEI o1 ((get_Minterrupts_MEI v  :  1 words$word))) in
   let m = (update_Minterrupts_MTI m ((get_Minterrupts_MTI v  :  1 words$word))) in
   let m = (update_Minterrupts_MSI m ((get_Minterrupts_MSI v  :  1 words$word))) in
   let m = (update_Minterrupts_SEI m ((get_Minterrupts_SEI v  :  1 words$word))) in
   let m = (update_Minterrupts_STI m ((get_Minterrupts_STI v  :  1 words$word))) in
   let m = (update_Minterrupts_SSI m ((get_Minterrupts_SSI v  :  1 words$word))) in sail2_state_monad$bindS
   (sail2_state$and_boolS ((haveUsrMode () )) ((haveNExt () ))) (\ (w__2 : bool) . 
   sail2_state_monad$returnS (if w__2 then
             let m = (update_Minterrupts_UEI m ((get_Minterrupts_UEI v  :  1 words$word))) in
             let m = (update_Minterrupts_UTI m ((get_Minterrupts_UTI v  :  1 words$word))) in
             update_Minterrupts_USI m ((get_Minterrupts_USI v  :  1 words$word))
           else m))))`;


(*val legalize_mideleg : Minterrupts -> mword ty32 -> Minterrupts*)

val _ = Define `
 ((legalize_mideleg:Minterrupts ->(32)words$word -> Minterrupts) (o1 : Minterrupts) (v : xlenbits)=
    (let m = (Mk_Minterrupts v) in
   let m = (update_Minterrupts_MEI m (0b0w :  1 words$word)) in
   let m = (update_Minterrupts_MTI m (0b0w :  1 words$word)) in
   update_Minterrupts_MSI m (0b0w :  1 words$word)))`;


(*val Mk_Medeleg : mword ty32 -> Medeleg*)

val _ = Define `
 ((Mk_Medeleg:(32)words$word -> Medeleg) v=
    (<| Medeleg_Medeleg_chunk_0 := ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) |>))`;


val _ = Define `
 ((get_Medeleg_bits:Medeleg ->(32)words$word) v=  ((subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)))`;


val _ = Define `
 ((set_Medeleg_bits:((regstate),(register_value),(Medeleg))register_ref ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Medeleg_Medeleg_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Medeleg_bits:Medeleg ->(32)words$word -> Medeleg) v x=
    (( v with<|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Medeleg_SAMO_Page_Fault : Medeleg -> mword ty1*)

val _ = Define `
 ((get_Medeleg_SAMO_Page_Fault:Medeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 15 : int):ii) (( 15 : int):ii)  :  1 words$word)))`;


(*val _set_Medeleg_SAMO_Page_Fault : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Medeleg_SAMO_Page_Fault:((regstate),(register_value),(Medeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Medeleg_Medeleg_chunk_0 (( 15 : int):ii) (( 15 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Medeleg_SAMO_Page_Fault : Medeleg -> mword ty1 -> Medeleg*)

val _ = Define `
 ((update_Medeleg_SAMO_Page_Fault:Medeleg ->(1)words$word -> Medeleg) v x=
    (( v with<|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 15 : int):ii) (( 15 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Medeleg_Load_Page_Fault : Medeleg -> mword ty1*)

val _ = Define `
 ((get_Medeleg_Load_Page_Fault:Medeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 13 : int):ii) (( 13 : int):ii)  :  1 words$word)))`;


(*val _set_Medeleg_Load_Page_Fault : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Medeleg_Load_Page_Fault:((regstate),(register_value),(Medeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Medeleg_Medeleg_chunk_0 (( 13 : int):ii) (( 13 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Medeleg_Load_Page_Fault : Medeleg -> mword ty1 -> Medeleg*)

val _ = Define `
 ((update_Medeleg_Load_Page_Fault:Medeleg ->(1)words$word -> Medeleg) v x=
    (( v with<|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 13 : int):ii) (( 13 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Medeleg_Fetch_Page_Fault : Medeleg -> mword ty1*)

val _ = Define `
 ((get_Medeleg_Fetch_Page_Fault:Medeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)))`;


(*val _set_Medeleg_Fetch_Page_Fault : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Medeleg_Fetch_Page_Fault:((regstate),(register_value),(Medeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Medeleg_Medeleg_chunk_0 (( 12 : int):ii) (( 12 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Medeleg_Fetch_Page_Fault : Medeleg -> mword ty1 -> Medeleg*)

val _ = Define `
 ((update_Medeleg_Fetch_Page_Fault:Medeleg ->(1)words$word -> Medeleg) v x=
    (( v with<|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 12 : int):ii) (( 12 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Medeleg_MEnvCall : Medeleg -> mword ty1*)

val _ = Define `
 ((get_Medeleg_MEnvCall:Medeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 10 : int):ii) (( 10 : int):ii)  :  1 words$word)))`;


(*val _set_Medeleg_MEnvCall : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Medeleg_MEnvCall:((regstate),(register_value),(Medeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Medeleg_Medeleg_chunk_0 (( 10 : int):ii) (( 10 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Medeleg_MEnvCall : Medeleg -> mword ty1 -> Medeleg*)

val _ = Define `
 ((update_Medeleg_MEnvCall:Medeleg ->(1)words$word -> Medeleg) v x=
    (( v with<|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 10 : int):ii) (( 10 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Medeleg_SEnvCall : Medeleg -> mword ty1*)

val _ = Define `
 ((get_Medeleg_SEnvCall:Medeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 9 : int):ii) (( 9 : int):ii)  :  1 words$word)))`;


(*val _set_Medeleg_SEnvCall : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Medeleg_SEnvCall:((regstate),(register_value),(Medeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Medeleg_Medeleg_chunk_0 (( 9 : int):ii) (( 9 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Medeleg_SEnvCall : Medeleg -> mword ty1 -> Medeleg*)

val _ = Define `
 ((update_Medeleg_SEnvCall:Medeleg ->(1)words$word -> Medeleg) v x=
    (( v with<|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 9 : int):ii) (( 9 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Medeleg_UEnvCall : Medeleg -> mword ty1*)

val _ = Define `
 ((get_Medeleg_UEnvCall:Medeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 8 : int):ii) (( 8 : int):ii)  :  1 words$word)))`;


(*val _set_Medeleg_UEnvCall : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Medeleg_UEnvCall:((regstate),(register_value),(Medeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Medeleg_Medeleg_chunk_0 (( 8 : int):ii) (( 8 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Medeleg_UEnvCall : Medeleg -> mword ty1 -> Medeleg*)

val _ = Define `
 ((update_Medeleg_UEnvCall:Medeleg ->(1)words$word -> Medeleg) v x=
    (( v with<|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 8 : int):ii) (( 8 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_Sedeleg_UEnvCall : Sedeleg -> mword ty1 -> Sedeleg*)

(*val _get_Sedeleg_UEnvCall : Sedeleg -> mword ty1*)

(*val _set_Sedeleg_UEnvCall : register_ref regstate register_value Sedeleg -> mword ty1 -> M unit*)

(*val _get_Medeleg_SAMO_Access_Fault : Medeleg -> mword ty1*)

val _ = Define `
 ((get_Medeleg_SAMO_Access_Fault:Medeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 7 : int):ii) (( 7 : int):ii)  :  1 words$word)))`;


(*val _set_Medeleg_SAMO_Access_Fault : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Medeleg_SAMO_Access_Fault:((regstate),(register_value),(Medeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Medeleg_Medeleg_chunk_0 (( 7 : int):ii) (( 7 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Medeleg_SAMO_Access_Fault : Medeleg -> mword ty1 -> Medeleg*)

val _ = Define `
 ((update_Medeleg_SAMO_Access_Fault:Medeleg ->(1)words$word -> Medeleg) v x=
    (( v with<|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 7 : int):ii) (( 7 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_Sedeleg_SAMO_Access_Fault : Sedeleg -> mword ty1 -> Sedeleg*)

(*val _get_Sedeleg_SAMO_Access_Fault : Sedeleg -> mword ty1*)

(*val _set_Sedeleg_SAMO_Access_Fault : register_ref regstate register_value Sedeleg -> mword ty1 -> M unit*)

(*val _get_Medeleg_SAMO_Addr_Align : Medeleg -> mword ty1*)

val _ = Define `
 ((get_Medeleg_SAMO_Addr_Align:Medeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 6 : int):ii) (( 6 : int):ii)  :  1 words$word)))`;


(*val _set_Medeleg_SAMO_Addr_Align : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Medeleg_SAMO_Addr_Align:((regstate),(register_value),(Medeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Medeleg_Medeleg_chunk_0 (( 6 : int):ii) (( 6 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Medeleg_SAMO_Addr_Align : Medeleg -> mword ty1 -> Medeleg*)

val _ = Define `
 ((update_Medeleg_SAMO_Addr_Align:Medeleg ->(1)words$word -> Medeleg) v x=
    (( v with<|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 6 : int):ii) (( 6 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_Sedeleg_SAMO_Addr_Align : Sedeleg -> mword ty1 -> Sedeleg*)

(*val _get_Sedeleg_SAMO_Addr_Align : Sedeleg -> mword ty1*)

(*val _set_Sedeleg_SAMO_Addr_Align : register_ref regstate register_value Sedeleg -> mword ty1 -> M unit*)

(*val _get_Medeleg_Load_Access_Fault : Medeleg -> mword ty1*)

val _ = Define `
 ((get_Medeleg_Load_Access_Fault:Medeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)))`;


(*val _set_Medeleg_Load_Access_Fault : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Medeleg_Load_Access_Fault:((regstate),(register_value),(Medeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Medeleg_Medeleg_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Medeleg_Load_Access_Fault : Medeleg -> mword ty1 -> Medeleg*)

val _ = Define `
 ((update_Medeleg_Load_Access_Fault:Medeleg ->(1)words$word -> Medeleg) v x=
    (( v with<|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_Sedeleg_Load_Access_Fault : Sedeleg -> mword ty1 -> Sedeleg*)

(*val _get_Sedeleg_Load_Access_Fault : Sedeleg -> mword ty1*)

(*val _set_Sedeleg_Load_Access_Fault : register_ref regstate register_value Sedeleg -> mword ty1 -> M unit*)

(*val _get_Medeleg_Load_Addr_Align : Medeleg -> mword ty1*)

val _ = Define `
 ((get_Medeleg_Load_Addr_Align:Medeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 4 : int):ii) (( 4 : int):ii)  :  1 words$word)))`;


(*val _set_Medeleg_Load_Addr_Align : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Medeleg_Load_Addr_Align:((regstate),(register_value),(Medeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Medeleg_Medeleg_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Medeleg_Load_Addr_Align : Medeleg -> mword ty1 -> Medeleg*)

val _ = Define `
 ((update_Medeleg_Load_Addr_Align:Medeleg ->(1)words$word -> Medeleg) v x=
    (( v with<|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_Sedeleg_Load_Addr_Align : Sedeleg -> mword ty1 -> Sedeleg*)

(*val _get_Sedeleg_Load_Addr_Align : Sedeleg -> mword ty1*)

(*val _set_Sedeleg_Load_Addr_Align : register_ref regstate register_value Sedeleg -> mword ty1 -> M unit*)

(*val _get_Medeleg_Breakpoint : Medeleg -> mword ty1*)

val _ = Define `
 ((get_Medeleg_Breakpoint:Medeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 3 : int):ii) (( 3 : int):ii)  :  1 words$word)))`;


(*val _set_Medeleg_Breakpoint : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Medeleg_Breakpoint:((regstate),(register_value),(Medeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Medeleg_Medeleg_chunk_0 (( 3 : int):ii) (( 3 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Medeleg_Breakpoint : Medeleg -> mword ty1 -> Medeleg*)

val _ = Define `
 ((update_Medeleg_Breakpoint:Medeleg ->(1)words$word -> Medeleg) v x=
    (( v with<|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 3 : int):ii) (( 3 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_Sedeleg_Breakpoint : Sedeleg -> mword ty1 -> Sedeleg*)

(*val _get_Sedeleg_Breakpoint : Sedeleg -> mword ty1*)

(*val _set_Sedeleg_Breakpoint : register_ref regstate register_value Sedeleg -> mword ty1 -> M unit*)

(*val _get_Medeleg_Illegal_Instr : Medeleg -> mword ty1*)

val _ = Define `
 ((get_Medeleg_Illegal_Instr:Medeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)))`;


(*val _set_Medeleg_Illegal_Instr : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Medeleg_Illegal_Instr:((regstate),(register_value),(Medeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Medeleg_Medeleg_chunk_0 (( 2 : int):ii) (( 2 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Medeleg_Illegal_Instr : Medeleg -> mword ty1 -> Medeleg*)

val _ = Define `
 ((update_Medeleg_Illegal_Instr:Medeleg ->(1)words$word -> Medeleg) v x=
    (( v with<|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 2 : int):ii) (( 2 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_Sedeleg_Illegal_Instr : Sedeleg -> mword ty1 -> Sedeleg*)

(*val _get_Sedeleg_Illegal_Instr : Sedeleg -> mword ty1*)

(*val _set_Sedeleg_Illegal_Instr : register_ref regstate register_value Sedeleg -> mword ty1 -> M unit*)

(*val _get_Medeleg_Fetch_Access_Fault : Medeleg -> mword ty1*)

val _ = Define `
 ((get_Medeleg_Fetch_Access_Fault:Medeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)))`;


(*val _set_Medeleg_Fetch_Access_Fault : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Medeleg_Fetch_Access_Fault:((regstate),(register_value),(Medeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Medeleg_Medeleg_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Medeleg_Fetch_Access_Fault : Medeleg -> mword ty1 -> Medeleg*)

val _ = Define `
 ((update_Medeleg_Fetch_Access_Fault:Medeleg ->(1)words$word -> Medeleg) v x=
    (( v with<|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_Sedeleg_Fetch_Access_Fault : Sedeleg -> mword ty1 -> Sedeleg*)

(*val _get_Sedeleg_Fetch_Access_Fault : Sedeleg -> mword ty1*)

(*val _set_Sedeleg_Fetch_Access_Fault : register_ref regstate register_value Sedeleg -> mword ty1 -> M unit*)

(*val _get_Medeleg_Fetch_Addr_Align : Medeleg -> mword ty1*)

val _ = Define `
 ((get_Medeleg_Fetch_Addr_Align:Medeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)))`;


(*val _set_Medeleg_Fetch_Addr_Align : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Medeleg_Fetch_Addr_Align:((regstate),(register_value),(Medeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Medeleg_Medeleg_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Medeleg_Fetch_Addr_Align : Medeleg -> mword ty1 -> Medeleg*)

val _ = Define `
 ((update_Medeleg_Fetch_Addr_Align:Medeleg ->(1)words$word -> Medeleg) v x=
    (( v with<|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Medeleg_Medeleg_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_Sedeleg_Fetch_Addr_Align : Sedeleg -> mword ty1 -> Sedeleg*)

(*val _get_Sedeleg_Fetch_Addr_Align : Sedeleg -> mword ty1*)

(*val _set_Sedeleg_Fetch_Addr_Align : register_ref regstate register_value Sedeleg -> mword ty1 -> M unit*)

(*val legalize_medeleg : Medeleg -> mword ty32 -> Medeleg*)

val _ = Define `
 ((legalize_medeleg:Medeleg ->(32)words$word -> Medeleg) (o1 : Medeleg) (v : xlenbits)=
    (let m = (Mk_Medeleg v) in
   update_Medeleg_MEnvCall m (0b0w :  1 words$word)))`;


(*val Mk_Mtvec : mword ty32 -> Mtvec*)

val _ = Define `
 ((Mk_Mtvec:(32)words$word -> Mtvec) v=  (<| Mtvec_Mtvec_chunk_0 := ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) |>))`;


val _ = Define `
 ((get_Mtvec_bits:Mtvec ->(32)words$word) v=  ((subrange_vec_dec v.Mtvec_Mtvec_chunk_0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)))`;


val _ = Define `
 ((set_Mtvec_bits:((regstate),(register_value),(Mtvec))register_ref ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Mtvec_Mtvec_chunk_0 :=
         ((update_subrange_vec_dec r.Mtvec_Mtvec_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Mtvec_bits:Mtvec ->(32)words$word -> Mtvec) v x=
    (( v with<|
     Mtvec_Mtvec_chunk_0 :=
       ((update_subrange_vec_dec v.Mtvec_Mtvec_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Mtvec_Base : Mtvec -> mword ty30*)

val _ = Define `
 ((get_Mtvec_Base:Mtvec ->(30)words$word) v=  ((subrange_vec_dec v.Mtvec_Mtvec_chunk_0 (( 31 : int):ii) (( 2 : int):ii)  :  30 words$word)))`;


(*val _set_Mtvec_Base : register_ref regstate register_value Mtvec -> mword ty30 -> M unit*)

val _ = Define `
 ((set_Mtvec_Base:((regstate),(register_value),(Mtvec))register_ref ->(30)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Mtvec_Mtvec_chunk_0 :=
         ((update_subrange_vec_dec r.Mtvec_Mtvec_chunk_0 (( 31 : int):ii) (( 2 : int):ii)
             ((subrange_vec_dec v (( 29 : int):ii) (( 0 : int):ii)  :  30 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mtvec_Base : Mtvec -> mword ty30 -> Mtvec*)

val _ = Define `
 ((update_Mtvec_Base:Mtvec ->(30)words$word -> Mtvec) v x=
    (( v with<|
     Mtvec_Mtvec_chunk_0 :=
       ((update_subrange_vec_dec v.Mtvec_Mtvec_chunk_0 (( 31 : int):ii) (( 2 : int):ii)
           ((subrange_vec_dec x (( 29 : int):ii) (( 0 : int):ii)  :  30 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Mtvec_Mode : Mtvec -> mword ty2*)

val _ = Define `
 ((get_Mtvec_Mode:Mtvec ->(2)words$word) v=  ((subrange_vec_dec v.Mtvec_Mtvec_chunk_0 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)))`;


(*val _set_Mtvec_Mode : register_ref regstate register_value Mtvec -> mword ty2 -> M unit*)

val _ = Define `
 ((set_Mtvec_Mode:((regstate),(register_value),(Mtvec))register_ref ->(2)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Mtvec_Mtvec_chunk_0 :=
         ((update_subrange_vec_dec r.Mtvec_Mtvec_chunk_0 (( 1 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mtvec_Mode : Mtvec -> mword ty2 -> Mtvec*)

val _ = Define `
 ((update_Mtvec_Mode:Mtvec ->(2)words$word -> Mtvec) v x=
    (( v with<|
     Mtvec_Mtvec_chunk_0 :=
       ((update_subrange_vec_dec v.Mtvec_Mtvec_chunk_0 (( 1 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
          :  32 words$word)) |>)))`;


(*val _update_Satp32_Mode : Satp32 -> mword ty1 -> Satp32*)

(*val _update_Satp64_Mode : Satp64 -> mword ty4 -> Satp64*)

(*val _get_Satp32_Mode : Satp32 -> mword ty1*)

(*val _get_Satp64_Mode : Satp64 -> mword ty4*)

(*val _set_Satp32_Mode : register_ref regstate register_value Satp32 -> mword ty1 -> M unit*)

(*val _set_Satp64_Mode : register_ref regstate register_value Satp64 -> mword ty4 -> M unit*)

(*val legalize_tvec : Mtvec -> mword ty32 -> Mtvec*)

val _ = Define `
 ((legalize_tvec:Mtvec ->(32)words$word -> Mtvec) (o1 : Mtvec) (v : xlenbits)=
    (let v = (Mk_Mtvec v) in
   (case ((trapVectorMode_of_bits ((get_Mtvec_Mode v  :  2 words$word)))) of
     TV_Direct => v
   | TV_Vector => v
   | _ => update_Mtvec_Mode v ((get_Mtvec_Mode o1  :  2 words$word))
   )))`;


(*val Mk_Mcause : mword ty32 -> Mcause*)

val _ = Define `
 ((Mk_Mcause:(32)words$word -> Mcause) v=  (<| Mcause_Mcause_chunk_0 := ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) |>))`;


val _ = Define `
 ((get_Mcause_bits:Mcause ->(32)words$word) v=  ((subrange_vec_dec v.Mcause_Mcause_chunk_0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)))`;


val _ = Define `
 ((set_Mcause_bits:((regstate),(register_value),(Mcause))register_ref ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Mcause_Mcause_chunk_0 :=
         ((update_subrange_vec_dec r.Mcause_Mcause_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Mcause_bits:Mcause ->(32)words$word -> Mcause) v x=
    (( v with<|
     Mcause_Mcause_chunk_0 :=
       ((update_subrange_vec_dec v.Mcause_Mcause_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Mcause_IsInterrupt : Mcause -> mword ty1*)

val _ = Define `
 ((get_Mcause_IsInterrupt:Mcause ->(1)words$word) v=
    ((subrange_vec_dec v.Mcause_Mcause_chunk_0 (( 31 : int):ii) (( 31 : int):ii)  :  1 words$word)))`;


(*val _set_Mcause_IsInterrupt : register_ref regstate register_value Mcause -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Mcause_IsInterrupt:((regstate),(register_value),(Mcause))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Mcause_Mcause_chunk_0 :=
         ((update_subrange_vec_dec r.Mcause_Mcause_chunk_0 (( 31 : int):ii) (( 31 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mcause_IsInterrupt : Mcause -> mword ty1 -> Mcause*)

val _ = Define `
 ((update_Mcause_IsInterrupt:Mcause ->(1)words$word -> Mcause) v x=
    (( v with<|
     Mcause_Mcause_chunk_0 :=
       ((update_subrange_vec_dec v.Mcause_Mcause_chunk_0 (( 31 : int):ii) (( 31 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Mcause_Cause : Mcause -> mword ty31*)

val _ = Define `
 ((get_Mcause_Cause:Mcause ->(31)words$word) v=  ((subrange_vec_dec v.Mcause_Mcause_chunk_0 (( 30 : int):ii) (( 0 : int):ii)  :  31 words$word)))`;


(*val _set_Mcause_Cause : register_ref regstate register_value Mcause -> mword ty31 -> M unit*)

val _ = Define `
 ((set_Mcause_Cause:((regstate),(register_value),(Mcause))register_ref ->(31)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Mcause_Mcause_chunk_0 :=
         ((update_subrange_vec_dec r.Mcause_Mcause_chunk_0 (( 30 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 30 : int):ii) (( 0 : int):ii)  :  31 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Mcause_Cause : Mcause -> mword ty31 -> Mcause*)

val _ = Define `
 ((update_Mcause_Cause:Mcause ->(31)words$word -> Mcause) v x=
    (( v with<|
     Mcause_Mcause_chunk_0 :=
       ((update_subrange_vec_dec v.Mcause_Mcause_chunk_0 (( 30 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 30 : int):ii) (( 0 : int):ii)  :  31 words$word))
          :  32 words$word)) |>)))`;


(*val tvec_addr : Mtvec -> Mcause -> maybe (mword ty32)*)

val _ = Define `
 ((tvec_addr:Mtvec -> Mcause ->((32)words$word)option) (m : Mtvec) (c : Mcause)=
    (let (base : xlenbits) =
     ((concat_vec ((get_Mtvec_Base m  :  30 words$word)) (0b00w :  2 words$word)  :  32 words$word)) in
   (case ((trapVectorMode_of_bits ((get_Mtvec_Mode m  :  2 words$word)))) of
     TV_Direct => SOME base
   | TV_Vector =>
      if (((((get_Mcause_IsInterrupt c  :  1 words$word)) = (0b1w :  1 words$word)))) then
        SOME ((add_vec base
                 ((shiftl ((EXTZ (( 32 : int):ii) ((get_Mcause_Cause c  :  31 words$word))  :  32 words$word))
                     (( 2 : int):ii)
                    :  32 words$word))
                :  32 words$word))
      else SOME base
   | TV_Reserved => NONE
   )))`;


(*val legalize_xepc : mword ty32 -> M (mword ty32)*)

val _ = Define `
 ((legalize_xepc:(32)words$word ->(regstate)sail2_state_monad$sequential_state ->((((32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) v=  (sail2_state_monad$bindS
   (sail2_state$or_boolS (sail2_state_monad$returnS (((((sys_enable_writable_misa () )) /\ ((sys_enable_rvc () ))))))
     ( sail2_state_monad$bindS(sail2_state_monad$read_regS misa_ref) (\ (w__0 : Misa) . 
      sail2_state_monad$returnS (((((get_Misa_C w__0  :  1 words$word)) = (0b1w :  1 words$word))))))) (\ (w__1 : bool) . 
   sail2_state_monad$returnS (if w__1 then (update_vec_dec v (( 0 : int):ii) B0  :  32 words$word)
           else (and_vec v ((EXTS (( 32 : int):ii) (0b100w :  3 words$word)  :  32 words$word))  :  32 words$word)))))`;


(*val pc_alignment_mask : unit -> M (mword ty32)*)

val _ = Define `
 ((pc_alignment_mask:unit ->(regstate)sail2_state_monad$sequential_state ->((((32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS misa_ref) (\ (w__0 : Misa) . 
   sail2_state_monad$returnS ((not_vec
              ((EXTZ (( 32 : int):ii)
                  (if (((((get_Misa_C w__0  :  1 words$word)) = (0b1w :  1 words$word)))) then
                     (0b00w :  2 words$word)
                   else (0b10w :  2 words$word))
                 :  32 words$word))
             :  32 words$word)))))`;


(*val Mk_Counteren : mword ty32 -> Counteren*)

val _ = Define `
 ((Mk_Counteren:(32)words$word -> Counteren) v=
    (<| Counteren_Counteren_chunk_0 := ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) |>))`;


val _ = Define `
 ((get_Counteren_bits:Counteren ->(32)words$word) v=
    ((subrange_vec_dec v.Counteren_Counteren_chunk_0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)))`;


val _ = Define `
 ((set_Counteren_bits:((regstate),(register_value),(Counteren))register_ref ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Counteren_Counteren_chunk_0 :=
         ((update_subrange_vec_dec r.Counteren_Counteren_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Counteren_bits:Counteren ->(32)words$word -> Counteren) v x=
    (( v with<|
     Counteren_Counteren_chunk_0 :=
       ((update_subrange_vec_dec v.Counteren_Counteren_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Counteren_HPM : Counteren -> mword ty29*)

val _ = Define `
 ((get_Counteren_HPM:Counteren ->(29)words$word) v=
    ((subrange_vec_dec v.Counteren_Counteren_chunk_0 (( 31 : int):ii) (( 3 : int):ii)  :  29 words$word)))`;


(*val _set_Counteren_HPM : register_ref regstate register_value Counteren -> mword ty29 -> M unit*)

val _ = Define `
 ((set_Counteren_HPM:((regstate),(register_value),(Counteren))register_ref ->(29)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Counteren_Counteren_chunk_0 :=
         ((update_subrange_vec_dec r.Counteren_Counteren_chunk_0 (( 31 : int):ii) (( 3 : int):ii)
             ((subrange_vec_dec v (( 28 : int):ii) (( 0 : int):ii)  :  29 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Counteren_HPM : Counteren -> mword ty29 -> Counteren*)

val _ = Define `
 ((update_Counteren_HPM:Counteren ->(29)words$word -> Counteren) v x=
    (( v with<|
     Counteren_Counteren_chunk_0 :=
       ((update_subrange_vec_dec v.Counteren_Counteren_chunk_0 (( 31 : int):ii) (( 3 : int):ii)
           ((subrange_vec_dec x (( 28 : int):ii) (( 0 : int):ii)  :  29 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Counteren_IR : Counteren -> mword ty1*)

val _ = Define `
 ((get_Counteren_IR:Counteren ->(1)words$word) v=
    ((subrange_vec_dec v.Counteren_Counteren_chunk_0 (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)))`;


(*val _set_Counteren_IR : register_ref regstate register_value Counteren -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Counteren_IR:((regstate),(register_value),(Counteren))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Counteren_Counteren_chunk_0 :=
         ((update_subrange_vec_dec r.Counteren_Counteren_chunk_0 (( 2 : int):ii) (( 2 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Counteren_IR : Counteren -> mword ty1 -> Counteren*)

val _ = Define `
 ((update_Counteren_IR:Counteren ->(1)words$word -> Counteren) v x=
    (( v with<|
     Counteren_Counteren_chunk_0 :=
       ((update_subrange_vec_dec v.Counteren_Counteren_chunk_0 (( 2 : int):ii) (( 2 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_Counterin_IR : Counterin -> mword ty1 -> Counterin*)

(*val _get_Counterin_IR : Counterin -> mword ty1*)

(*val _set_Counterin_IR : register_ref regstate register_value Counterin -> mword ty1 -> M unit*)

(*val _get_Counteren_TM : Counteren -> mword ty1*)

val _ = Define `
 ((get_Counteren_TM:Counteren ->(1)words$word) v=
    ((subrange_vec_dec v.Counteren_Counteren_chunk_0 (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)))`;


(*val _set_Counteren_TM : register_ref regstate register_value Counteren -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Counteren_TM:((regstate),(register_value),(Counteren))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Counteren_Counteren_chunk_0 :=
         ((update_subrange_vec_dec r.Counteren_Counteren_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Counteren_TM : Counteren -> mword ty1 -> Counteren*)

val _ = Define `
 ((update_Counteren_TM:Counteren ->(1)words$word -> Counteren) v x=
    (( v with<|
     Counteren_Counteren_chunk_0 :=
       ((update_subrange_vec_dec v.Counteren_Counteren_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Counteren_CY : Counteren -> mword ty1*)

val _ = Define `
 ((get_Counteren_CY:Counteren ->(1)words$word) v=
    ((subrange_vec_dec v.Counteren_Counteren_chunk_0 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)))`;


(*val _set_Counteren_CY : register_ref regstate register_value Counteren -> mword ty1 -> M unit*)

val _ = Define `
 ((set_Counteren_CY:((regstate),(register_value),(Counteren))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Counteren_Counteren_chunk_0 :=
         ((update_subrange_vec_dec r.Counteren_Counteren_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Counteren_CY : Counteren -> mword ty1 -> Counteren*)

val _ = Define `
 ((update_Counteren_CY:Counteren ->(1)words$word -> Counteren) v x=
    (( v with<|
     Counteren_Counteren_chunk_0 :=
       ((update_subrange_vec_dec v.Counteren_Counteren_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val _update_Counterin_CY : Counterin -> mword ty1 -> Counterin*)

(*val _get_Counterin_CY : Counterin -> mword ty1*)

(*val _set_Counterin_CY : register_ref regstate register_value Counterin -> mword ty1 -> M unit*)

(*val legalize_mcounteren : Counteren -> mword ty32 -> Counteren*)

val _ = Define `
 ((legalize_mcounteren:Counteren ->(32)words$word -> Counteren) (c : Counteren) (v : xlenbits)=
    (let c = (update_Counteren_IR c (vec_of_bits [access_vec_dec v (( 2 : int):ii)]  :  1 words$word)) in
   let c = (update_Counteren_TM c (vec_of_bits [access_vec_dec v (( 1 : int):ii)]  :  1 words$word)) in
   update_Counteren_CY c (vec_of_bits [access_vec_dec v (( 0 : int):ii)]  :  1 words$word)))`;


(*val legalize_scounteren : Counteren -> mword ty32 -> Counteren*)

val _ = Define `
 ((legalize_scounteren:Counteren ->(32)words$word -> Counteren) (c : Counteren) (v : xlenbits)=
    (let c = (update_Counteren_IR c (vec_of_bits [access_vec_dec v (( 2 : int):ii)]  :  1 words$word)) in
   let c = (update_Counteren_TM c (vec_of_bits [access_vec_dec v (( 1 : int):ii)]  :  1 words$word)) in
   update_Counteren_CY c (vec_of_bits [access_vec_dec v (( 0 : int):ii)]  :  1 words$word)))`;


(*val Mk_Counterin : mword ty32 -> Counterin*)

val _ = Define `
 ((Mk_Counterin:(32)words$word -> Counterin) v=
    (<| Counterin_Counterin_chunk_0 := ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) |>))`;


val _ = Define `
 ((get_Counterin_bits:Counterin ->(32)words$word) v=
    ((subrange_vec_dec v.Counterin_Counterin_chunk_0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)))`;


val _ = Define `
 ((set_Counterin_bits:((regstate),(register_value),(Counterin))register_ref ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Counterin_Counterin_chunk_0 :=
         ((update_subrange_vec_dec r.Counterin_Counterin_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Counterin_bits:Counterin ->(32)words$word -> Counterin) v x=
    (( v with<|
     Counterin_Counterin_chunk_0 :=
       ((update_subrange_vec_dec v.Counterin_Counterin_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Counterin_IR:Counterin ->(1)words$word) v=
    ((subrange_vec_dec v.Counterin_Counterin_chunk_0 (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Counterin_IR:((regstate),(register_value),(Counterin))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Counterin_Counterin_chunk_0 :=
         ((update_subrange_vec_dec r.Counterin_Counterin_chunk_0 (( 2 : int):ii) (( 2 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Counterin_IR:Counterin ->(1)words$word -> Counterin) v x=
    (( v with<|
     Counterin_Counterin_chunk_0 :=
       ((update_subrange_vec_dec v.Counterin_Counterin_chunk_0 (( 2 : int):ii) (( 2 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Counterin_CY:Counterin ->(1)words$word) v=
    ((subrange_vec_dec v.Counterin_Counterin_chunk_0 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Counterin_CY:((regstate),(register_value),(Counterin))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Counterin_Counterin_chunk_0 :=
         ((update_subrange_vec_dec r.Counterin_Counterin_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Counterin_CY:Counterin ->(1)words$word -> Counterin) v x=
    (( v with<|
     Counterin_Counterin_chunk_0 :=
       ((update_subrange_vec_dec v.Counterin_Counterin_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val legalize_mcountinhibit : Counterin -> mword ty32 -> Counterin*)

val _ = Define `
 ((legalize_mcountinhibit:Counterin ->(32)words$word -> Counterin) (c : Counterin) (v : xlenbits)=
    (let c = (update_Counterin_IR c (vec_of_bits [access_vec_dec v (( 2 : int):ii)]  :  1 words$word)) in
   update_Counterin_CY c (vec_of_bits [access_vec_dec v (( 0 : int):ii)]  :  1 words$word)))`;


(*val retire_instruction : unit -> M unit*)

val _ = Define `
 ((retire_instruction:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS minstret_written_ref) (\ (w__0 : bool) . 
   if (((w__0 = T))) then sail2_state_monad$write_regS minstret_written_ref F
   else sail2_state_monad$bindS
   (sail2_state_monad$read_regS mcountinhibit_ref) (\ (w__1 : Counterin) . 
   if (((((get_Counterin_IR w__1  :  1 words$word)) = (0b0w :  1 words$word)))) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS minstret_ref  : ( 64 words$word) M) (\ (w__2 :  64 words$word) . 
     sail2_state_monad$write_regS minstret_ref ((add_vec_int w__2 (( 1 : int):ii)  :  64 words$word)))
   else sail2_state_monad$returnS () ))))`;


(*val Mk_Sstatus : mword ty32 -> Sstatus*)

val _ = Define `
 ((Mk_Sstatus:(32)words$word -> Sstatus) v=
    (<| Sstatus_Sstatus_chunk_0 := ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) |>))`;


val _ = Define `
 ((get_Sstatus_bits:Sstatus ->(32)words$word) v=  ((subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)))`;


val _ = Define `
 ((set_Sstatus_bits:((regstate),(register_value),(Sstatus))register_ref ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Sstatus_Sstatus_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sstatus_bits:Sstatus ->(32)words$word -> Sstatus) v x=
    (( v with<|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Sstatus_SD:Sstatus ->(1)words$word) v=  ((subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 31 : int):ii) (( 31 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sstatus_SD:((regstate),(register_value),(Sstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Sstatus_Sstatus_chunk_0 (( 31 : int):ii) (( 31 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sstatus_SD:Sstatus ->(1)words$word -> Sstatus) v x=
    (( v with<|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 31 : int):ii) (( 31 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Sstatus_MXR:Sstatus ->(1)words$word) v=  ((subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 19 : int):ii) (( 19 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sstatus_MXR:((regstate),(register_value),(Sstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Sstatus_Sstatus_chunk_0 (( 19 : int):ii) (( 19 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sstatus_MXR:Sstatus ->(1)words$word -> Sstatus) v x=
    (( v with<|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 19 : int):ii) (( 19 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Sstatus_SUM:Sstatus ->(1)words$word) v=  ((subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 18 : int):ii) (( 18 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sstatus_SUM:((regstate),(register_value),(Sstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Sstatus_Sstatus_chunk_0 (( 18 : int):ii) (( 18 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sstatus_SUM:Sstatus ->(1)words$word -> Sstatus) v x=
    (( v with<|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 18 : int):ii) (( 18 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Sstatus_XS:Sstatus ->(2)words$word) v=  ((subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 16 : int):ii) (( 15 : int):ii)  :  2 words$word)))`;


val _ = Define `
 ((set_Sstatus_XS:((regstate),(register_value),(Sstatus))register_ref ->(2)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Sstatus_Sstatus_chunk_0 (( 16 : int):ii) (( 15 : int):ii)
             ((subrange_vec_dec v (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sstatus_XS:Sstatus ->(2)words$word -> Sstatus) v x=
    (( v with<|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 16 : int):ii) (( 15 : int):ii)
           ((subrange_vec_dec x (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Sstatus_FS:Sstatus ->(2)words$word) v=  ((subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 14 : int):ii) (( 13 : int):ii)  :  2 words$word)))`;


val _ = Define `
 ((set_Sstatus_FS:((regstate),(register_value),(Sstatus))register_ref ->(2)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Sstatus_Sstatus_chunk_0 (( 14 : int):ii) (( 13 : int):ii)
             ((subrange_vec_dec v (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sstatus_FS:Sstatus ->(2)words$word -> Sstatus) v x=
    (( v with<|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 14 : int):ii) (( 13 : int):ii)
           ((subrange_vec_dec x (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Sstatus_SPP:Sstatus ->(1)words$word) v=  ((subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 8 : int):ii) (( 8 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sstatus_SPP:((regstate),(register_value),(Sstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Sstatus_Sstatus_chunk_0 (( 8 : int):ii) (( 8 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sstatus_SPP:Sstatus ->(1)words$word -> Sstatus) v x=
    (( v with<|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 8 : int):ii) (( 8 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Sstatus_SPIE:Sstatus ->(1)words$word) v=  ((subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sstatus_SPIE:((regstate),(register_value),(Sstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Sstatus_Sstatus_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sstatus_SPIE:Sstatus ->(1)words$word -> Sstatus) v x=
    (( v with<|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Sstatus_UPIE:Sstatus ->(1)words$word) v=  ((subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 4 : int):ii) (( 4 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sstatus_UPIE:((regstate),(register_value),(Sstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Sstatus_Sstatus_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sstatus_UPIE:Sstatus ->(1)words$word -> Sstatus) v x=
    (( v with<|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Sstatus_SIE:Sstatus ->(1)words$word) v=  ((subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sstatus_SIE:((regstate),(register_value),(Sstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Sstatus_Sstatus_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sstatus_SIE:Sstatus ->(1)words$word -> Sstatus) v x=
    (( v with<|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Sstatus_UIE:Sstatus ->(1)words$word) v=  ((subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sstatus_UIE:((regstate),(register_value),(Sstatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec r.Sstatus_Sstatus_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sstatus_UIE:Sstatus ->(1)words$word -> Sstatus) v x=
    (( v with<|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec v.Sstatus_Sstatus_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val get_sstatus_UXL : Sstatus -> mword ty2*)

val _ = Define `
 ((get_sstatus_UXL:Sstatus ->(2)words$word) s=
    (let m = (Mk_Mstatus ((get_Sstatus_bits s  :  32 words$word))) in
   (get_mstatus_UXL m  :  2 words$word)))`;


(*val set_sstatus_UXL : Sstatus -> mword ty2 -> Sstatus*)

val _ = Define `
 ((set_sstatus_UXL:Sstatus ->(2)words$word -> Sstatus) (s : Sstatus) (a : arch_xlen)=
    (let m = (Mk_Mstatus ((get_Sstatus_bits s  :  32 words$word))) in
   let m = (set_mstatus_UXL m a) in
   Mk_Sstatus ((get_Mstatus_bits m  :  32 words$word))))`;


(*val lower_mstatus : Mstatus -> Sstatus*)

val _ = Define `
 ((lower_mstatus:Mstatus -> Sstatus) m=
    (let s = (Mk_Sstatus ((EXTZ (( 32 : int):ii) (0b0w :  1 words$word)  :  32 words$word))) in
   let s = (update_Sstatus_SD s ((get_Mstatus_SD m  :  1 words$word))) in
   let s = (set_sstatus_UXL s ((get_mstatus_UXL m  :  2 words$word))) in
   let s = (update_Sstatus_MXR s ((get_Mstatus_MXR m  :  1 words$word))) in
   let s = (update_Sstatus_SUM s ((get_Mstatus_SUM m  :  1 words$word))) in
   let s = (update_Sstatus_XS s ((get_Mstatus_XS m  :  2 words$word))) in
   let s = (update_Sstatus_FS s ((get_Mstatus_FS m  :  2 words$word))) in
   let s = (update_Sstatus_SPP s ((get_Mstatus_SPP m  :  1 words$word))) in
   let s = (update_Sstatus_SPIE s ((get_Mstatus_SPIE m  :  1 words$word))) in
   let s = (update_Sstatus_UPIE s ((get_Mstatus_UPIE m  :  1 words$word))) in
   let s = (update_Sstatus_SIE s ((get_Mstatus_SIE m  :  1 words$word))) in
   update_Sstatus_UIE s ((get_Mstatus_UIE m  :  1 words$word))))`;


(*val lift_sstatus : Mstatus -> Sstatus -> M Mstatus*)

val _ = Define `
 ((lift_sstatus:Mstatus -> Sstatus ->(regstate)sail2_state_monad$sequential_state ->(((Mstatus),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (m : Mstatus) (s : Sstatus)=
    (let m = (update_Mstatus_MXR m ((get_Sstatus_MXR s  :  1 words$word))) in
   let m = (update_Mstatus_SUM m ((get_Sstatus_SUM s  :  1 words$word))) in
   let m = (update_Mstatus_XS m ((get_Sstatus_XS s  :  2 words$word))) in
   let m = (update_Mstatus_FS m ((get_Sstatus_FS s  :  2 words$word))) in sail2_state_monad$bindS
   (sail2_state$or_boolS
     ( sail2_state_monad$bindS(extStatus_of_bits ((get_Mstatus_FS m  :  2 words$word))) (\ (w__0 : ExtStatus) . 
      sail2_state_monad$returnS (((w__0 = Dirty)))))
     ( sail2_state_monad$bindS(extStatus_of_bits ((get_Mstatus_XS m  :  2 words$word))) (\ (w__1 : ExtStatus) . 
      sail2_state_monad$returnS (((w__1 = Dirty)))))) (\ dirty . 
   let m = (update_Mstatus_SD m ((bool_to_bits dirty  :  1 words$word))) in
   let m = (update_Mstatus_SPP m ((get_Sstatus_SPP s  :  1 words$word))) in
   let m = (update_Mstatus_SPIE m ((get_Sstatus_SPIE s  :  1 words$word))) in
   let m = (update_Mstatus_UPIE m ((get_Sstatus_UPIE s  :  1 words$word))) in
   let m = (update_Mstatus_SIE m ((get_Sstatus_SIE s  :  1 words$word))) in
   let m = (update_Mstatus_UIE m ((get_Sstatus_UIE s  :  1 words$word))) in
   sail2_state_monad$returnS m)))`;


(*val legalize_sstatus : Mstatus -> mword ty32 -> M Mstatus*)

val _ = Define `
 ((legalize_sstatus:Mstatus ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((Mstatus),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (m : Mstatus) (v : xlenbits)=  (sail2_state_monad$bindS
   (lift_sstatus m ((Mk_Sstatus v))) (\ (w__0 : Mstatus) . 
   legalize_mstatus m ((get_Mstatus_bits w__0  :  32 words$word)))))`;


(*val Mk_Sedeleg : mword ty32 -> Sedeleg*)

val _ = Define `
 ((Mk_Sedeleg:(32)words$word -> Sedeleg) v=
    (<| Sedeleg_Sedeleg_chunk_0 := ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) |>))`;


val _ = Define `
 ((get_Sedeleg_bits:Sedeleg ->(32)words$word) v=  ((subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)))`;


val _ = Define `
 ((set_Sedeleg_bits:((regstate),(register_value),(Sedeleg))register_ref ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Sedeleg_Sedeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Sedeleg_Sedeleg_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sedeleg_bits:Sedeleg ->(32)words$word -> Sedeleg) v x=
    (( v with<|
     Sedeleg_Sedeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Sedeleg_UEnvCall:Sedeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 8 : int):ii) (( 8 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sedeleg_UEnvCall:((regstate),(register_value),(Sedeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Sedeleg_Sedeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Sedeleg_Sedeleg_chunk_0 (( 8 : int):ii) (( 8 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sedeleg_UEnvCall:Sedeleg ->(1)words$word -> Sedeleg) v x=
    (( v with<|
     Sedeleg_Sedeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 8 : int):ii) (( 8 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Sedeleg_SAMO_Access_Fault:Sedeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 7 : int):ii) (( 7 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sedeleg_SAMO_Access_Fault:((regstate),(register_value),(Sedeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Sedeleg_Sedeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Sedeleg_Sedeleg_chunk_0 (( 7 : int):ii) (( 7 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sedeleg_SAMO_Access_Fault:Sedeleg ->(1)words$word -> Sedeleg) v x=
    (( v with<|
     Sedeleg_Sedeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 7 : int):ii) (( 7 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Sedeleg_SAMO_Addr_Align:Sedeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 6 : int):ii) (( 6 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sedeleg_SAMO_Addr_Align:((regstate),(register_value),(Sedeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Sedeleg_Sedeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Sedeleg_Sedeleg_chunk_0 (( 6 : int):ii) (( 6 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sedeleg_SAMO_Addr_Align:Sedeleg ->(1)words$word -> Sedeleg) v x=
    (( v with<|
     Sedeleg_Sedeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 6 : int):ii) (( 6 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Sedeleg_Load_Access_Fault:Sedeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sedeleg_Load_Access_Fault:((regstate),(register_value),(Sedeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Sedeleg_Sedeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Sedeleg_Sedeleg_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sedeleg_Load_Access_Fault:Sedeleg ->(1)words$word -> Sedeleg) v x=
    (( v with<|
     Sedeleg_Sedeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Sedeleg_Load_Addr_Align:Sedeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 4 : int):ii) (( 4 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sedeleg_Load_Addr_Align:((regstate),(register_value),(Sedeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Sedeleg_Sedeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Sedeleg_Sedeleg_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sedeleg_Load_Addr_Align:Sedeleg ->(1)words$word -> Sedeleg) v x=
    (( v with<|
     Sedeleg_Sedeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Sedeleg_Breakpoint:Sedeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 3 : int):ii) (( 3 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sedeleg_Breakpoint:((regstate),(register_value),(Sedeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Sedeleg_Sedeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Sedeleg_Sedeleg_chunk_0 (( 3 : int):ii) (( 3 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sedeleg_Breakpoint:Sedeleg ->(1)words$word -> Sedeleg) v x=
    (( v with<|
     Sedeleg_Sedeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 3 : int):ii) (( 3 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Sedeleg_Illegal_Instr:Sedeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sedeleg_Illegal_Instr:((regstate),(register_value),(Sedeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Sedeleg_Sedeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Sedeleg_Sedeleg_chunk_0 (( 2 : int):ii) (( 2 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sedeleg_Illegal_Instr:Sedeleg ->(1)words$word -> Sedeleg) v x=
    (( v with<|
     Sedeleg_Sedeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 2 : int):ii) (( 2 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Sedeleg_Fetch_Access_Fault:Sedeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sedeleg_Fetch_Access_Fault:((regstate),(register_value),(Sedeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Sedeleg_Sedeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Sedeleg_Sedeleg_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sedeleg_Fetch_Access_Fault:Sedeleg ->(1)words$word -> Sedeleg) v x=
    (( v with<|
     Sedeleg_Sedeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Sedeleg_Fetch_Addr_Align:Sedeleg ->(1)words$word) v=
    ((subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sedeleg_Fetch_Addr_Align:((regstate),(register_value),(Sedeleg))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Sedeleg_Sedeleg_chunk_0 :=
         ((update_subrange_vec_dec r.Sedeleg_Sedeleg_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sedeleg_Fetch_Addr_Align:Sedeleg ->(1)words$word -> Sedeleg) v x=
    (( v with<|
     Sedeleg_Sedeleg_chunk_0 :=
       ((update_subrange_vec_dec v.Sedeleg_Sedeleg_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val legalize_sedeleg : Sedeleg -> mword ty32 -> Sedeleg*)

val _ = Define `
 ((legalize_sedeleg:Sedeleg ->(32)words$word -> Sedeleg) (s : Sedeleg) (v : xlenbits)=
    (Mk_Sedeleg ((EXTZ (( 32 : int):ii) ((subrange_vec_dec v (( 8 : int):ii) (( 0 : int):ii)  :  9 words$word))  :  32 words$word))))`;


(*val Mk_Sinterrupts : mword ty32 -> Sinterrupts*)

val _ = Define `
 ((Mk_Sinterrupts:(32)words$word -> Sinterrupts) v=
    (<| Sinterrupts_Sinterrupts_chunk_0 := ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) |>))`;


val _ = Define `
 ((get_Sinterrupts_bits:Sinterrupts ->(32)words$word) v=
    ((subrange_vec_dec v.Sinterrupts_Sinterrupts_chunk_0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)))`;


val _ = Define `
 ((set_Sinterrupts_bits:((regstate),(register_value),(Sinterrupts))register_ref ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Sinterrupts_Sinterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Sinterrupts_Sinterrupts_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sinterrupts_bits:Sinterrupts ->(32)words$word -> Sinterrupts) v x=
    (( v with<|
     Sinterrupts_Sinterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Sinterrupts_Sinterrupts_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Sinterrupts_SEI:Sinterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Sinterrupts_Sinterrupts_chunk_0 (( 9 : int):ii) (( 9 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sinterrupts_SEI:((regstate),(register_value),(Sinterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Sinterrupts_Sinterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Sinterrupts_Sinterrupts_chunk_0 (( 9 : int):ii) (( 9 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sinterrupts_SEI:Sinterrupts ->(1)words$word -> Sinterrupts) v x=
    (( v with<|
     Sinterrupts_Sinterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Sinterrupts_Sinterrupts_chunk_0 (( 9 : int):ii) (( 9 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Sinterrupts_UEI:Sinterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Sinterrupts_Sinterrupts_chunk_0 (( 8 : int):ii) (( 8 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sinterrupts_UEI:((regstate),(register_value),(Sinterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Sinterrupts_Sinterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Sinterrupts_Sinterrupts_chunk_0 (( 8 : int):ii) (( 8 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sinterrupts_UEI:Sinterrupts ->(1)words$word -> Sinterrupts) v x=
    (( v with<|
     Sinterrupts_Sinterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Sinterrupts_Sinterrupts_chunk_0 (( 8 : int):ii) (( 8 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Sinterrupts_STI:Sinterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Sinterrupts_Sinterrupts_chunk_0 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sinterrupts_STI:((regstate),(register_value),(Sinterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Sinterrupts_Sinterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Sinterrupts_Sinterrupts_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sinterrupts_STI:Sinterrupts ->(1)words$word -> Sinterrupts) v x=
    (( v with<|
     Sinterrupts_Sinterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Sinterrupts_Sinterrupts_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Sinterrupts_UTI:Sinterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Sinterrupts_Sinterrupts_chunk_0 (( 4 : int):ii) (( 4 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sinterrupts_UTI:((regstate),(register_value),(Sinterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Sinterrupts_Sinterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Sinterrupts_Sinterrupts_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sinterrupts_UTI:Sinterrupts ->(1)words$word -> Sinterrupts) v x=
    (( v with<|
     Sinterrupts_Sinterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Sinterrupts_Sinterrupts_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Sinterrupts_SSI:Sinterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Sinterrupts_Sinterrupts_chunk_0 (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sinterrupts_SSI:((regstate),(register_value),(Sinterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Sinterrupts_Sinterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Sinterrupts_Sinterrupts_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sinterrupts_SSI:Sinterrupts ->(1)words$word -> Sinterrupts) v x=
    (( v with<|
     Sinterrupts_Sinterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Sinterrupts_Sinterrupts_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Sinterrupts_USI:Sinterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Sinterrupts_Sinterrupts_chunk_0 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Sinterrupts_USI:((regstate),(register_value),(Sinterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Sinterrupts_Sinterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Sinterrupts_Sinterrupts_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Sinterrupts_USI:Sinterrupts ->(1)words$word -> Sinterrupts) v x=
    (( v with<|
     Sinterrupts_Sinterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Sinterrupts_Sinterrupts_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val lower_mip : Minterrupts -> Minterrupts -> Sinterrupts*)

val _ = Define `
 ((lower_mip:Minterrupts -> Minterrupts -> Sinterrupts) (m : Minterrupts) (d : Minterrupts)=
    (let (s : Sinterrupts) = (Mk_Sinterrupts ((EXTZ (( 32 : int):ii) (0b0w :  1 words$word)  :  32 words$word))) in
   let s =
     (update_Sinterrupts_SEI s
       ((and_vec ((get_Minterrupts_SEI m  :  1 words$word)) ((get_Minterrupts_SEI d  :  1 words$word))
          :  1 words$word))) in
   let s =
     (update_Sinterrupts_STI s
       ((and_vec ((get_Minterrupts_STI m  :  1 words$word)) ((get_Minterrupts_STI d  :  1 words$word))
          :  1 words$word))) in
   let s =
     (update_Sinterrupts_SSI s
       ((and_vec ((get_Minterrupts_SSI m  :  1 words$word)) ((get_Minterrupts_SSI d  :  1 words$word))
          :  1 words$word))) in
   let s =
     (update_Sinterrupts_UEI s
       ((and_vec ((get_Minterrupts_UEI m  :  1 words$word)) ((get_Minterrupts_UEI d  :  1 words$word))
          :  1 words$word))) in
   let s =
     (update_Sinterrupts_UTI s
       ((and_vec ((get_Minterrupts_UTI m  :  1 words$word)) ((get_Minterrupts_UTI d  :  1 words$word))
          :  1 words$word))) in
   update_Sinterrupts_USI s
     ((and_vec ((get_Minterrupts_USI m  :  1 words$word)) ((get_Minterrupts_USI d  :  1 words$word))
        :  1 words$word))))`;


(*val lower_mie : Minterrupts -> Minterrupts -> Sinterrupts*)

val _ = Define `
 ((lower_mie:Minterrupts -> Minterrupts -> Sinterrupts) (m : Minterrupts) (d : Minterrupts)=
    (let (s : Sinterrupts) = (Mk_Sinterrupts ((EXTZ (( 32 : int):ii) (0b0w :  1 words$word)  :  32 words$word))) in
   let s =
     (update_Sinterrupts_SEI s
       ((and_vec ((get_Minterrupts_SEI m  :  1 words$word)) ((get_Minterrupts_SEI d  :  1 words$word))
          :  1 words$word))) in
   let s =
     (update_Sinterrupts_STI s
       ((and_vec ((get_Minterrupts_STI m  :  1 words$word)) ((get_Minterrupts_STI d  :  1 words$word))
          :  1 words$word))) in
   let s =
     (update_Sinterrupts_SSI s
       ((and_vec ((get_Minterrupts_SSI m  :  1 words$word)) ((get_Minterrupts_SSI d  :  1 words$word))
          :  1 words$word))) in
   let s =
     (update_Sinterrupts_UEI s
       ((and_vec ((get_Minterrupts_UEI m  :  1 words$word)) ((get_Minterrupts_UEI d  :  1 words$word))
          :  1 words$word))) in
   let s =
     (update_Sinterrupts_UTI s
       ((and_vec ((get_Minterrupts_UTI m  :  1 words$word)) ((get_Minterrupts_UTI d  :  1 words$word))
          :  1 words$word))) in
   update_Sinterrupts_USI s
     ((and_vec ((get_Minterrupts_USI m  :  1 words$word)) ((get_Minterrupts_USI d  :  1 words$word))
        :  1 words$word))))`;


(*val lift_sip : Minterrupts -> Minterrupts -> Sinterrupts -> M Minterrupts*)

val _ = Define `
 ((lift_sip:Minterrupts -> Minterrupts -> Sinterrupts ->(regstate)sail2_state_monad$sequential_state ->(((Minterrupts),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (o1 : Minterrupts) (d : Minterrupts) (s : Sinterrupts)=
    (let (m : Minterrupts) = o1 in
   let m =
     (if (((((get_Minterrupts_SSI d  :  1 words$word)) = (0b1w :  1 words$word)))) then
       update_Minterrupts_SSI m ((get_Sinterrupts_SSI s  :  1 words$word))
     else m) in sail2_state_monad$bindS
   (haveNExt () ) (\ (w__0 : bool) . 
   sail2_state_monad$returnS (if w__0 then
             let m =
               (if (((((get_Minterrupts_UEI d  :  1 words$word)) = (0b1w :  1 words$word)))) then
                 update_Minterrupts_UEI m ((get_Sinterrupts_UEI s  :  1 words$word))
               else m) in
             if (((((get_Minterrupts_USI d  :  1 words$word)) = (0b1w :  1 words$word)))) then
               update_Minterrupts_USI m ((get_Sinterrupts_USI s  :  1 words$word))
             else m
           else m))))`;


(*val legalize_sip : Minterrupts -> Minterrupts -> mword ty32 -> M Minterrupts*)

val _ = Define `
 ((legalize_sip:Minterrupts -> Minterrupts ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((Minterrupts),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (m : Minterrupts) (d : Minterrupts) (v : xlenbits)=
    (lift_sip m d ((Mk_Sinterrupts v))))`;


(*val lift_sie : Minterrupts -> Minterrupts -> Sinterrupts -> M Minterrupts*)

val _ = Define `
 ((lift_sie:Minterrupts -> Minterrupts -> Sinterrupts ->(regstate)sail2_state_monad$sequential_state ->(((Minterrupts),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (o1 : Minterrupts) (d : Minterrupts) (s : Sinterrupts)=
    (let (m : Minterrupts) = o1 in
   let m =
     (if (((((get_Minterrupts_SEI d  :  1 words$word)) = (0b1w :  1 words$word)))) then
       update_Minterrupts_SEI m ((get_Sinterrupts_SEI s  :  1 words$word))
     else m) in
   let m =
     (if (((((get_Minterrupts_STI d  :  1 words$word)) = (0b1w :  1 words$word)))) then
       update_Minterrupts_STI m ((get_Sinterrupts_STI s  :  1 words$word))
     else m) in
   let m =
     (if (((((get_Minterrupts_SSI d  :  1 words$word)) = (0b1w :  1 words$word)))) then
       update_Minterrupts_SSI m ((get_Sinterrupts_SSI s  :  1 words$word))
     else m) in sail2_state_monad$bindS
   (haveNExt () ) (\ (w__0 : bool) . 
   sail2_state_monad$returnS (if w__0 then
             let m =
               (if (((((get_Minterrupts_UEI d  :  1 words$word)) = (0b1w :  1 words$word)))) then
                 update_Minterrupts_UEI m ((get_Sinterrupts_UEI s  :  1 words$word))
               else m) in
             let m =
               (if (((((get_Minterrupts_UTI d  :  1 words$word)) = (0b1w :  1 words$word)))) then
                 update_Minterrupts_UTI m ((get_Sinterrupts_UTI s  :  1 words$word))
               else m) in
             if (((((get_Minterrupts_USI d  :  1 words$word)) = (0b1w :  1 words$word)))) then
               update_Minterrupts_USI m ((get_Sinterrupts_USI s  :  1 words$word))
             else m
           else m))))`;


(*val legalize_sie : Minterrupts -> Minterrupts -> mword ty32 -> M Minterrupts*)

val _ = Define `
 ((legalize_sie:Minterrupts -> Minterrupts ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((Minterrupts),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (m : Minterrupts) (d : Minterrupts) (v : xlenbits)=
    (lift_sie m d ((Mk_Sinterrupts v))))`;


(*val Mk_Satp64 : mword ty64 -> Satp64*)

val _ = Define `
 ((Mk_Satp64:(64)words$word -> Satp64) v=  (<| Satp64_Satp64_chunk_0 := ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)) |>))`;


val _ = Define `
 ((get_Satp64_bits:Satp64 ->(64)words$word) v=  ((subrange_vec_dec v.Satp64_Satp64_chunk_0 (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)))`;


val _ = Define `
 ((set_Satp64_bits:((regstate),(register_value),(Satp64))register_ref ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Satp64_Satp64_chunk_0 :=
         ((update_subrange_vec_dec r.Satp64_Satp64_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
            :  64 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Satp64_bits:Satp64 ->(64)words$word -> Satp64) v x=
    (( v with<|
     Satp64_Satp64_chunk_0 :=
       ((update_subrange_vec_dec v.Satp64_Satp64_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
          :  64 words$word)) |>)))`;


val _ = Define `
 ((get_Satp64_Mode:Satp64 ->(4)words$word) v=  ((subrange_vec_dec v.Satp64_Satp64_chunk_0 (( 63 : int):ii) (( 60 : int):ii)  :  4 words$word)))`;


val _ = Define `
 ((set_Satp64_Mode:((regstate),(register_value),(Satp64))register_ref ->(4)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Satp64_Satp64_chunk_0 :=
         ((update_subrange_vec_dec r.Satp64_Satp64_chunk_0 (( 63 : int):ii) (( 60 : int):ii)
             ((subrange_vec_dec v (( 3 : int):ii) (( 0 : int):ii)  :  4 words$word))
            :  64 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Satp64_Mode:Satp64 ->(4)words$word -> Satp64) v x=
    (( v with<|
     Satp64_Satp64_chunk_0 :=
       ((update_subrange_vec_dec v.Satp64_Satp64_chunk_0 (( 63 : int):ii) (( 60 : int):ii)
           ((subrange_vec_dec x (( 3 : int):ii) (( 0 : int):ii)  :  4 words$word))
          :  64 words$word)) |>)))`;


(*val _get_Satp64_Asid : Satp64 -> mword ty16*)

val _ = Define `
 ((get_Satp64_Asid:Satp64 ->(16)words$word) v=  ((subrange_vec_dec v.Satp64_Satp64_chunk_0 (( 59 : int):ii) (( 44 : int):ii)  :  16 words$word)))`;


(*val _set_Satp64_Asid : register_ref regstate register_value Satp64 -> mword ty16 -> M unit*)

val _ = Define `
 ((set_Satp64_Asid:((regstate),(register_value),(Satp64))register_ref ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Satp64_Satp64_chunk_0 :=
         ((update_subrange_vec_dec r.Satp64_Satp64_chunk_0 (( 59 : int):ii) (( 44 : int):ii)
             ((subrange_vec_dec v (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))
            :  64 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Satp64_Asid : Satp64 -> mword ty16 -> Satp64*)

val _ = Define `
 ((update_Satp64_Asid:Satp64 ->(16)words$word -> Satp64) v x=
    (( v with<|
     Satp64_Satp64_chunk_0 :=
       ((update_subrange_vec_dec v.Satp64_Satp64_chunk_0 (( 59 : int):ii) (( 44 : int):ii)
           ((subrange_vec_dec x (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))
          :  64 words$word)) |>)))`;


(*val _update_Satp32_Asid : Satp32 -> mword ty9 -> Satp32*)

(*val _get_Satp32_Asid : Satp32 -> mword ty9*)

(*val _set_Satp32_Asid : register_ref regstate register_value Satp32 -> mword ty9 -> M unit*)

(*val _get_Satp64_PPN : Satp64 -> mword ty44*)

val _ = Define `
 ((get_Satp64_PPN:Satp64 ->(44)words$word) v=  ((subrange_vec_dec v.Satp64_Satp64_chunk_0 (( 43 : int):ii) (( 0 : int):ii)  :  44 words$word)))`;


(*val _set_Satp64_PPN : register_ref regstate register_value Satp64 -> mword ty44 -> M unit*)

val _ = Define `
 ((set_Satp64_PPN:((regstate),(register_value),(Satp64))register_ref ->(44)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Satp64_Satp64_chunk_0 :=
         ((update_subrange_vec_dec r.Satp64_Satp64_chunk_0 (( 43 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 43 : int):ii) (( 0 : int):ii)  :  44 words$word))
            :  64 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Satp64_PPN : Satp64 -> mword ty44 -> Satp64*)

val _ = Define `
 ((update_Satp64_PPN:Satp64 ->(44)words$word -> Satp64) v x=
    (( v with<|
     Satp64_Satp64_chunk_0 :=
       ((update_subrange_vec_dec v.Satp64_Satp64_chunk_0 (( 43 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 43 : int):ii) (( 0 : int):ii)  :  44 words$word))
          :  64 words$word)) |>)))`;


(*val _update_Satp32_PPN : Satp32 -> mword ty22 -> Satp32*)

(*val _get_Satp32_PPN : Satp32 -> mword ty22*)

(*val _set_Satp32_PPN : register_ref regstate register_value Satp32 -> mword ty22 -> M unit*)

(*val legalize_satp64 : Architecture -> mword ty64 -> mword ty64 -> mword ty64*)

val _ = Define `
 ((legalize_satp64:Architecture ->(64)words$word ->(64)words$word ->(64)words$word) (a : Architecture) (o1 : 64 bits) (v : 64 bits)=
    (let s = (Mk_Satp64 v) in
   (case ((satp64Mode_of_bits a ((get_Satp64_Mode s  :  4 words$word)))) of
     NONE => o1
   | SOME (Sv32) => o1
   | SOME (_) => (get_Satp64_bits s  :  64 words$word)
   )))`;


(*val Mk_Satp32 : mword ty32 -> Satp32*)

val _ = Define `
 ((Mk_Satp32:(32)words$word -> Satp32) v=  (<| Satp32_Satp32_chunk_0 := ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) |>))`;


val _ = Define `
 ((get_Satp32_bits:Satp32 ->(32)words$word) v=  ((subrange_vec_dec v.Satp32_Satp32_chunk_0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)))`;


val _ = Define `
 ((set_Satp32_bits:((regstate),(register_value),(Satp32))register_ref ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Satp32_Satp32_chunk_0 :=
         ((update_subrange_vec_dec r.Satp32_Satp32_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Satp32_bits:Satp32 ->(32)words$word -> Satp32) v x=
    (( v with<|
     Satp32_Satp32_chunk_0 :=
       ((update_subrange_vec_dec v.Satp32_Satp32_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Satp32_Mode:Satp32 ->(1)words$word) v=  ((subrange_vec_dec v.Satp32_Satp32_chunk_0 (( 31 : int):ii) (( 31 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Satp32_Mode:((regstate),(register_value),(Satp32))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Satp32_Satp32_chunk_0 :=
         ((update_subrange_vec_dec r.Satp32_Satp32_chunk_0 (( 31 : int):ii) (( 31 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Satp32_Mode:Satp32 ->(1)words$word -> Satp32) v x=
    (( v with<|
     Satp32_Satp32_chunk_0 :=
       ((update_subrange_vec_dec v.Satp32_Satp32_chunk_0 (( 31 : int):ii) (( 31 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Satp32_Asid:Satp32 ->(9)words$word) v=  ((subrange_vec_dec v.Satp32_Satp32_chunk_0 (( 30 : int):ii) (( 22 : int):ii)  :  9 words$word)))`;


val _ = Define `
 ((set_Satp32_Asid:((regstate),(register_value),(Satp32))register_ref ->(9)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Satp32_Satp32_chunk_0 :=
         ((update_subrange_vec_dec r.Satp32_Satp32_chunk_0 (( 30 : int):ii) (( 22 : int):ii)
             ((subrange_vec_dec v (( 8 : int):ii) (( 0 : int):ii)  :  9 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Satp32_Asid:Satp32 ->(9)words$word -> Satp32) v x=
    (( v with<|
     Satp32_Satp32_chunk_0 :=
       ((update_subrange_vec_dec v.Satp32_Satp32_chunk_0 (( 30 : int):ii) (( 22 : int):ii)
           ((subrange_vec_dec x (( 8 : int):ii) (( 0 : int):ii)  :  9 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Satp32_PPN:Satp32 ->(22)words$word) v=  ((subrange_vec_dec v.Satp32_Satp32_chunk_0 (( 21 : int):ii) (( 0 : int):ii)  :  22 words$word)))`;


val _ = Define `
 ((set_Satp32_PPN:((regstate),(register_value),(Satp32))register_ref ->(22)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Satp32_Satp32_chunk_0 :=
         ((update_subrange_vec_dec r.Satp32_Satp32_chunk_0 (( 21 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 21 : int):ii) (( 0 : int):ii)  :  22 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Satp32_PPN:Satp32 ->(22)words$word -> Satp32) v x=
    (( v with<|
     Satp32_Satp32_chunk_0 :=
       ((update_subrange_vec_dec v.Satp32_Satp32_chunk_0 (( 21 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 21 : int):ii) (( 0 : int):ii)  :  22 words$word))
          :  32 words$word)) |>)))`;


(*val legalize_satp32 : Architecture -> mword ty32 -> mword ty32 -> mword ty32*)

val _ = Define `
 ((legalize_satp32:Architecture ->(32)words$word ->(32)words$word ->(32)words$word) (a : Architecture) (o1 : 32 bits) (v : 32 bits)=  v)`;


(*val PmpAddrMatchType_of_num : integer -> PmpAddrMatchType*)

val _ = Define `
 ((PmpAddrMatchType_of_num:int -> PmpAddrMatchType) arg_=
    (let l__89 = arg_ in
   if (((l__89 = (( 0 : int):ii)))) then OFF
   else if (((l__89 = (( 1 : int):ii)))) then TOR
   else if (((l__89 = (( 2 : int):ii)))) then NA4
   else NAPOT))`;


(*val num_of_PmpAddrMatchType : PmpAddrMatchType -> integer*)

val _ = Define `
 ((num_of_PmpAddrMatchType:PmpAddrMatchType -> int) arg_=
    ((case arg_ of   OFF => (( 0 : int):ii) | TOR => (( 1 : int):ii) | NA4 => (( 2 : int):ii) | NAPOT => (( 3 : int):ii) )))`;


(*val pmpAddrMatchType_of_bits : mword ty2 -> M PmpAddrMatchType*)

val _ = Define `
 ((pmpAddrMatchType_of_bits:(2)words$word ->(regstate)sail2_state_monad$sequential_state ->(((PmpAddrMatchType),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) bs=
    (let b__0 = bs in
   if (((b__0 = (0b00w :  2 words$word)))) then sail2_state_monad$returnS OFF
   else if (((b__0 = (0b01w :  2 words$word)))) then sail2_state_monad$returnS TOR
   else if (((b__0 = (0b10w :  2 words$word)))) then sail2_state_monad$returnS NA4
   else if (((b__0 = (0b11w :  2 words$word)))) then sail2_state_monad$returnS NAPOT
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at model/riscv_pmp_regs.sail 7:2 - 12:3") (sail2_state_monad$exitS () )))`;


(*val pmpAddrMatchType_to_bits : PmpAddrMatchType -> mword ty2*)

val _ = Define `
 ((pmpAddrMatchType_to_bits:PmpAddrMatchType ->(2)words$word) bs=
    ((case bs of
     OFF => (0b00w :  2 words$word)
   | TOR => (0b01w :  2 words$word)
   | NA4 => (0b10w :  2 words$word)
   | NAPOT => (0b11w :  2 words$word)
   )))`;


(*val Mk_Pmpcfg_ent : mword ty8 -> Pmpcfg_ent*)

val _ = Define `
 ((Mk_Pmpcfg_ent:(8)words$word -> Pmpcfg_ent) v=
    (<| Pmpcfg_ent_Pmpcfg_ent_chunk_0 := ((subrange_vec_dec v (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word)) |>))`;


val _ = Define `
 ((get_Pmpcfg_ent_bits:Pmpcfg_ent ->(8)words$word) v=
    ((subrange_vec_dec v.Pmpcfg_ent_Pmpcfg_ent_chunk_0 (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word)))`;


val _ = Define `
 ((set_Pmpcfg_ent_bits:((regstate),(register_value),(Pmpcfg_ent))register_ref ->(8)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Pmpcfg_ent_Pmpcfg_ent_chunk_0 :=
         ((update_subrange_vec_dec r.Pmpcfg_ent_Pmpcfg_ent_chunk_0 (( 7 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
            :  8 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Pmpcfg_ent_bits:Pmpcfg_ent ->(8)words$word -> Pmpcfg_ent) v x=
    (( v with<|
     Pmpcfg_ent_Pmpcfg_ent_chunk_0 :=
       ((update_subrange_vec_dec v.Pmpcfg_ent_Pmpcfg_ent_chunk_0 (( 7 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
          :  8 words$word)) |>)))`;


val _ = Define `
 ((get_Pmpcfg_ent_L:Pmpcfg_ent ->(1)words$word) v=
    ((subrange_vec_dec v.Pmpcfg_ent_Pmpcfg_ent_chunk_0 (( 7 : int):ii) (( 7 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Pmpcfg_ent_L:((regstate),(register_value),(Pmpcfg_ent))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Pmpcfg_ent_Pmpcfg_ent_chunk_0 :=
         ((update_subrange_vec_dec r.Pmpcfg_ent_Pmpcfg_ent_chunk_0 (( 7 : int):ii) (( 7 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  8 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Pmpcfg_ent_L:Pmpcfg_ent ->(1)words$word -> Pmpcfg_ent) v x=
    (( v with<|
     Pmpcfg_ent_Pmpcfg_ent_chunk_0 :=
       ((update_subrange_vec_dec v.Pmpcfg_ent_Pmpcfg_ent_chunk_0 (( 7 : int):ii) (( 7 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  8 words$word)) |>)))`;


val _ = Define `
 ((get_Pmpcfg_ent_A:Pmpcfg_ent ->(2)words$word) v=
    ((subrange_vec_dec v.Pmpcfg_ent_Pmpcfg_ent_chunk_0 (( 4 : int):ii) (( 3 : int):ii)  :  2 words$word)))`;


val _ = Define `
 ((set_Pmpcfg_ent_A:((regstate),(register_value),(Pmpcfg_ent))register_ref ->(2)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Pmpcfg_ent_Pmpcfg_ent_chunk_0 :=
         ((update_subrange_vec_dec r.Pmpcfg_ent_Pmpcfg_ent_chunk_0 (( 4 : int):ii) (( 3 : int):ii)
             ((subrange_vec_dec v (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
            :  8 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Pmpcfg_ent_A:Pmpcfg_ent ->(2)words$word -> Pmpcfg_ent) v x=
    (( v with<|
     Pmpcfg_ent_Pmpcfg_ent_chunk_0 :=
       ((update_subrange_vec_dec v.Pmpcfg_ent_Pmpcfg_ent_chunk_0 (( 4 : int):ii) (( 3 : int):ii)
           ((subrange_vec_dec x (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
          :  8 words$word)) |>)))`;


val _ = Define `
 ((get_Pmpcfg_ent_X:Pmpcfg_ent ->(1)words$word) v=
    ((subrange_vec_dec v.Pmpcfg_ent_Pmpcfg_ent_chunk_0 (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Pmpcfg_ent_X:((regstate),(register_value),(Pmpcfg_ent))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Pmpcfg_ent_Pmpcfg_ent_chunk_0 :=
         ((update_subrange_vec_dec r.Pmpcfg_ent_Pmpcfg_ent_chunk_0 (( 2 : int):ii) (( 2 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  8 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Pmpcfg_ent_X:Pmpcfg_ent ->(1)words$word -> Pmpcfg_ent) v x=
    (( v with<|
     Pmpcfg_ent_Pmpcfg_ent_chunk_0 :=
       ((update_subrange_vec_dec v.Pmpcfg_ent_Pmpcfg_ent_chunk_0 (( 2 : int):ii) (( 2 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  8 words$word)) |>)))`;


val _ = Define `
 ((get_Pmpcfg_ent_W:Pmpcfg_ent ->(1)words$word) v=
    ((subrange_vec_dec v.Pmpcfg_ent_Pmpcfg_ent_chunk_0 (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Pmpcfg_ent_W:((regstate),(register_value),(Pmpcfg_ent))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Pmpcfg_ent_Pmpcfg_ent_chunk_0 :=
         ((update_subrange_vec_dec r.Pmpcfg_ent_Pmpcfg_ent_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  8 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Pmpcfg_ent_W:Pmpcfg_ent ->(1)words$word -> Pmpcfg_ent) v x=
    (( v with<|
     Pmpcfg_ent_Pmpcfg_ent_chunk_0 :=
       ((update_subrange_vec_dec v.Pmpcfg_ent_Pmpcfg_ent_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  8 words$word)) |>)))`;


val _ = Define `
 ((get_Pmpcfg_ent_R:Pmpcfg_ent ->(1)words$word) v=
    ((subrange_vec_dec v.Pmpcfg_ent_Pmpcfg_ent_chunk_0 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Pmpcfg_ent_R:((regstate),(register_value),(Pmpcfg_ent))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Pmpcfg_ent_Pmpcfg_ent_chunk_0 :=
         ((update_subrange_vec_dec r.Pmpcfg_ent_Pmpcfg_ent_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  8 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Pmpcfg_ent_R:Pmpcfg_ent ->(1)words$word -> Pmpcfg_ent) v x=
    (( v with<|
     Pmpcfg_ent_Pmpcfg_ent_chunk_0 :=
       ((update_subrange_vec_dec v.Pmpcfg_ent_Pmpcfg_ent_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  8 words$word)) |>)))`;


(*val pmpReadCfgReg : integer -> M (mword ty32)*)

val _ = Define `
 ((pmpReadCfgReg:int ->(regstate)sail2_state_monad$sequential_state ->((((32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) n=
    (let l__85 = n in
   if (((l__85 = (( 0 : int):ii)))) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS pmp3cfg_ref) (\ (w__0 : Pmpcfg_ent) .  sail2_state_monad$bindS
     (sail2_state_monad$read_regS pmp2cfg_ref) (\ (w__1 : Pmpcfg_ent) .  sail2_state_monad$bindS
     (sail2_state_monad$read_regS pmp1cfg_ref) (\ (w__2 : Pmpcfg_ent) .  sail2_state_monad$bindS
     (sail2_state_monad$read_regS pmp0cfg_ref) (\ (w__3 : Pmpcfg_ent) . 
     sail2_state_monad$returnS ((concat_vec ((get_Pmpcfg_ent_bits w__0  :  8 words$word))
                ((concat_vec ((get_Pmpcfg_ent_bits w__1  :  8 words$word))
                    ((concat_vec ((get_Pmpcfg_ent_bits w__2  :  8 words$word))
                        ((get_Pmpcfg_ent_bits w__3  :  8 words$word))
                       :  16 words$word))
                   :  24 words$word))
               :  32 words$word))))))
   else if (((l__85 = (( 1 : int):ii)))) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS pmp7cfg_ref) (\ (w__4 : Pmpcfg_ent) .  sail2_state_monad$bindS
     (sail2_state_monad$read_regS pmp6cfg_ref) (\ (w__5 : Pmpcfg_ent) .  sail2_state_monad$bindS
     (sail2_state_monad$read_regS pmp5cfg_ref) (\ (w__6 : Pmpcfg_ent) .  sail2_state_monad$bindS
     (sail2_state_monad$read_regS pmp4cfg_ref) (\ (w__7 : Pmpcfg_ent) . 
     sail2_state_monad$returnS ((concat_vec ((get_Pmpcfg_ent_bits w__4  :  8 words$word))
                ((concat_vec ((get_Pmpcfg_ent_bits w__5  :  8 words$word))
                    ((concat_vec ((get_Pmpcfg_ent_bits w__6  :  8 words$word))
                        ((get_Pmpcfg_ent_bits w__7  :  8 words$word))
                       :  16 words$word))
                   :  24 words$word))
               :  32 words$word))))))
   else if (((l__85 = (( 2 : int):ii)))) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS pmp11cfg_ref) (\ (w__8 : Pmpcfg_ent) .  sail2_state_monad$bindS
     (sail2_state_monad$read_regS pmp10cfg_ref) (\ (w__9 : Pmpcfg_ent) .  sail2_state_monad$bindS
     (sail2_state_monad$read_regS pmp9cfg_ref) (\ (w__10 : Pmpcfg_ent) .  sail2_state_monad$bindS
     (sail2_state_monad$read_regS pmp8cfg_ref) (\ (w__11 : Pmpcfg_ent) . 
     sail2_state_monad$returnS ((concat_vec ((get_Pmpcfg_ent_bits w__8  :  8 words$word))
                ((concat_vec ((get_Pmpcfg_ent_bits w__9  :  8 words$word))
                    ((concat_vec ((get_Pmpcfg_ent_bits w__10  :  8 words$word))
                        ((get_Pmpcfg_ent_bits w__11  :  8 words$word))
                       :  16 words$word))
                   :  24 words$word))
               :  32 words$word))))))
   else if (((l__85 = (( 3 : int):ii)))) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS pmp15cfg_ref) (\ (w__12 : Pmpcfg_ent) .  sail2_state_monad$bindS
     (sail2_state_monad$read_regS pmp14cfg_ref) (\ (w__13 : Pmpcfg_ent) .  sail2_state_monad$bindS
     (sail2_state_monad$read_regS pmp13cfg_ref) (\ (w__14 : Pmpcfg_ent) .  sail2_state_monad$bindS
     (sail2_state_monad$read_regS pmp12cfg_ref) (\ (w__15 : Pmpcfg_ent) . 
     sail2_state_monad$returnS ((concat_vec ((get_Pmpcfg_ent_bits w__12  :  8 words$word))
                ((concat_vec ((get_Pmpcfg_ent_bits w__13  :  8 words$word))
                    ((concat_vec ((get_Pmpcfg_ent_bits w__14  :  8 words$word))
                        ((get_Pmpcfg_ent_bits w__15  :  8 words$word))
                       :  16 words$word))
                   :  24 words$word))
               :  32 words$word))))))
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at model/riscv_pmp_regs.sail 75:2 - 85:8") (sail2_state_monad$exitS () )))`;


(*val pmpLocked : Pmpcfg_ent -> bool*)

val _ = Define `
 ((pmpLocked:Pmpcfg_ent -> bool) cfg=  (((get_Pmpcfg_ent_L cfg  :  1 words$word)) = (0b1w :  1 words$word)))`;


(*val pmpTORLocked : Pmpcfg_ent -> M bool*)

val _ = Define `
 ((pmpTORLocked:Pmpcfg_ent ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) cfg=
    (sail2_state$and_boolS (sail2_state_monad$returnS (((((get_Pmpcfg_ent_L cfg  :  1 words$word)) = (0b1w :  1 words$word)))))
     ( sail2_state_monad$bindS(pmpAddrMatchType_of_bits ((get_Pmpcfg_ent_A cfg  :  2 words$word))) (\ (w__0 :
        PmpAddrMatchType) . 
      sail2_state_monad$returnS (((w__0 = TOR)))))))`;


(*val pmpWriteCfg : Pmpcfg_ent -> mword ty8 -> Pmpcfg_ent*)

val _ = Define `
 ((pmpWriteCfg:Pmpcfg_ent ->(8)words$word -> Pmpcfg_ent) (cfg : Pmpcfg_ent) (v : 8 bits)=
    (if ((pmpLocked cfg)) then cfg
   else Mk_Pmpcfg_ent ((and_vec v (0x9Fw :  8 words$word)  :  8 words$word))))`;


(*val pmpWriteCfgReg : integer -> mword ty32 -> M unit*)

val _ = Define `
 ((pmpWriteCfgReg:int ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) n v=
    (let l__81 = n in
   if (((l__81 = (( 0 : int):ii)))) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS pmp0cfg_ref) (\ (w__0 : Pmpcfg_ent) .  sail2_state_monad$bindS (sail2_state_monad$seqS
     (sail2_state_monad$write_regS pmp0cfg_ref ((pmpWriteCfg w__0 ((subrange_vec_dec v (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word)))))
     (sail2_state_monad$read_regS pmp1cfg_ref)) (\ (w__1 : Pmpcfg_ent) .  sail2_state_monad$bindS (sail2_state_monad$seqS
     (sail2_state_monad$write_regS pmp1cfg_ref ((pmpWriteCfg w__1 ((subrange_vec_dec v (( 15 : int):ii) (( 8 : int):ii)  :  8 words$word)))))
     (sail2_state_monad$read_regS pmp2cfg_ref)) (\ (w__2 : Pmpcfg_ent) .  sail2_state_monad$bindS (sail2_state_monad$seqS
     (sail2_state_monad$write_regS pmp2cfg_ref ((pmpWriteCfg w__2 ((subrange_vec_dec v (( 23 : int):ii) (( 16 : int):ii)  :  8 words$word)))))
     (sail2_state_monad$read_regS pmp3cfg_ref)) (\ (w__3 : Pmpcfg_ent) . 
     sail2_state_monad$write_regS pmp3cfg_ref ((pmpWriteCfg w__3 ((subrange_vec_dec v (( 31 : int):ii) (( 24 : int):ii)  :  8 words$word))))))))
   else if (((l__81 = (( 1 : int):ii)))) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS pmp4cfg_ref) (\ (w__4 : Pmpcfg_ent) .  sail2_state_monad$bindS (sail2_state_monad$seqS
     (sail2_state_monad$write_regS pmp4cfg_ref ((pmpWriteCfg w__4 ((subrange_vec_dec v (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word)))))
     (sail2_state_monad$read_regS pmp5cfg_ref)) (\ (w__5 : Pmpcfg_ent) .  sail2_state_monad$bindS (sail2_state_monad$seqS
     (sail2_state_monad$write_regS pmp5cfg_ref ((pmpWriteCfg w__5 ((subrange_vec_dec v (( 15 : int):ii) (( 8 : int):ii)  :  8 words$word)))))
     (sail2_state_monad$read_regS pmp6cfg_ref)) (\ (w__6 : Pmpcfg_ent) .  sail2_state_monad$bindS (sail2_state_monad$seqS
     (sail2_state_monad$write_regS pmp6cfg_ref ((pmpWriteCfg w__6 ((subrange_vec_dec v (( 23 : int):ii) (( 16 : int):ii)  :  8 words$word)))))
     (sail2_state_monad$read_regS pmp7cfg_ref)) (\ (w__7 : Pmpcfg_ent) . 
     sail2_state_monad$write_regS pmp7cfg_ref ((pmpWriteCfg w__7 ((subrange_vec_dec v (( 31 : int):ii) (( 24 : int):ii)  :  8 words$word))))))))
   else if (((l__81 = (( 2 : int):ii)))) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS pmp8cfg_ref) (\ (w__8 : Pmpcfg_ent) .  sail2_state_monad$bindS (sail2_state_monad$seqS
     (sail2_state_monad$write_regS pmp8cfg_ref ((pmpWriteCfg w__8 ((subrange_vec_dec v (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word)))))
     (sail2_state_monad$read_regS pmp9cfg_ref)) (\ (w__9 : Pmpcfg_ent) .  sail2_state_monad$bindS (sail2_state_monad$seqS
     (sail2_state_monad$write_regS pmp9cfg_ref ((pmpWriteCfg w__9 ((subrange_vec_dec v (( 15 : int):ii) (( 8 : int):ii)  :  8 words$word)))))
     (sail2_state_monad$read_regS pmp10cfg_ref)) (\ (w__10 : Pmpcfg_ent) .  sail2_state_monad$bindS (sail2_state_monad$seqS
     (sail2_state_monad$write_regS
       pmp10cfg_ref
       ((pmpWriteCfg w__10 ((subrange_vec_dec v (( 23 : int):ii) (( 16 : int):ii)  :  8 words$word)))))
     (sail2_state_monad$read_regS pmp11cfg_ref)) (\ (w__11 : Pmpcfg_ent) . 
     sail2_state_monad$write_regS
       pmp11cfg_ref
       ((pmpWriteCfg w__11 ((subrange_vec_dec v (( 31 : int):ii) (( 24 : int):ii)  :  8 words$word))))))))
   else if (((l__81 = (( 3 : int):ii)))) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS pmp12cfg_ref) (\ (w__12 : Pmpcfg_ent) .  sail2_state_monad$bindS (sail2_state_monad$seqS
     (sail2_state_monad$write_regS pmp12cfg_ref ((pmpWriteCfg w__12 ((subrange_vec_dec v (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word)))))
     (sail2_state_monad$read_regS pmp13cfg_ref)) (\ (w__13 : Pmpcfg_ent) .  sail2_state_monad$bindS (sail2_state_monad$seqS
     (sail2_state_monad$write_regS pmp13cfg_ref ((pmpWriteCfg w__13 ((subrange_vec_dec v (( 15 : int):ii) (( 8 : int):ii)  :  8 words$word)))))
     (sail2_state_monad$read_regS pmp14cfg_ref)) (\ (w__14 : Pmpcfg_ent) .  sail2_state_monad$bindS (sail2_state_monad$seqS
     (sail2_state_monad$write_regS
       pmp14cfg_ref
       ((pmpWriteCfg w__14 ((subrange_vec_dec v (( 23 : int):ii) (( 16 : int):ii)  :  8 words$word)))))
     (sail2_state_monad$read_regS pmp15cfg_ref)) (\ (w__15 : Pmpcfg_ent) . 
     sail2_state_monad$write_regS
       pmp15cfg_ref
       ((pmpWriteCfg w__15 ((subrange_vec_dec v (( 31 : int):ii) (( 24 : int):ii)  :  8 words$word))))))))
   else sail2_state_monad$seqS
     (sail2_state_monad$assert_expS F "Pattern match failure at model/riscv_pmp_regs.sail 101:2 - 144:8") (sail2_state_monad$exitS () )))`;


(*val pmpWriteAddr : bool -> bool -> mword ty32 -> mword ty32 -> mword ty32*)

val _ = Define `
 ((pmpWriteAddr:bool -> bool ->(32)words$word ->(32)words$word ->(32)words$word) (locked : bool) (tor_locked : bool) (reg : xlenbits) (v : xlenbits)=
    (if (((locked \/ tor_locked))) then reg
   else v))`;


(*val pmpAddrRange : Pmpcfg_ent -> mword ty32 -> mword ty32 -> M (maybe ((mword ty32 * mword ty32)))*)

val _ = Define `
 ((pmpAddrRange:Pmpcfg_ent ->(32)words$word ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((((32)words$word#(32)words$word)option),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (cfg : Pmpcfg_ent) (pmpaddr : xlenbits) (prev_pmpaddr : xlenbits)=  (sail2_state_monad$bindS
   (pmpAddrMatchType_of_bits ((get_Pmpcfg_ent_A cfg  :  2 words$word))) (\ (w__0 : PmpAddrMatchType) . 
   sail2_state_monad$returnS ((case w__0 of
     OFF => NONE
   | TOR => SOME ((shiftl prev_pmpaddr (( 2 : int):ii)  :  32 words$word), (shiftl pmpaddr (( 2 : int):ii)  :  32 words$word))
   | NA4 =>
      let lo = ((shiftl pmpaddr (( 2 : int):ii)  :  32 words$word)) in
      SOME (lo, (add_vec_int lo (( 4 : int):ii)  :  32 words$word))
   | NAPOT =>
      let mask = ((xor_vec pmpaddr ((add_vec_int pmpaddr (( 1 : int):ii)  :  32 words$word))  :  32 words$word)) in
      let lo = ((and_vec pmpaddr ((not_vec mask  :  32 words$word))  :  32 words$word)) in
      let len = ((add_vec_int mask (( 1 : int):ii)  :  32 words$word)) in
      SOME ((shiftl lo (( 2 : int):ii)  :  32 words$word),
            (shiftl ((add_vec lo len  :  32 words$word)) (( 2 : int):ii)  :  32 words$word))
   )))))`;


(*val pmpCheckRWX : Pmpcfg_ent -> AccessType unit -> bool*)

val _ = Define `
 ((pmpCheckRWX:Pmpcfg_ent ->(unit)AccessType -> bool) ent acc=
    ((case acc of
     Read (_) => (((get_Pmpcfg_ent_R ent  :  1 words$word)) = (0b1w :  1 words$word))
   | Write (_) => (((get_Pmpcfg_ent_W ent  :  1 words$word)) = (0b1w :  1 words$word))
   | ReadWrite (_) =>
      ((((((get_Pmpcfg_ent_R ent  :  1 words$word)) = (0b1w :  1 words$word)))) /\ (((((get_Pmpcfg_ent_W ent  :  1 words$word)) = (0b1w :  1 words$word)))))
   | Execute (() ) => (((get_Pmpcfg_ent_X ent  :  1 words$word)) = (0b1w :  1 words$word))
   )))`;


(*val pmpCheckPerms : Pmpcfg_ent -> AccessType unit -> Privilege -> bool*)

val _ = Define `
 ((pmpCheckPerms:Pmpcfg_ent ->(unit)AccessType -> Privilege -> bool) ent acc priv=
    ((case priv of
     Machine => if ((pmpLocked ent)) then pmpCheckRWX ent acc else T
   | _ => pmpCheckRWX ent acc
   )))`;


(*val pmpAddrMatch_of_num : integer -> pmpAddrMatch*)

val _ = Define `
 ((pmpAddrMatch_of_num:int -> pmpAddrMatch) arg_=
    (let l__79 = arg_ in
   if (((l__79 = (( 0 : int):ii)))) then PMP_NoMatch
   else if (((l__79 = (( 1 : int):ii)))) then PMP_PartialMatch
   else PMP_Match))`;


(*val num_of_pmpAddrMatch : pmpAddrMatch -> integer*)

val _ = Define `
 ((num_of_pmpAddrMatch:pmpAddrMatch -> int) arg_=
    ((case arg_ of   PMP_NoMatch => (( 0 : int):ii) | PMP_PartialMatch => (( 1 : int):ii) | PMP_Match => (( 2 : int):ii) )))`;


(*val pmpMatchAddr : mword ty32 -> mword ty32 -> maybe ((mword ty32 * mword ty32)) -> pmpAddrMatch*)

val _ = Define `
 ((pmpMatchAddr:(32)words$word ->(32)words$word ->(xlenbits#xlenbits)option -> pmpAddrMatch) (addr : xlenbits) (width : xlenbits) (rng : pmp_addr_range)=
    ((case rng of
     NONE => PMP_NoMatch
   | SOME ((lo, hi)) =>
      if ((zopz0zI_u hi lo)) then PMP_NoMatch
      else if (((((zopz0zIzJ_u ((add_vec addr width  :  32 words$word)) lo)) \/ ((zopz0zIzJ_u hi addr))))) then
        PMP_NoMatch
      else if (((((zopz0zIzJ_u lo addr)) /\ ((zopz0zIzJ_u ((add_vec addr width  :  32 words$word)) hi))))) then
        PMP_Match
      else PMP_PartialMatch
   )))`;


(*val pmpMatch_of_num : integer -> pmpMatch*)

val _ = Define `
 ((pmpMatch_of_num:int -> pmpMatch) arg_=
    (let l__77 = arg_ in
   if (((l__77 = (( 0 : int):ii)))) then PMP_Success
   else if (((l__77 = (( 1 : int):ii)))) then PMP_Continue
   else PMP_Fail))`;


(*val num_of_pmpMatch : pmpMatch -> integer*)

val _ = Define `
 ((num_of_pmpMatch:pmpMatch -> int) arg_=
    ((case arg_ of   PMP_Success => (( 0 : int):ii) | PMP_Continue => (( 1 : int):ii) | PMP_Fail => (( 2 : int):ii) )))`;


(*val pmpMatchEntry : mword ty32 -> mword ty32 -> AccessType unit -> Privilege -> Pmpcfg_ent -> mword ty32 -> mword ty32 -> M pmpMatch*)

val _ = Define `
 ((pmpMatchEntry:(32)words$word ->(32)words$word ->(ext_access_type)AccessType -> Privilege -> Pmpcfg_ent ->(32)words$word ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((pmpMatch),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (addr : xlenbits) (width : xlenbits) (acc : ext_access_type AccessType) (priv :
  Privilege) (ent : Pmpcfg_ent) (pmpaddr : xlenbits) (prev_pmpaddr : xlenbits)=  (sail2_state_monad$bindS
   (pmpAddrRange ent pmpaddr prev_pmpaddr  : ( (( 32 words$word #  32 words$word))option) M) (\ rng . 
   sail2_state_monad$returnS ((case ((pmpMatchAddr addr width rng)) of
     PMP_NoMatch => PMP_Continue
   | PMP_PartialMatch => PMP_Fail
   | PMP_Match => if ((pmpCheckPerms ent acc priv)) then PMP_Success else PMP_Fail
   )))))`;


(*val pmpCheck : mword ty32 -> integer -> AccessType unit -> Privilege -> M (maybe ExceptionType)*)

val _ = Define `
 ((pmpCheck:(32)words$word -> int ->(ext_access_type)AccessType -> Privilege ->(regstate)sail2_state_monad$sequential_state ->((((ExceptionType)option),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (addr : xlenbits) (width : int) (acc : ext_access_type AccessType) (priv :
  Privilege)=
    (let (width : xlenbits) = ((to_bits (( 32 : int):ii) width  :  32 words$word)) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS pmp0cfg_ref) (\ (w__0 : Pmpcfg_ent) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS pmpaddr0_ref  : ( 32 words$word) M) (\ (w__1 :  32 words$word) .  sail2_state_monad$bindS
   (pmpMatchEntry addr width acc priv w__0 w__1 ((zeros_implicit (( 32 : int):ii)  :  32 words$word))) (\ (w__2 :
     pmpMatch) .  sail2_state_monad$bindS
   (case w__2 of
     PMP_Success => sail2_state_monad$returnS T
   | PMP_Fail => sail2_state_monad$returnS F
   | PMP_Continue => sail2_state_monad$bindS
      (sail2_state_monad$read_regS pmp1cfg_ref) (\ (w__3 : Pmpcfg_ent) .  sail2_state_monad$bindS
      (sail2_state_monad$read_regS pmpaddr1_ref  : ( 32 words$word) M) (\ (w__4 :  32 words$word) .  sail2_state_monad$bindS
      (sail2_state_monad$read_regS pmpaddr0_ref  : ( 32 words$word) M) (\ (w__5 :  32 words$word) .  sail2_state_monad$bindS
      (pmpMatchEntry addr width acc priv w__3 w__4 w__5) (\ (w__6 : pmpMatch) . 
      (case w__6 of
        PMP_Success => sail2_state_monad$returnS T
      | PMP_Fail => sail2_state_monad$returnS F
      | PMP_Continue => sail2_state_monad$bindS
         (sail2_state_monad$read_regS pmp2cfg_ref) (\ (w__7 : Pmpcfg_ent) .  sail2_state_monad$bindS
         (sail2_state_monad$read_regS pmpaddr2_ref  : ( 32 words$word) M) (\ (w__8 :  32 words$word) .  sail2_state_monad$bindS
         (sail2_state_monad$read_regS pmpaddr1_ref  : ( 32 words$word) M) (\ (w__9 :  32 words$word) .  sail2_state_monad$bindS
         (pmpMatchEntry addr width acc priv w__7 w__8 w__9) (\ (w__10 : pmpMatch) . 
         (case w__10 of
           PMP_Success => sail2_state_monad$returnS T
         | PMP_Fail => sail2_state_monad$returnS F
         | PMP_Continue => sail2_state_monad$bindS
            (sail2_state_monad$read_regS pmp3cfg_ref) (\ (w__11 : Pmpcfg_ent) .  sail2_state_monad$bindS
            (sail2_state_monad$read_regS pmpaddr3_ref  : ( 32 words$word) M) (\ (w__12 :  32 words$word) .  sail2_state_monad$bindS
            (sail2_state_monad$read_regS pmpaddr2_ref  : ( 32 words$word) M) (\ (w__13 :  32 words$word) .  sail2_state_monad$bindS
            (pmpMatchEntry addr width acc priv w__11 w__12 w__13) (\ (w__14 : pmpMatch) . 
            (case w__14 of
              PMP_Success => sail2_state_monad$returnS T
            | PMP_Fail => sail2_state_monad$returnS F
            | PMP_Continue => sail2_state_monad$bindS
               (sail2_state_monad$read_regS pmp4cfg_ref) (\ (w__15 : Pmpcfg_ent) .  sail2_state_monad$bindS
               (sail2_state_monad$read_regS pmpaddr4_ref  : ( 32 words$word) M) (\ (w__16 :  32 words$word) .  sail2_state_monad$bindS
               (sail2_state_monad$read_regS pmpaddr3_ref  : ( 32 words$word) M) (\ (w__17 :  32 words$word) .  sail2_state_monad$bindS
               (pmpMatchEntry addr width acc priv w__15 w__16 w__17) (\ (w__18 : pmpMatch) . 
               (case w__18 of
                 PMP_Success => sail2_state_monad$returnS T
               | PMP_Fail => sail2_state_monad$returnS F
               | PMP_Continue => sail2_state_monad$bindS
                  (sail2_state_monad$read_regS pmp5cfg_ref) (\ (w__19 : Pmpcfg_ent) .  sail2_state_monad$bindS
                  (sail2_state_monad$read_regS pmpaddr5_ref  : ( 32 words$word) M) (\ (w__20 :  32 words$word) .  sail2_state_monad$bindS
                  (sail2_state_monad$read_regS pmpaddr4_ref  : ( 32 words$word) M) (\ (w__21 :  32 words$word) .  sail2_state_monad$bindS
                  (pmpMatchEntry addr width acc priv w__19 w__20 w__21) (\ (w__22 : pmpMatch) . 
                  (case w__22 of
                    PMP_Success => sail2_state_monad$returnS T
                  | PMP_Fail => sail2_state_monad$returnS F
                  | PMP_Continue => sail2_state_monad$bindS
                     (sail2_state_monad$read_regS pmp6cfg_ref) (\ (w__23 : Pmpcfg_ent) .  sail2_state_monad$bindS
                     (sail2_state_monad$read_regS pmpaddr6_ref  : ( 32 words$word) M) (\ (w__24 :  32 words$word) .  sail2_state_monad$bindS
                     (sail2_state_monad$read_regS pmpaddr5_ref  : ( 32 words$word) M) (\ (w__25 :  32 words$word) .  sail2_state_monad$bindS
                     (pmpMatchEntry addr width acc priv w__23 w__24 w__25) (\ (w__26 : pmpMatch) . 
                     (case w__26 of
                       PMP_Success => sail2_state_monad$returnS T
                     | PMP_Fail => sail2_state_monad$returnS F
                     | PMP_Continue => sail2_state_monad$bindS
                        (sail2_state_monad$read_regS pmp7cfg_ref) (\ (w__27 : Pmpcfg_ent) .  sail2_state_monad$bindS
                        (sail2_state_monad$read_regS pmpaddr7_ref  : ( 32 words$word) M) (\ (w__28 :  32 words$word) .  sail2_state_monad$bindS
                        (sail2_state_monad$read_regS pmpaddr6_ref  : ( 32 words$word) M) (\ (w__29 :  32 words$word) .  sail2_state_monad$bindS
                        (pmpMatchEntry addr width acc priv w__27 w__28 w__29) (\ (w__30 :
                          pmpMatch) . 
                        (case w__30 of
                          PMP_Success => sail2_state_monad$returnS T
                        | PMP_Fail => sail2_state_monad$returnS F
                        | PMP_Continue => sail2_state_monad$bindS
                           (sail2_state_monad$read_regS pmp8cfg_ref) (\ (w__31 : Pmpcfg_ent) .  sail2_state_monad$bindS
                           (sail2_state_monad$read_regS pmpaddr8_ref  : ( 32 words$word) M) (\ (w__32 :  32 words$word) .  sail2_state_monad$bindS
                           (sail2_state_monad$read_regS pmpaddr7_ref  : ( 32 words$word) M) (\ (w__33 :  32 words$word) .  sail2_state_monad$bindS
                           (pmpMatchEntry addr width acc priv w__31 w__32 w__33) (\ (w__34 :
                             pmpMatch) . 
                           (case w__34 of
                             PMP_Success => sail2_state_monad$returnS T
                           | PMP_Fail => sail2_state_monad$returnS F
                           | PMP_Continue => sail2_state_monad$bindS
                              (sail2_state_monad$read_regS pmp9cfg_ref) (\ (w__35 : Pmpcfg_ent) .  sail2_state_monad$bindS
                              (sail2_state_monad$read_regS pmpaddr9_ref  : ( 32 words$word) M) (\ (w__36 :  32 words$word) .  sail2_state_monad$bindS
                              (sail2_state_monad$read_regS pmpaddr8_ref  : ( 32 words$word) M) (\ (w__37 :  32 words$word) .  sail2_state_monad$bindS
                              (pmpMatchEntry addr width acc priv w__35 w__36 w__37) (\ (w__38 :
                                pmpMatch) . 
                              (case w__38 of
                                PMP_Success => sail2_state_monad$returnS T
                              | PMP_Fail => sail2_state_monad$returnS F
                              | PMP_Continue => sail2_state_monad$bindS
                                 (sail2_state_monad$read_regS pmp10cfg_ref) (\ (w__39 : Pmpcfg_ent) .  sail2_state_monad$bindS
                                 (sail2_state_monad$read_regS pmpaddr10_ref  : ( 32 words$word) M) (\ (w__40 :
                                    32 words$word) .  sail2_state_monad$bindS
                                 (sail2_state_monad$read_regS pmpaddr9_ref  : ( 32 words$word) M) (\ (w__41 :
                                    32 words$word) .  sail2_state_monad$bindS
                                 (pmpMatchEntry addr width acc priv w__39 w__40 w__41) (\ (w__42 :
                                   pmpMatch) . 
                                 (case w__42 of
                                   PMP_Success => sail2_state_monad$returnS T
                                 | PMP_Fail => sail2_state_monad$returnS F
                                 | PMP_Continue => sail2_state_monad$bindS
                                    (sail2_state_monad$read_regS pmp11cfg_ref) (\ (w__43 : Pmpcfg_ent) .  sail2_state_monad$bindS
                                    (sail2_state_monad$read_regS pmpaddr11_ref  : ( 32 words$word) M) (\ (w__44 :
                                       32 words$word) .  sail2_state_monad$bindS
                                    (sail2_state_monad$read_regS pmpaddr10_ref  : ( 32 words$word) M) (\ (w__45 :
                                       32 words$word) .  sail2_state_monad$bindS
                                    (pmpMatchEntry addr width acc priv w__43 w__44 w__45) (\ (w__46 :
                                      pmpMatch) . 
                                    (case w__46 of
                                      PMP_Success => sail2_state_monad$returnS T
                                    | PMP_Fail => sail2_state_monad$returnS F
                                    | PMP_Continue => sail2_state_monad$bindS
                                       (sail2_state_monad$read_regS pmp12cfg_ref) (\ (w__47 : Pmpcfg_ent) .  sail2_state_monad$bindS
                                       (sail2_state_monad$read_regS pmpaddr12_ref  : ( 32 words$word) M) (\ (w__48 :
                                          32 words$word) .  sail2_state_monad$bindS
                                       (sail2_state_monad$read_regS pmpaddr11_ref  : ( 32 words$word) M) (\ (w__49 :
                                          32 words$word) .  sail2_state_monad$bindS
                                       (pmpMatchEntry addr width acc priv w__47 w__48 w__49) (\ (w__50 :
                                         pmpMatch) . 
                                       (case w__50 of
                                         PMP_Success => sail2_state_monad$returnS T
                                       | PMP_Fail => sail2_state_monad$returnS F
                                       | PMP_Continue => sail2_state_monad$bindS
                                          (sail2_state_monad$read_regS pmp13cfg_ref) (\ (w__51 : Pmpcfg_ent) .  sail2_state_monad$bindS
                                          (sail2_state_monad$read_regS pmpaddr13_ref  : ( 32 words$word) M) (\ (w__52 :
                                             32 words$word) .  sail2_state_monad$bindS
                                          (sail2_state_monad$read_regS pmpaddr12_ref  : ( 32 words$word) M) (\ (w__53 :
                                             32 words$word) .  sail2_state_monad$bindS
                                          (pmpMatchEntry addr width acc priv w__51 w__52 w__53) (\ (w__54 :
                                            pmpMatch) . 
                                          (case w__54 of
                                            PMP_Success => sail2_state_monad$returnS T
                                          | PMP_Fail => sail2_state_monad$returnS F
                                          | PMP_Continue => sail2_state_monad$bindS
                                             (sail2_state_monad$read_regS pmp14cfg_ref) (\ (w__55 : Pmpcfg_ent) .  sail2_state_monad$bindS
                                             (sail2_state_monad$read_regS pmpaddr14_ref  : ( 32 words$word) M) (\ (w__56 :
                                                32 words$word) .  sail2_state_monad$bindS
                                             (sail2_state_monad$read_regS pmpaddr13_ref  : ( 32 words$word) M) (\ (w__57 :
                                                32 words$word) .  sail2_state_monad$bindS
                                             (pmpMatchEntry addr width acc priv w__55 w__56 w__57) (\ (w__58 :
                                               pmpMatch) . 
                                             (case w__58 of
                                               PMP_Success => sail2_state_monad$returnS T
                                             | PMP_Fail => sail2_state_monad$returnS F
                                             | PMP_Continue => sail2_state_monad$bindS
                                                (sail2_state_monad$read_regS pmp15cfg_ref) (\ (w__59 : Pmpcfg_ent) .  sail2_state_monad$bindS
                                                (sail2_state_monad$read_regS pmpaddr15_ref  : ( 32 words$word) M) (\ (w__60 :
                                                   32 words$word) .  sail2_state_monad$bindS
                                                (sail2_state_monad$read_regS pmpaddr14_ref  : ( 32 words$word) M) (\ (w__61 :
                                                   32 words$word) .  sail2_state_monad$bindS
                                                (pmpMatchEntry addr width acc priv w__59 w__60 w__61) (\ (w__62 :
                                                  pmpMatch) . 
                                                sail2_state_monad$returnS ((case w__62 of
                                                  PMP_Success => T
                                                | PMP_Fail => F
                                                | PMP_Continue =>
                                                   (case priv of
                                                     Machine => T
                                                   | _ => F
                                                   )
                                                ))))))
                                             )))))
                                          )))))
                                       )))))
                                    )))))
                                 )))))
                              )))))
                           )))))
                        )))))
                     )))))
                  )))))
               )))))
            )))))
         )))))
      )))))
   ) (\ (check' : bool) . 
   sail2_state_monad$returnS (if check' then NONE
           else
             (case acc of
               Read (_) => SOME (E_Load_Access_Fault () )
             | Write (_) => SOME (E_SAMO_Access_Fault () )
             | ReadWrite (_) => SOME (E_SAMO_Access_Fault () )
             | Execute (() ) => SOME (E_Fetch_Access_Fault () )
             ))))))))`;


(*val init_pmp : unit -> M unit*)

val _ = Define `
 ((init_pmp:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS pmp0cfg_ref) (\ (w__0 : Pmpcfg_ent) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS pmp0cfg_ref ((update_Pmpcfg_ent_A w__0 ((pmpAddrMatchType_to_bits OFF  :  2 words$word)))))
   (sail2_state_monad$read_regS pmp1cfg_ref)) (\ (w__1 : Pmpcfg_ent) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS pmp1cfg_ref ((update_Pmpcfg_ent_A w__1 ((pmpAddrMatchType_to_bits OFF  :  2 words$word)))))
   (sail2_state_monad$read_regS pmp2cfg_ref)) (\ (w__2 : Pmpcfg_ent) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS pmp2cfg_ref ((update_Pmpcfg_ent_A w__2 ((pmpAddrMatchType_to_bits OFF  :  2 words$word)))))
   (sail2_state_monad$read_regS pmp3cfg_ref)) (\ (w__3 : Pmpcfg_ent) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS pmp3cfg_ref ((update_Pmpcfg_ent_A w__3 ((pmpAddrMatchType_to_bits OFF  :  2 words$word)))))
   (sail2_state_monad$read_regS pmp4cfg_ref)) (\ (w__4 : Pmpcfg_ent) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS pmp4cfg_ref ((update_Pmpcfg_ent_A w__4 ((pmpAddrMatchType_to_bits OFF  :  2 words$word)))))
   (sail2_state_monad$read_regS pmp5cfg_ref)) (\ (w__5 : Pmpcfg_ent) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS pmp5cfg_ref ((update_Pmpcfg_ent_A w__5 ((pmpAddrMatchType_to_bits OFF  :  2 words$word)))))
   (sail2_state_monad$read_regS pmp6cfg_ref)) (\ (w__6 : Pmpcfg_ent) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS pmp6cfg_ref ((update_Pmpcfg_ent_A w__6 ((pmpAddrMatchType_to_bits OFF  :  2 words$word)))))
   (sail2_state_monad$read_regS pmp7cfg_ref)) (\ (w__7 : Pmpcfg_ent) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS pmp7cfg_ref ((update_Pmpcfg_ent_A w__7 ((pmpAddrMatchType_to_bits OFF  :  2 words$word)))))
   (sail2_state_monad$read_regS pmp8cfg_ref)) (\ (w__8 : Pmpcfg_ent) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS pmp8cfg_ref ((update_Pmpcfg_ent_A w__8 ((pmpAddrMatchType_to_bits OFF  :  2 words$word)))))
   (sail2_state_monad$read_regS pmp9cfg_ref)) (\ (w__9 : Pmpcfg_ent) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS pmp9cfg_ref ((update_Pmpcfg_ent_A w__9 ((pmpAddrMatchType_to_bits OFF  :  2 words$word)))))
   (sail2_state_monad$read_regS pmp10cfg_ref)) (\ (w__10 : Pmpcfg_ent) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS
     pmp10cfg_ref
     ((update_Pmpcfg_ent_A w__10 ((pmpAddrMatchType_to_bits OFF  :  2 words$word)))))
   (sail2_state_monad$read_regS pmp11cfg_ref)) (\ (w__11 : Pmpcfg_ent) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS
     pmp11cfg_ref
     ((update_Pmpcfg_ent_A w__11 ((pmpAddrMatchType_to_bits OFF  :  2 words$word)))))
   (sail2_state_monad$read_regS pmp12cfg_ref)) (\ (w__12 : Pmpcfg_ent) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS
     pmp12cfg_ref
     ((update_Pmpcfg_ent_A w__12 ((pmpAddrMatchType_to_bits OFF  :  2 words$word)))))
   (sail2_state_monad$read_regS pmp13cfg_ref)) (\ (w__13 : Pmpcfg_ent) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS
     pmp13cfg_ref
     ((update_Pmpcfg_ent_A w__13 ((pmpAddrMatchType_to_bits OFF  :  2 words$word)))))
   (sail2_state_monad$read_regS pmp14cfg_ref)) (\ (w__14 : Pmpcfg_ent) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS
     pmp14cfg_ref
     ((update_Pmpcfg_ent_A w__14 ((pmpAddrMatchType_to_bits OFF  :  2 words$word)))))
   (sail2_state_monad$read_regS pmp15cfg_ref)) (\ (w__15 : Pmpcfg_ent) . 
   sail2_state_monad$write_regS
     pmp15cfg_ref
     ((update_Pmpcfg_ent_A w__15 ((pmpAddrMatchType_to_bits OFF  :  2 words$word))))))))))))))))))))))`;


(*val ext_init_regs : unit -> M unit*)

val _ = Define `
 ((ext_init_regs:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$returnS () ))`;


(*
This function is called after above when running rvfi and allows the model
to be initialised differently (e.g. CHERI cap regs are initialised
to omnipotent instead of null).
*)
(*val ext_rvfi_init : unit -> M unit*)

val _ = Define `
 ((ext_rvfi_init:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS x1_ref  : ( 32 words$word) M) (\ (w__0 :  32 words$word) .  sail2_state_monad$write_regS x1_ref w__0)))`;


(*
THIS(csrno, priv, isWrite) allows an extension to block access to csrno,
at Privilege level priv. It should return true if the access is allowed.
*)
(*val ext_check_CSR : mword ty12 -> Privilege -> bool -> bool*)

val _ = Define `
 ((ext_check_CSR:(12)words$word -> Privilege -> bool -> bool) csrno p isWrite=  T)`;


(*
THIS is called if ext_check_CSR returns false. It should
cause an appropriate RISCV exception.
*)
(*val ext_check_CSR_fail : unit -> unit*)

val _ = Define `
 ((ext_check_CSR_fail:unit -> unit) () =  () )`;


(*
Validate a read from physical memory.
THIS(access_type, paddr, size, aquire, release, reserved, read_meta) should
return Some(exception) to abort the read or None to allow it to proceed. The
check is performed after PMP checks and does not apply to MMIO memory.
*)
(*val ext_check_phys_mem_read : AccessType unit -> mword ty32 -> integer -> bool -> bool -> bool -> bool -> Ext_PhysAddr_Check*)

(*
Validate a write to physical memory.
THIS(write_kind, paddr, size, data, metadata) should return Some(exception)
to abort the write or None to allow it to proceed. The check is performed 
after PMP checks and does not apply to MMIO memory.
*)
(*val ext_check_phys_mem_write : forall 'int8_times_n. Size 'int8_times_n => write_kind -> mword ty32 -> integer -> mword 'int8_times_n -> unit -> Ext_PhysAddr_Check*)

(*val ext_fetch_check_pc : mword ty32 -> mword ty32 -> Ext_FetchAddr_Check unit*)

val _ = Define `
 ((ext_fetch_check_pc:(32)words$word ->(32)words$word ->(unit)Ext_FetchAddr_Check) (start_pc : xlenbits) (pc : xlenbits)=  (Ext_FetchAddr_OK pc))`;


(*val ext_handle_fetch_check_error : unit -> unit*)

val _ = Define `
 ((ext_handle_fetch_check_error:unit -> unit) err=  () )`;


(*val ext_control_check_addr : mword ty32 -> Ext_ControlAddr_Check unit*)

val _ = Define `
 ((ext_control_check_addr:(32)words$word ->(unit)Ext_ControlAddr_Check) pc=  (Ext_ControlAddr_OK pc))`;


(*val ext_control_check_pc : mword ty32 -> Ext_ControlAddr_Check unit*)

val _ = Define `
 ((ext_control_check_pc:(32)words$word ->(unit)Ext_ControlAddr_Check) pc=  (Ext_ControlAddr_OK pc))`;


(*val ext_handle_control_check_error : unit -> unit*)

val _ = Define `
 ((ext_handle_control_check_error:unit -> unit) err=  () )`;


(*val ext_data_get_addr : mword ty5 -> mword ty32 -> AccessType unit -> word_width -> M (Ext_DataAddr_Check unit)*)

val _ = Define `
 ((ext_data_get_addr:(5)words$word ->(32)words$word ->(ext_access_type)AccessType -> word_width ->(regstate)sail2_state_monad$sequential_state ->((((unit)Ext_DataAddr_Check),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (base : regidx) (offset : xlenbits) (acc : ext_access_type AccessType) (width :
  word_width)=  (sail2_state_monad$bindS
   (rX_bits base  : ( 32 words$word) M) (\ (w__0 :  32 words$word) . 
   let addr = ((add_vec w__0 offset  :  32 words$word)) in
   sail2_state_monad$returnS (Ext_DataAddr_OK addr))))`;


(*val ext_handle_data_check_error : unit -> unit*)

val _ = Define `
 ((ext_handle_data_check_error:unit -> unit) err=  () )`;


val _ = Define `
 ((ext_check_phys_mem_read:(unit)AccessType ->(32)words$word -> int -> bool -> bool -> bool -> bool -> Ext_PhysAddr_Check) access_type paddr size1 aquire release reserved read_meta=
    (Ext_PhysAddr_OK () ))`;


val _ = Define `
 ((ext_check_phys_mem_write:write_kind ->(32)words$word -> int -> 'int8_times_n words$word -> unit -> Ext_PhysAddr_Check) write_kind paddr size1 data metadata=  (Ext_PhysAddr_OK () ))`;


(*val csr_name_map_forwards : mword ty12 -> string*)

(*val csr_name_map_backwards : string -> M (mword ty12)*)

(*val csr_name_map_forwards_matches : mword ty12 -> bool*)

(*val csr_name_map_backwards_matches : string -> M bool*)

(*val csr_name_map_matches_prefix : string -> maybe ((mword ty12 * ii))*)

(*val ext_is_CSR_defined : mword ty12 -> Privilege -> M bool*)

(*val ext_read_CSR : mword ty12 -> M (maybe (mword ty32))*)

(*val ext_write_CSR : mword ty12 -> mword ty32 -> M (maybe (mword ty32))*)

(*val Mk_Ustatus : mword ty32 -> Ustatus*)

val _ = Define `
 ((Mk_Ustatus:(32)words$word -> Ustatus) v=
    (<| Ustatus_Ustatus_chunk_0 := ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) |>))`;


val _ = Define `
 ((get_Ustatus_bits:Ustatus ->(32)words$word) v=  ((subrange_vec_dec v.Ustatus_Ustatus_chunk_0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)))`;


val _ = Define `
 ((set_Ustatus_bits:((regstate),(register_value),(Ustatus))register_ref ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Ustatus_Ustatus_chunk_0 :=
         ((update_subrange_vec_dec r.Ustatus_Ustatus_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Ustatus_bits:Ustatus ->(32)words$word -> Ustatus) v x=
    (( v with<|
     Ustatus_Ustatus_chunk_0 :=
       ((update_subrange_vec_dec v.Ustatus_Ustatus_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Ustatus_UPIE:Ustatus ->(1)words$word) v=  ((subrange_vec_dec v.Ustatus_Ustatus_chunk_0 (( 4 : int):ii) (( 4 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Ustatus_UPIE:((regstate),(register_value),(Ustatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Ustatus_Ustatus_chunk_0 :=
         ((update_subrange_vec_dec r.Ustatus_Ustatus_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Ustatus_UPIE:Ustatus ->(1)words$word -> Ustatus) v x=
    (( v with<|
     Ustatus_Ustatus_chunk_0 :=
       ((update_subrange_vec_dec v.Ustatus_Ustatus_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Ustatus_UIE:Ustatus ->(1)words$word) v=  ((subrange_vec_dec v.Ustatus_Ustatus_chunk_0 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Ustatus_UIE:((regstate),(register_value),(Ustatus))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Ustatus_Ustatus_chunk_0 :=
         ((update_subrange_vec_dec r.Ustatus_Ustatus_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Ustatus_UIE:Ustatus ->(1)words$word -> Ustatus) v x=
    (( v with<|
     Ustatus_Ustatus_chunk_0 :=
       ((update_subrange_vec_dec v.Ustatus_Ustatus_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val lower_sstatus : Sstatus -> Ustatus*)

val _ = Define `
 ((lower_sstatus:Sstatus -> Ustatus) s=
    (let u = (Mk_Ustatus ((EXTZ (( 32 : int):ii) (0b0w :  1 words$word)  :  32 words$word))) in
   let u = (update_Ustatus_UPIE u ((get_Sstatus_UPIE s  :  1 words$word))) in
   update_Ustatus_UIE u ((get_Sstatus_UIE s  :  1 words$word))))`;


(*val lift_ustatus : Sstatus -> Ustatus -> Sstatus*)

val _ = Define `
 ((lift_ustatus:Sstatus -> Ustatus -> Sstatus) (s : Sstatus) (u : Ustatus)=
    (let s = (update_Sstatus_UPIE s ((get_Ustatus_UPIE u  :  1 words$word))) in
   update_Sstatus_UIE s ((get_Ustatus_UIE u  :  1 words$word))))`;


(*val legalize_ustatus : Mstatus -> mword ty32 -> M Mstatus*)

val _ = Define `
 ((legalize_ustatus:Mstatus ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((Mstatus),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (m : Mstatus) (v : xlenbits)=
    (let u = (Mk_Ustatus v) in
   let s = (lower_mstatus m) in
   let s = (lift_ustatus s u) in
   lift_sstatus m s))`;


(*val Mk_Uinterrupts : mword ty32 -> Uinterrupts*)

val _ = Define `
 ((Mk_Uinterrupts:(32)words$word -> Uinterrupts) v=
    (<| Uinterrupts_Uinterrupts_chunk_0 := ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) |>))`;


val _ = Define `
 ((get_Uinterrupts_bits:Uinterrupts ->(32)words$word) v=
    ((subrange_vec_dec v.Uinterrupts_Uinterrupts_chunk_0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)))`;


val _ = Define `
 ((set_Uinterrupts_bits:((regstate),(register_value),(Uinterrupts))register_ref ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Uinterrupts_Uinterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Uinterrupts_Uinterrupts_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Uinterrupts_bits:Uinterrupts ->(32)words$word -> Uinterrupts) v x=
    (( v with<|
     Uinterrupts_Uinterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Uinterrupts_Uinterrupts_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Uinterrupts_UEI:Uinterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Uinterrupts_Uinterrupts_chunk_0 (( 8 : int):ii) (( 8 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Uinterrupts_UEI:((regstate),(register_value),(Uinterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Uinterrupts_Uinterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Uinterrupts_Uinterrupts_chunk_0 (( 8 : int):ii) (( 8 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Uinterrupts_UEI:Uinterrupts ->(1)words$word -> Uinterrupts) v x=
    (( v with<|
     Uinterrupts_Uinterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Uinterrupts_Uinterrupts_chunk_0 (( 8 : int):ii) (( 8 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Uinterrupts_UTI:Uinterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Uinterrupts_Uinterrupts_chunk_0 (( 4 : int):ii) (( 4 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Uinterrupts_UTI:((regstate),(register_value),(Uinterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Uinterrupts_Uinterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Uinterrupts_Uinterrupts_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Uinterrupts_UTI:Uinterrupts ->(1)words$word -> Uinterrupts) v x=
    (( v with<|
     Uinterrupts_Uinterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Uinterrupts_Uinterrupts_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_Uinterrupts_USI:Uinterrupts ->(1)words$word) v=
    ((subrange_vec_dec v.Uinterrupts_Uinterrupts_chunk_0 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_Uinterrupts_USI:((regstate),(register_value),(Uinterrupts))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Uinterrupts_Uinterrupts_chunk_0 :=
         ((update_subrange_vec_dec r.Uinterrupts_Uinterrupts_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Uinterrupts_USI:Uinterrupts ->(1)words$word -> Uinterrupts) v x=
    (( v with<|
     Uinterrupts_Uinterrupts_chunk_0 :=
       ((update_subrange_vec_dec v.Uinterrupts_Uinterrupts_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  32 words$word)) |>)))`;


(*val lower_sip : Sinterrupts -> Sinterrupts -> Uinterrupts*)

val _ = Define `
 ((lower_sip:Sinterrupts -> Sinterrupts -> Uinterrupts) (s : Sinterrupts) (d : Sinterrupts)=
    (let (u : Uinterrupts) = (Mk_Uinterrupts ((EXTZ (( 32 : int):ii) (0b0w :  1 words$word)  :  32 words$word))) in
   let u =
     (update_Uinterrupts_UEI u
       ((and_vec ((get_Sinterrupts_UEI s  :  1 words$word)) ((get_Sinterrupts_UEI d  :  1 words$word))
          :  1 words$word))) in
   let u =
     (update_Uinterrupts_UTI u
       ((and_vec ((get_Sinterrupts_UTI s  :  1 words$word)) ((get_Sinterrupts_UTI d  :  1 words$word))
          :  1 words$word))) in
   update_Uinterrupts_USI u
     ((and_vec ((get_Sinterrupts_USI s  :  1 words$word)) ((get_Sinterrupts_USI d  :  1 words$word))
        :  1 words$word))))`;


(*val lower_sie : Sinterrupts -> Sinterrupts -> Uinterrupts*)

val _ = Define `
 ((lower_sie:Sinterrupts -> Sinterrupts -> Uinterrupts) (s : Sinterrupts) (d : Sinterrupts)=
    (let (u : Uinterrupts) = (Mk_Uinterrupts ((EXTZ (( 32 : int):ii) (0b0w :  1 words$word)  :  32 words$word))) in
   let u =
     (update_Uinterrupts_UEI u
       ((and_vec ((get_Sinterrupts_UEI s  :  1 words$word)) ((get_Sinterrupts_UEI d  :  1 words$word))
          :  1 words$word))) in
   let u =
     (update_Uinterrupts_UTI u
       ((and_vec ((get_Sinterrupts_UTI s  :  1 words$word)) ((get_Sinterrupts_UTI d  :  1 words$word))
          :  1 words$word))) in
   update_Uinterrupts_USI u
     ((and_vec ((get_Sinterrupts_USI s  :  1 words$word)) ((get_Sinterrupts_USI d  :  1 words$word))
        :  1 words$word))))`;


(*val lift_uip : Sinterrupts -> Sinterrupts -> Uinterrupts -> Sinterrupts*)

val _ = Define `
 ((lift_uip:Sinterrupts -> Sinterrupts -> Uinterrupts -> Sinterrupts) (o1 : Sinterrupts) (d : Sinterrupts) (u : Uinterrupts)=
    (let (s : Sinterrupts) = o1 in
   if (((((get_Sinterrupts_USI d  :  1 words$word)) = (0b1w :  1 words$word)))) then
     update_Sinterrupts_USI s ((get_Uinterrupts_USI u  :  1 words$word))
   else s))`;


(*val legalize_uip : Sinterrupts -> Sinterrupts -> mword ty32 -> Sinterrupts*)

val _ = Define `
 ((legalize_uip:Sinterrupts -> Sinterrupts ->(32)words$word -> Sinterrupts) (s : Sinterrupts) (d : Sinterrupts) (v : xlenbits)=
    (lift_uip s d ((Mk_Uinterrupts v))))`;


(*val lift_uie : Sinterrupts -> Sinterrupts -> Uinterrupts -> Sinterrupts*)

val _ = Define `
 ((lift_uie:Sinterrupts -> Sinterrupts -> Uinterrupts -> Sinterrupts) (o1 : Sinterrupts) (d : Sinterrupts) (u : Uinterrupts)=
    (let (s : Sinterrupts) = o1 in
   let s =
     (if (((((get_Sinterrupts_UEI d  :  1 words$word)) = (0b1w :  1 words$word)))) then
       update_Sinterrupts_UEI s ((get_Uinterrupts_UEI u  :  1 words$word))
     else s) in
   let s =
     (if (((((get_Sinterrupts_UTI d  :  1 words$word)) = (0b1w :  1 words$word)))) then
       update_Sinterrupts_UTI s ((get_Uinterrupts_UTI u  :  1 words$word))
     else s) in
   if (((((get_Sinterrupts_USI d  :  1 words$word)) = (0b1w :  1 words$word)))) then
     update_Sinterrupts_USI s ((get_Uinterrupts_USI u  :  1 words$word))
   else s))`;


(*val legalize_uie : Sinterrupts -> Sinterrupts -> mword ty32 -> Sinterrupts*)

val _ = Define `
 ((legalize_uie:Sinterrupts -> Sinterrupts ->(32)words$word -> Sinterrupts) (s : Sinterrupts) (d : Sinterrupts) (v : xlenbits)=
    (lift_uie s d ((Mk_Uinterrupts v))))`;


(*val ext_check_xret_priv : Privilege -> bool*)

val _ = Define `
 ((ext_check_xret_priv:Privilege -> bool) p=  T)`;


(*val ext_fail_xret_priv : unit -> unit*)

val _ = Define `
 ((ext_fail_xret_priv:unit -> unit) () =  () )`;


(*val handle_trap_extension : Privilege -> mword ty32 -> maybe unit -> unit*)

val _ = Define `
 ((handle_trap_extension:Privilege ->(32)words$word ->(unit)option -> unit) (p : Privilege) (pc : xlenbits) (u :  unit option)=  () )`;


(*val prepare_trap_vector : Privilege -> Mcause -> M (mword ty32)*)

val _ = Define `
 ((prepare_trap_vector:Privilege -> Mcause ->(regstate)sail2_state_monad$sequential_state ->((((32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (p : Privilege) (cause : Mcause)=  (sail2_state_monad$bindS
   (case p of
     Machine => sail2_state_monad$read_regS mtvec_ref
   | Supervisor => sail2_state_monad$read_regS stvec_ref
   | User => sail2_state_monad$read_regS utvec_ref
   ) (\ (tvec : Mtvec) . 
   (case ((tvec_addr tvec cause  :  ( 32 words$word)option)) of
     SOME (epc) => sail2_state_monad$returnS epc
   | NONE => (internal_error "Invalid tvec mode"  : ( 32 words$word) M)
   ))))`;


(*val get_xret_target : Privilege -> M (mword ty32)*)

val _ = Define `
 ((get_xret_target:Privilege ->(regstate)sail2_state_monad$sequential_state ->((((32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) p=
    ((case p of
     Machine => (sail2_state_monad$read_regS mepc_ref  : ( 32 words$word) M)
   | Supervisor => (sail2_state_monad$read_regS sepc_ref  : ( 32 words$word) M)
   | User => (sail2_state_monad$read_regS uepc_ref  : ( 32 words$word) M)
   )))`;


(*val set_xret_target : Privilege -> mword ty32 -> M (mword ty32)*)

val _ = Define `
 ((set_xret_target:Privilege ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->((((32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) p value=  (sail2_state_monad$bindS
   (legalize_xepc value  : ( 32 words$word) M) (\ target .  sail2_state_monad$seqS
   (case p of
     Machine => sail2_state_monad$write_regS mepc_ref target
   | Supervisor => sail2_state_monad$write_regS sepc_ref target
   | User => sail2_state_monad$write_regS uepc_ref target
   )
   (sail2_state_monad$returnS target))))`;


(*val prepare_xret_target : Privilege -> M (mword ty32)*)

val _ = Define `
 ((prepare_xret_target:Privilege ->(regstate)sail2_state_monad$sequential_state ->((((32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) p=  ((get_xret_target p  : ( 32 words$word) M)))`;


(*val get_mtvec : unit -> M (mword ty32)*)

val _ = Define `
 ((get_mtvec:unit ->(regstate)sail2_state_monad$sequential_state ->((((32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS mtvec_ref) (\ (w__0 : Mtvec) .  sail2_state_monad$returnS ((get_Mtvec_bits w__0  :  32 words$word)))))`;


(*val get_stvec : unit -> M (mword ty32)*)

val _ = Define `
 ((get_stvec:unit ->(regstate)sail2_state_monad$sequential_state ->((((32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS stvec_ref) (\ (w__0 : Mtvec) .  sail2_state_monad$returnS ((get_Mtvec_bits w__0  :  32 words$word)))))`;


(*val get_utvec : unit -> M (mword ty32)*)

val _ = Define `
 ((get_utvec:unit ->(regstate)sail2_state_monad$sequential_state ->((((32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS utvec_ref) (\ (w__0 : Mtvec) .  sail2_state_monad$returnS ((get_Mtvec_bits w__0  :  32 words$word)))))`;


(*val set_mtvec : mword ty32 -> M (mword ty32)*)

val _ = Define `
 ((set_mtvec:(32)words$word ->(regstate)sail2_state_monad$sequential_state ->((((32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) value=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS mtvec_ref) (\ (w__0 : Mtvec) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS mtvec_ref ((legalize_tvec w__0 value)))
   (sail2_state_monad$read_regS mtvec_ref)) (\ (w__1 : Mtvec) .  sail2_state_monad$returnS ((get_Mtvec_bits w__1  :  32 words$word))))))`;


(*val set_stvec : mword ty32 -> M (mword ty32)*)

val _ = Define `
 ((set_stvec:(32)words$word ->(regstate)sail2_state_monad$sequential_state ->((((32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) value=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS stvec_ref) (\ (w__0 : Mtvec) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS stvec_ref ((legalize_tvec w__0 value)))
   (sail2_state_monad$read_regS stvec_ref)) (\ (w__1 : Mtvec) .  sail2_state_monad$returnS ((get_Mtvec_bits w__1  :  32 words$word))))))`;


(*val set_utvec : mword ty32 -> M (mword ty32)*)

val _ = Define `
 ((set_utvec:(32)words$word ->(regstate)sail2_state_monad$sequential_state ->((((32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) value=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS utvec_ref) (\ (w__0 : Mtvec) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS utvec_ref ((legalize_tvec w__0 value)))
   (sail2_state_monad$read_regS utvec_ref)) (\ (w__1 : Mtvec) .  sail2_state_monad$returnS ((get_Mtvec_bits w__1  :  32 words$word))))))`;


(*val update_softfloat_fflags : mword ty5 -> M unit*)

val _ = Define `
 ((update_softfloat_fflags:(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) flags=
    (sail2_state_monad$write_regS float_fflags_ref ((zero_extend flags (( 64 : int):ii)  :  64 words$word))))`;


(*val riscv_f16Add : mword ty3 -> mword ty16 -> mword ty16 -> M (mword ty5 * mword ty16)*)

val _ = Define `
 ((riscv_f16Add:(3)words$word ->(16)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(16)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v1 v2=
    (let (_ : unit) = (softfloat_f16_add rm v1 v2) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))))))`;


(*val riscv_f16Sub : mword ty3 -> mword ty16 -> mword ty16 -> M (mword ty5 * mword ty16)*)

val _ = Define `
 ((riscv_f16Sub:(3)words$word ->(16)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(16)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v1 v2=
    (let (_ : unit) = (softfloat_f16_sub rm v1 v2) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))))))`;


(*val riscv_f16Mul : mword ty3 -> mword ty16 -> mword ty16 -> M (mword ty5 * mword ty16)*)

val _ = Define `
 ((riscv_f16Mul:(3)words$word ->(16)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(16)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v1 v2=
    (let (_ : unit) = (softfloat_f16_mul rm v1 v2) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))))))`;


(*val riscv_f16Div : mword ty3 -> mword ty16 -> mword ty16 -> M (mword ty5 * mword ty16)*)

val _ = Define `
 ((riscv_f16Div:(3)words$word ->(16)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(16)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v1 v2=
    (let (_ : unit) = (softfloat_f16_div rm v1 v2) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))))))`;


(*val riscv_f32Add : mword ty3 -> mword ty32 -> mword ty32 -> M (mword ty5 * mword ty32)*)

val _ = Define `
 ((riscv_f32Add:(3)words$word ->(32)words$word ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v1 v2=
    (let (_ : unit) = (softfloat_f32_add rm v1 v2) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))))))`;


(*val riscv_f32Sub : mword ty3 -> mword ty32 -> mword ty32 -> M (mword ty5 * mword ty32)*)

val _ = Define `
 ((riscv_f32Sub:(3)words$word ->(32)words$word ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v1 v2=
    (let (_ : unit) = (softfloat_f32_sub rm v1 v2) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))))))`;


(*val riscv_f32Mul : mword ty3 -> mword ty32 -> mword ty32 -> M (mword ty5 * mword ty32)*)

val _ = Define `
 ((riscv_f32Mul:(3)words$word ->(32)words$word ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v1 v2=
    (let (_ : unit) = (softfloat_f32_mul rm v1 v2) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))))))`;


(*val riscv_f32Div : mword ty3 -> mword ty32 -> mword ty32 -> M (mword ty5 * mword ty32)*)

val _ = Define `
 ((riscv_f32Div:(3)words$word ->(32)words$word ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v1 v2=
    (let (_ : unit) = (softfloat_f32_div rm v1 v2) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))))))`;


(*val riscv_f64Add : mword ty3 -> mword ty64 -> mword ty64 -> M (mword ty5 * mword ty64)*)

val _ = Define `
 ((riscv_f64Add:(3)words$word ->(64)words$word ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(64)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v1 v2=
    (let (_ : unit) = (softfloat_f64_add rm v1 v2) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word), w__1)))))`;


(*val riscv_f64Sub : mword ty3 -> mword ty64 -> mword ty64 -> M (mword ty5 * mword ty64)*)

val _ = Define `
 ((riscv_f64Sub:(3)words$word ->(64)words$word ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(64)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v1 v2=
    (let (_ : unit) = (softfloat_f64_sub rm v1 v2) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word), w__1)))))`;


(*val riscv_f64Mul : mword ty3 -> mword ty64 -> mword ty64 -> M (mword ty5 * mword ty64)*)

val _ = Define `
 ((riscv_f64Mul:(3)words$word ->(64)words$word ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(64)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v1 v2=
    (let (_ : unit) = (softfloat_f64_mul rm v1 v2) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word), w__1)))))`;


(*val riscv_f64Div : mword ty3 -> mword ty64 -> mword ty64 -> M (mword ty5 * mword ty64)*)

val _ = Define `
 ((riscv_f64Div:(3)words$word ->(64)words$word ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(64)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v1 v2=
    (let (_ : unit) = (softfloat_f64_div rm v1 v2) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word), w__1)))))`;


(*val riscv_f16MulAdd : mword ty3 -> mword ty16 -> mword ty16 -> mword ty16 -> M (mword ty5 * mword ty16)*)

val _ = Define `
 ((riscv_f16MulAdd:(3)words$word ->(16)words$word ->(16)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(16)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v1 v2 v3=
    (let (_ : unit) = (softfloat_f16_muladd rm v1 v2 v3) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))))))`;


(*val riscv_f32MulAdd : mword ty3 -> mword ty32 -> mword ty32 -> mword ty32 -> M (mword ty5 * mword ty32)*)

val _ = Define `
 ((riscv_f32MulAdd:(3)words$word ->(32)words$word ->(32)words$word ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v1 v2 v3=
    (let (_ : unit) = (softfloat_f32_muladd rm v1 v2 v3) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))))))`;


(*val riscv_f64MulAdd : mword ty3 -> mword ty64 -> mword ty64 -> mword ty64 -> M (mword ty5 * mword ty64)*)

val _ = Define `
 ((riscv_f64MulAdd:(3)words$word ->(64)words$word ->(64)words$word ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(64)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v1 v2 v3=
    (let (_ : unit) = (softfloat_f64_muladd rm v1 v2 v3) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word), w__1)))))`;


(*val riscv_f16Sqrt : mword ty3 -> mword ty16 -> M (mword ty5 * mword ty16)*)

val _ = Define `
 ((riscv_f16Sqrt:(3)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(16)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_f16_sqrt rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))))))`;


(*val riscv_f32Sqrt : mword ty3 -> mword ty32 -> M (mword ty5 * mword ty32)*)

val _ = Define `
 ((riscv_f32Sqrt:(3)words$word ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_f32_sqrt rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))))))`;


(*val riscv_f64Sqrt : mword ty3 -> mword ty64 -> M (mword ty5 * mword ty64)*)

val _ = Define `
 ((riscv_f64Sqrt:(3)words$word ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(64)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_f64_sqrt rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word), w__1)))))`;


(*val riscv_f16ToI32 : mword ty3 -> mword ty16 -> M (mword ty5 * mword ty32)*)

val _ = Define `
 ((riscv_f16ToI32:(3)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_f16_to_i32 rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))))))`;


(*val riscv_f16ToUi32 : mword ty3 -> mword ty16 -> M (mword ty5 * mword ty32)*)

val _ = Define `
 ((riscv_f16ToUi32:(3)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_f16_to_ui32 rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))))))`;


(*val riscv_i32ToF16 : mword ty3 -> mword ty32 -> M (mword ty5 * mword ty16)*)

val _ = Define `
 ((riscv_i32ToF16:(3)words$word ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_i32_to_f16 rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))))))`;


(*val riscv_ui32ToF16 : mword ty3 -> mword ty32 -> M (mword ty5 * mword ty16)*)

val _ = Define `
 ((riscv_ui32ToF16:(3)words$word ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_ui32_to_f16 rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))))))`;


(*val riscv_f16ToI64 : mword ty3 -> mword ty16 -> M (mword ty5 * mword ty64)*)

val _ = Define `
 ((riscv_f16ToI64:(3)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(64)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_f16_to_i64 rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word), w__1)))))`;


(*val riscv_f16ToUi64 : mword ty3 -> mword ty16 -> M (mword ty5 * mword ty64)*)

val _ = Define `
 ((riscv_f16ToUi64:(3)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(64)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_f16_to_ui64 rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word), w__1)))))`;


(*val riscv_i64ToF16 : mword ty3 -> mword ty64 -> M (mword ty5 * mword ty16)*)

val _ = Define `
 ((riscv_i64ToF16:(3)words$word ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_i64_to_f16 rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))))))`;


(*val riscv_ui64ToF16 : mword ty3 -> mword ty64 -> M (mword ty5 * mword ty16)*)

val _ = Define `
 ((riscv_ui64ToF16:(3)words$word ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_ui64_to_f16 rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))))))`;


(*val riscv_f32ToI32 : mword ty3 -> mword ty32 -> M (mword ty5 * mword ty32)*)

val _ = Define `
 ((riscv_f32ToI32:(3)words$word ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_f32_to_i32 rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))))))`;


(*val riscv_f32ToUi32 : mword ty3 -> mword ty32 -> M (mword ty5 * mword ty32)*)

val _ = Define `
 ((riscv_f32ToUi32:(3)words$word ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_f32_to_ui32 rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))))))`;


(*val riscv_i32ToF32 : mword ty3 -> mword ty32 -> M (mword ty5 * mword ty32)*)

val _ = Define `
 ((riscv_i32ToF32:(3)words$word ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_i32_to_f32 rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))))))`;


(*val riscv_ui32ToF32 : mword ty3 -> mword ty32 -> M (mword ty5 * mword ty32)*)

val _ = Define `
 ((riscv_ui32ToF32:(3)words$word ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_ui32_to_f32 rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))))))`;


(*val riscv_f32ToI64 : mword ty3 -> mword ty32 -> M (mword ty5 * mword ty64)*)

val _ = Define `
 ((riscv_f32ToI64:(3)words$word ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(64)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_f32_to_i64 rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word), w__1)))))`;


(*val riscv_f32ToUi64 : mword ty3 -> mword ty32 -> M (mword ty5 * mword ty64)*)

val _ = Define `
 ((riscv_f32ToUi64:(3)words$word ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(64)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_f32_to_ui64 rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word), w__1)))))`;


(*val riscv_i64ToF32 : mword ty3 -> mword ty64 -> M (mword ty5 * mword ty32)*)

val _ = Define `
 ((riscv_i64ToF32:(3)words$word ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_i64_to_f32 rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))))))`;


(*val riscv_ui64ToF32 : mword ty3 -> mword ty64 -> M (mword ty5 * mword ty32)*)

val _ = Define `
 ((riscv_ui64ToF32:(3)words$word ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_ui64_to_f32 rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))))))`;


(*val riscv_f64ToI32 : mword ty3 -> mword ty64 -> M (mword ty5 * mword ty32)*)

val _ = Define `
 ((riscv_f64ToI32:(3)words$word ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_f64_to_i32 rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))))))`;


(*val riscv_f64ToUi32 : mword ty3 -> mword ty64 -> M (mword ty5 * mword ty32)*)

val _ = Define `
 ((riscv_f64ToUi32:(3)words$word ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_f64_to_ui32 rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))))))`;


(*val riscv_i32ToF64 : mword ty3 -> mword ty32 -> M (mword ty5 * mword ty64)*)

val _ = Define `
 ((riscv_i32ToF64:(3)words$word ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(64)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_i32_to_f64 rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word), w__1)))))`;


(*val riscv_ui32ToF64 : mword ty3 -> mword ty32 -> M (mword ty5 * mword ty64)*)

val _ = Define `
 ((riscv_ui32ToF64:(3)words$word ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(64)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_ui32_to_f64 rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word), w__1)))))`;


(*val riscv_f64ToI64 : mword ty3 -> mword ty64 -> M (mword ty5 * mword ty64)*)

val _ = Define `
 ((riscv_f64ToI64:(3)words$word ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(64)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_f64_to_i64 rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word), w__1)))))`;


(*val riscv_f64ToUi64 : mword ty3 -> mword ty64 -> M (mword ty5 * mword ty64)*)

val _ = Define `
 ((riscv_f64ToUi64:(3)words$word ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(64)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_f64_to_ui64 rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word), w__1)))))`;


(*val riscv_i64ToF64 : mword ty3 -> mword ty64 -> M (mword ty5 * mword ty64)*)

val _ = Define `
 ((riscv_i64ToF64:(3)words$word ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(64)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_i64_to_f64 rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word), w__1)))))`;


(*val riscv_ui64ToF64 : mword ty3 -> mword ty64 -> M (mword ty5 * mword ty64)*)

val _ = Define `
 ((riscv_ui64ToF64:(3)words$word ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(64)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_ui64_to_f64 rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word), w__1)))))`;


(*val riscv_f16ToF32 : mword ty3 -> mword ty16 -> M (mword ty5 * mword ty32)*)

val _ = Define `
 ((riscv_f16ToF32:(3)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_f16_to_f32 rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))))))`;


(*val riscv_f16ToF64 : mword ty3 -> mword ty16 -> M (mword ty5 * mword ty64)*)

val _ = Define `
 ((riscv_f16ToF64:(3)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(64)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_f16_to_f64 rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word), w__1)))))`;


(*val riscv_f32ToF64 : mword ty3 -> mword ty32 -> M (mword ty5 * mword ty64)*)

val _ = Define `
 ((riscv_f32ToF64:(3)words$word ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(64)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_f32_to_f64 rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word), w__1)))))`;


(*val riscv_f32ToF16 : mword ty3 -> mword ty32 -> M (mword ty5 * mword ty16)*)

val _ = Define `
 ((riscv_f32ToF16:(3)words$word ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(16)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_f32_to_f16 rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))))))`;


(*val riscv_f64ToF16 : mword ty3 -> mword ty64 -> M (mword ty5 * mword ty16)*)

val _ = Define `
 ((riscv_f64ToF16:(3)words$word ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(16)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_f64_to_f16 rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))))))`;


(*val riscv_f64ToF32 : mword ty3 -> mword ty64 -> M (mword ty5 * mword ty32)*)

val _ = Define `
 ((riscv_f64ToF32:(3)words$word ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rm v=
    (let (_ : unit) = (softfloat_f64_to_f32 rm v) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))))))`;


(*val riscv_f16Lt : mword ty16 -> mword ty16 -> M (mword ty5 * mword ty16)*)

val _ = Define `
 ((riscv_f16Lt:(16)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(16)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) v1 v2=
    (let (_ : unit) = (softfloat_f16_lt v1 v2) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))))))`;


(*val riscv_f16Le : mword ty16 -> mword ty16 -> M (mword ty5 * mword ty16)*)

val _ = Define `
 ((riscv_f16Le:(16)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(16)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) v1 v2=
    (let (_ : unit) = (softfloat_f16_le v1 v2) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))))))`;


(*val riscv_f16Eq : mword ty16 -> mword ty16 -> M (mword ty5 * mword ty16)*)

val _ = Define `
 ((riscv_f16Eq:(16)words$word ->(16)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(16)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) v1 v2=
    (let (_ : unit) = (softfloat_f16_eq v1 v2) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))))))`;


(*val riscv_f32Lt : mword ty32 -> mword ty32 -> M (mword ty5 * mword ty32)*)

val _ = Define `
 ((riscv_f32Lt:(32)words$word ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) v1 v2=
    (let (_ : unit) = (softfloat_f32_lt v1 v2) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))))))`;


(*val riscv_f32Le : mword ty32 -> mword ty32 -> M (mword ty5 * mword ty32)*)

val _ = Define `
 ((riscv_f32Le:(32)words$word ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) v1 v2=
    (let (_ : unit) = (softfloat_f32_le v1 v2) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))))))`;


(*val riscv_f32Eq : mword ty32 -> mword ty32 -> M (mword ty5 * mword ty32)*)

val _ = Define `
 ((riscv_f32Eq:(32)words$word ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) v1 v2=
    (let (_ : unit) = (softfloat_f32_eq v1 v2) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word),
           (subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))))))`;


(*val riscv_f64Lt : mword ty64 -> mword ty64 -> M (mword ty5 * mword ty64)*)

val _ = Define `
 ((riscv_f64Lt:(64)words$word ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(64)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) v1 v2=
    (let (_ : unit) = (softfloat_f64_lt v1 v2) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word), w__1)))))`;


(*val riscv_f64Le : mword ty64 -> mword ty64 -> M (mword ty5 * mword ty64)*)

val _ = Define `
 ((riscv_f64Le:(64)words$word ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(64)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) v1 v2=
    (let (_ : unit) = (softfloat_f64_le v1 v2) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word), w__1)))))`;


(*val riscv_f64Eq : mword ty64 -> mword ty64 -> M (mword ty5 * mword ty64)*)

val _ = Define `
 ((riscv_f64Eq:(64)words$word ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word#(64)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) v1 v2=
    (let (_ : unit) = (softfloat_f64_eq v1 v2) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_fflags_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS float_result_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$returnS ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word), w__1)))))`;


(*val dirty_fd_context : unit -> M unit*)

val _ = Define `
 ((dirty_fd_context:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$seqS
   (set_Mstatus_FS mstatus_ref ((extStatus_to_bits Dirty  :  2 words$word)))
   (set_Mstatus_SD mstatus_ref (0b1w :  1 words$word))))`;


(*val rF : integer -> M (mword ty32)*)

val _ = Define `
 ((rF:int ->(regstate)sail2_state_monad$sequential_state ->((((32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r=
    (let l__45 = r in sail2_state_monad$bindS
   (if (((l__45 = (( 0 : int):ii)))) then (sail2_state_monad$read_regS f0_ref  : ( 32 words$word) M)
    else if (((l__45 = (( 1 : int):ii)))) then (sail2_state_monad$read_regS f1_ref  : ( 32 words$word) M)
    else if (((l__45 = (( 2 : int):ii)))) then (sail2_state_monad$read_regS f2_ref  : ( 32 words$word) M)
    else if (((l__45 = (( 3 : int):ii)))) then (sail2_state_monad$read_regS f3_ref  : ( 32 words$word) M)
    else if (((l__45 = (( 4 : int):ii)))) then (sail2_state_monad$read_regS f4_ref  : ( 32 words$word) M)
    else if (((l__45 = (( 5 : int):ii)))) then (sail2_state_monad$read_regS f5_ref  : ( 32 words$word) M)
    else if (((l__45 = (( 6 : int):ii)))) then (sail2_state_monad$read_regS f6_ref  : ( 32 words$word) M)
    else if (((l__45 = (( 7 : int):ii)))) then (sail2_state_monad$read_regS f7_ref  : ( 32 words$word) M)
    else if (((l__45 = (( 8 : int):ii)))) then (sail2_state_monad$read_regS f8_ref  : ( 32 words$word) M)
    else if (((l__45 = (( 9 : int):ii)))) then (sail2_state_monad$read_regS f9_ref  : ( 32 words$word) M)
    else if (((l__45 = (( 10 : int):ii)))) then (sail2_state_monad$read_regS f10_ref  : ( 32 words$word) M)
    else if (((l__45 = (( 11 : int):ii)))) then (sail2_state_monad$read_regS f11_ref  : ( 32 words$word) M)
    else if (((l__45 = (( 12 : int):ii)))) then (sail2_state_monad$read_regS f12_ref  : ( 32 words$word) M)
    else if (((l__45 = (( 13 : int):ii)))) then (sail2_state_monad$read_regS f13_ref  : ( 32 words$word) M)
    else if (((l__45 = (( 14 : int):ii)))) then (sail2_state_monad$read_regS f14_ref  : ( 32 words$word) M)
    else if (((l__45 = (( 15 : int):ii)))) then (sail2_state_monad$read_regS f15_ref  : ( 32 words$word) M)
    else if (((l__45 = (( 16 : int):ii)))) then (sail2_state_monad$read_regS f16_ref  : ( 32 words$word) M)
    else if (((l__45 = (( 17 : int):ii)))) then (sail2_state_monad$read_regS f17_ref  : ( 32 words$word) M)
    else if (((l__45 = (( 18 : int):ii)))) then (sail2_state_monad$read_regS f18_ref  : ( 32 words$word) M)
    else if (((l__45 = (( 19 : int):ii)))) then (sail2_state_monad$read_regS f19_ref  : ( 32 words$word) M)
    else if (((l__45 = (( 20 : int):ii)))) then (sail2_state_monad$read_regS f20_ref  : ( 32 words$word) M)
    else if (((l__45 = (( 21 : int):ii)))) then (sail2_state_monad$read_regS f21_ref  : ( 32 words$word) M)
    else if (((l__45 = (( 22 : int):ii)))) then (sail2_state_monad$read_regS f22_ref  : ( 32 words$word) M)
    else if (((l__45 = (( 23 : int):ii)))) then (sail2_state_monad$read_regS f23_ref  : ( 32 words$word) M)
    else if (((l__45 = (( 24 : int):ii)))) then (sail2_state_monad$read_regS f24_ref  : ( 32 words$word) M)
    else if (((l__45 = (( 25 : int):ii)))) then (sail2_state_monad$read_regS f25_ref  : ( 32 words$word) M)
    else if (((l__45 = (( 26 : int):ii)))) then (sail2_state_monad$read_regS f26_ref  : ( 32 words$word) M)
    else if (((l__45 = (( 27 : int):ii)))) then (sail2_state_monad$read_regS f27_ref  : ( 32 words$word) M)
    else if (((l__45 = (( 28 : int):ii)))) then (sail2_state_monad$read_regS f28_ref  : ( 32 words$word) M)
    else if (((l__45 = (( 29 : int):ii)))) then (sail2_state_monad$read_regS f29_ref  : ( 32 words$word) M)
    else if (((l__45 = (( 30 : int):ii)))) then (sail2_state_monad$read_regS f30_ref  : ( 32 words$word) M)
    else if (((l__45 = (( 31 : int):ii)))) then (sail2_state_monad$read_regS f31_ref  : ( 32 words$word) M)
    else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "invalid floating point register number") (sail2_state_monad$exitS () )) (\ (v : fregtype) . 
   sail2_state_monad$returnS ((fregval_from_freg v  :  32 words$word)))))`;


(*val wF : integer -> mword ty32 -> M unit*)

val _ = Define `
 ((wF:int ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r in_v=
    (let v = ((fregval_into_freg in_v  :  32 words$word)) in
   let l__13 = r in sail2_state_monad$seqS (sail2_state_monad$seqS
   (if (((l__13 = (( 0 : int):ii)))) then sail2_state_monad$write_regS f0_ref v
    else if (((l__13 = (( 1 : int):ii)))) then sail2_state_monad$write_regS f1_ref v
    else if (((l__13 = (( 2 : int):ii)))) then sail2_state_monad$write_regS f2_ref v
    else if (((l__13 = (( 3 : int):ii)))) then sail2_state_monad$write_regS f3_ref v
    else if (((l__13 = (( 4 : int):ii)))) then sail2_state_monad$write_regS f4_ref v
    else if (((l__13 = (( 5 : int):ii)))) then sail2_state_monad$write_regS f5_ref v
    else if (((l__13 = (( 6 : int):ii)))) then sail2_state_monad$write_regS f6_ref v
    else if (((l__13 = (( 7 : int):ii)))) then sail2_state_monad$write_regS f7_ref v
    else if (((l__13 = (( 8 : int):ii)))) then sail2_state_monad$write_regS f8_ref v
    else if (((l__13 = (( 9 : int):ii)))) then sail2_state_monad$write_regS f9_ref v
    else if (((l__13 = (( 10 : int):ii)))) then sail2_state_monad$write_regS f10_ref v
    else if (((l__13 = (( 11 : int):ii)))) then sail2_state_monad$write_regS f11_ref v
    else if (((l__13 = (( 12 : int):ii)))) then sail2_state_monad$write_regS f12_ref v
    else if (((l__13 = (( 13 : int):ii)))) then sail2_state_monad$write_regS f13_ref v
    else if (((l__13 = (( 14 : int):ii)))) then sail2_state_monad$write_regS f14_ref v
    else if (((l__13 = (( 15 : int):ii)))) then sail2_state_monad$write_regS f15_ref v
    else if (((l__13 = (( 16 : int):ii)))) then sail2_state_monad$write_regS f16_ref v
    else if (((l__13 = (( 17 : int):ii)))) then sail2_state_monad$write_regS f17_ref v
    else if (((l__13 = (( 18 : int):ii)))) then sail2_state_monad$write_regS f18_ref v
    else if (((l__13 = (( 19 : int):ii)))) then sail2_state_monad$write_regS f19_ref v
    else if (((l__13 = (( 20 : int):ii)))) then sail2_state_monad$write_regS f20_ref v
    else if (((l__13 = (( 21 : int):ii)))) then sail2_state_monad$write_regS f21_ref v
    else if (((l__13 = (( 22 : int):ii)))) then sail2_state_monad$write_regS f22_ref v
    else if (((l__13 = (( 23 : int):ii)))) then sail2_state_monad$write_regS f23_ref v
    else if (((l__13 = (( 24 : int):ii)))) then sail2_state_monad$write_regS f24_ref v
    else if (((l__13 = (( 25 : int):ii)))) then sail2_state_monad$write_regS f25_ref v
    else if (((l__13 = (( 26 : int):ii)))) then sail2_state_monad$write_regS f26_ref v
    else if (((l__13 = (( 27 : int):ii)))) then sail2_state_monad$write_regS f27_ref v
    else if (((l__13 = (( 28 : int):ii)))) then sail2_state_monad$write_regS f28_ref v
    else if (((l__13 = (( 29 : int):ii)))) then sail2_state_monad$write_regS f29_ref v
    else if (((l__13 = (( 30 : int):ii)))) then sail2_state_monad$write_regS f30_ref v
    else if (((l__13 = (( 31 : int):ii)))) then sail2_state_monad$write_regS f31_ref v
    else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "invalid floating point register number") (sail2_state_monad$exitS () ))
   (dirty_fd_context () ))
   (sail2_state_monad$returnS (if ((get_config_print_reg () )) then
             print_dbg
               ((STRCAT "f"
                   ((STRCAT ((stringFromInteger r)) ((STRCAT " <- " ((FRegStr v))))))))
           else () ))))`;


(*val rF_bits : mword ty5 -> M (mword ty32)*)

val _ = Define `
 ((rF_bits:(5)words$word ->(regstate)sail2_state_monad$sequential_state ->((((32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) i=  ((rF ((lem$w2ui i))  : ( 32 words$word) M)))`;


(*val wF_bits : mword ty5 -> mword ty32 -> M unit*)

val _ = Define `
 ((wF_bits:(5)words$word ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (i : 5 bits) (data : flenbits)=  (wF ((lem$w2ui i)) data))`;


(*val freg_name_abi_forwards : mword ty5 -> M string*)

(*val freg_name_abi_backwards : string -> M (mword ty5)*)

(*val freg_name_abi_forwards_matches : mword ty5 -> bool*)

(*val freg_name_abi_backwards_matches : string -> bool*)

(*val freg_name_abi_matches_prefix : string -> maybe ((mword ty5 * ii))*)

val _ = Define `
 ((freg_name_abi_forwards:(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((string),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b00000w :  5 words$word)))) then sail2_state_monad$returnS "ft0"
   else if (((b__0 = (0b00001w :  5 words$word)))) then sail2_state_monad$returnS "ft1"
   else if (((b__0 = (0b00010w :  5 words$word)))) then sail2_state_monad$returnS "ft2"
   else if (((b__0 = (0b00011w :  5 words$word)))) then sail2_state_monad$returnS "ft3"
   else if (((b__0 = (0b00100w :  5 words$word)))) then sail2_state_monad$returnS "ft4"
   else if (((b__0 = (0b00101w :  5 words$word)))) then sail2_state_monad$returnS "ft5"
   else if (((b__0 = (0b00110w :  5 words$word)))) then sail2_state_monad$returnS "ft6"
   else if (((b__0 = (0b00111w :  5 words$word)))) then sail2_state_monad$returnS "ft7"
   else if (((b__0 = (0b01000w :  5 words$word)))) then sail2_state_monad$returnS "fs0"
   else if (((b__0 = (0b01001w :  5 words$word)))) then sail2_state_monad$returnS "fs1"
   else if (((b__0 = (0b01010w :  5 words$word)))) then sail2_state_monad$returnS "fa0"
   else if (((b__0 = (0b01011w :  5 words$word)))) then sail2_state_monad$returnS "fa1"
   else if (((b__0 = (0b01100w :  5 words$word)))) then sail2_state_monad$returnS "fa2"
   else if (((b__0 = (0b01101w :  5 words$word)))) then sail2_state_monad$returnS "fa3"
   else if (((b__0 = (0b01110w :  5 words$word)))) then sail2_state_monad$returnS "fa4"
   else if (((b__0 = (0b01111w :  5 words$word)))) then sail2_state_monad$returnS "fa5"
   else if (((b__0 = (0b10000w :  5 words$word)))) then sail2_state_monad$returnS "fa6"
   else if (((b__0 = (0b10001w :  5 words$word)))) then sail2_state_monad$returnS "fa7"
   else if (((b__0 = (0b10010w :  5 words$word)))) then sail2_state_monad$returnS "fs2"
   else if (((b__0 = (0b10011w :  5 words$word)))) then sail2_state_monad$returnS "fs3"
   else if (((b__0 = (0b10100w :  5 words$word)))) then sail2_state_monad$returnS "fs4"
   else if (((b__0 = (0b10101w :  5 words$word)))) then sail2_state_monad$returnS "fs5"
   else if (((b__0 = (0b10110w :  5 words$word)))) then sail2_state_monad$returnS "fs6"
   else if (((b__0 = (0b10111w :  5 words$word)))) then sail2_state_monad$returnS "fs7"
   else if (((b__0 = (0b11000w :  5 words$word)))) then sail2_state_monad$returnS "fs8"
   else if (((b__0 = (0b11001w :  5 words$word)))) then sail2_state_monad$returnS "fs9"
   else if (((b__0 = (0b11010w :  5 words$word)))) then sail2_state_monad$returnS "fs10"
   else if (((b__0 = (0b11011w :  5 words$word)))) then sail2_state_monad$returnS "fs11"
   else if (((b__0 = (0b11100w :  5 words$word)))) then sail2_state_monad$returnS "ft8"
   else if (((b__0 = (0b11101w :  5 words$word)))) then sail2_state_monad$returnS "ft9"
   else if (((b__0 = (0b11110w :  5 words$word)))) then sail2_state_monad$returnS "ft10"
   else if (((b__0 = (0b11111w :  5 words$word)))) then sail2_state_monad$returnS "ft11"
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((freg_name_abi_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "ft0"))) then sail2_state_monad$returnS (0b00000w :  5 words$word)
   else if (((p0_ = "ft1"))) then sail2_state_monad$returnS (0b00001w :  5 words$word)
   else if (((p0_ = "ft2"))) then sail2_state_monad$returnS (0b00010w :  5 words$word)
   else if (((p0_ = "ft3"))) then sail2_state_monad$returnS (0b00011w :  5 words$word)
   else if (((p0_ = "ft4"))) then sail2_state_monad$returnS (0b00100w :  5 words$word)
   else if (((p0_ = "ft5"))) then sail2_state_monad$returnS (0b00101w :  5 words$word)
   else if (((p0_ = "ft6"))) then sail2_state_monad$returnS (0b00110w :  5 words$word)
   else if (((p0_ = "ft7"))) then sail2_state_monad$returnS (0b00111w :  5 words$word)
   else if (((p0_ = "fs0"))) then sail2_state_monad$returnS (0b01000w :  5 words$word)
   else if (((p0_ = "fs1"))) then sail2_state_monad$returnS (0b01001w :  5 words$word)
   else if (((p0_ = "fa0"))) then sail2_state_monad$returnS (0b01010w :  5 words$word)
   else if (((p0_ = "fa1"))) then sail2_state_monad$returnS (0b01011w :  5 words$word)
   else if (((p0_ = "fa2"))) then sail2_state_monad$returnS (0b01100w :  5 words$word)
   else if (((p0_ = "fa3"))) then sail2_state_monad$returnS (0b01101w :  5 words$word)
   else if (((p0_ = "fa4"))) then sail2_state_monad$returnS (0b01110w :  5 words$word)
   else if (((p0_ = "fa5"))) then sail2_state_monad$returnS (0b01111w :  5 words$word)
   else if (((p0_ = "fa6"))) then sail2_state_monad$returnS (0b10000w :  5 words$word)
   else if (((p0_ = "fa7"))) then sail2_state_monad$returnS (0b10001w :  5 words$word)
   else if (((p0_ = "fs2"))) then sail2_state_monad$returnS (0b10010w :  5 words$word)
   else if (((p0_ = "fs3"))) then sail2_state_monad$returnS (0b10011w :  5 words$word)
   else if (((p0_ = "fs4"))) then sail2_state_monad$returnS (0b10100w :  5 words$word)
   else if (((p0_ = "fs5"))) then sail2_state_monad$returnS (0b10101w :  5 words$word)
   else if (((p0_ = "fs6"))) then sail2_state_monad$returnS (0b10110w :  5 words$word)
   else if (((p0_ = "fs7"))) then sail2_state_monad$returnS (0b10111w :  5 words$word)
   else if (((p0_ = "fs8"))) then sail2_state_monad$returnS (0b11000w :  5 words$word)
   else if (((p0_ = "fs9"))) then sail2_state_monad$returnS (0b11001w :  5 words$word)
   else if (((p0_ = "fs10"))) then sail2_state_monad$returnS (0b11010w :  5 words$word)
   else if (((p0_ = "fs11"))) then sail2_state_monad$returnS (0b11011w :  5 words$word)
   else if (((p0_ = "ft8"))) then sail2_state_monad$returnS (0b11100w :  5 words$word)
   else if (((p0_ = "ft9"))) then sail2_state_monad$returnS (0b11101w :  5 words$word)
   else if (((p0_ = "ft10"))) then sail2_state_monad$returnS (0b11110w :  5 words$word)
   else if (((p0_ = "ft11"))) then sail2_state_monad$returnS (0b11111w :  5 words$word)
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((freg_name_abi_forwards_matches:(5)words$word -> bool) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b00000w :  5 words$word)))) then T
   else if (((b__0 = (0b00001w :  5 words$word)))) then T
   else if (((b__0 = (0b00010w :  5 words$word)))) then T
   else if (((b__0 = (0b00011w :  5 words$word)))) then T
   else if (((b__0 = (0b00100w :  5 words$word)))) then T
   else if (((b__0 = (0b00101w :  5 words$word)))) then T
   else if (((b__0 = (0b00110w :  5 words$word)))) then T
   else if (((b__0 = (0b00111w :  5 words$word)))) then T
   else if (((b__0 = (0b01000w :  5 words$word)))) then T
   else if (((b__0 = (0b01001w :  5 words$word)))) then T
   else if (((b__0 = (0b01010w :  5 words$word)))) then T
   else if (((b__0 = (0b01011w :  5 words$word)))) then T
   else if (((b__0 = (0b01100w :  5 words$word)))) then T
   else if (((b__0 = (0b01101w :  5 words$word)))) then T
   else if (((b__0 = (0b01110w :  5 words$word)))) then T
   else if (((b__0 = (0b01111w :  5 words$word)))) then T
   else if (((b__0 = (0b10000w :  5 words$word)))) then T
   else if (((b__0 = (0b10001w :  5 words$word)))) then T
   else if (((b__0 = (0b10010w :  5 words$word)))) then T
   else if (((b__0 = (0b10011w :  5 words$word)))) then T
   else if (((b__0 = (0b10100w :  5 words$word)))) then T
   else if (((b__0 = (0b10101w :  5 words$word)))) then T
   else if (((b__0 = (0b10110w :  5 words$word)))) then T
   else if (((b__0 = (0b10111w :  5 words$word)))) then T
   else if (((b__0 = (0b11000w :  5 words$word)))) then T
   else if (((b__0 = (0b11001w :  5 words$word)))) then T
   else if (((b__0 = (0b11010w :  5 words$word)))) then T
   else if (((b__0 = (0b11011w :  5 words$word)))) then T
   else if (((b__0 = (0b11100w :  5 words$word)))) then T
   else if (((b__0 = (0b11101w :  5 words$word)))) then T
   else if (((b__0 = (0b11110w :  5 words$word)))) then T
   else if (((b__0 = (0b11111w :  5 words$word)))) then T
   else F))`;


val _ = Define `
 ((freg_name_abi_backwards_matches:string -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "ft0"))) then T
   else if (((p0_ = "ft1"))) then T
   else if (((p0_ = "ft2"))) then T
   else if (((p0_ = "ft3"))) then T
   else if (((p0_ = "ft4"))) then T
   else if (((p0_ = "ft5"))) then T
   else if (((p0_ = "ft6"))) then T
   else if (((p0_ = "ft7"))) then T
   else if (((p0_ = "fs0"))) then T
   else if (((p0_ = "fs1"))) then T
   else if (((p0_ = "fa0"))) then T
   else if (((p0_ = "fa1"))) then T
   else if (((p0_ = "fa2"))) then T
   else if (((p0_ = "fa3"))) then T
   else if (((p0_ = "fa4"))) then T
   else if (((p0_ = "fa5"))) then T
   else if (((p0_ = "fa6"))) then T
   else if (((p0_ = "fa7"))) then T
   else if (((p0_ = "fs2"))) then T
   else if (((p0_ = "fs3"))) then T
   else if (((p0_ = "fs4"))) then T
   else if (((p0_ = "fs5"))) then T
   else if (((p0_ = "fs6"))) then T
   else if (((p0_ = "fs7"))) then T
   else if (((p0_ = "fs8"))) then T
   else if (((p0_ = "fs9"))) then T
   else if (((p0_ = "fs10"))) then T
   else if (((p0_ = "fs11"))) then T
   else if (((p0_ = "ft8"))) then T
   else if (((p0_ = "ft9"))) then T
   else if (((p0_ = "ft10"))) then T
   else if (((p0_ = "ft11"))) then T
   else F))`;


(*val _s324_ : string -> maybe string*)

val _ = Define `
 ((s324_:string ->(string)option) s325_0=
    (let s326_0 = s325_0 in
   if ((string_startswith s326_0 "ft11")) then  
  (case ((string_drop s326_0 ((string_length "ft11")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s320_ : string -> maybe string*)

val _ = Define `
 ((s320_:string ->(string)option) s321_0=
    (let s322_0 = s321_0 in
   if ((string_startswith s322_0 "ft10")) then  
  (case ((string_drop s322_0 ((string_length "ft10")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s316_ : string -> maybe string*)

val _ = Define `
 ((s316_:string ->(string)option) s317_0=
    (let s318_0 = s317_0 in
   if ((string_startswith s318_0 "ft9")) then  
  (case ((string_drop s318_0 ((string_length "ft9")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s312_ : string -> maybe string*)

val _ = Define `
 ((s312_:string ->(string)option) s313_0=
    (let s314_0 = s313_0 in
   if ((string_startswith s314_0 "ft8")) then  
  (case ((string_drop s314_0 ((string_length "ft8")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s308_ : string -> maybe string*)

val _ = Define `
 ((s308_:string ->(string)option) s309_0=
    (let s310_0 = s309_0 in
   if ((string_startswith s310_0 "fs11")) then  
  (case ((string_drop s310_0 ((string_length "fs11")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s304_ : string -> maybe string*)

val _ = Define `
 ((s304_:string ->(string)option) s305_0=
    (let s306_0 = s305_0 in
   if ((string_startswith s306_0 "fs10")) then  
  (case ((string_drop s306_0 ((string_length "fs10")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s300_ : string -> maybe string*)

val _ = Define `
 ((s300_:string ->(string)option) s301_0=
    (let s302_0 = s301_0 in
   if ((string_startswith s302_0 "fs9")) then  
  (case ((string_drop s302_0 ((string_length "fs9")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s296_ : string -> maybe string*)

val _ = Define `
 ((s296_:string ->(string)option) s297_0=
    (let s298_0 = s297_0 in
   if ((string_startswith s298_0 "fs8")) then  
  (case ((string_drop s298_0 ((string_length "fs8")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s292_ : string -> maybe string*)

val _ = Define `
 ((s292_:string ->(string)option) s293_0=
    (let s294_0 = s293_0 in
   if ((string_startswith s294_0 "fs7")) then  
  (case ((string_drop s294_0 ((string_length "fs7")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s288_ : string -> maybe string*)

val _ = Define `
 ((s288_:string ->(string)option) s289_0=
    (let s290_0 = s289_0 in
   if ((string_startswith s290_0 "fs6")) then  
  (case ((string_drop s290_0 ((string_length "fs6")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s284_ : string -> maybe string*)

val _ = Define `
 ((s284_:string ->(string)option) s285_0=
    (let s286_0 = s285_0 in
   if ((string_startswith s286_0 "fs5")) then  
  (case ((string_drop s286_0 ((string_length "fs5")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s280_ : string -> maybe string*)

val _ = Define `
 ((s280_:string ->(string)option) s281_0=
    (let s282_0 = s281_0 in
   if ((string_startswith s282_0 "fs4")) then  
  (case ((string_drop s282_0 ((string_length "fs4")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s276_ : string -> maybe string*)

val _ = Define `
 ((s276_:string ->(string)option) s277_0=
    (let s278_0 = s277_0 in
   if ((string_startswith s278_0 "fs3")) then  
  (case ((string_drop s278_0 ((string_length "fs3")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s272_ : string -> maybe string*)

val _ = Define `
 ((s272_:string ->(string)option) s273_0=
    (let s274_0 = s273_0 in
   if ((string_startswith s274_0 "fs2")) then  
  (case ((string_drop s274_0 ((string_length "fs2")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s268_ : string -> maybe string*)

val _ = Define `
 ((s268_:string ->(string)option) s269_0=
    (let s270_0 = s269_0 in
   if ((string_startswith s270_0 "fa7")) then  
  (case ((string_drop s270_0 ((string_length "fa7")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s264_ : string -> maybe string*)

val _ = Define `
 ((s264_:string ->(string)option) s265_0=
    (let s266_0 = s265_0 in
   if ((string_startswith s266_0 "fa6")) then  
  (case ((string_drop s266_0 ((string_length "fa6")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s260_ : string -> maybe string*)

val _ = Define `
 ((s260_:string ->(string)option) s261_0=
    (let s262_0 = s261_0 in
   if ((string_startswith s262_0 "fa5")) then  
  (case ((string_drop s262_0 ((string_length "fa5")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s256_ : string -> maybe string*)

val _ = Define `
 ((s256_:string ->(string)option) s257_0=
    (let s258_0 = s257_0 in
   if ((string_startswith s258_0 "fa4")) then  
  (case ((string_drop s258_0 ((string_length "fa4")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s252_ : string -> maybe string*)

val _ = Define `
 ((s252_:string ->(string)option) s253_0=
    (let s254_0 = s253_0 in
   if ((string_startswith s254_0 "fa3")) then  
  (case ((string_drop s254_0 ((string_length "fa3")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s248_ : string -> maybe string*)

val _ = Define `
 ((s248_:string ->(string)option) s249_0=
    (let s250_0 = s249_0 in
   if ((string_startswith s250_0 "fa2")) then  
  (case ((string_drop s250_0 ((string_length "fa2")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s244_ : string -> maybe string*)

val _ = Define `
 ((s244_:string ->(string)option) s245_0=
    (let s246_0 = s245_0 in
   if ((string_startswith s246_0 "fa1")) then  
  (case ((string_drop s246_0 ((string_length "fa1")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s240_ : string -> maybe string*)

val _ = Define `
 ((s240_:string ->(string)option) s241_0=
    (let s242_0 = s241_0 in
   if ((string_startswith s242_0 "fa0")) then  
  (case ((string_drop s242_0 ((string_length "fa0")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s236_ : string -> maybe string*)

val _ = Define `
 ((s236_:string ->(string)option) s237_0=
    (let s238_0 = s237_0 in
   if ((string_startswith s238_0 "fs1")) then  
  (case ((string_drop s238_0 ((string_length "fs1")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s232_ : string -> maybe string*)

val _ = Define `
 ((s232_:string ->(string)option) s233_0=
    (let s234_0 = s233_0 in
   if ((string_startswith s234_0 "fs0")) then  
  (case ((string_drop s234_0 ((string_length "fs0")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s228_ : string -> maybe string*)

val _ = Define `
 ((s228_:string ->(string)option) s229_0=
    (let s230_0 = s229_0 in
   if ((string_startswith s230_0 "ft7")) then  
  (case ((string_drop s230_0 ((string_length "ft7")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s224_ : string -> maybe string*)

val _ = Define `
 ((s224_:string ->(string)option) s225_0=
    (let s226_0 = s225_0 in
   if ((string_startswith s226_0 "ft6")) then  
  (case ((string_drop s226_0 ((string_length "ft6")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s220_ : string -> maybe string*)

val _ = Define `
 ((s220_:string ->(string)option) s221_0=
    (let s222_0 = s221_0 in
   if ((string_startswith s222_0 "ft5")) then  
  (case ((string_drop s222_0 ((string_length "ft5")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s216_ : string -> maybe string*)

val _ = Define `
 ((s216_:string ->(string)option) s217_0=
    (let s218_0 = s217_0 in
   if ((string_startswith s218_0 "ft4")) then  
  (case ((string_drop s218_0 ((string_length "ft4")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s212_ : string -> maybe string*)

val _ = Define `
 ((s212_:string ->(string)option) s213_0=
    (let s214_0 = s213_0 in
   if ((string_startswith s214_0 "ft3")) then  
  (case ((string_drop s214_0 ((string_length "ft3")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s208_ : string -> maybe string*)

val _ = Define `
 ((s208_:string ->(string)option) s209_0=
    (let s210_0 = s209_0 in
   if ((string_startswith s210_0 "ft2")) then  
  (case ((string_drop s210_0 ((string_length "ft2")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s204_ : string -> maybe string*)

val _ = Define `
 ((s204_:string ->(string)option) s205_0=
    (let s206_0 = s205_0 in
   if ((string_startswith s206_0 "ft1")) then  
  (case ((string_drop s206_0 ((string_length "ft1")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s200_ : string -> maybe string*)

val _ = Define `
 ((s200_:string ->(string)option) s201_0=
    (let s202_0 = s201_0 in
   if ((string_startswith s202_0 "ft0")) then  
  (case ((string_drop s202_0 ((string_length "ft0")))) of   s_ => SOME s_ )
   else NONE))`;


val _ = Define `
 ((freg_name_abi_matches_prefix:string ->((5)words$word#int)option) arg_=
    (let s203_0 = arg_ in
   if ((case ((s200_ s203_0)) of   SOME (s_) => T | _ => F )) then  
  (case s200_ s203_0 of
      (SOME (s_)) =>
  SOME
    ((0b00000w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s204_ s203_0)) of   SOME (s_) => T | _ => F )) then  
  (case s204_ s203_0 of
      (SOME (s_)) =>
  SOME
    ((0b00001w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s208_ s203_0)) of   SOME (s_) => T | _ => F )) then  
  (case s208_ s203_0 of
      (SOME (s_)) =>
  SOME
    ((0b00010w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s212_ s203_0)) of   SOME (s_) => T | _ => F )) then  
  (case s212_ s203_0 of
      (SOME (s_)) =>
  SOME
    ((0b00011w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s216_ s203_0)) of   SOME (s_) => T | _ => F )) then  
  (case s216_ s203_0 of
      (SOME (s_)) =>
  SOME
    ((0b00100w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s220_ s203_0)) of   SOME (s_) => T | _ => F )) then  
  (case s220_ s203_0 of
      (SOME (s_)) =>
  SOME
    ((0b00101w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s224_ s203_0)) of   SOME (s_) => T | _ => F )) then  
  (case s224_ s203_0 of
      (SOME (s_)) =>
  SOME
    ((0b00110w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s228_ s203_0)) of   SOME (s_) => T | _ => F )) then  
  (case s228_ s203_0 of
      (SOME (s_)) =>
  SOME
    ((0b00111w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s232_ s203_0)) of   SOME (s_) => T | _ => F )) then  
  (case s232_ s203_0 of
      (SOME (s_)) =>
  SOME
    ((0b01000w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s236_ s203_0)) of   SOME (s_) => T | _ => F )) then  
  (case s236_ s203_0 of
      (SOME (s_)) =>
  SOME
    ((0b01001w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s240_ s203_0)) of   SOME (s_) => T | _ => F )) then  
  (case s240_ s203_0 of
      (SOME (s_)) =>
  SOME
    ((0b01010w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s244_ s203_0)) of   SOME (s_) => T | _ => F )) then  
  (case s244_ s203_0 of
      (SOME (s_)) =>
  SOME
    ((0b01011w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s248_ s203_0)) of   SOME (s_) => T | _ => F )) then  
  (case s248_ s203_0 of
      (SOME (s_)) =>
  SOME
    ((0b01100w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s252_ s203_0)) of   SOME (s_) => T | _ => F )) then  
  (case s252_ s203_0 of
      (SOME (s_)) =>
  SOME
    ((0b01101w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s256_ s203_0)) of   SOME (s_) => T | _ => F )) then  
  (case s256_ s203_0 of
      (SOME (s_)) =>
  SOME
    ((0b01110w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s260_ s203_0)) of   SOME (s_) => T | _ => F )) then  
  (case s260_ s203_0 of
      (SOME (s_)) =>
  SOME
    ((0b01111w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s264_ s203_0)) of   SOME (s_) => T | _ => F )) then  
  (case s264_ s203_0 of
      (SOME (s_)) =>
  SOME
    ((0b10000w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s268_ s203_0)) of   SOME (s_) => T | _ => F )) then  
  (case s268_ s203_0 of
      (SOME (s_)) =>
  SOME
    ((0b10001w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s272_ s203_0)) of   SOME (s_) => T | _ => F )) then  
  (case s272_ s203_0 of
      (SOME (s_)) =>
  SOME
    ((0b10010w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s276_ s203_0)) of   SOME (s_) => T | _ => F )) then  
  (case s276_ s203_0 of
      (SOME (s_)) =>
  SOME
    ((0b10011w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s280_ s203_0)) of   SOME (s_) => T | _ => F )) then  
  (case s280_ s203_0 of
      (SOME (s_)) =>
  SOME
    ((0b10100w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s284_ s203_0)) of   SOME (s_) => T | _ => F )) then  
  (case s284_ s203_0 of
      (SOME (s_)) =>
  SOME
    ((0b10101w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s288_ s203_0)) of   SOME (s_) => T | _ => F )) then  
  (case s288_ s203_0 of
      (SOME (s_)) =>
  SOME
    ((0b10110w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s292_ s203_0)) of   SOME (s_) => T | _ => F )) then  
  (case s292_ s203_0 of
      (SOME (s_)) =>
  SOME
    ((0b10111w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s296_ s203_0)) of   SOME (s_) => T | _ => F )) then  
  (case s296_ s203_0 of
      (SOME (s_)) =>
  SOME
    ((0b11000w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s300_ s203_0)) of   SOME (s_) => T | _ => F )) then  
  (case s300_ s203_0 of
      (SOME (s_)) =>
  SOME
    ((0b11001w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s304_ s203_0)) of   SOME (s_) => T | _ => F )) then  
  (case s304_ s203_0 of
      (SOME (s_)) =>
  SOME
    ((0b11010w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s308_ s203_0)) of   SOME (s_) => T | _ => F )) then  
  (case s308_ s203_0 of
      (SOME (s_)) =>
  SOME
    ((0b11011w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s312_ s203_0)) of   SOME (s_) => T | _ => F )) then  
  (case s312_ s203_0 of
      (SOME (s_)) =>
  SOME
    ((0b11100w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s316_ s203_0)) of   SOME (s_) => T | _ => F )) then  
  (case s316_ s203_0 of
      (SOME (s_)) =>
  SOME
    ((0b11101w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s320_ s203_0)) of   SOME (s_) => T | _ => F )) then  
  (case s320_ s203_0 of
      (SOME (s_)) =>
  SOME
    ((0b11110w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s324_ s203_0)) of   SOME (s_) => T | _ => F )) then  
  (case s324_ s203_0 of
      (SOME (s_)) =>
  SOME
    ((0b11111w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else NONE))`;


(*val freg_name_forwards : mword ty5 -> M string*)

(*val freg_name_backwards : string -> M (mword ty5)*)

(*val freg_name_forwards_matches : mword ty5 -> bool*)

(*val freg_name_backwards_matches : string -> bool*)

(*val freg_name_matches_prefix : string -> maybe ((mword ty5 * ii))*)

val _ = Define `
 ((freg_name_forwards:(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((string),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b00000w :  5 words$word)))) then sail2_state_monad$returnS "ft0"
   else if (((b__0 = (0b00001w :  5 words$word)))) then sail2_state_monad$returnS "ft1"
   else if (((b__0 = (0b00010w :  5 words$word)))) then sail2_state_monad$returnS "ft2"
   else if (((b__0 = (0b00011w :  5 words$word)))) then sail2_state_monad$returnS "ft3"
   else if (((b__0 = (0b00100w :  5 words$word)))) then sail2_state_monad$returnS "ft4"
   else if (((b__0 = (0b00101w :  5 words$word)))) then sail2_state_monad$returnS "ft5"
   else if (((b__0 = (0b00110w :  5 words$word)))) then sail2_state_monad$returnS "ft6"
   else if (((b__0 = (0b00111w :  5 words$word)))) then sail2_state_monad$returnS "ft7"
   else if (((b__0 = (0b01000w :  5 words$word)))) then sail2_state_monad$returnS "fs0"
   else if (((b__0 = (0b01001w :  5 words$word)))) then sail2_state_monad$returnS "fs1"
   else if (((b__0 = (0b01010w :  5 words$word)))) then sail2_state_monad$returnS "fa0"
   else if (((b__0 = (0b01011w :  5 words$word)))) then sail2_state_monad$returnS "fa1"
   else if (((b__0 = (0b01100w :  5 words$word)))) then sail2_state_monad$returnS "fa2"
   else if (((b__0 = (0b01101w :  5 words$word)))) then sail2_state_monad$returnS "fa3"
   else if (((b__0 = (0b01110w :  5 words$word)))) then sail2_state_monad$returnS "fa4"
   else if (((b__0 = (0b01111w :  5 words$word)))) then sail2_state_monad$returnS "fa5"
   else if (((b__0 = (0b10000w :  5 words$word)))) then sail2_state_monad$returnS "fa6"
   else if (((b__0 = (0b10001w :  5 words$word)))) then sail2_state_monad$returnS "fa7"
   else if (((b__0 = (0b10010w :  5 words$word)))) then sail2_state_monad$returnS "fs2"
   else if (((b__0 = (0b10011w :  5 words$word)))) then sail2_state_monad$returnS "fs3"
   else if (((b__0 = (0b10100w :  5 words$word)))) then sail2_state_monad$returnS "fs4"
   else if (((b__0 = (0b10101w :  5 words$word)))) then sail2_state_monad$returnS "fs5"
   else if (((b__0 = (0b10110w :  5 words$word)))) then sail2_state_monad$returnS "fs6"
   else if (((b__0 = (0b10111w :  5 words$word)))) then sail2_state_monad$returnS "fs7"
   else if (((b__0 = (0b11000w :  5 words$word)))) then sail2_state_monad$returnS "fs8"
   else if (((b__0 = (0b11001w :  5 words$word)))) then sail2_state_monad$returnS "fs9"
   else if (((b__0 = (0b11010w :  5 words$word)))) then sail2_state_monad$returnS "fs10"
   else if (((b__0 = (0b11011w :  5 words$word)))) then sail2_state_monad$returnS "fs11"
   else if (((b__0 = (0b11100w :  5 words$word)))) then sail2_state_monad$returnS "ft8"
   else if (((b__0 = (0b11101w :  5 words$word)))) then sail2_state_monad$returnS "ft9"
   else if (((b__0 = (0b11110w :  5 words$word)))) then sail2_state_monad$returnS "ft10"
   else if (((b__0 = (0b11111w :  5 words$word)))) then sail2_state_monad$returnS "ft11"
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((freg_name_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((5)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "ft0"))) then sail2_state_monad$returnS (0b00000w :  5 words$word)
   else if (((p0_ = "ft1"))) then sail2_state_monad$returnS (0b00001w :  5 words$word)
   else if (((p0_ = "ft2"))) then sail2_state_monad$returnS (0b00010w :  5 words$word)
   else if (((p0_ = "ft3"))) then sail2_state_monad$returnS (0b00011w :  5 words$word)
   else if (((p0_ = "ft4"))) then sail2_state_monad$returnS (0b00100w :  5 words$word)
   else if (((p0_ = "ft5"))) then sail2_state_monad$returnS (0b00101w :  5 words$word)
   else if (((p0_ = "ft6"))) then sail2_state_monad$returnS (0b00110w :  5 words$word)
   else if (((p0_ = "ft7"))) then sail2_state_monad$returnS (0b00111w :  5 words$word)
   else if (((p0_ = "fs0"))) then sail2_state_monad$returnS (0b01000w :  5 words$word)
   else if (((p0_ = "fs1"))) then sail2_state_monad$returnS (0b01001w :  5 words$word)
   else if (((p0_ = "fa0"))) then sail2_state_monad$returnS (0b01010w :  5 words$word)
   else if (((p0_ = "fa1"))) then sail2_state_monad$returnS (0b01011w :  5 words$word)
   else if (((p0_ = "fa2"))) then sail2_state_monad$returnS (0b01100w :  5 words$word)
   else if (((p0_ = "fa3"))) then sail2_state_monad$returnS (0b01101w :  5 words$word)
   else if (((p0_ = "fa4"))) then sail2_state_monad$returnS (0b01110w :  5 words$word)
   else if (((p0_ = "fa5"))) then sail2_state_monad$returnS (0b01111w :  5 words$word)
   else if (((p0_ = "fa6"))) then sail2_state_monad$returnS (0b10000w :  5 words$word)
   else if (((p0_ = "fa7"))) then sail2_state_monad$returnS (0b10001w :  5 words$word)
   else if (((p0_ = "fs2"))) then sail2_state_monad$returnS (0b10010w :  5 words$word)
   else if (((p0_ = "fs3"))) then sail2_state_monad$returnS (0b10011w :  5 words$word)
   else if (((p0_ = "fs4"))) then sail2_state_monad$returnS (0b10100w :  5 words$word)
   else if (((p0_ = "fs5"))) then sail2_state_monad$returnS (0b10101w :  5 words$word)
   else if (((p0_ = "fs6"))) then sail2_state_monad$returnS (0b10110w :  5 words$word)
   else if (((p0_ = "fs7"))) then sail2_state_monad$returnS (0b10111w :  5 words$word)
   else if (((p0_ = "fs8"))) then sail2_state_monad$returnS (0b11000w :  5 words$word)
   else if (((p0_ = "fs9"))) then sail2_state_monad$returnS (0b11001w :  5 words$word)
   else if (((p0_ = "fs10"))) then sail2_state_monad$returnS (0b11010w :  5 words$word)
   else if (((p0_ = "fs11"))) then sail2_state_monad$returnS (0b11011w :  5 words$word)
   else if (((p0_ = "ft8"))) then sail2_state_monad$returnS (0b11100w :  5 words$word)
   else if (((p0_ = "ft9"))) then sail2_state_monad$returnS (0b11101w :  5 words$word)
   else if (((p0_ = "ft10"))) then sail2_state_monad$returnS (0b11110w :  5 words$word)
   else if (((p0_ = "ft11"))) then sail2_state_monad$returnS (0b11111w :  5 words$word)
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((freg_name_forwards_matches:(5)words$word -> bool) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b00000w :  5 words$word)))) then T
   else if (((b__0 = (0b00001w :  5 words$word)))) then T
   else if (((b__0 = (0b00010w :  5 words$word)))) then T
   else if (((b__0 = (0b00011w :  5 words$word)))) then T
   else if (((b__0 = (0b00100w :  5 words$word)))) then T
   else if (((b__0 = (0b00101w :  5 words$word)))) then T
   else if (((b__0 = (0b00110w :  5 words$word)))) then T
   else if (((b__0 = (0b00111w :  5 words$word)))) then T
   else if (((b__0 = (0b01000w :  5 words$word)))) then T
   else if (((b__0 = (0b01001w :  5 words$word)))) then T
   else if (((b__0 = (0b01010w :  5 words$word)))) then T
   else if (((b__0 = (0b01011w :  5 words$word)))) then T
   else if (((b__0 = (0b01100w :  5 words$word)))) then T
   else if (((b__0 = (0b01101w :  5 words$word)))) then T
   else if (((b__0 = (0b01110w :  5 words$word)))) then T
   else if (((b__0 = (0b01111w :  5 words$word)))) then T
   else if (((b__0 = (0b10000w :  5 words$word)))) then T
   else if (((b__0 = (0b10001w :  5 words$word)))) then T
   else if (((b__0 = (0b10010w :  5 words$word)))) then T
   else if (((b__0 = (0b10011w :  5 words$word)))) then T
   else if (((b__0 = (0b10100w :  5 words$word)))) then T
   else if (((b__0 = (0b10101w :  5 words$word)))) then T
   else if (((b__0 = (0b10110w :  5 words$word)))) then T
   else if (((b__0 = (0b10111w :  5 words$word)))) then T
   else if (((b__0 = (0b11000w :  5 words$word)))) then T
   else if (((b__0 = (0b11001w :  5 words$word)))) then T
   else if (((b__0 = (0b11010w :  5 words$word)))) then T
   else if (((b__0 = (0b11011w :  5 words$word)))) then T
   else if (((b__0 = (0b11100w :  5 words$word)))) then T
   else if (((b__0 = (0b11101w :  5 words$word)))) then T
   else if (((b__0 = (0b11110w :  5 words$word)))) then T
   else if (((b__0 = (0b11111w :  5 words$word)))) then T
   else F))`;


val _ = Define `
 ((freg_name_backwards_matches:string -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "ft0"))) then T
   else if (((p0_ = "ft1"))) then T
   else if (((p0_ = "ft2"))) then T
   else if (((p0_ = "ft3"))) then T
   else if (((p0_ = "ft4"))) then T
   else if (((p0_ = "ft5"))) then T
   else if (((p0_ = "ft6"))) then T
   else if (((p0_ = "ft7"))) then T
   else if (((p0_ = "fs0"))) then T
   else if (((p0_ = "fs1"))) then T
   else if (((p0_ = "fa0"))) then T
   else if (((p0_ = "fa1"))) then T
   else if (((p0_ = "fa2"))) then T
   else if (((p0_ = "fa3"))) then T
   else if (((p0_ = "fa4"))) then T
   else if (((p0_ = "fa5"))) then T
   else if (((p0_ = "fa6"))) then T
   else if (((p0_ = "fa7"))) then T
   else if (((p0_ = "fs2"))) then T
   else if (((p0_ = "fs3"))) then T
   else if (((p0_ = "fs4"))) then T
   else if (((p0_ = "fs5"))) then T
   else if (((p0_ = "fs6"))) then T
   else if (((p0_ = "fs7"))) then T
   else if (((p0_ = "fs8"))) then T
   else if (((p0_ = "fs9"))) then T
   else if (((p0_ = "fs10"))) then T
   else if (((p0_ = "fs11"))) then T
   else if (((p0_ = "ft8"))) then T
   else if (((p0_ = "ft9"))) then T
   else if (((p0_ = "ft10"))) then T
   else if (((p0_ = "ft11"))) then T
   else F))`;


(*val _s452_ : string -> maybe string*)

val _ = Define `
 ((s452_:string ->(string)option) s453_0=
    (let s454_0 = s453_0 in
   if ((string_startswith s454_0 "ft11")) then  
  (case ((string_drop s454_0 ((string_length "ft11")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s448_ : string -> maybe string*)

val _ = Define `
 ((s448_:string ->(string)option) s449_0=
    (let s450_0 = s449_0 in
   if ((string_startswith s450_0 "ft10")) then  
  (case ((string_drop s450_0 ((string_length "ft10")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s444_ : string -> maybe string*)

val _ = Define `
 ((s444_:string ->(string)option) s445_0=
    (let s446_0 = s445_0 in
   if ((string_startswith s446_0 "ft9")) then  
  (case ((string_drop s446_0 ((string_length "ft9")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s440_ : string -> maybe string*)

val _ = Define `
 ((s440_:string ->(string)option) s441_0=
    (let s442_0 = s441_0 in
   if ((string_startswith s442_0 "ft8")) then  
  (case ((string_drop s442_0 ((string_length "ft8")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s436_ : string -> maybe string*)

val _ = Define `
 ((s436_:string ->(string)option) s437_0=
    (let s438_0 = s437_0 in
   if ((string_startswith s438_0 "fs11")) then  
  (case ((string_drop s438_0 ((string_length "fs11")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s432_ : string -> maybe string*)

val _ = Define `
 ((s432_:string ->(string)option) s433_0=
    (let s434_0 = s433_0 in
   if ((string_startswith s434_0 "fs10")) then  
  (case ((string_drop s434_0 ((string_length "fs10")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s428_ : string -> maybe string*)

val _ = Define `
 ((s428_:string ->(string)option) s429_0=
    (let s430_0 = s429_0 in
   if ((string_startswith s430_0 "fs9")) then  
  (case ((string_drop s430_0 ((string_length "fs9")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s424_ : string -> maybe string*)

val _ = Define `
 ((s424_:string ->(string)option) s425_0=
    (let s426_0 = s425_0 in
   if ((string_startswith s426_0 "fs8")) then  
  (case ((string_drop s426_0 ((string_length "fs8")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s420_ : string -> maybe string*)

val _ = Define `
 ((s420_:string ->(string)option) s421_0=
    (let s422_0 = s421_0 in
   if ((string_startswith s422_0 "fs7")) then  
  (case ((string_drop s422_0 ((string_length "fs7")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s416_ : string -> maybe string*)

val _ = Define `
 ((s416_:string ->(string)option) s417_0=
    (let s418_0 = s417_0 in
   if ((string_startswith s418_0 "fs6")) then  
  (case ((string_drop s418_0 ((string_length "fs6")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s412_ : string -> maybe string*)

val _ = Define `
 ((s412_:string ->(string)option) s413_0=
    (let s414_0 = s413_0 in
   if ((string_startswith s414_0 "fs5")) then  
  (case ((string_drop s414_0 ((string_length "fs5")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s408_ : string -> maybe string*)

val _ = Define `
 ((s408_:string ->(string)option) s409_0=
    (let s410_0 = s409_0 in
   if ((string_startswith s410_0 "fs4")) then  
  (case ((string_drop s410_0 ((string_length "fs4")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s404_ : string -> maybe string*)

val _ = Define `
 ((s404_:string ->(string)option) s405_0=
    (let s406_0 = s405_0 in
   if ((string_startswith s406_0 "fs3")) then  
  (case ((string_drop s406_0 ((string_length "fs3")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s400_ : string -> maybe string*)

val _ = Define `
 ((s400_:string ->(string)option) s401_0=
    (let s402_0 = s401_0 in
   if ((string_startswith s402_0 "fs2")) then  
  (case ((string_drop s402_0 ((string_length "fs2")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s396_ : string -> maybe string*)

val _ = Define `
 ((s396_:string ->(string)option) s397_0=
    (let s398_0 = s397_0 in
   if ((string_startswith s398_0 "fa7")) then  
  (case ((string_drop s398_0 ((string_length "fa7")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s392_ : string -> maybe string*)

val _ = Define `
 ((s392_:string ->(string)option) s393_0=
    (let s394_0 = s393_0 in
   if ((string_startswith s394_0 "fa6")) then  
  (case ((string_drop s394_0 ((string_length "fa6")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s388_ : string -> maybe string*)

val _ = Define `
 ((s388_:string ->(string)option) s389_0=
    (let s390_0 = s389_0 in
   if ((string_startswith s390_0 "fa5")) then  
  (case ((string_drop s390_0 ((string_length "fa5")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s384_ : string -> maybe string*)

val _ = Define `
 ((s384_:string ->(string)option) s385_0=
    (let s386_0 = s385_0 in
   if ((string_startswith s386_0 "fa4")) then  
  (case ((string_drop s386_0 ((string_length "fa4")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s380_ : string -> maybe string*)

val _ = Define `
 ((s380_:string ->(string)option) s381_0=
    (let s382_0 = s381_0 in
   if ((string_startswith s382_0 "fa3")) then  
  (case ((string_drop s382_0 ((string_length "fa3")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s376_ : string -> maybe string*)

val _ = Define `
 ((s376_:string ->(string)option) s377_0=
    (let s378_0 = s377_0 in
   if ((string_startswith s378_0 "fa2")) then  
  (case ((string_drop s378_0 ((string_length "fa2")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s372_ : string -> maybe string*)

val _ = Define `
 ((s372_:string ->(string)option) s373_0=
    (let s374_0 = s373_0 in
   if ((string_startswith s374_0 "fa1")) then  
  (case ((string_drop s374_0 ((string_length "fa1")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s368_ : string -> maybe string*)

val _ = Define `
 ((s368_:string ->(string)option) s369_0=
    (let s370_0 = s369_0 in
   if ((string_startswith s370_0 "fa0")) then  
  (case ((string_drop s370_0 ((string_length "fa0")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s364_ : string -> maybe string*)

val _ = Define `
 ((s364_:string ->(string)option) s365_0=
    (let s366_0 = s365_0 in
   if ((string_startswith s366_0 "fs1")) then  
  (case ((string_drop s366_0 ((string_length "fs1")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s360_ : string -> maybe string*)

val _ = Define `
 ((s360_:string ->(string)option) s361_0=
    (let s362_0 = s361_0 in
   if ((string_startswith s362_0 "fs0")) then  
  (case ((string_drop s362_0 ((string_length "fs0")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s356_ : string -> maybe string*)

val _ = Define `
 ((s356_:string ->(string)option) s357_0=
    (let s358_0 = s357_0 in
   if ((string_startswith s358_0 "ft7")) then  
  (case ((string_drop s358_0 ((string_length "ft7")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s352_ : string -> maybe string*)

val _ = Define `
 ((s352_:string ->(string)option) s353_0=
    (let s354_0 = s353_0 in
   if ((string_startswith s354_0 "ft6")) then  
  (case ((string_drop s354_0 ((string_length "ft6")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s348_ : string -> maybe string*)

val _ = Define `
 ((s348_:string ->(string)option) s349_0=
    (let s350_0 = s349_0 in
   if ((string_startswith s350_0 "ft5")) then  
  (case ((string_drop s350_0 ((string_length "ft5")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s344_ : string -> maybe string*)

val _ = Define `
 ((s344_:string ->(string)option) s345_0=
    (let s346_0 = s345_0 in
   if ((string_startswith s346_0 "ft4")) then  
  (case ((string_drop s346_0 ((string_length "ft4")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s340_ : string -> maybe string*)

val _ = Define `
 ((s340_:string ->(string)option) s341_0=
    (let s342_0 = s341_0 in
   if ((string_startswith s342_0 "ft3")) then  
  (case ((string_drop s342_0 ((string_length "ft3")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s336_ : string -> maybe string*)

val _ = Define `
 ((s336_:string ->(string)option) s337_0=
    (let s338_0 = s337_0 in
   if ((string_startswith s338_0 "ft2")) then  
  (case ((string_drop s338_0 ((string_length "ft2")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s332_ : string -> maybe string*)

val _ = Define `
 ((s332_:string ->(string)option) s333_0=
    (let s334_0 = s333_0 in
   if ((string_startswith s334_0 "ft1")) then  
  (case ((string_drop s334_0 ((string_length "ft1")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s328_ : string -> maybe string*)

val _ = Define `
 ((s328_:string ->(string)option) s329_0=
    (let s330_0 = s329_0 in
   if ((string_startswith s330_0 "ft0")) then  
  (case ((string_drop s330_0 ((string_length "ft0")))) of   s_ => SOME s_ )
   else NONE))`;


val _ = Define `
 ((freg_name_matches_prefix:string ->((5)words$word#int)option) arg_=
    (let s331_0 = arg_ in
   if ((case ((s328_ s331_0)) of   SOME (s_) => T | _ => F )) then  
  (case s328_ s331_0 of
      (SOME (s_)) =>
  SOME
    ((0b00000w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s332_ s331_0)) of   SOME (s_) => T | _ => F )) then  
  (case s332_ s331_0 of
      (SOME (s_)) =>
  SOME
    ((0b00001w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s336_ s331_0)) of   SOME (s_) => T | _ => F )) then  
  (case s336_ s331_0 of
      (SOME (s_)) =>
  SOME
    ((0b00010w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s340_ s331_0)) of   SOME (s_) => T | _ => F )) then  
  (case s340_ s331_0 of
      (SOME (s_)) =>
  SOME
    ((0b00011w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s344_ s331_0)) of   SOME (s_) => T | _ => F )) then  
  (case s344_ s331_0 of
      (SOME (s_)) =>
  SOME
    ((0b00100w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s348_ s331_0)) of   SOME (s_) => T | _ => F )) then  
  (case s348_ s331_0 of
      (SOME (s_)) =>
  SOME
    ((0b00101w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s352_ s331_0)) of   SOME (s_) => T | _ => F )) then  
  (case s352_ s331_0 of
      (SOME (s_)) =>
  SOME
    ((0b00110w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s356_ s331_0)) of   SOME (s_) => T | _ => F )) then  
  (case s356_ s331_0 of
      (SOME (s_)) =>
  SOME
    ((0b00111w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s360_ s331_0)) of   SOME (s_) => T | _ => F )) then  
  (case s360_ s331_0 of
      (SOME (s_)) =>
  SOME
    ((0b01000w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s364_ s331_0)) of   SOME (s_) => T | _ => F )) then  
  (case s364_ s331_0 of
      (SOME (s_)) =>
  SOME
    ((0b01001w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s368_ s331_0)) of   SOME (s_) => T | _ => F )) then  
  (case s368_ s331_0 of
      (SOME (s_)) =>
  SOME
    ((0b01010w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s372_ s331_0)) of   SOME (s_) => T | _ => F )) then  
  (case s372_ s331_0 of
      (SOME (s_)) =>
  SOME
    ((0b01011w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s376_ s331_0)) of   SOME (s_) => T | _ => F )) then  
  (case s376_ s331_0 of
      (SOME (s_)) =>
  SOME
    ((0b01100w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s380_ s331_0)) of   SOME (s_) => T | _ => F )) then  
  (case s380_ s331_0 of
      (SOME (s_)) =>
  SOME
    ((0b01101w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s384_ s331_0)) of   SOME (s_) => T | _ => F )) then  
  (case s384_ s331_0 of
      (SOME (s_)) =>
  SOME
    ((0b01110w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s388_ s331_0)) of   SOME (s_) => T | _ => F )) then  
  (case s388_ s331_0 of
      (SOME (s_)) =>
  SOME
    ((0b01111w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s392_ s331_0)) of   SOME (s_) => T | _ => F )) then  
  (case s392_ s331_0 of
      (SOME (s_)) =>
  SOME
    ((0b10000w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s396_ s331_0)) of   SOME (s_) => T | _ => F )) then  
  (case s396_ s331_0 of
      (SOME (s_)) =>
  SOME
    ((0b10001w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s400_ s331_0)) of   SOME (s_) => T | _ => F )) then  
  (case s400_ s331_0 of
      (SOME (s_)) =>
  SOME
    ((0b10010w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s404_ s331_0)) of   SOME (s_) => T | _ => F )) then  
  (case s404_ s331_0 of
      (SOME (s_)) =>
  SOME
    ((0b10011w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s408_ s331_0)) of   SOME (s_) => T | _ => F )) then  
  (case s408_ s331_0 of
      (SOME (s_)) =>
  SOME
    ((0b10100w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s412_ s331_0)) of   SOME (s_) => T | _ => F )) then  
  (case s412_ s331_0 of
      (SOME (s_)) =>
  SOME
    ((0b10101w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s416_ s331_0)) of   SOME (s_) => T | _ => F )) then  
  (case s416_ s331_0 of
      (SOME (s_)) =>
  SOME
    ((0b10110w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s420_ s331_0)) of   SOME (s_) => T | _ => F )) then  
  (case s420_ s331_0 of
      (SOME (s_)) =>
  SOME
    ((0b10111w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s424_ s331_0)) of   SOME (s_) => T | _ => F )) then  
  (case s424_ s331_0 of
      (SOME (s_)) =>
  SOME
    ((0b11000w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s428_ s331_0)) of   SOME (s_) => T | _ => F )) then  
  (case s428_ s331_0 of
      (SOME (s_)) =>
  SOME
    ((0b11001w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s432_ s331_0)) of   SOME (s_) => T | _ => F )) then  
  (case s432_ s331_0 of
      (SOME (s_)) =>
  SOME
    ((0b11010w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s436_ s331_0)) of   SOME (s_) => T | _ => F )) then  
  (case s436_ s331_0 of
      (SOME (s_)) =>
  SOME
    ((0b11011w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s440_ s331_0)) of   SOME (s_) => T | _ => F )) then  
  (case s440_ s331_0 of
      (SOME (s_)) =>
  SOME
    ((0b11100w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s444_ s331_0)) of   SOME (s_) => T | _ => F )) then  
  (case s444_ s331_0 of
      (SOME (s_)) =>
  SOME
    ((0b11101w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s448_ s331_0)) of   SOME (s_) => T | _ => F )) then  
  (case s448_ s331_0 of
      (SOME (s_)) =>
  SOME
    ((0b11110w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s452_ s331_0)) of   SOME (s_) => T | _ => F )) then  
  (case s452_ s331_0 of
      (SOME (s_)) =>
  SOME
    ((0b11111w : 5 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else NONE))`;


(*val init_fdext_regs : unit -> M unit*)

val _ = Define `
 ((init_fdext_regs:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS f0_ref zero_freg)
   (sail2_state_monad$write_regS f1_ref zero_freg))
   (sail2_state_monad$write_regS f2_ref zero_freg))
   (sail2_state_monad$write_regS f3_ref zero_freg))
   (sail2_state_monad$write_regS f4_ref zero_freg))
   (sail2_state_monad$write_regS f5_ref zero_freg))
   (sail2_state_monad$write_regS f6_ref zero_freg))
   (sail2_state_monad$write_regS f7_ref zero_freg))
   (sail2_state_monad$write_regS f8_ref zero_freg))
   (sail2_state_monad$write_regS f9_ref zero_freg))
   (sail2_state_monad$write_regS f10_ref zero_freg))
   (sail2_state_monad$write_regS f11_ref zero_freg))
   (sail2_state_monad$write_regS f12_ref zero_freg))
   (sail2_state_monad$write_regS f13_ref zero_freg))
   (sail2_state_monad$write_regS f14_ref zero_freg))
   (sail2_state_monad$write_regS f15_ref zero_freg))
   (sail2_state_monad$write_regS f16_ref zero_freg))
   (sail2_state_monad$write_regS f17_ref zero_freg))
   (sail2_state_monad$write_regS f18_ref zero_freg))
   (sail2_state_monad$write_regS f19_ref zero_freg))
   (sail2_state_monad$write_regS f20_ref zero_freg))
   (sail2_state_monad$write_regS f21_ref zero_freg))
   (sail2_state_monad$write_regS f22_ref zero_freg))
   (sail2_state_monad$write_regS f23_ref zero_freg))
   (sail2_state_monad$write_regS f24_ref zero_freg))
   (sail2_state_monad$write_regS f25_ref zero_freg))
   (sail2_state_monad$write_regS f26_ref zero_freg))
   (sail2_state_monad$write_regS f27_ref zero_freg))
   (sail2_state_monad$write_regS f28_ref zero_freg))
   (sail2_state_monad$write_regS f29_ref zero_freg)) (sail2_state_monad$write_regS f30_ref zero_freg)) (sail2_state_monad$write_regS f31_ref zero_freg)))`;


(*val Mk_Fcsr : mword ty32 -> Fcsr*)

val _ = Define `
 ((Mk_Fcsr:(32)words$word -> Fcsr) v=  (<| Fcsr_Fcsr_chunk_0 := ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) |>))`;


val _ = Define `
 ((get_Fcsr_bits:Fcsr ->(32)words$word) v=  ((subrange_vec_dec v.Fcsr_Fcsr_chunk_0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)))`;


val _ = Define `
 ((set_Fcsr_bits:((regstate),(register_value),(Fcsr))register_ref ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Fcsr_Fcsr_chunk_0 :=
         ((update_subrange_vec_dec r.Fcsr_Fcsr_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_Fcsr_bits:Fcsr ->(32)words$word -> Fcsr) v x=
    (( v with<|
     Fcsr_Fcsr_chunk_0 :=
       ((update_subrange_vec_dec v.Fcsr_Fcsr_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Fcsr_FRM : Fcsr -> mword ty3*)

val _ = Define `
 ((get_Fcsr_FRM:Fcsr ->(3)words$word) v=  ((subrange_vec_dec v.Fcsr_Fcsr_chunk_0 (( 7 : int):ii) (( 5 : int):ii)  :  3 words$word)))`;


(*val _set_Fcsr_FRM : register_ref regstate register_value Fcsr -> mword ty3 -> M unit*)

val _ = Define `
 ((set_Fcsr_FRM:((regstate),(register_value),(Fcsr))register_ref ->(3)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Fcsr_Fcsr_chunk_0 :=
         ((update_subrange_vec_dec r.Fcsr_Fcsr_chunk_0 (( 7 : int):ii) (( 5 : int):ii)
             ((subrange_vec_dec v (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Fcsr_FRM : Fcsr -> mword ty3 -> Fcsr*)

val _ = Define `
 ((update_Fcsr_FRM:Fcsr ->(3)words$word -> Fcsr) v x=
    (( v with<|
     Fcsr_Fcsr_chunk_0 :=
       ((update_subrange_vec_dec v.Fcsr_Fcsr_chunk_0 (( 7 : int):ii) (( 5 : int):ii)
           ((subrange_vec_dec x (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word))
          :  32 words$word)) |>)))`;


(*val _get_Fcsr_FFLAGS : Fcsr -> mword ty5*)

val _ = Define `
 ((get_Fcsr_FFLAGS:Fcsr ->(5)words$word) v=  ((subrange_vec_dec v.Fcsr_Fcsr_chunk_0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)))`;


(*val _set_Fcsr_FFLAGS : register_ref regstate register_value Fcsr -> mword ty5 -> M unit*)

val _ = Define `
 ((set_Fcsr_FFLAGS:((regstate),(register_value),(Fcsr))register_ref ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       Fcsr_Fcsr_chunk_0 :=
         ((update_subrange_vec_dec r.Fcsr_Fcsr_chunk_0 (( 4 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_Fcsr_FFLAGS : Fcsr -> mword ty5 -> Fcsr*)

val _ = Define `
 ((update_Fcsr_FFLAGS:Fcsr ->(5)words$word -> Fcsr) v x=
    (( v with<|
     Fcsr_Fcsr_chunk_0 :=
       ((update_subrange_vec_dec v.Fcsr_Fcsr_chunk_0 (( 4 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word))
          :  32 words$word)) |>)))`;


(*val ext_write_fcsr : mword ty3 -> mword ty5 -> M unit*)

val _ = Define `
 ((ext_write_fcsr:(3)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) frm fflags=  (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS
   (set_Fcsr_FRM fcsr_ref frm)
   (set_Fcsr_FFLAGS fcsr_ref fflags)) (update_softfloat_fflags fflags)) (dirty_fd_context () )))`;


(*val write_fflags : mword ty5 -> M unit*)

val _ = Define `
 ((write_fflags:(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) fflags=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS fcsr_ref) (\ (w__0 : Fcsr) .  sail2_state_monad$seqS
   (if (((((get_Fcsr_FFLAGS w__0  :  5 words$word)) <> fflags))) then dirty_fd_context () 
    else sail2_state_monad$returnS () )
   (set_Fcsr_FFLAGS fcsr_ref fflags))))`;


(*val accrue_fflags : mword ty5 -> M unit*)

val _ = Define `
 ((accrue_fflags:(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) flags=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS fcsr_ref) (\ (w__0 : Fcsr) . 
   let f = ((or_vec ((get_Fcsr_FFLAGS w__0  :  5 words$word)) flags  :  5 words$word)) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS fcsr_ref) (\ (w__1 : Fcsr) . 
   if (((((get_Fcsr_FFLAGS w__1  :  5 words$word)) <> f))) then sail2_state_monad$seqS (sail2_state_monad$seqS
     (set_Fcsr_FFLAGS fcsr_ref f) (update_softfloat_fflags f)) (dirty_fd_context () )
   else sail2_state_monad$returnS () ))))`;


val _ = Define `
 ((csr_name_map_forwards:(12)words$word -> string) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0x000w :  12 words$word)))) then "ustatus"
   else if (((b__0 = (0x004w :  12 words$word)))) then "uie"
   else if (((b__0 = (0x005w :  12 words$word)))) then "utvec"
   else if (((b__0 = (0x040w :  12 words$word)))) then "uscratch"
   else if (((b__0 = (0x041w :  12 words$word)))) then "uepc"
   else if (((b__0 = (0x042w :  12 words$word)))) then "ucause"
   else if (((b__0 = (0x043w :  12 words$word)))) then "utval"
   else if (((b__0 = (0x044w :  12 words$word)))) then "uip"
   else if (((b__0 = (0x001w :  12 words$word)))) then "fflags"
   else if (((b__0 = (0x002w :  12 words$word)))) then "frm"
   else if (((b__0 = (0x003w :  12 words$word)))) then "fcsr"
   else if (((b__0 = (0xC00w :  12 words$word)))) then "cycle"
   else if (((b__0 = (0xC01w :  12 words$word)))) then "time"
   else if (((b__0 = (0xC02w :  12 words$word)))) then "instret"
   else if (((b__0 = (0xC80w :  12 words$word)))) then "cycleh"
   else if (((b__0 = (0xC81w :  12 words$word)))) then "timeh"
   else if (((b__0 = (0xC82w :  12 words$word)))) then "instreth"
   else if (((b__0 = (0x100w :  12 words$word)))) then "sstatus"
   else if (((b__0 = (0x102w :  12 words$word)))) then "sedeleg"
   else if (((b__0 = (0x103w :  12 words$word)))) then "sideleg"
   else if (((b__0 = (0x104w :  12 words$word)))) then "sie"
   else if (((b__0 = (0x105w :  12 words$word)))) then "stvec"
   else if (((b__0 = (0x106w :  12 words$word)))) then "scounteren"
   else if (((b__0 = (0x140w :  12 words$word)))) then "sscratch"
   else if (((b__0 = (0x141w :  12 words$word)))) then "sepc"
   else if (((b__0 = (0x142w :  12 words$word)))) then "scause"
   else if (((b__0 = (0x143w :  12 words$word)))) then "stval"
   else if (((b__0 = (0x144w :  12 words$word)))) then "sip"
   else if (((b__0 = (0x180w :  12 words$word)))) then "satp"
   else if (((b__0 = (0xF11w :  12 words$word)))) then "mvendorid"
   else if (((b__0 = (0xF12w :  12 words$word)))) then "marchid"
   else if (((b__0 = (0xF13w :  12 words$word)))) then "mimpid"
   else if (((b__0 = (0xF14w :  12 words$word)))) then "mhartid"
   else if (((b__0 = (0x300w :  12 words$word)))) then "mstatus"
   else if (((b__0 = (0x301w :  12 words$word)))) then "misa"
   else if (((b__0 = (0x302w :  12 words$word)))) then "medeleg"
   else if (((b__0 = (0x303w :  12 words$word)))) then "mideleg"
   else if (((b__0 = (0x304w :  12 words$word)))) then "mie"
   else if (((b__0 = (0x305w :  12 words$word)))) then "mtvec"
   else if (((b__0 = (0x306w :  12 words$word)))) then "mcounteren"
   else if (((b__0 = (0x320w :  12 words$word)))) then "mcountinhibit"
   else if (((b__0 = (0x340w :  12 words$word)))) then "mscratch"
   else if (((b__0 = (0x341w :  12 words$word)))) then "mepc"
   else if (((b__0 = (0x342w :  12 words$word)))) then "mcause"
   else if (((b__0 = (0x343w :  12 words$word)))) then "mtval"
   else if (((b__0 = (0x344w :  12 words$word)))) then "mip"
   else if (((b__0 = (0x3A0w :  12 words$word)))) then "pmpcfg0"
   else if (((b__0 = (0x3A1w :  12 words$word)))) then "pmpcfg1"
   else if (((b__0 = (0x3A2w :  12 words$word)))) then "pmpcfg2"
   else if (((b__0 = (0x3A3w :  12 words$word)))) then "pmpcfg3"
   else if (((b__0 = (0x3B0w :  12 words$word)))) then "pmpaddr0"
   else if (((b__0 = (0x3B1w :  12 words$word)))) then "pmpaddr1"
   else if (((b__0 = (0x3B2w :  12 words$word)))) then "pmpaddr2"
   else if (((b__0 = (0x3B3w :  12 words$word)))) then "pmpaddr3"
   else if (((b__0 = (0x3B4w :  12 words$word)))) then "pmpaddr4"
   else if (((b__0 = (0x3B5w :  12 words$word)))) then "pmpaddr5"
   else if (((b__0 = (0x3B6w :  12 words$word)))) then "pmpaddr6"
   else if (((b__0 = (0x3B7w :  12 words$word)))) then "pmpaddr7"
   else if (((b__0 = (0x3B8w :  12 words$word)))) then "pmpaddr8"
   else if (((b__0 = (0x3B9w :  12 words$word)))) then "pmpaddr9"
   else if (((b__0 = (0x3BAw :  12 words$word)))) then "pmpaddr10"
   else if (((b__0 = (0x3BBw :  12 words$word)))) then "pmpaddr11"
   else if (((b__0 = (0x3BCw :  12 words$word)))) then "pmpaddr12"
   else if (((b__0 = (0x3BDw :  12 words$word)))) then "pmpaddr13"
   else if (((b__0 = (0x3BEw :  12 words$word)))) then "pmpaddr14"
   else if (((b__0 = (0x3BFw :  12 words$word)))) then "pmpaddr15"
   else if (((b__0 = (0xB00w :  12 words$word)))) then "mcycle"
   else if (((b__0 = (0xB02w :  12 words$word)))) then "minstret"
   else if (((b__0 = (0xB80w :  12 words$word)))) then "mcycleh"
   else if (((b__0 = (0xB82w :  12 words$word)))) then "minstreth"
   else if (((b__0 = (0x7A0w :  12 words$word)))) then "tselect"
   else if (((b__0 = (0x7A1w :  12 words$word)))) then "tdata1"
   else if (((b__0 = (0x7A2w :  12 words$word)))) then "tdata2"
   else if (((b__0 = (0x7A3w :  12 words$word)))) then "tdata3"
   else decimal_string_of_bits b__0))`;


val _ = Define `
 ((csr_name_map_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((12)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "ustatus"))) then sail2_state_monad$returnS (0x000w :  12 words$word)
   else if (((p0_ = "uie"))) then sail2_state_monad$returnS (0x004w :  12 words$word)
   else if (((p0_ = "utvec"))) then sail2_state_monad$returnS (0x005w :  12 words$word)
   else if (((p0_ = "uscratch"))) then sail2_state_monad$returnS (0x040w :  12 words$word)
   else if (((p0_ = "uepc"))) then sail2_state_monad$returnS (0x041w :  12 words$word)
   else if (((p0_ = "ucause"))) then sail2_state_monad$returnS (0x042w :  12 words$word)
   else if (((p0_ = "utval"))) then sail2_state_monad$returnS (0x043w :  12 words$word)
   else if (((p0_ = "uip"))) then sail2_state_monad$returnS (0x044w :  12 words$word)
   else if (((p0_ = "fflags"))) then sail2_state_monad$returnS (0x001w :  12 words$word)
   else if (((p0_ = "frm"))) then sail2_state_monad$returnS (0x002w :  12 words$word)
   else if (((p0_ = "fcsr"))) then sail2_state_monad$returnS (0x003w :  12 words$word)
   else if (((p0_ = "cycle"))) then sail2_state_monad$returnS (0xC00w :  12 words$word)
   else if (((p0_ = "time"))) then sail2_state_monad$returnS (0xC01w :  12 words$word)
   else if (((p0_ = "instret"))) then sail2_state_monad$returnS (0xC02w :  12 words$word)
   else if (((p0_ = "cycleh"))) then sail2_state_monad$returnS (0xC80w :  12 words$word)
   else if (((p0_ = "timeh"))) then sail2_state_monad$returnS (0xC81w :  12 words$word)
   else if (((p0_ = "instreth"))) then sail2_state_monad$returnS (0xC82w :  12 words$word)
   else if (((p0_ = "sstatus"))) then sail2_state_monad$returnS (0x100w :  12 words$word)
   else if (((p0_ = "sedeleg"))) then sail2_state_monad$returnS (0x102w :  12 words$word)
   else if (((p0_ = "sideleg"))) then sail2_state_monad$returnS (0x103w :  12 words$word)
   else if (((p0_ = "sie"))) then sail2_state_monad$returnS (0x104w :  12 words$word)
   else if (((p0_ = "stvec"))) then sail2_state_monad$returnS (0x105w :  12 words$word)
   else if (((p0_ = "scounteren"))) then sail2_state_monad$returnS (0x106w :  12 words$word)
   else if (((p0_ = "sscratch"))) then sail2_state_monad$returnS (0x140w :  12 words$word)
   else if (((p0_ = "sepc"))) then sail2_state_monad$returnS (0x141w :  12 words$word)
   else if (((p0_ = "scause"))) then sail2_state_monad$returnS (0x142w :  12 words$word)
   else if (((p0_ = "stval"))) then sail2_state_monad$returnS (0x143w :  12 words$word)
   else if (((p0_ = "sip"))) then sail2_state_monad$returnS (0x144w :  12 words$word)
   else if (((p0_ = "satp"))) then sail2_state_monad$returnS (0x180w :  12 words$word)
   else if (((p0_ = "mvendorid"))) then sail2_state_monad$returnS (0xF11w :  12 words$word)
   else if (((p0_ = "marchid"))) then sail2_state_monad$returnS (0xF12w :  12 words$word)
   else if (((p0_ = "mimpid"))) then sail2_state_monad$returnS (0xF13w :  12 words$word)
   else if (((p0_ = "mhartid"))) then sail2_state_monad$returnS (0xF14w :  12 words$word)
   else if (((p0_ = "mstatus"))) then sail2_state_monad$returnS (0x300w :  12 words$word)
   else if (((p0_ = "misa"))) then sail2_state_monad$returnS (0x301w :  12 words$word)
   else if (((p0_ = "medeleg"))) then sail2_state_monad$returnS (0x302w :  12 words$word)
   else if (((p0_ = "mideleg"))) then sail2_state_monad$returnS (0x303w :  12 words$word)
   else if (((p0_ = "mie"))) then sail2_state_monad$returnS (0x304w :  12 words$word)
   else if (((p0_ = "mtvec"))) then sail2_state_monad$returnS (0x305w :  12 words$word)
   else if (((p0_ = "mcounteren"))) then sail2_state_monad$returnS (0x306w :  12 words$word)
   else if (((p0_ = "mcountinhibit"))) then sail2_state_monad$returnS (0x320w :  12 words$word)
   else if (((p0_ = "mscratch"))) then sail2_state_monad$returnS (0x340w :  12 words$word)
   else if (((p0_ = "mepc"))) then sail2_state_monad$returnS (0x341w :  12 words$word)
   else if (((p0_ = "mcause"))) then sail2_state_monad$returnS (0x342w :  12 words$word)
   else if (((p0_ = "mtval"))) then sail2_state_monad$returnS (0x343w :  12 words$word)
   else if (((p0_ = "mip"))) then sail2_state_monad$returnS (0x344w :  12 words$word)
   else if (((p0_ = "pmpcfg0"))) then sail2_state_monad$returnS (0x3A0w :  12 words$word)
   else if (((p0_ = "pmpcfg1"))) then sail2_state_monad$returnS (0x3A1w :  12 words$word)
   else if (((p0_ = "pmpcfg2"))) then sail2_state_monad$returnS (0x3A2w :  12 words$word)
   else if (((p0_ = "pmpcfg3"))) then sail2_state_monad$returnS (0x3A3w :  12 words$word)
   else if (((p0_ = "pmpaddr0"))) then sail2_state_monad$returnS (0x3B0w :  12 words$word)
   else if (((p0_ = "pmpaddr1"))) then sail2_state_monad$returnS (0x3B1w :  12 words$word)
   else if (((p0_ = "pmpaddr2"))) then sail2_state_monad$returnS (0x3B2w :  12 words$word)
   else if (((p0_ = "pmpaddr3"))) then sail2_state_monad$returnS (0x3B3w :  12 words$word)
   else if (((p0_ = "pmpaddr4"))) then sail2_state_monad$returnS (0x3B4w :  12 words$word)
   else if (((p0_ = "pmpaddr5"))) then sail2_state_monad$returnS (0x3B5w :  12 words$word)
   else if (((p0_ = "pmpaddr6"))) then sail2_state_monad$returnS (0x3B6w :  12 words$word)
   else if (((p0_ = "pmpaddr7"))) then sail2_state_monad$returnS (0x3B7w :  12 words$word)
   else if (((p0_ = "pmpaddr8"))) then sail2_state_monad$returnS (0x3B8w :  12 words$word)
   else if (((p0_ = "pmpaddr9"))) then sail2_state_monad$returnS (0x3B9w :  12 words$word)
   else if (((p0_ = "pmpaddr10"))) then sail2_state_monad$returnS (0x3BAw :  12 words$word)
   else if (((p0_ = "pmpaddr11"))) then sail2_state_monad$returnS (0x3BBw :  12 words$word)
   else if (((p0_ = "pmpaddr12"))) then sail2_state_monad$returnS (0x3BCw :  12 words$word)
   else if (((p0_ = "pmpaddr13"))) then sail2_state_monad$returnS (0x3BDw :  12 words$word)
   else if (((p0_ = "pmpaddr14"))) then sail2_state_monad$returnS (0x3BEw :  12 words$word)
   else if (((p0_ = "pmpaddr15"))) then sail2_state_monad$returnS (0x3BFw :  12 words$word)
   else if (((p0_ = "mcycle"))) then sail2_state_monad$returnS (0xB00w :  12 words$word)
   else if (((p0_ = "minstret"))) then sail2_state_monad$returnS (0xB02w :  12 words$word)
   else if (((p0_ = "mcycleh"))) then sail2_state_monad$returnS (0xB80w :  12 words$word)
   else if (((p0_ = "minstreth"))) then sail2_state_monad$returnS (0xB82w :  12 words$word)
   else if (((p0_ = "tselect"))) then sail2_state_monad$returnS (0x7A0w :  12 words$word)
   else if (((p0_ = "tdata1"))) then sail2_state_monad$returnS (0x7A1w :  12 words$word)
   else if (((p0_ = "tdata2"))) then sail2_state_monad$returnS (0x7A2w :  12 words$word)
   else if (((p0_ = "tdata3"))) then sail2_state_monad$returnS (0x7A3w :  12 words$word)
   else if ((hex_bits_12_backwards_matches p0_)) then (hex_bits_12_backwards p0_  : ( 12 words$word) M)
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((csr_name_map_forwards_matches:(12)words$word -> bool) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0x000w :  12 words$word)))) then T
   else if (((b__0 = (0x004w :  12 words$word)))) then T
   else if (((b__0 = (0x005w :  12 words$word)))) then T
   else if (((b__0 = (0x040w :  12 words$word)))) then T
   else if (((b__0 = (0x041w :  12 words$word)))) then T
   else if (((b__0 = (0x042w :  12 words$word)))) then T
   else if (((b__0 = (0x043w :  12 words$word)))) then T
   else if (((b__0 = (0x044w :  12 words$word)))) then T
   else if (((b__0 = (0x001w :  12 words$word)))) then T
   else if (((b__0 = (0x002w :  12 words$word)))) then T
   else if (((b__0 = (0x003w :  12 words$word)))) then T
   else if (((b__0 = (0xC00w :  12 words$word)))) then T
   else if (((b__0 = (0xC01w :  12 words$word)))) then T
   else if (((b__0 = (0xC02w :  12 words$word)))) then T
   else if (((b__0 = (0xC80w :  12 words$word)))) then T
   else if (((b__0 = (0xC81w :  12 words$word)))) then T
   else if (((b__0 = (0xC82w :  12 words$word)))) then T
   else if (((b__0 = (0x100w :  12 words$word)))) then T
   else if (((b__0 = (0x102w :  12 words$word)))) then T
   else if (((b__0 = (0x103w :  12 words$word)))) then T
   else if (((b__0 = (0x104w :  12 words$word)))) then T
   else if (((b__0 = (0x105w :  12 words$word)))) then T
   else if (((b__0 = (0x106w :  12 words$word)))) then T
   else if (((b__0 = (0x140w :  12 words$word)))) then T
   else if (((b__0 = (0x141w :  12 words$word)))) then T
   else if (((b__0 = (0x142w :  12 words$word)))) then T
   else if (((b__0 = (0x143w :  12 words$word)))) then T
   else if (((b__0 = (0x144w :  12 words$word)))) then T
   else if (((b__0 = (0x180w :  12 words$word)))) then T
   else if (((b__0 = (0xF11w :  12 words$word)))) then T
   else if (((b__0 = (0xF12w :  12 words$word)))) then T
   else if (((b__0 = (0xF13w :  12 words$word)))) then T
   else if (((b__0 = (0xF14w :  12 words$word)))) then T
   else if (((b__0 = (0x300w :  12 words$word)))) then T
   else if (((b__0 = (0x301w :  12 words$word)))) then T
   else if (((b__0 = (0x302w :  12 words$word)))) then T
   else if (((b__0 = (0x303w :  12 words$word)))) then T
   else if (((b__0 = (0x304w :  12 words$word)))) then T
   else if (((b__0 = (0x305w :  12 words$word)))) then T
   else if (((b__0 = (0x306w :  12 words$word)))) then T
   else if (((b__0 = (0x320w :  12 words$word)))) then T
   else if (((b__0 = (0x340w :  12 words$word)))) then T
   else if (((b__0 = (0x341w :  12 words$word)))) then T
   else if (((b__0 = (0x342w :  12 words$word)))) then T
   else if (((b__0 = (0x343w :  12 words$word)))) then T
   else if (((b__0 = (0x344w :  12 words$word)))) then T
   else if (((b__0 = (0x3A0w :  12 words$word)))) then T
   else if (((b__0 = (0x3A1w :  12 words$word)))) then T
   else if (((b__0 = (0x3A2w :  12 words$word)))) then T
   else if (((b__0 = (0x3A3w :  12 words$word)))) then T
   else if (((b__0 = (0x3B0w :  12 words$word)))) then T
   else if (((b__0 = (0x3B1w :  12 words$word)))) then T
   else if (((b__0 = (0x3B2w :  12 words$word)))) then T
   else if (((b__0 = (0x3B3w :  12 words$word)))) then T
   else if (((b__0 = (0x3B4w :  12 words$word)))) then T
   else if (((b__0 = (0x3B5w :  12 words$word)))) then T
   else if (((b__0 = (0x3B6w :  12 words$word)))) then T
   else if (((b__0 = (0x3B7w :  12 words$word)))) then T
   else if (((b__0 = (0x3B8w :  12 words$word)))) then T
   else if (((b__0 = (0x3B9w :  12 words$word)))) then T
   else if (((b__0 = (0x3BAw :  12 words$word)))) then T
   else if (((b__0 = (0x3BBw :  12 words$word)))) then T
   else if (((b__0 = (0x3BCw :  12 words$word)))) then T
   else if (((b__0 = (0x3BDw :  12 words$word)))) then T
   else if (((b__0 = (0x3BEw :  12 words$word)))) then T
   else if (((b__0 = (0x3BFw :  12 words$word)))) then T
   else if (((b__0 = (0xB00w :  12 words$word)))) then T
   else if (((b__0 = (0xB02w :  12 words$word)))) then T
   else if (((b__0 = (0xB80w :  12 words$word)))) then T
   else if (((b__0 = (0xB82w :  12 words$word)))) then T
   else if (((b__0 = (0x7A0w :  12 words$word)))) then T
   else if (((b__0 = (0x7A1w :  12 words$word)))) then T
   else if (((b__0 = (0x7A2w :  12 words$word)))) then T
   else if (((b__0 = (0x7A3w :  12 words$word)))) then T
   else T))`;


val _ = Define `
 ((csr_name_map_backwards_matches:string ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "ustatus"))) then sail2_state_monad$returnS T
   else if (((p0_ = "uie"))) then sail2_state_monad$returnS T
   else if (((p0_ = "utvec"))) then sail2_state_monad$returnS T
   else if (((p0_ = "uscratch"))) then sail2_state_monad$returnS T
   else if (((p0_ = "uepc"))) then sail2_state_monad$returnS T
   else if (((p0_ = "ucause"))) then sail2_state_monad$returnS T
   else if (((p0_ = "utval"))) then sail2_state_monad$returnS T
   else if (((p0_ = "uip"))) then sail2_state_monad$returnS T
   else if (((p0_ = "fflags"))) then sail2_state_monad$returnS T
   else if (((p0_ = "frm"))) then sail2_state_monad$returnS T
   else if (((p0_ = "fcsr"))) then sail2_state_monad$returnS T
   else if (((p0_ = "cycle"))) then sail2_state_monad$returnS T
   else if (((p0_ = "time"))) then sail2_state_monad$returnS T
   else if (((p0_ = "instret"))) then sail2_state_monad$returnS T
   else if (((p0_ = "cycleh"))) then sail2_state_monad$returnS T
   else if (((p0_ = "timeh"))) then sail2_state_monad$returnS T
   else if (((p0_ = "instreth"))) then sail2_state_monad$returnS T
   else if (((p0_ = "sstatus"))) then sail2_state_monad$returnS T
   else if (((p0_ = "sedeleg"))) then sail2_state_monad$returnS T
   else if (((p0_ = "sideleg"))) then sail2_state_monad$returnS T
   else if (((p0_ = "sie"))) then sail2_state_monad$returnS T
   else if (((p0_ = "stvec"))) then sail2_state_monad$returnS T
   else if (((p0_ = "scounteren"))) then sail2_state_monad$returnS T
   else if (((p0_ = "sscratch"))) then sail2_state_monad$returnS T
   else if (((p0_ = "sepc"))) then sail2_state_monad$returnS T
   else if (((p0_ = "scause"))) then sail2_state_monad$returnS T
   else if (((p0_ = "stval"))) then sail2_state_monad$returnS T
   else if (((p0_ = "sip"))) then sail2_state_monad$returnS T
   else if (((p0_ = "satp"))) then sail2_state_monad$returnS T
   else if (((p0_ = "mvendorid"))) then sail2_state_monad$returnS T
   else if (((p0_ = "marchid"))) then sail2_state_monad$returnS T
   else if (((p0_ = "mimpid"))) then sail2_state_monad$returnS T
   else if (((p0_ = "mhartid"))) then sail2_state_monad$returnS T
   else if (((p0_ = "mstatus"))) then sail2_state_monad$returnS T
   else if (((p0_ = "misa"))) then sail2_state_monad$returnS T
   else if (((p0_ = "medeleg"))) then sail2_state_monad$returnS T
   else if (((p0_ = "mideleg"))) then sail2_state_monad$returnS T
   else if (((p0_ = "mie"))) then sail2_state_monad$returnS T
   else if (((p0_ = "mtvec"))) then sail2_state_monad$returnS T
   else if (((p0_ = "mcounteren"))) then sail2_state_monad$returnS T
   else if (((p0_ = "mcountinhibit"))) then sail2_state_monad$returnS T
   else if (((p0_ = "mscratch"))) then sail2_state_monad$returnS T
   else if (((p0_ = "mepc"))) then sail2_state_monad$returnS T
   else if (((p0_ = "mcause"))) then sail2_state_monad$returnS T
   else if (((p0_ = "mtval"))) then sail2_state_monad$returnS T
   else if (((p0_ = "mip"))) then sail2_state_monad$returnS T
   else if (((p0_ = "pmpcfg0"))) then sail2_state_monad$returnS T
   else if (((p0_ = "pmpcfg1"))) then sail2_state_monad$returnS T
   else if (((p0_ = "pmpcfg2"))) then sail2_state_monad$returnS T
   else if (((p0_ = "pmpcfg3"))) then sail2_state_monad$returnS T
   else if (((p0_ = "pmpaddr0"))) then sail2_state_monad$returnS T
   else if (((p0_ = "pmpaddr1"))) then sail2_state_monad$returnS T
   else if (((p0_ = "pmpaddr2"))) then sail2_state_monad$returnS T
   else if (((p0_ = "pmpaddr3"))) then sail2_state_monad$returnS T
   else if (((p0_ = "pmpaddr4"))) then sail2_state_monad$returnS T
   else if (((p0_ = "pmpaddr5"))) then sail2_state_monad$returnS T
   else if (((p0_ = "pmpaddr6"))) then sail2_state_monad$returnS T
   else if (((p0_ = "pmpaddr7"))) then sail2_state_monad$returnS T
   else if (((p0_ = "pmpaddr8"))) then sail2_state_monad$returnS T
   else if (((p0_ = "pmpaddr9"))) then sail2_state_monad$returnS T
   else if (((p0_ = "pmpaddr10"))) then sail2_state_monad$returnS T
   else if (((p0_ = "pmpaddr11"))) then sail2_state_monad$returnS T
   else if (((p0_ = "pmpaddr12"))) then sail2_state_monad$returnS T
   else if (((p0_ = "pmpaddr13"))) then sail2_state_monad$returnS T
   else if (((p0_ = "pmpaddr14"))) then sail2_state_monad$returnS T
   else if (((p0_ = "pmpaddr15"))) then sail2_state_monad$returnS T
   else if (((p0_ = "mcycle"))) then sail2_state_monad$returnS T
   else if (((p0_ = "minstret"))) then sail2_state_monad$returnS T
   else if (((p0_ = "mcycleh"))) then sail2_state_monad$returnS T
   else if (((p0_ = "minstreth"))) then sail2_state_monad$returnS T
   else if (((p0_ = "tselect"))) then sail2_state_monad$returnS T
   else if (((p0_ = "tdata1"))) then sail2_state_monad$returnS T
   else if (((p0_ = "tdata2"))) then sail2_state_monad$returnS T
   else if (((p0_ = "tdata3"))) then sail2_state_monad$returnS T
   else if ((hex_bits_12_backwards_matches p0_)) then sail2_state_monad$bindS
     (hex_bits_12_backwards p0_  : ( 12 words$word) M) (\ reg .  sail2_state_monad$returnS T)
   else sail2_state_monad$returnS F))`;


(*val _s752_ : string -> maybe ((mword ty12 * string))*)

val _ = Define `
 ((s752_:string ->((12)words$word#string)option) s753_0= 
  ((case s753_0 of
         s754_0 =>
   (case ((hex_bits_12_matches_prefix0 s754_0 : (( 12 words$word # ii)) option)) of
         SOME ((reg, s755_0)) =>
   (case ((string_drop s754_0 s755_0)) of   s_ => SOME (reg, s_) )
     | _ => NONE
   )
   )))`;


(*val _s748_ : string -> maybe string*)

val _ = Define `
 ((s748_:string ->(string)option) s749_0=
    (let s750_0 = s749_0 in
   if ((string_startswith s750_0 "tdata3")) then  
  (case ((string_drop s750_0 ((string_length "tdata3")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s744_ : string -> maybe string*)

val _ = Define `
 ((s744_:string ->(string)option) s745_0=
    (let s746_0 = s745_0 in
   if ((string_startswith s746_0 "tdata2")) then  
  (case ((string_drop s746_0 ((string_length "tdata2")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s740_ : string -> maybe string*)

val _ = Define `
 ((s740_:string ->(string)option) s741_0=
    (let s742_0 = s741_0 in
   if ((string_startswith s742_0 "tdata1")) then  
  (case ((string_drop s742_0 ((string_length "tdata1")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s736_ : string -> maybe string*)

val _ = Define `
 ((s736_:string ->(string)option) s737_0=
    (let s738_0 = s737_0 in
   if ((string_startswith s738_0 "tselect")) then  
  (case ((string_drop s738_0 ((string_length "tselect")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s732_ : string -> maybe string*)

val _ = Define `
 ((s732_:string ->(string)option) s733_0=
    (let s734_0 = s733_0 in
   if ((string_startswith s734_0 "minstreth")) then  
  (case ((string_drop s734_0 ((string_length "minstreth")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s728_ : string -> maybe string*)

val _ = Define `
 ((s728_:string ->(string)option) s729_0=
    (let s730_0 = s729_0 in
   if ((string_startswith s730_0 "mcycleh")) then  
  (case ((string_drop s730_0 ((string_length "mcycleh")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s724_ : string -> maybe string*)

val _ = Define `
 ((s724_:string ->(string)option) s725_0=
    (let s726_0 = s725_0 in
   if ((string_startswith s726_0 "minstret")) then  
  (case ((string_drop s726_0 ((string_length "minstret")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s720_ : string -> maybe string*)

val _ = Define `
 ((s720_:string ->(string)option) s721_0=
    (let s722_0 = s721_0 in
   if ((string_startswith s722_0 "mcycle")) then  
  (case ((string_drop s722_0 ((string_length "mcycle")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s716_ : string -> maybe string*)

val _ = Define `
 ((s716_:string ->(string)option) s717_0=
    (let s718_0 = s717_0 in
   if ((string_startswith s718_0 "pmpaddr15")) then  
  (case ((string_drop s718_0 ((string_length "pmpaddr15")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s712_ : string -> maybe string*)

val _ = Define `
 ((s712_:string ->(string)option) s713_0=
    (let s714_0 = s713_0 in
   if ((string_startswith s714_0 "pmpaddr14")) then  
  (case ((string_drop s714_0 ((string_length "pmpaddr14")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s708_ : string -> maybe string*)

val _ = Define `
 ((s708_:string ->(string)option) s709_0=
    (let s710_0 = s709_0 in
   if ((string_startswith s710_0 "pmpaddr13")) then  
  (case ((string_drop s710_0 ((string_length "pmpaddr13")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s704_ : string -> maybe string*)

val _ = Define `
 ((s704_:string ->(string)option) s705_0=
    (let s706_0 = s705_0 in
   if ((string_startswith s706_0 "pmpaddr12")) then  
  (case ((string_drop s706_0 ((string_length "pmpaddr12")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s700_ : string -> maybe string*)

val _ = Define `
 ((s700_:string ->(string)option) s701_0=
    (let s702_0 = s701_0 in
   if ((string_startswith s702_0 "pmpaddr11")) then  
  (case ((string_drop s702_0 ((string_length "pmpaddr11")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s696_ : string -> maybe string*)

val _ = Define `
 ((s696_:string ->(string)option) s697_0=
    (let s698_0 = s697_0 in
   if ((string_startswith s698_0 "pmpaddr10")) then  
  (case ((string_drop s698_0 ((string_length "pmpaddr10")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s692_ : string -> maybe string*)

val _ = Define `
 ((s692_:string ->(string)option) s693_0=
    (let s694_0 = s693_0 in
   if ((string_startswith s694_0 "pmpaddr9")) then  
  (case ((string_drop s694_0 ((string_length "pmpaddr9")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s688_ : string -> maybe string*)

val _ = Define `
 ((s688_:string ->(string)option) s689_0=
    (let s690_0 = s689_0 in
   if ((string_startswith s690_0 "pmpaddr8")) then  
  (case ((string_drop s690_0 ((string_length "pmpaddr8")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s684_ : string -> maybe string*)

val _ = Define `
 ((s684_:string ->(string)option) s685_0=
    (let s686_0 = s685_0 in
   if ((string_startswith s686_0 "pmpaddr7")) then  
  (case ((string_drop s686_0 ((string_length "pmpaddr7")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s680_ : string -> maybe string*)

val _ = Define `
 ((s680_:string ->(string)option) s681_0=
    (let s682_0 = s681_0 in
   if ((string_startswith s682_0 "pmpaddr6")) then  
  (case ((string_drop s682_0 ((string_length "pmpaddr6")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s676_ : string -> maybe string*)

val _ = Define `
 ((s676_:string ->(string)option) s677_0=
    (let s678_0 = s677_0 in
   if ((string_startswith s678_0 "pmpaddr5")) then  
  (case ((string_drop s678_0 ((string_length "pmpaddr5")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s672_ : string -> maybe string*)

val _ = Define `
 ((s672_:string ->(string)option) s673_0=
    (let s674_0 = s673_0 in
   if ((string_startswith s674_0 "pmpaddr4")) then  
  (case ((string_drop s674_0 ((string_length "pmpaddr4")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s668_ : string -> maybe string*)

val _ = Define `
 ((s668_:string ->(string)option) s669_0=
    (let s670_0 = s669_0 in
   if ((string_startswith s670_0 "pmpaddr3")) then  
  (case ((string_drop s670_0 ((string_length "pmpaddr3")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s664_ : string -> maybe string*)

val _ = Define `
 ((s664_:string ->(string)option) s665_0=
    (let s666_0 = s665_0 in
   if ((string_startswith s666_0 "pmpaddr2")) then  
  (case ((string_drop s666_0 ((string_length "pmpaddr2")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s660_ : string -> maybe string*)

val _ = Define `
 ((s660_:string ->(string)option) s661_0=
    (let s662_0 = s661_0 in
   if ((string_startswith s662_0 "pmpaddr1")) then  
  (case ((string_drop s662_0 ((string_length "pmpaddr1")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s656_ : string -> maybe string*)

val _ = Define `
 ((s656_:string ->(string)option) s657_0=
    (let s658_0 = s657_0 in
   if ((string_startswith s658_0 "pmpaddr0")) then  
  (case ((string_drop s658_0 ((string_length "pmpaddr0")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s652_ : string -> maybe string*)

val _ = Define `
 ((s652_:string ->(string)option) s653_0=
    (let s654_0 = s653_0 in
   if ((string_startswith s654_0 "pmpcfg3")) then  
  (case ((string_drop s654_0 ((string_length "pmpcfg3")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s648_ : string -> maybe string*)

val _ = Define `
 ((s648_:string ->(string)option) s649_0=
    (let s650_0 = s649_0 in
   if ((string_startswith s650_0 "pmpcfg2")) then  
  (case ((string_drop s650_0 ((string_length "pmpcfg2")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s644_ : string -> maybe string*)

val _ = Define `
 ((s644_:string ->(string)option) s645_0=
    (let s646_0 = s645_0 in
   if ((string_startswith s646_0 "pmpcfg1")) then  
  (case ((string_drop s646_0 ((string_length "pmpcfg1")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s640_ : string -> maybe string*)

val _ = Define `
 ((s640_:string ->(string)option) s641_0=
    (let s642_0 = s641_0 in
   if ((string_startswith s642_0 "pmpcfg0")) then  
  (case ((string_drop s642_0 ((string_length "pmpcfg0")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s636_ : string -> maybe string*)

val _ = Define `
 ((s636_:string ->(string)option) s637_0=
    (let s638_0 = s637_0 in
   if ((string_startswith s638_0 "mip")) then  
  (case ((string_drop s638_0 ((string_length "mip")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s632_ : string -> maybe string*)

val _ = Define `
 ((s632_:string ->(string)option) s633_0=
    (let s634_0 = s633_0 in
   if ((string_startswith s634_0 "mtval")) then  
  (case ((string_drop s634_0 ((string_length "mtval")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s628_ : string -> maybe string*)

val _ = Define `
 ((s628_:string ->(string)option) s629_0=
    (let s630_0 = s629_0 in
   if ((string_startswith s630_0 "mcause")) then  
  (case ((string_drop s630_0 ((string_length "mcause")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s624_ : string -> maybe string*)

val _ = Define `
 ((s624_:string ->(string)option) s625_0=
    (let s626_0 = s625_0 in
   if ((string_startswith s626_0 "mepc")) then  
  (case ((string_drop s626_0 ((string_length "mepc")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s620_ : string -> maybe string*)

val _ = Define `
 ((s620_:string ->(string)option) s621_0=
    (let s622_0 = s621_0 in
   if ((string_startswith s622_0 "mscratch")) then  
  (case ((string_drop s622_0 ((string_length "mscratch")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s616_ : string -> maybe string*)

val _ = Define `
 ((s616_:string ->(string)option) s617_0=
    (let s618_0 = s617_0 in
   if ((string_startswith s618_0 "mcountinhibit")) then  
  (case ((string_drop s618_0 ((string_length "mcountinhibit")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s612_ : string -> maybe string*)

val _ = Define `
 ((s612_:string ->(string)option) s613_0=
    (let s614_0 = s613_0 in
   if ((string_startswith s614_0 "mcounteren")) then  
  (case ((string_drop s614_0 ((string_length "mcounteren")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s608_ : string -> maybe string*)

val _ = Define `
 ((s608_:string ->(string)option) s609_0=
    (let s610_0 = s609_0 in
   if ((string_startswith s610_0 "mtvec")) then  
  (case ((string_drop s610_0 ((string_length "mtvec")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s604_ : string -> maybe string*)

val _ = Define `
 ((s604_:string ->(string)option) s605_0=
    (let s606_0 = s605_0 in
   if ((string_startswith s606_0 "mie")) then  
  (case ((string_drop s606_0 ((string_length "mie")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s600_ : string -> maybe string*)

val _ = Define `
 ((s600_:string ->(string)option) s601_0=
    (let s602_0 = s601_0 in
   if ((string_startswith s602_0 "mideleg")) then  
  (case ((string_drop s602_0 ((string_length "mideleg")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s596_ : string -> maybe string*)

val _ = Define `
 ((s596_:string ->(string)option) s597_0=
    (let s598_0 = s597_0 in
   if ((string_startswith s598_0 "medeleg")) then  
  (case ((string_drop s598_0 ((string_length "medeleg")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s592_ : string -> maybe string*)

val _ = Define `
 ((s592_:string ->(string)option) s593_0=
    (let s594_0 = s593_0 in
   if ((string_startswith s594_0 "misa")) then  
  (case ((string_drop s594_0 ((string_length "misa")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s588_ : string -> maybe string*)

val _ = Define `
 ((s588_:string ->(string)option) s589_0=
    (let s590_0 = s589_0 in
   if ((string_startswith s590_0 "mstatus")) then  
  (case ((string_drop s590_0 ((string_length "mstatus")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s584_ : string -> maybe string*)

val _ = Define `
 ((s584_:string ->(string)option) s585_0=
    (let s586_0 = s585_0 in
   if ((string_startswith s586_0 "mhartid")) then  
  (case ((string_drop s586_0 ((string_length "mhartid")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s580_ : string -> maybe string*)

val _ = Define `
 ((s580_:string ->(string)option) s581_0=
    (let s582_0 = s581_0 in
   if ((string_startswith s582_0 "mimpid")) then  
  (case ((string_drop s582_0 ((string_length "mimpid")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s576_ : string -> maybe string*)

val _ = Define `
 ((s576_:string ->(string)option) s577_0=
    (let s578_0 = s577_0 in
   if ((string_startswith s578_0 "marchid")) then  
  (case ((string_drop s578_0 ((string_length "marchid")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s572_ : string -> maybe string*)

val _ = Define `
 ((s572_:string ->(string)option) s573_0=
    (let s574_0 = s573_0 in
   if ((string_startswith s574_0 "mvendorid")) then  
  (case ((string_drop s574_0 ((string_length "mvendorid")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s568_ : string -> maybe string*)

val _ = Define `
 ((s568_:string ->(string)option) s569_0=
    (let s570_0 = s569_0 in
   if ((string_startswith s570_0 "satp")) then  
  (case ((string_drop s570_0 ((string_length "satp")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s564_ : string -> maybe string*)

val _ = Define `
 ((s564_:string ->(string)option) s565_0=
    (let s566_0 = s565_0 in
   if ((string_startswith s566_0 "sip")) then  
  (case ((string_drop s566_0 ((string_length "sip")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s560_ : string -> maybe string*)

val _ = Define `
 ((s560_:string ->(string)option) s561_0=
    (let s562_0 = s561_0 in
   if ((string_startswith s562_0 "stval")) then  
  (case ((string_drop s562_0 ((string_length "stval")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s556_ : string -> maybe string*)

val _ = Define `
 ((s556_:string ->(string)option) s557_0=
    (let s558_0 = s557_0 in
   if ((string_startswith s558_0 "scause")) then  
  (case ((string_drop s558_0 ((string_length "scause")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s552_ : string -> maybe string*)

val _ = Define `
 ((s552_:string ->(string)option) s553_0=
    (let s554_0 = s553_0 in
   if ((string_startswith s554_0 "sepc")) then  
  (case ((string_drop s554_0 ((string_length "sepc")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s548_ : string -> maybe string*)

val _ = Define `
 ((s548_:string ->(string)option) s549_0=
    (let s550_0 = s549_0 in
   if ((string_startswith s550_0 "sscratch")) then  
  (case ((string_drop s550_0 ((string_length "sscratch")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s544_ : string -> maybe string*)

val _ = Define `
 ((s544_:string ->(string)option) s545_0=
    (let s546_0 = s545_0 in
   if ((string_startswith s546_0 "scounteren")) then  
  (case ((string_drop s546_0 ((string_length "scounteren")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s540_ : string -> maybe string*)

val _ = Define `
 ((s540_:string ->(string)option) s541_0=
    (let s542_0 = s541_0 in
   if ((string_startswith s542_0 "stvec")) then  
  (case ((string_drop s542_0 ((string_length "stvec")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s536_ : string -> maybe string*)

val _ = Define `
 ((s536_:string ->(string)option) s537_0=
    (let s538_0 = s537_0 in
   if ((string_startswith s538_0 "sie")) then  
  (case ((string_drop s538_0 ((string_length "sie")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s532_ : string -> maybe string*)

val _ = Define `
 ((s532_:string ->(string)option) s533_0=
    (let s534_0 = s533_0 in
   if ((string_startswith s534_0 "sideleg")) then  
  (case ((string_drop s534_0 ((string_length "sideleg")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s528_ : string -> maybe string*)

val _ = Define `
 ((s528_:string ->(string)option) s529_0=
    (let s530_0 = s529_0 in
   if ((string_startswith s530_0 "sedeleg")) then  
  (case ((string_drop s530_0 ((string_length "sedeleg")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s524_ : string -> maybe string*)

val _ = Define `
 ((s524_:string ->(string)option) s525_0=
    (let s526_0 = s525_0 in
   if ((string_startswith s526_0 "sstatus")) then  
  (case ((string_drop s526_0 ((string_length "sstatus")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s520_ : string -> maybe string*)

val _ = Define `
 ((s520_:string ->(string)option) s521_0=
    (let s522_0 = s521_0 in
   if ((string_startswith s522_0 "instreth")) then  
  (case ((string_drop s522_0 ((string_length "instreth")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s516_ : string -> maybe string*)

val _ = Define `
 ((s516_:string ->(string)option) s517_0=
    (let s518_0 = s517_0 in
   if ((string_startswith s518_0 "timeh")) then  
  (case ((string_drop s518_0 ((string_length "timeh")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s512_ : string -> maybe string*)

val _ = Define `
 ((s512_:string ->(string)option) s513_0=
    (let s514_0 = s513_0 in
   if ((string_startswith s514_0 "cycleh")) then  
  (case ((string_drop s514_0 ((string_length "cycleh")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s508_ : string -> maybe string*)

val _ = Define `
 ((s508_:string ->(string)option) s509_0=
    (let s510_0 = s509_0 in
   if ((string_startswith s510_0 "instret")) then  
  (case ((string_drop s510_0 ((string_length "instret")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s504_ : string -> maybe string*)

val _ = Define `
 ((s504_:string ->(string)option) s505_0=
    (let s506_0 = s505_0 in
   if ((string_startswith s506_0 "time")) then  
  (case ((string_drop s506_0 ((string_length "time")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s500_ : string -> maybe string*)

val _ = Define `
 ((s500_:string ->(string)option) s501_0=
    (let s502_0 = s501_0 in
   if ((string_startswith s502_0 "cycle")) then  
  (case ((string_drop s502_0 ((string_length "cycle")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s496_ : string -> maybe string*)

val _ = Define `
 ((s496_:string ->(string)option) s497_0=
    (let s498_0 = s497_0 in
   if ((string_startswith s498_0 "fcsr")) then  
  (case ((string_drop s498_0 ((string_length "fcsr")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s492_ : string -> maybe string*)

val _ = Define `
 ((s492_:string ->(string)option) s493_0=
    (let s494_0 = s493_0 in
   if ((string_startswith s494_0 "frm")) then  
  (case ((string_drop s494_0 ((string_length "frm")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s488_ : string -> maybe string*)

val _ = Define `
 ((s488_:string ->(string)option) s489_0=
    (let s490_0 = s489_0 in
   if ((string_startswith s490_0 "fflags")) then  
  (case ((string_drop s490_0 ((string_length "fflags")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s484_ : string -> maybe string*)

val _ = Define `
 ((s484_:string ->(string)option) s485_0=
    (let s486_0 = s485_0 in
   if ((string_startswith s486_0 "uip")) then  
  (case ((string_drop s486_0 ((string_length "uip")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s480_ : string -> maybe string*)

val _ = Define `
 ((s480_:string ->(string)option) s481_0=
    (let s482_0 = s481_0 in
   if ((string_startswith s482_0 "utval")) then  
  (case ((string_drop s482_0 ((string_length "utval")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s476_ : string -> maybe string*)

val _ = Define `
 ((s476_:string ->(string)option) s477_0=
    (let s478_0 = s477_0 in
   if ((string_startswith s478_0 "ucause")) then  
  (case ((string_drop s478_0 ((string_length "ucause")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s472_ : string -> maybe string*)

val _ = Define `
 ((s472_:string ->(string)option) s473_0=
    (let s474_0 = s473_0 in
   if ((string_startswith s474_0 "uepc")) then  
  (case ((string_drop s474_0 ((string_length "uepc")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s468_ : string -> maybe string*)

val _ = Define `
 ((s468_:string ->(string)option) s469_0=
    (let s470_0 = s469_0 in
   if ((string_startswith s470_0 "uscratch")) then  
  (case ((string_drop s470_0 ((string_length "uscratch")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s464_ : string -> maybe string*)

val _ = Define `
 ((s464_:string ->(string)option) s465_0=
    (let s466_0 = s465_0 in
   if ((string_startswith s466_0 "utvec")) then  
  (case ((string_drop s466_0 ((string_length "utvec")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s460_ : string -> maybe string*)

val _ = Define `
 ((s460_:string ->(string)option) s461_0=
    (let s462_0 = s461_0 in
   if ((string_startswith s462_0 "uie")) then  
  (case ((string_drop s462_0 ((string_length "uie")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s456_ : string -> maybe string*)

val _ = Define `
 ((s456_:string ->(string)option) s457_0=
    (let s458_0 = s457_0 in
   if ((string_startswith s458_0 "ustatus")) then  
  (case ((string_drop s458_0 ((string_length "ustatus")))) of
        s_ => SOME s_
  )
   else NONE))`;


val _ = Define `
 ((csr_name_map_matches_prefix:string ->((12)words$word#int)option) arg_=
    (let s459_0 = arg_ in
   if ((case ((s456_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s456_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x000w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s460_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s460_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x004w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s464_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s464_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x005w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s468_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s468_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x040w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s472_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s472_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x041w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s476_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s476_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x042w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s480_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s480_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x043w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s484_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s484_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x044w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s488_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s488_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x001w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s492_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s492_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x002w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s496_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s496_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x003w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s500_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s500_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0xC00w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s504_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s504_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0xC01w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s508_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s508_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0xC02w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s512_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s512_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0xC80w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s516_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s516_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0xC81w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s520_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s520_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0xC82w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s524_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s524_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x100w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s528_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s528_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x102w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s532_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s532_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x103w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s536_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s536_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x104w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s540_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s540_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x105w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s544_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s544_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x106w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s548_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s548_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x140w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s552_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s552_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x141w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s556_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s556_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x142w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s560_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s560_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x143w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s564_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s564_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x144w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s568_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s568_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x180w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s572_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s572_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0xF11w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s576_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s576_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0xF12w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s580_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s580_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0xF13w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s584_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s584_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0xF14w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s588_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s588_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x300w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s592_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s592_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x301w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s596_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s596_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x302w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s600_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s600_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x303w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s604_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s604_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x304w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s608_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s608_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x305w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s612_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s612_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x306w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s616_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s616_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x320w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s620_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s620_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x340w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s624_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s624_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x341w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s628_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s628_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x342w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s632_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s632_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x343w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s636_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s636_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x344w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s640_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s640_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x3A0w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s644_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s644_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x3A1w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s648_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s648_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x3A2w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s652_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s652_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x3A3w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s656_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s656_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x3B0w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s660_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s660_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x3B1w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s664_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s664_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x3B2w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s668_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s668_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x3B3w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s672_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s672_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x3B4w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s676_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s676_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x3B5w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s680_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s680_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x3B6w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s684_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s684_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x3B7w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s688_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s688_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x3B8w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s692_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s692_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x3B9w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s696_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s696_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x3BAw : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s700_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s700_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x3BBw : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s704_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s704_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x3BCw : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s708_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s708_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x3BDw : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s712_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s712_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x3BEw : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s716_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s716_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x3BFw : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s720_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s720_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0xB00w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s724_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s724_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0xB02w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s728_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s728_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0xB80w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s732_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s732_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0xB82w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s736_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s736_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x7A0w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s740_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s740_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x7A1w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s744_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s744_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x7A2w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s748_ s459_0)) of   SOME (s_) => T | _ => F )) then  
  (case s748_ s459_0 of
      (SOME (s_)) =>
  SOME
    ((0x7A3w : 12 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s752_ s459_0  :  (( 12 words$word # string))option)) of
       SOME ((reg, s_)) => T
     | _ => F
     )) then  (case (s752_ s459_0 : (( 12 words$word # string)) option) of
     (SOME ((reg, s_))) =>
 SOME (reg, ((string_length arg_)) - ((string_length s_)))
 )
   else NONE))`;


val _ = Define `
 ((csr_name:(12)words$word -> string) csr=  (csr_name_map_forwards csr))`;


val _ = Define `
 ((ext_is_CSR_defined:(12)words$word -> Privilege ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) b__0 g__326=
    (if (((b__0 = (0x000w :  12 words$word)))) then sail2_state$and_boolS ((haveUsrMode () )) ((haveNExt () ))
   else if (((b__0 = (0x004w :  12 words$word)))) then sail2_state$and_boolS ((haveUsrMode () )) ((haveNExt () ))
   else if (((b__0 = (0x005w :  12 words$word)))) then sail2_state$and_boolS ((haveUsrMode () )) ((haveNExt () ))
   else if (((b__0 = (0x040w :  12 words$word)))) then sail2_state$and_boolS ((haveUsrMode () )) ((haveNExt () ))
   else if (((b__0 = (0x041w :  12 words$word)))) then sail2_state$and_boolS ((haveUsrMode () )) ((haveNExt () ))
   else if (((b__0 = (0x042w :  12 words$word)))) then sail2_state$and_boolS ((haveUsrMode () )) ((haveNExt () ))
   else if (((b__0 = (0x043w :  12 words$word)))) then sail2_state$and_boolS ((haveUsrMode () )) ((haveNExt () ))
   else if (((b__0 = (0x044w :  12 words$word)))) then sail2_state$and_boolS ((haveUsrMode () )) ((haveNExt () ))
   else if (((b__0 = (0x001w :  12 words$word)))) then sail2_state$or_boolS ((haveFExt () )) ((haveDExt () ))
   else if (((b__0 = (0x002w :  12 words$word)))) then sail2_state$or_boolS ((haveFExt () )) ((haveDExt () ))
   else if (((b__0 = (0x003w :  12 words$word)))) then sail2_state$or_boolS ((haveFExt () )) ((haveDExt () ))
   else sail2_state_monad$returnS F))`;


val _ = Define `
 ((ext_read_CSR:(12)words$word ->(regstate)sail2_state_monad$sequential_state ->(((((32)words$word)option),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) b__0=
    (if (((b__0 = (0x000w :  12 words$word)))) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS mstatus_ref) (\ (w__0 : Mstatus) . 
     sail2_state_monad$returnS (SOME ((get_Ustatus_bits ((lower_sstatus ((lower_mstatus w__0))))  :  32 words$word))))
   else if (((b__0 = (0x004w :  12 words$word)))) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS mie_ref) (\ (w__1 : Minterrupts) .  sail2_state_monad$bindS
     (sail2_state_monad$read_regS mideleg_ref) (\ (w__2 : Minterrupts) .  sail2_state_monad$bindS
     (sail2_state_monad$read_regS sideleg_ref) (\ (w__3 : Sinterrupts) . 
     sail2_state_monad$returnS (SOME ((get_Uinterrupts_bits ((lower_sie ((lower_mie w__1 w__2)) w__3))  :  32 words$word))))))
   else if (((b__0 = (0x005w :  12 words$word)))) then sail2_state_monad$bindS
     (get_utvec ()   : ( 32 words$word) M) (\ (w__4 :  32 words$word) .  sail2_state_monad$returnS (SOME w__4))
   else if (((b__0 = (0x040w :  12 words$word)))) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS uscratch_ref  : ( 32 words$word) M) (\ (w__5 :  32 words$word) .  sail2_state_monad$returnS (SOME w__5))
   else if (((b__0 = (0x041w :  12 words$word)))) then sail2_state_monad$bindS
     (get_xret_target User  : ( 32 words$word) M) (\ (w__6 :  32 words$word) .  sail2_state_monad$bindS
     (pc_alignment_mask ()   : ( 32 words$word) M) (\ (w__7 :  32 words$word) . 
     sail2_state_monad$returnS (SOME ((and_vec w__6 w__7  :  32 words$word)))))
   else if (((b__0 = (0x042w :  12 words$word)))) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS ucause_ref) (\ (w__8 : Mcause) . 
     sail2_state_monad$returnS (SOME ((get_Mcause_bits w__8  :  32 words$word))))
   else if (((b__0 = (0x043w :  12 words$word)))) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS utval_ref  : ( 32 words$word) M) (\ (w__9 :  32 words$word) .  sail2_state_monad$returnS (SOME w__9))
   else if (((b__0 = (0x044w :  12 words$word)))) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS mip_ref) (\ (w__10 : Minterrupts) .  sail2_state_monad$bindS
     (sail2_state_monad$read_regS mideleg_ref) (\ (w__11 : Minterrupts) .  sail2_state_monad$bindS
     (sail2_state_monad$read_regS sideleg_ref) (\ (w__12 : Sinterrupts) . 
     sail2_state_monad$returnS (SOME ((get_Uinterrupts_bits ((lower_sip ((lower_mip w__10 w__11)) w__12))
                     :  32 words$word))))))
   else if (((b__0 = (0x001w :  12 words$word)))) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS fcsr_ref) (\ (w__13 : Fcsr) . 
     sail2_state_monad$returnS (SOME ((EXTZ (( 32 : int):ii) ((get_Fcsr_FFLAGS w__13  :  5 words$word))  :  32 words$word))))
   else if (((b__0 = (0x002w :  12 words$word)))) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS fcsr_ref) (\ (w__14 : Fcsr) . 
     sail2_state_monad$returnS (SOME ((EXTZ (( 32 : int):ii) ((get_Fcsr_FRM w__14  :  3 words$word))  :  32 words$word))))
   else if (((b__0 = (0x003w :  12 words$word)))) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS fcsr_ref) (\ (w__15 : Fcsr) . 
     sail2_state_monad$returnS (SOME ((EXTZ (( 32 : int):ii) ((get_Fcsr_bits w__15  :  32 words$word))  :  32 words$word))))
   else sail2_state_monad$returnS NONE))`;


val _ = Define `
 ((ext_write_CSR:(12)words$word ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((((32)words$word)option),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) b__0 value=
    (if (((b__0 = (0x000w :  12 words$word)))) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS mstatus_ref) (\ (w__0 : Mstatus) .  sail2_state_monad$bindS
     (legalize_ustatus w__0 value) (\ (w__1 : Mstatus) .  sail2_state_monad$bindS (sail2_state_monad$seqS
     (sail2_state_monad$write_regS mstatus_ref w__1)
     (sail2_state_monad$read_regS mstatus_ref)) (\ (w__2 : Mstatus) . 
     sail2_state_monad$returnS (SOME ((get_Mstatus_bits w__2  :  32 words$word))))))
   else if (((b__0 = (0x004w :  12 words$word)))) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS mie_ref) (\ (w__3 : Minterrupts) .  sail2_state_monad$bindS
     (sail2_state_monad$read_regS mideleg_ref) (\ (w__4 : Minterrupts) .  sail2_state_monad$bindS
     (sail2_state_monad$read_regS sideleg_ref) (\ (w__5 : Sinterrupts) . 
     let sie = (legalize_uie ((lower_mie w__3 w__4)) w__5 value) in sail2_state_monad$bindS
     (sail2_state_monad$read_regS mie_ref) (\ (w__6 : Minterrupts) .  sail2_state_monad$bindS
     (sail2_state_monad$read_regS mideleg_ref) (\ (w__7 : Minterrupts) .  sail2_state_monad$bindS
     (lift_sie w__6 w__7 sie) (\ (w__8 : Minterrupts) .  sail2_state_monad$bindS (sail2_state_monad$seqS
     (sail2_state_monad$write_regS mie_ref w__8)
     (sail2_state_monad$read_regS mie_ref)) (\ (w__9 : Minterrupts) . 
     sail2_state_monad$returnS (SOME ((get_Minterrupts_bits w__9  :  32 words$word))))))))))
   else if (((b__0 = (0x005w :  12 words$word)))) then sail2_state_monad$bindS
     (set_utvec value  : ( 32 words$word) M) (\ (w__10 :  32 words$word) .  sail2_state_monad$returnS (SOME w__10))
   else if (((b__0 = (0x040w :  12 words$word)))) then sail2_state_monad$bindS (sail2_state_monad$seqS
     (sail2_state_monad$write_regS uscratch_ref value)
     (sail2_state_monad$read_regS uscratch_ref  : ( 32 words$word) M)) (\ (w__11 :  32 words$word) .  sail2_state_monad$returnS (SOME w__11))
   else if (((b__0 = (0x041w :  12 words$word)))) then sail2_state_monad$bindS
     (set_xret_target User value  : ( 32 words$word) M) (\ (w__12 :  32 words$word) . 
     sail2_state_monad$returnS (SOME w__12))
   else if (((b__0 = (0x042w :  12 words$word)))) then sail2_state_monad$bindS (sail2_state_monad$seqS
     (set_Mcause_bits ucause_ref value)
     (sail2_state_monad$read_regS ucause_ref)) (\ (w__13 : Mcause) . 
     sail2_state_monad$returnS (SOME ((get_Mcause_bits w__13  :  32 words$word))))
   else if (((b__0 = (0x043w :  12 words$word)))) then sail2_state_monad$bindS (sail2_state_monad$seqS
     (sail2_state_monad$write_regS utval_ref value)
     (sail2_state_monad$read_regS utval_ref  : ( 32 words$word) M)) (\ (w__14 :  32 words$word) .  sail2_state_monad$returnS (SOME w__14))
   else if (((b__0 = (0x044w :  12 words$word)))) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS mip_ref) (\ (w__15 : Minterrupts) .  sail2_state_monad$bindS
     (sail2_state_monad$read_regS mideleg_ref) (\ (w__16 : Minterrupts) .  sail2_state_monad$bindS
     (sail2_state_monad$read_regS sideleg_ref) (\ (w__17 : Sinterrupts) . 
     let sip = (legalize_uip ((lower_mip w__15 w__16)) w__17 value) in sail2_state_monad$bindS
     (sail2_state_monad$read_regS mip_ref) (\ (w__18 : Minterrupts) .  sail2_state_monad$bindS
     (sail2_state_monad$read_regS mideleg_ref) (\ (w__19 : Minterrupts) .  sail2_state_monad$bindS
     (lift_sip w__18 w__19 sip) (\ (w__20 : Minterrupts) .  sail2_state_monad$bindS (sail2_state_monad$seqS
     (sail2_state_monad$write_regS mip_ref w__20)
     (sail2_state_monad$read_regS mip_ref)) (\ (w__21 : Minterrupts) . 
     sail2_state_monad$returnS (SOME ((get_Minterrupts_bits w__21  :  32 words$word))))))))))
   else if (((b__0 = (0x001w :  12 words$word)))) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS fcsr_ref) (\ (w__22 : Fcsr) .  sail2_state_monad$bindS (sail2_state_monad$seqS
     (ext_write_fcsr ((get_Fcsr_FRM w__22  :  3 words$word))
       ((subrange_vec_dec value (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)))
     (sail2_state_monad$read_regS fcsr_ref)) (\ (w__23 : Fcsr) . 
     sail2_state_monad$returnS (SOME ((EXTZ (( 32 : int):ii) ((get_Fcsr_FFLAGS w__23  :  5 words$word))  :  32 words$word)))))
   else if (((b__0 = (0x002w :  12 words$word)))) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS fcsr_ref) (\ (w__24 : Fcsr) .  sail2_state_monad$bindS (sail2_state_monad$seqS
     (ext_write_fcsr ((subrange_vec_dec value (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word))
       ((get_Fcsr_FFLAGS w__24  :  5 words$word)))
     (sail2_state_monad$read_regS fcsr_ref)) (\ (w__25 : Fcsr) . 
     sail2_state_monad$returnS (SOME ((EXTZ (( 32 : int):ii) ((get_Fcsr_FRM w__25  :  3 words$word))  :  32 words$word)))))
   else if (((b__0 = (0x003w :  12 words$word)))) then sail2_state_monad$bindS (sail2_state_monad$seqS
     (ext_write_fcsr ((subrange_vec_dec value (( 7 : int):ii) (( 5 : int):ii)  :  3 words$word))
       ((subrange_vec_dec value (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)))
     (sail2_state_monad$read_regS fcsr_ref)) (\ (w__26 : Fcsr) . 
     sail2_state_monad$returnS (SOME ((EXTZ (( 32 : int):ii) ((get_Fcsr_bits w__26  :  32 words$word))  :  32 words$word))))
   else sail2_state_monad$returnS NONE))`;


(*val csrAccess : mword ty12 -> mword ty2*)

val _ = Define `
 ((csrAccess:(12)words$word ->(2)words$word) csr=  ((subrange_vec_dec csr (( 11 : int):ii) (( 10 : int):ii)  :  2 words$word)))`;


(*val csrPriv : mword ty12 -> mword ty2*)

val _ = Define `
 ((csrPriv:(12)words$word ->(2)words$word) csr=  ((subrange_vec_dec csr (( 9 : int):ii) (( 8 : int):ii)  :  2 words$word)))`;


(*val is_CSR_defined : mword ty12 -> Privilege -> M bool*)

val _ = Define `
 ((is_CSR_defined:(12)words$word -> Privilege ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (csr : csreg) (p : Privilege)=
    (let b__0 = csr in
   if (((b__0 = (0xF11w :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0xF12w :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0xF13w :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0xF14w :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0x300w :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0x301w :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0x302w :  12 words$word)))) then
     sail2_state$and_boolS (sail2_state_monad$returnS (((p = Machine)))) (sail2_state$or_boolS ((haveSupMode () )) ((haveNExt () )))
   else if (((b__0 = (0x303w :  12 words$word)))) then
     sail2_state$and_boolS (sail2_state_monad$returnS (((p = Machine)))) (sail2_state$or_boolS ((haveSupMode () )) ((haveNExt () )))
   else if (((b__0 = (0x304w :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0x305w :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0x306w :  12 words$word)))) then
     sail2_state$and_boolS (sail2_state_monad$returnS (((p = Machine)))) ((haveUsrMode () ))
   else if (((b__0 = (0x310w :  12 words$word)))) then
     sail2_state_monad$returnS ((((((p = Machine))) /\ ((((( 32 : int):ii) = (( 32 : int):ii)))))))
   else if (((b__0 = (0x320w :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0x340w :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0x341w :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0x342w :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0x343w :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0x344w :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0x3A0w :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0x3A1w :  12 words$word)))) then
     sail2_state_monad$returnS ((((((p = Machine))) /\ ((((( 32 : int):ii) = (( 32 : int):ii)))))))
   else if (((b__0 = (0x3A2w :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0x3A3w :  12 words$word)))) then
     sail2_state_monad$returnS ((((((p = Machine))) /\ ((((( 32 : int):ii) = (( 32 : int):ii)))))))
   else if (((b__0 = (0x3B0w :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0x3B1w :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0x3B2w :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0x3B3w :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0x3B4w :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0x3B5w :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0x3B6w :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0x3B7w :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0x3B8w :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0x3B9w :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0x3BAw :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0x3BBw :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0x3BCw :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0x3BDw :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0x3BEw :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0x3BFw :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0xB00w :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0xB02w :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0xB80w :  12 words$word)))) then
     sail2_state_monad$returnS ((((((p = Machine))) /\ ((((( 32 : int):ii) = (( 32 : int):ii)))))))
   else if (((b__0 = (0xB82w :  12 words$word)))) then
     sail2_state_monad$returnS ((((((p = Machine))) /\ ((((( 32 : int):ii) = (( 32 : int):ii)))))))
   else if (((b__0 = (0x7A0w :  12 words$word)))) then sail2_state_monad$returnS (((p = Machine)))
   else if (((b__0 = (0x100w :  12 words$word)))) then
     sail2_state$and_boolS ((haveSupMode () )) (sail2_state_monad$returnS ((((((p = Machine))) \/ (((p = Supervisor)))))))
   else if (((b__0 = (0x102w :  12 words$word)))) then
     sail2_state$and_boolS ((haveSupMode () ))
       (sail2_state$and_boolS ((haveNExt () )) (sail2_state_monad$returnS ((((((p = Machine))) \/ (((p = Supervisor))))))))
   else if (((b__0 = (0x103w :  12 words$word)))) then
     sail2_state$and_boolS ((haveSupMode () ))
       (sail2_state$and_boolS ((haveNExt () )) (sail2_state_monad$returnS ((((((p = Machine))) \/ (((p = Supervisor))))))))
   else if (((b__0 = (0x104w :  12 words$word)))) then
     sail2_state$and_boolS ((haveSupMode () )) (sail2_state_monad$returnS ((((((p = Machine))) \/ (((p = Supervisor)))))))
   else if (((b__0 = (0x105w :  12 words$word)))) then
     sail2_state$and_boolS ((haveSupMode () )) (sail2_state_monad$returnS ((((((p = Machine))) \/ (((p = Supervisor)))))))
   else if (((b__0 = (0x106w :  12 words$word)))) then
     sail2_state$and_boolS ((haveSupMode () )) (sail2_state_monad$returnS ((((((p = Machine))) \/ (((p = Supervisor)))))))
   else if (((b__0 = (0x140w :  12 words$word)))) then
     sail2_state$and_boolS ((haveSupMode () )) (sail2_state_monad$returnS ((((((p = Machine))) \/ (((p = Supervisor)))))))
   else if (((b__0 = (0x141w :  12 words$word)))) then
     sail2_state$and_boolS ((haveSupMode () )) (sail2_state_monad$returnS ((((((p = Machine))) \/ (((p = Supervisor)))))))
   else if (((b__0 = (0x142w :  12 words$word)))) then
     sail2_state$and_boolS ((haveSupMode () )) (sail2_state_monad$returnS ((((((p = Machine))) \/ (((p = Supervisor)))))))
   else if (((b__0 = (0x143w :  12 words$word)))) then
     sail2_state$and_boolS ((haveSupMode () )) (sail2_state_monad$returnS ((((((p = Machine))) \/ (((p = Supervisor)))))))
   else if (((b__0 = (0x144w :  12 words$word)))) then
     sail2_state$and_boolS ((haveSupMode () )) (sail2_state_monad$returnS ((((((p = Machine))) \/ (((p = Supervisor)))))))
   else if (((b__0 = (0x180w :  12 words$word)))) then
     sail2_state$and_boolS ((haveSupMode () )) (sail2_state_monad$returnS ((((((p = Machine))) \/ (((p = Supervisor)))))))
   else if (((b__0 = (0xC00w :  12 words$word)))) then haveUsrMode () 
   else if (((b__0 = (0xC01w :  12 words$word)))) then haveUsrMode () 
   else if (((b__0 = (0xC02w :  12 words$word)))) then haveUsrMode () 
   else if (((b__0 = (0xC80w :  12 words$word)))) then
     sail2_state$and_boolS ((haveUsrMode () )) (sail2_state_monad$returnS ((((( 32 : int):ii) = (( 32 : int):ii)))))
   else if (((b__0 = (0xC81w :  12 words$word)))) then
     sail2_state$and_boolS ((haveUsrMode () )) (sail2_state_monad$returnS ((((( 32 : int):ii) = (( 32 : int):ii)))))
   else if (((b__0 = (0xC82w :  12 words$word)))) then
     sail2_state$and_boolS ((haveUsrMode () )) (sail2_state_monad$returnS ((((( 32 : int):ii) = (( 32 : int):ii)))))
   else ext_is_CSR_defined csr p))`;


(*val check_CSR_access : mword ty2 -> mword ty2 -> Privilege -> bool -> bool*)

val _ = Define `
 ((check_CSR_access:(2)words$word ->(2)words$word -> Privilege -> bool -> bool) csrrw csrpr p isWrite=
    (((~ ((((((isWrite = T))) /\ (((csrrw = (0b11w :  2 words$word))))))))) /\ ((zopz0zKzJ_u ((privLevel_to_bits p  :  2 words$word)) csrpr))))`;


(*val check_TVM_SATP : mword ty12 -> Privilege -> M bool*)

val _ = Define `
 ((check_TVM_SATP:(12)words$word -> Privilege ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (csr : csreg) (p : Privilege)=  (sail2_state_monad$bindS
   (sail2_state$and_boolS (sail2_state_monad$returnS (((csr = (0x180w :  12 words$word)))))
     (sail2_state$and_boolS (sail2_state_monad$returnS (((p = Supervisor))))
        ( sail2_state_monad$bindS(sail2_state_monad$read_regS mstatus_ref) (\ (w__0 : Mstatus) . 
         sail2_state_monad$returnS (((((get_Mstatus_TVM w__0  :  1 words$word)) = (0b1w :  1 words$word)))))))) (\ (w__2 :
     bool) . 
   sail2_state_monad$returnS ((~ w__2)))))`;


(*val check_Counteren : mword ty12 -> Privilege -> M bool*)

val _ = Define `
 ((check_Counteren:(12)words$word -> Privilege ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (csr : csreg) (p : Privilege)=
    ((case (csr, p) of
     (b__0, Supervisor) =>
      if (((b__0 = (0xC00w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mcounteren_ref) (\ (w__0 : Counteren) . 
        sail2_state_monad$returnS (((((get_Counteren_CY w__0  :  1 words$word)) = (0b1w :  1 words$word)))))
      else if (((b__0 = (0xC01w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mcounteren_ref) (\ (w__1 : Counteren) . 
        sail2_state_monad$returnS (((((get_Counteren_TM w__1  :  1 words$word)) = (0b1w :  1 words$word)))))
      else if (((b__0 = (0xC02w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mcounteren_ref) (\ (w__2 : Counteren) . 
        sail2_state_monad$returnS (((((get_Counteren_IR w__2  :  1 words$word)) = (0b1w :  1 words$word)))))
      else
        sail2_state_monad$returnS ((case (b__0, Supervisor) of
          (_, _) =>
           if (((((zopz0zIzJ_u (0xC03w :  12 words$word) csr)) /\ ((zopz0zIzJ_u csr (0xC1Fw :  12 words$word)))))) then
             F
           else T
        ))
   | (b__3, User) =>
      if (((b__3 = (0xC00w :  12 words$word)))) then
        sail2_state$and_boolS
          ( sail2_state_monad$bindS(sail2_state_monad$read_regS mcounteren_ref) (\ (w__6 : Counteren) . 
           sail2_state_monad$returnS (((((get_Counteren_CY w__6  :  1 words$word)) = (0b1w :  1 words$word))))))
          (sail2_state$or_boolS ( sail2_state_monad$bindS(haveSupMode () ) (\ (w__7 : bool) .  sail2_state_monad$returnS ((~ w__7))))
             ( sail2_state_monad$bindS(sail2_state_monad$read_regS scounteren_ref) (\ (w__8 : Counteren) . 
              sail2_state_monad$returnS (((((get_Counteren_CY w__8  :  1 words$word)) = (0b1w :  1 words$word)))))))
      else if (((b__3 = (0xC01w :  12 words$word)))) then
        sail2_state$and_boolS
          ( sail2_state_monad$bindS(sail2_state_monad$read_regS mcounteren_ref) (\ (w__11 : Counteren) . 
           sail2_state_monad$returnS (((((get_Counteren_TM w__11  :  1 words$word)) = (0b1w :  1 words$word))))))
          (sail2_state$or_boolS ( sail2_state_monad$bindS(haveSupMode () ) (\ (w__12 : bool) .  sail2_state_monad$returnS ((~ w__12))))
             ( sail2_state_monad$bindS(sail2_state_monad$read_regS scounteren_ref) (\ (w__13 : Counteren) . 
              sail2_state_monad$returnS (((((get_Counteren_TM w__13  :  1 words$word)) = (0b1w :  1 words$word)))))))
      else if (((b__3 = (0xC02w :  12 words$word)))) then
        sail2_state$and_boolS
          ( sail2_state_monad$bindS(sail2_state_monad$read_regS mcounteren_ref) (\ (w__16 : Counteren) . 
           sail2_state_monad$returnS (((((get_Counteren_IR w__16  :  1 words$word)) = (0b1w :  1 words$word))))))
          (sail2_state$or_boolS ( sail2_state_monad$bindS(haveSupMode () ) (\ (w__17 : bool) .  sail2_state_monad$returnS ((~ w__17))))
             ( sail2_state_monad$bindS(sail2_state_monad$read_regS scounteren_ref) (\ (w__18 : Counteren) . 
              sail2_state_monad$returnS (((((get_Counteren_IR w__18  :  1 words$word)) = (0b1w :  1 words$word)))))))
      else
        sail2_state_monad$returnS ((case (b__3, User) of
          (_, _) =>
           if (((((zopz0zIzJ_u (0xC03w :  12 words$word) csr)) /\ ((zopz0zIzJ_u csr (0xC1Fw :  12 words$word)))))) then
             F
           else T
        ))
   | (_, _) =>
      sail2_state_monad$returnS (if (((((zopz0zIzJ_u (0xC03w :  12 words$word) csr)) /\ ((zopz0zIzJ_u csr (0xC1Fw :  12 words$word)))))) then
                F
              else T)
   )))`;


(*val check_CSR : mword ty12 -> Privilege -> bool -> M bool*)

val _ = Define `
 ((check_CSR:(12)words$word -> Privilege -> bool ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (csr : csreg) (p : Privilege) (isWrite : bool)=
    (sail2_state$and_boolS ((is_CSR_defined csr p))
     (sail2_state$and_boolS
        (sail2_state_monad$returnS ((check_CSR_access ((csrAccess csr  :  2 words$word)) ((csrPriv csr  :  2 words$word)) p
                    isWrite))) (sail2_state$and_boolS ((check_TVM_SATP csr p)) ((check_Counteren csr p))))))`;


(*val exception_delegatee : ExceptionType -> Privilege -> M Privilege*)

val _ = Define `
 ((exception_delegatee:ExceptionType -> Privilege ->(regstate)sail2_state_monad$sequential_state ->(((Privilege),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (e : ExceptionType) (p : Privilege)=
    (let idx = (num_of_ExceptionType e) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS medeleg_ref) (\ (w__0 : Medeleg) . 
   let super = (bit_to_bool ((access_vec_dec ((get_Medeleg_bits w__0  :  32 words$word)) idx))) in sail2_state_monad$bindS
   (haveSupMode () ) (\ (w__1 : bool) .  sail2_state_monad$bindS
   (if w__1 then
      sail2_state$and_boolS (sail2_state_monad$returnS super)
        (sail2_state$and_boolS ((haveNExt () ))
           ( sail2_state_monad$bindS(sail2_state_monad$read_regS sedeleg_ref) (\ (w__3 : Sedeleg) . 
            sail2_state_monad$returnS ((bit_to_bool ((access_vec_dec ((get_Sedeleg_bits w__3  :  32 words$word)) idx)))))))
    else sail2_state$and_boolS (sail2_state_monad$returnS super) ((haveNExt () ))) (\ user .  sail2_state_monad$bindS
   (sail2_state$and_boolS ((haveUsrMode () )) (sail2_state_monad$returnS user)) (\ w__9 .  sail2_state_monad$bindS
   (if w__9 then sail2_state_monad$returnS User
    else sail2_state_monad$bindS
      (sail2_state$and_boolS ((haveSupMode () )) (sail2_state_monad$returnS super)) (\ w__11 . 
      sail2_state_monad$returnS (if w__11 then Supervisor
              else Machine))) (\ deleg . 
   sail2_state_monad$returnS (if ((zopz0zI_u ((privLevel_to_bits deleg  :  2 words$word))
                  ((privLevel_to_bits p  :  2 words$word)))) then
             p
           else deleg))))))))`;


(*val findPendingInterrupt : mword ty32 -> maybe InterruptType*)

val _ = Define `
 ((findPendingInterrupt:(32)words$word ->(InterruptType)option) ip=
    (let ip = (Mk_Minterrupts ip) in
   if (((((get_Minterrupts_MEI ip  :  1 words$word)) = (0b1w :  1 words$word)))) then SOME I_M_External
   else if (((((get_Minterrupts_MSI ip  :  1 words$word)) = (0b1w :  1 words$word)))) then
     SOME I_M_Software
   else if (((((get_Minterrupts_MTI ip  :  1 words$word)) = (0b1w :  1 words$word)))) then SOME I_M_Timer
   else if (((((get_Minterrupts_SEI ip  :  1 words$word)) = (0b1w :  1 words$word)))) then
     SOME I_S_External
   else if (((((get_Minterrupts_SSI ip  :  1 words$word)) = (0b1w :  1 words$word)))) then
     SOME I_S_Software
   else if (((((get_Minterrupts_STI ip  :  1 words$word)) = (0b1w :  1 words$word)))) then SOME I_S_Timer
   else if (((((get_Minterrupts_UEI ip  :  1 words$word)) = (0b1w :  1 words$word)))) then
     SOME I_U_External
   else if (((((get_Minterrupts_USI ip  :  1 words$word)) = (0b1w :  1 words$word)))) then
     SOME I_U_Software
   else if (((((get_Minterrupts_UTI ip  :  1 words$word)) = (0b1w :  1 words$word)))) then SOME I_U_Timer
   else NONE))`;


(*val processPending : Minterrupts -> Minterrupts -> mword ty32 -> bool -> interrupt_set*)

val _ = Define `
 ((processPending:Minterrupts -> Minterrupts ->(32)words$word -> bool -> interrupt_set) (xip : Minterrupts) (xie : Minterrupts) (xideleg : xlenbits) (priv_enabled : bool)=
    (let effective_pend =
     ((and_vec ((get_Minterrupts_bits xip  :  32 words$word))
        ((and_vec ((get_Minterrupts_bits xie  :  32 words$word)) ((not_vec xideleg  :  32 words$word))
           :  32 words$word))
       :  32 words$word)) in
   let effective_delg = ((and_vec ((get_Minterrupts_bits xip  :  32 words$word)) xideleg  :  32 words$word)) in
   if (((priv_enabled /\ (((effective_pend <> ((EXTZ (( 32 : int):ii) (0b0w :  1 words$word)  :  32 words$word)))))))) then
     Ints_Pending effective_pend
   else if (((effective_delg <> ((EXTZ (( 32 : int):ii) (0b0w :  1 words$word)  :  32 words$word))))) then
     Ints_Delegated effective_delg
   else Ints_Empty () ))`;


(*val getPendingSet : Privilege -> M (maybe ((mword ty32 * Privilege)))*)

val _ = Define `
 ((getPendingSet:Privilege ->(regstate)sail2_state_monad$sequential_state ->(((((32)words$word#Privilege)option),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) priv=  (sail2_state_monad$bindS
   (haveUsrMode () ) (\ (w__0 : bool) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$assert_expS w__0 "no user mode: M/U or M/S/U system required")
   (sail2_state_monad$read_regS mip_ref)) (\ (w__1 : Minterrupts) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS mie_ref) (\ (w__2 : Minterrupts) . 
   let effective_pending =
     ((and_vec ((get_Minterrupts_bits w__1  :  32 words$word))
        ((get_Minterrupts_bits w__2  :  32 words$word))
       :  32 words$word)) in
   if (((effective_pending = ((EXTZ (( 32 : int):ii) (0b0w :  1 words$word)  :  32 words$word))))) then
     sail2_state_monad$returnS NONE
   else sail2_state_monad$bindS
     (sail2_state$or_boolS (sail2_state_monad$returnS (((priv <> Machine))))
       (sail2_state$and_boolS (sail2_state_monad$returnS (((priv = Machine))))
          ( sail2_state_monad$bindS(sail2_state_monad$read_regS mstatus_ref) (\ (w__3 : Mstatus) . 
           sail2_state_monad$returnS (((((get_Mstatus_MIE w__3  :  1 words$word)) = (0b1w :  1 words$word)))))))) (\ mIE .  sail2_state_monad$bindS
     (sail2_state$and_boolS ((haveSupMode () ))
       (sail2_state$or_boolS (sail2_state_monad$returnS (((priv = User))))
          (sail2_state$and_boolS (sail2_state_monad$returnS (((priv = Supervisor))))
             ( sail2_state_monad$bindS(sail2_state_monad$read_regS mstatus_ref) (\ (w__6 : Mstatus) . 
              sail2_state_monad$returnS (((((get_Mstatus_SIE w__6  :  1 words$word)) = (0b1w :  1 words$word))))))))) (\ sIE .  sail2_state_monad$bindS
     (sail2_state$and_boolS ((haveNExt () ))
       (sail2_state$and_boolS (sail2_state_monad$returnS (((priv = User))))
          ( sail2_state_monad$bindS(sail2_state_monad$read_regS mstatus_ref) (\ (w__10 : Mstatus) . 
           sail2_state_monad$returnS (((((get_Mstatus_UIE w__10  :  1 words$word)) = (0b1w :  1 words$word)))))))) (\ uIE .  sail2_state_monad$bindS
     (sail2_state_monad$read_regS mip_ref) (\ (w__12 : Minterrupts) .  sail2_state_monad$bindS
     (sail2_state_monad$read_regS mie_ref) (\ (w__13 : Minterrupts) .  sail2_state_monad$bindS
     (sail2_state_monad$read_regS mideleg_ref) (\ (w__14 : Minterrupts) . 
     (case ((processPending w__12 w__13 ((get_Minterrupts_bits w__14  :  32 words$word)) mIE)) of
       Ints_Empty (() ) => sail2_state_monad$returnS NONE
     | Ints_Pending (p) =>
        let r = (p, Machine) in
        sail2_state_monad$returnS (SOME r)
     | Ints_Delegated (d) => sail2_state_monad$bindS
        (haveSupMode () ) (\ (w__15 : bool) . 
        if ((~ w__15)) then
          sail2_state_monad$returnS (if uIE then
                    let r = (d, User) in
                    SOME r
                  else NONE)
        else sail2_state_monad$bindS
          (sail2_state_monad$read_regS mie_ref) (\ (w__16 : Minterrupts) .  sail2_state_monad$bindS
          (sail2_state_monad$read_regS sideleg_ref) (\ (w__17 : Sinterrupts) . 
          sail2_state_monad$returnS ((case ((processPending ((Mk_Minterrupts d)) w__16
                            ((get_Sinterrupts_bits w__17  :  32 words$word)) sIE)) of
            Ints_Empty (() ) => NONE
          | Ints_Pending (p) =>
             let r = (p, Supervisor) in
             SOME r
          | Ints_Delegated (d) =>
             if uIE then
               let r = (d, User) in
               SOME r
             else NONE
          )))))
     ))))))))))))`;


(*val dispatchInterrupt : Privilege -> M (maybe ((InterruptType * Privilege)))*)

val _ = Define `
 ((dispatchInterrupt:Privilege ->(regstate)sail2_state_monad$sequential_state ->((((InterruptType#Privilege)option),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) priv=  (sail2_state_monad$bindS
   (sail2_state$or_boolS ( sail2_state_monad$bindS(haveUsrMode () ) (\ (w__0 : bool) .  sail2_state_monad$returnS ((~ w__0))))
     (sail2_state$and_boolS ( sail2_state_monad$bindS(haveSupMode () ) (\ (w__1 : bool) .  sail2_state_monad$returnS ((~ w__1))))
        ( sail2_state_monad$bindS(haveNExt () ) (\ (w__2 : bool) .  sail2_state_monad$returnS ((~ w__2)))))) (\ (w__4 : bool) . 
   if w__4 then sail2_state_monad$bindS (sail2_state_monad$seqS
     (sail2_state_monad$assert_expS (((priv = Machine))) "invalid current privilege")
     (sail2_state_monad$read_regS mip_ref)) (\ (w__5 : Minterrupts) .  sail2_state_monad$bindS
     (sail2_state_monad$read_regS mie_ref) (\ (w__6 : Minterrupts) . 
     let enabled_pending =
       ((and_vec ((get_Minterrupts_bits w__5  :  32 words$word))
          ((get_Minterrupts_bits w__6  :  32 words$word))
         :  32 words$word)) in
     sail2_state_monad$returnS ((case ((findPendingInterrupt enabled_pending)) of
       SOME (i) =>
        let r = (i, Machine) in
        SOME r
     | NONE => NONE
     ))))
   else sail2_state_monad$bindS
     (getPendingSet priv  : ( (( 32 words$word # Privilege))option) M) (\ (w__7 :
        (( 32 words$word # Privilege))option) . 
     sail2_state_monad$returnS ((case w__7 of
       NONE => NONE
     | SOME ((ip, p)) =>
        (case ((findPendingInterrupt ip)) of
          NONE => NONE
        | SOME (i) =>
           let r = (i, p) in
           SOME r
        )
     ))))))`;


(*val tval : maybe (mword ty32) -> mword ty32*)

val _ = Define `
 ((tval:((32)words$word)option ->(32)words$word) excinfo=
    ((case excinfo of
     SOME (e) => e
   | NONE => (EXTZ (( 32 : int):ii) (0b0w :  1 words$word)  :  32 words$word)
   )))`;


(*val rvfi_trap : unit -> unit*)

val _ = Define `
 ((rvfi_trap:unit -> unit) () =  () )`;


(*val trap_handler : Privilege -> bool -> mword ty8 -> mword ty32 -> maybe (mword ty32) -> maybe unit -> M (mword ty32)*)

val _ = Define `
 ((trap_handler:Privilege -> bool ->(8)words$word ->(32)words$word ->(xlenbits)option ->(ext_exception)option ->(regstate)sail2_state_monad$sequential_state ->((((32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (del_priv : Privilege) (intr : bool) (c : exc_code) (pc : xlenbits) (info :
   xlenbits option) (ext :  ext_exception option)=
    (let (_ : unit) = (rvfi_trap () ) in
   let (_ : unit) =
     (if ((get_config_print_platform () )) then
       print_dbg
         ((STRCAT "handling "
             ((STRCAT (if intr then "int#" else "exc#")
                 ((STRCAT ((string_of_bits c))
                     ((STRCAT " at priv "
                         ((STRCAT ((privLevel_to_str del_priv))
                             ((STRCAT " with tval "
                                 ((string_of_bits ((tval info  :  32 words$word))))))))))))))))
     else () ) in
   let (_ : unit) = (cancel_reservation () ) in
   (case del_priv of
     Machine => sail2_state_monad$bindS (sail2_state_monad$seqS (sail2_state_monad$seqS
      (set_Mcause_IsInterrupt mcause_ref ((bool_to_bits intr  :  1 words$word)))
      (set_Mcause_Cause mcause_ref ((EXTZ (( 31 : int):ii) c  :  31 words$word))))
      (sail2_state_monad$read_regS mstatus_ref)) (\ (w__0 : Mstatus) .  sail2_state_monad$bindS (sail2_state_monad$seqS (sail2_state_monad$seqS
      (set_Mstatus_MPIE mstatus_ref ((get_Mstatus_MIE w__0  :  1 words$word)))
      (set_Mstatus_MIE mstatus_ref (0b0w :  1 words$word)))
      (sail2_state_monad$read_regS cur_privilege_ref)) (\ (w__1 : Privilege) .  sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS
      (set_Mstatus_MPP mstatus_ref ((privLevel_to_bits w__1  :  2 words$word)))
      (sail2_state_monad$write_regS mtval_ref ((tval info  :  32 words$word))))
      (sail2_state_monad$write_regS mepc_ref pc))
      (sail2_state_monad$write_regS cur_privilege_ref del_priv))
      (let (_ : unit) = (handle_trap_extension del_priv pc ext) in sail2_state_monad$bindS (sail2_state_monad$seqS
      (if ((get_config_print_reg () )) then sail2_state_monad$bindS
         (sail2_state_monad$read_regS mstatus_ref) (\ (w__2 : Mstatus) . 
         sail2_state_monad$returnS ((print_dbg
                    ((STRCAT "CSR mstatus <- "
                        ((string_of_bits ((get_Mstatus_bits w__2  :  32 words$word)))))))))
       else sail2_state_monad$returnS () )
      (sail2_state_monad$read_regS mcause_ref)) (\ (w__3 : Mcause) . 
      (prepare_trap_vector del_priv w__3  : ( 32 words$word) M)))))
   | Supervisor => sail2_state_monad$bindS
      (haveSupMode () ) (\ (w__5 : bool) .  sail2_state_monad$bindS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS
      (sail2_state_monad$assert_expS w__5 "no supervisor mode present for delegation")
      (set_Mcause_IsInterrupt scause_ref ((bool_to_bits intr  :  1 words$word))))
      (set_Mcause_Cause scause_ref ((EXTZ (( 31 : int):ii) c  :  31 words$word))))
      (sail2_state_monad$read_regS mstatus_ref)) (\ (w__6 : Mstatus) .  sail2_state_monad$bindS (sail2_state_monad$seqS (sail2_state_monad$seqS
      (set_Mstatus_SPIE mstatus_ref ((get_Mstatus_SIE w__6  :  1 words$word)))
      (set_Mstatus_SIE mstatus_ref (0b0w :  1 words$word)))
      (sail2_state_monad$read_regS cur_privilege_ref)) (\ (w__7 : Privilege) .  sail2_state_monad$bindS
      (case w__7 of
        User => sail2_state_monad$returnS (0b0w :  1 words$word)
      | Supervisor => sail2_state_monad$returnS (0b1w :  1 words$word)
      | Machine => (internal_error "invalid privilege for s-mode trap"  : ( 1 words$word) M)
      ) (\ (w__9 :  1 words$word) .  sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS
      (set_Mstatus_SPP mstatus_ref w__9)
      (sail2_state_monad$write_regS stval_ref ((tval info  :  32 words$word))))
      (sail2_state_monad$write_regS sepc_ref pc))
      (sail2_state_monad$write_regS cur_privilege_ref del_priv))
      (let (_ : unit) = (handle_trap_extension del_priv pc ext) in sail2_state_monad$bindS (sail2_state_monad$seqS
      (if ((get_config_print_reg () )) then sail2_state_monad$bindS
         (sail2_state_monad$read_regS mstatus_ref) (\ (w__10 : Mstatus) . 
         sail2_state_monad$returnS ((print_dbg
                    ((STRCAT "CSR mstatus <- "
                        ((string_of_bits ((get_Mstatus_bits w__10  :  32 words$word)))))))))
       else sail2_state_monad$returnS () )
      (sail2_state_monad$read_regS scause_ref)) (\ (w__11 : Mcause) . 
      (prepare_trap_vector del_priv w__11  : ( 32 words$word) M)))))))
   | User => sail2_state_monad$bindS
      (haveUsrMode () ) (\ (w__13 : bool) .  sail2_state_monad$bindS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS
      (sail2_state_monad$assert_expS w__13 "no user mode present for delegation")
      (set_Mcause_IsInterrupt ucause_ref ((bool_to_bits intr  :  1 words$word))))
      (set_Mcause_Cause ucause_ref ((EXTZ (( 31 : int):ii) c  :  31 words$word))))
      (sail2_state_monad$read_regS mstatus_ref)) (\ (w__14 : Mstatus) .  sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS
      (set_Mstatus_UPIE mstatus_ref ((get_Mstatus_UIE w__14  :  1 words$word)))
      (set_Mstatus_UIE mstatus_ref (0b0w :  1 words$word)))
      (sail2_state_monad$write_regS utval_ref ((tval info  :  32 words$word))))
      (sail2_state_monad$write_regS uepc_ref pc))
      (sail2_state_monad$write_regS cur_privilege_ref del_priv))
      (let (_ : unit) = (handle_trap_extension del_priv pc ext) in sail2_state_monad$bindS (sail2_state_monad$seqS
      (if ((get_config_print_reg () )) then sail2_state_monad$bindS
         (sail2_state_monad$read_regS mstatus_ref) (\ (w__15 : Mstatus) . 
         sail2_state_monad$returnS ((print_dbg
                    ((STRCAT "CSR mstatus <- "
                        ((string_of_bits ((get_Mstatus_bits w__15  :  32 words$word)))))))))
       else sail2_state_monad$returnS () )
      (sail2_state_monad$read_regS ucause_ref)) (\ (w__16 : Mcause) . 
      (prepare_trap_vector del_priv w__16  : ( 32 words$word) M)))))
   )))`;


(*val exception_handler : Privilege -> ctl_result -> mword ty32 -> M (mword ty32)*)

val _ = Define `
 ((exception_handler:Privilege -> ctl_result ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->((((32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (cur_priv : Privilege) (ctl : ctl_result) (pc : xlenbits)=
    ((case (cur_priv, ctl) of
     (_, CTL_TRAP (e)) => sail2_state_monad$bindS
      (exception_delegatee e.sync_exception_trap cur_priv) (\ del_priv . 
      let (_ : unit) =
        (if ((get_config_print_platform () )) then
          print_dbg
            ((STRCAT "trapping from "
                ((STRCAT ((privLevel_to_str cur_priv))
                    ((STRCAT " to "
                        ((STRCAT ((privLevel_to_str del_priv))
                            ((STRCAT " to handle "
                                ((exceptionType_to_str e.sync_exception_trap))))))))))))
        else () ) in
      (trap_handler del_priv F ((exceptionType_to_bits e.sync_exception_trap  :  8 words$word)) pc
         e.sync_exception_excinfo e.sync_exception_ext
        : ( 32 words$word) M))
   | (_, CTL_MRET (() )) => sail2_state_monad$bindS
      (sail2_state_monad$read_regS cur_privilege_ref) (\ prev_priv .  sail2_state_monad$bindS
      (sail2_state_monad$read_regS mstatus_ref) (\ (w__1 : Mstatus) .  sail2_state_monad$bindS (sail2_state_monad$seqS (sail2_state_monad$seqS
      (set_Mstatus_MIE mstatus_ref ((get_Mstatus_MPIE w__1  :  1 words$word)))
      (set_Mstatus_MPIE mstatus_ref (0b1w :  1 words$word)))
      (sail2_state_monad$read_regS mstatus_ref)) (\ (w__2 : Mstatus) .  sail2_state_monad$bindS
      (privLevel_of_bits ((get_Mstatus_MPP w__2  :  2 words$word))) (\ (w__3 : Privilege) .  sail2_state_monad$bindS (sail2_state_monad$seqS
      (sail2_state_monad$write_regS cur_privilege_ref w__3)
      (haveUsrMode () )) (\ (w__4 : bool) .  sail2_state_monad$bindS (sail2_state_monad$seqS
      (set_Mstatus_MPP mstatus_ref
        ((privLevel_to_bits (if w__4 then User else Machine)  :  2 words$word)))
      (sail2_state_monad$read_regS cur_privilege_ref)) (\ (w__5 : Privilege) .  sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS
      (if (((w__5 <> Machine))) then set_Mstatus_MPRV mstatus_ref (0b0w :  1 words$word)
       else sail2_state_monad$returnS () )
      (if ((get_config_print_reg () )) then sail2_state_monad$bindS
         (sail2_state_monad$read_regS mstatus_ref) (\ (w__6 : Mstatus) . 
         sail2_state_monad$returnS ((print_dbg
                    ((STRCAT "CSR mstatus <- "
                        ((string_of_bits ((get_Mstatus_bits w__6  :  32 words$word)))))))))
       else sail2_state_monad$returnS () ))
      (if ((get_config_print_platform () )) then sail2_state_monad$bindS
         (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__7 : Privilege) . 
         sail2_state_monad$returnS ((print_dbg
                    ((STRCAT "ret-ing from "
                        ((STRCAT ((privLevel_to_str prev_priv))
                            ((STRCAT " to " ((privLevel_to_str w__7)))))))))))
       else sail2_state_monad$returnS () ))
      (let (_ : unit) = (cancel_reservation () ) in sail2_state_monad$bindS
      (prepare_xret_target Machine  : ( 32 words$word) M) (\ (w__8 :  32 words$word) .  sail2_state_monad$bindS
      (pc_alignment_mask ()   : ( 32 words$word) M) (\ (w__9 :  32 words$word) . 
      sail2_state_monad$returnS ((and_vec w__8 w__9  :  32 words$word)))))))))))
   | (_, CTL_SRET (() )) => sail2_state_monad$bindS
      (sail2_state_monad$read_regS cur_privilege_ref) (\ prev_priv .  sail2_state_monad$bindS
      (sail2_state_monad$read_regS mstatus_ref) (\ (w__10 : Mstatus) .  sail2_state_monad$bindS (sail2_state_monad$seqS (sail2_state_monad$seqS
      (set_Mstatus_SIE mstatus_ref ((get_Mstatus_SPIE w__10  :  1 words$word)))
      (set_Mstatus_SPIE mstatus_ref (0b1w :  1 words$word)))
      (sail2_state_monad$read_regS mstatus_ref)) (\ (w__11 : Mstatus) .  sail2_state_monad$bindS (sail2_state_monad$seqS (sail2_state_monad$seqS
      (sail2_state_monad$write_regS
        cur_privilege_ref
        (if (((((get_Mstatus_SPP w__11  :  1 words$word)) = (0b1w :  1 words$word)))) then Supervisor
         else User))
      (set_Mstatus_SPP mstatus_ref (0b0w :  1 words$word)))
      (sail2_state_monad$read_regS cur_privilege_ref)) (\ (w__12 : Privilege) .  sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS
      (if (((w__12 <> Machine))) then set_Mstatus_MPRV mstatus_ref (0b0w :  1 words$word)
       else sail2_state_monad$returnS () )
      (if ((get_config_print_reg () )) then sail2_state_monad$bindS
         (sail2_state_monad$read_regS mstatus_ref) (\ (w__13 : Mstatus) . 
         sail2_state_monad$returnS ((print_dbg
                    ((STRCAT "CSR mstatus <- "
                        ((string_of_bits ((get_Mstatus_bits w__13  :  32 words$word)))))))))
       else sail2_state_monad$returnS () ))
      (if ((get_config_print_platform () )) then sail2_state_monad$bindS
         (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__14 : Privilege) . 
         sail2_state_monad$returnS ((print_dbg
                    ((STRCAT "ret-ing from "
                        ((STRCAT ((privLevel_to_str prev_priv))
                            ((STRCAT " to " ((privLevel_to_str w__14)))))))))))
       else sail2_state_monad$returnS () ))
      (let (_ : unit) = (cancel_reservation () ) in sail2_state_monad$bindS
      (prepare_xret_target Supervisor  : ( 32 words$word) M) (\ (w__15 :  32 words$word) .  sail2_state_monad$bindS
      (pc_alignment_mask ()   : ( 32 words$word) M) (\ (w__16 :  32 words$word) . 
      sail2_state_monad$returnS ((and_vec w__15 w__16  :  32 words$word)))))))))
   | (_, CTL_URET (() )) => sail2_state_monad$bindS
      (sail2_state_monad$read_regS cur_privilege_ref) (\ prev_priv .  sail2_state_monad$bindS
      (sail2_state_monad$read_regS mstatus_ref) (\ (w__17 : Mstatus) .  sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS
      (set_Mstatus_UIE mstatus_ref ((get_Mstatus_UPIE w__17  :  1 words$word)))
      (set_Mstatus_UPIE mstatus_ref (0b1w :  1 words$word)))
      (sail2_state_monad$write_regS cur_privilege_ref User))
      (if ((get_config_print_reg () )) then sail2_state_monad$bindS
         (sail2_state_monad$read_regS mstatus_ref) (\ (w__18 : Mstatus) . 
         sail2_state_monad$returnS ((print_dbg
                    ((STRCAT "CSR mstatus <- "
                        ((string_of_bits ((get_Mstatus_bits w__18  :  32 words$word)))))))))
       else sail2_state_monad$returnS () ))
      (if ((get_config_print_platform () )) then sail2_state_monad$bindS
         (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__19 : Privilege) . 
         sail2_state_monad$returnS ((print_dbg
                    ((STRCAT "ret-ing from "
                        ((STRCAT ((privLevel_to_str prev_priv))
                            ((STRCAT " to " ((privLevel_to_str w__19)))))))))))
       else sail2_state_monad$returnS () ))
      (let (_ : unit) = (cancel_reservation () ) in sail2_state_monad$bindS
      (prepare_xret_target User  : ( 32 words$word) M) (\ (w__20 :  32 words$word) .  sail2_state_monad$bindS
      (pc_alignment_mask ()   : ( 32 words$word) M) (\ (w__21 :  32 words$word) . 
      sail2_state_monad$returnS ((and_vec w__20 w__21  :  32 words$word)))))))
   )))`;


(*val handle_mem_exception : mword ty32 -> ExceptionType -> M unit*)

val _ = Define `
 ((handle_mem_exception:(32)words$word -> ExceptionType ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (addr : xlenbits) (e : ExceptionType)=
    (let (t : sync_exception) =
     (<| sync_exception_trap := e; 
        sync_exception_excinfo := (SOME addr); 
        sync_exception_ext := NONE |>) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__0 : Privilege) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS PC_ref  : ( 32 words$word) M) (\ (w__1 :  32 words$word) .  sail2_state_monad$bindS
   (exception_handler w__0 (CTL_TRAP t) w__1  : ( 32 words$word) M) (\ (w__2 :  32 words$word) . 
   set_next_pc w__2)))))`;


(*val handle_exception : ExceptionType -> M unit*)

val _ = Define `
 ((handle_exception:ExceptionType ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) e=
    (let (t : sync_exception) =
     (<| sync_exception_trap := e; 
        sync_exception_excinfo := NONE; 
        sync_exception_ext := NONE |>) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__0 : Privilege) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS PC_ref  : ( 32 words$word) M) (\ (w__1 :  32 words$word) .  sail2_state_monad$bindS
   (exception_handler w__0 (CTL_TRAP t) w__1  : ( 32 words$word) M) (\ (w__2 :  32 words$word) . 
   set_next_pc w__2)))))`;


(*val handle_interrupt : InterruptType -> Privilege -> M unit*)

val _ = Define `
 ((handle_interrupt:InterruptType -> Privilege ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (i : InterruptType) (del_priv : Privilege)=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS PC_ref  : ( 32 words$word) M) (\ (w__0 :  32 words$word) .  sail2_state_monad$bindS
   (trap_handler del_priv T ((interruptType_to_bits i  :  8 words$word)) w__0 NONE NONE
     : ( 32 words$word) M) (\ (w__1 :  32 words$word) . 
   set_next_pc w__1))))`;


(*val init_sys : unit -> M unit*)

val _ = Define `
 ((init_sys:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS cur_privilege_ref Machine)
   (sail2_state_monad$write_regS mhartid_ref ((EXTZ (( 32 : int):ii) (0b0w :  1 words$word)  :  32 words$word))))
   (set_Misa_MXL misa_ref ((arch_to_bits RV32  :  2 words$word))))
   (set_Misa_A misa_ref (0b1w :  1 words$word)))
   (set_Misa_C misa_ref ((bool_to_bits ((sys_enable_rvc () ))  :  1 words$word))))
   (set_Misa_I misa_ref (0b1w :  1 words$word)))
   (set_Misa_M misa_ref (0b1w :  1 words$word)))
   (set_Misa_U misa_ref (0b1w :  1 words$word)))
   (set_Misa_S misa_ref (0b1w :  1 words$word)))
   (set_Misa_F misa_ref ((bool_to_bits ((sys_enable_fdext () ))  :  1 words$word))))
   (set_Misa_D misa_ref (0b0w :  1 words$word)))
   (sail2_state_monad$read_regS mstatus_ref)) (\ (w__0 : Mstatus) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS misa_ref) (\ (w__1 : Misa) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS mstatus_ref ((set_mstatus_SXL w__0 ((get_Misa_MXL w__1  :  2 words$word)))))
   (sail2_state_monad$read_regS mstatus_ref)) (\ (w__2 : Mstatus) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS misa_ref) (\ (w__3 : Misa) .  sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS mstatus_ref ((set_mstatus_UXL w__2 ((get_Misa_MXL w__3  :  2 words$word)))))
   (set_Mstatus_SD mstatus_ref (0b0w :  1 words$word)))
   (set_Mstatush_bits mstatush_ref ((EXTZ (( 32 : int):ii) (0b0w :  1 words$word)  :  32 words$word))))
   (set_Minterrupts_bits mip_ref ((EXTZ (( 32 : int):ii) (0b0w :  1 words$word)  :  32 words$word))))
   (set_Minterrupts_bits mie_ref ((EXTZ (( 32 : int):ii) (0b0w :  1 words$word)  :  32 words$word))))
   (set_Minterrupts_bits mideleg_ref ((EXTZ (( 32 : int):ii) (0b0w :  1 words$word)  :  32 words$word))))
   (set_Medeleg_bits medeleg_ref ((EXTZ (( 32 : int):ii) (0b0w :  1 words$word)  :  32 words$word))))
   (set_Mtvec_bits mtvec_ref ((EXTZ (( 32 : int):ii) (0b0w :  1 words$word)  :  32 words$word))))
   (set_Mcause_bits mcause_ref ((EXTZ (( 32 : int):ii) (0b0w :  1 words$word)  :  32 words$word))))
   (sail2_state_monad$write_regS mepc_ref ((EXTZ (( 32 : int):ii) (0b0w :  1 words$word)  :  32 words$word))))
   (sail2_state_monad$write_regS mtval_ref ((EXTZ (( 32 : int):ii) (0b0w :  1 words$word)  :  32 words$word))))
   (sail2_state_monad$write_regS mscratch_ref ((EXTZ (( 32 : int):ii) (0b0w :  1 words$word)  :  32 words$word))))
   (sail2_state_monad$write_regS mcycle_ref ((EXTZ (( 64 : int):ii) (0b0w :  1 words$word)  :  64 words$word))))
   (sail2_state_monad$write_regS mtime_ref ((EXTZ (( 64 : int):ii) (0b0w :  1 words$word)  :  64 words$word))))
   (set_Counteren_bits mcounteren_ref ((EXTZ (( 32 : int):ii) (0b0w :  1 words$word)  :  32 words$word))))
   (sail2_state_monad$write_regS minstret_ref ((EXTZ (( 64 : int):ii) (0b0w :  1 words$word)  :  64 words$word))))
   (sail2_state_monad$write_regS minstret_written_ref F))
   (init_pmp () ))
   (if ((get_config_print_reg () )) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS mstatus_ref) (\ (w__4 : Mstatus) . 
     sail2_state_monad$returnS ((print_dbg
                ((STRCAT "CSR mstatus <- "
                    ((STRCAT ((string_of_bits ((get_Mstatus_bits w__4  :  32 words$word))))
                        ((STRCAT " (input: "
                            ((STRCAT
                                ((string_of_bits ((EXTZ (( 32 : int):ii) (0b0w :  1 words$word)  :  32 words$word))))
                                ")")))))))))))
   else sail2_state_monad$returnS () )))))))`;


(*val MemoryOpResult_add_meta : forall 't. MemoryOpResult 't -> unit -> MemoryOpResult (('t * unit))*)

val _ = Define `
 ((MemoryOpResult_add_meta:'t MemoryOpResult -> unit ->('t#unit)MemoryOpResult) r m=
    ((case r of   MemValue (v) => MemValue (v, m) | MemException (e) => MemException e )))`;


(*val MemoryOpResult_drop_meta : forall 't. MemoryOpResult (('t * unit)) -> MemoryOpResult 't*)

val _ = Define `
 ((MemoryOpResult_drop_meta:('t#unit)MemoryOpResult -> 't MemoryOpResult) r=
    ((case r of   MemValue ((v, m)) => MemValue v | MemException (e) => MemException e )))`;


(*val elf_tohost : unit -> ii*)

(*val elf_entry : unit -> ii*)



(*val phys_mem_segments : unit -> list ((mword ty32 * mword ty32))*)

val _ = Define `
 ((phys_mem_segments:unit ->((32)words$word#(32)words$word)list) () =
    (((plat_rom_base ()   :  32 words$word), (plat_rom_size ()   :  32 words$word)) ::
     (((plat_ram_base ()   :  32 words$word), (plat_ram_size ()   :  32 words$word)) :: [])))`;


(*val within_phys_mem : mword ty32 -> integer -> bool*)

val _ = Define `
 ((within_phys_mem:(32)words$word -> int -> bool) (addr : xlenbits) (width : int)=
    (let addr_int = (lem$w2ui addr) in
   let ram_base_int = (lem$w2ui ((plat_ram_base ()   :  32 words$word))) in
   let rom_base_int = (lem$w2ui ((plat_rom_base ()   :  32 words$word))) in
   let ram_size_int = (lem$w2ui ((plat_ram_size ()   :  32 words$word))) in
   let rom_size_int = (lem$w2ui ((plat_rom_size ()   :  32 words$word))) in
   if (((((ram_base_int <= addr_int)) /\ ((((addr_int + ((id width)))) <= ((ram_base_int + ram_size_int)))))))
   then
     T
   else if (((((rom_base_int <= addr_int)) /\ ((((addr_int + ((id width)))) <=
                   ((rom_base_int + rom_size_int))))))) then
     T
   else
     let (_ : unit) =
       (print_dbg
         ((STRCAT "within_phys_mem: "
             ((STRCAT ((string_of_bits addr)) " not within phys-mem:"))))) in
     let (_ : unit) =
       (print_dbg
         ((STRCAT "  plat_rom_base: " ((string_of_bits ((plat_rom_base ()   :  32 words$word))))))) in
     let (_ : unit) =
       (print_dbg
         ((STRCAT "  plat_rom_size: " ((string_of_bits ((plat_rom_size ()   :  32 words$word))))))) in
     let (_ : unit) =
       (print_dbg
         ((STRCAT "  plat_ram_base: " ((string_of_bits ((plat_ram_base ()   :  32 words$word))))))) in
     let (_ : unit) =
       (print_dbg
         ((STRCAT "  plat_ram_size: " ((string_of_bits ((plat_ram_size ()   :  32 words$word))))))) in
     F))`;


(*val within_clint : mword ty32 -> integer -> bool*)

val _ = Define `
 ((within_clint:(32)words$word -> int -> bool) (addr : xlenbits) (width : int)=
    (let addr_int = (lem$w2ui addr) in
   let clint_base_int = (lem$w2ui ((plat_clint_base ()   :  32 words$word))) in
   let clint_size_int = (lem$w2ui ((plat_clint_size ()   :  32 words$word))) in
   (((clint_base_int <= addr_int)) /\ ((((addr_int + ((id width)))) <= ((clint_base_int + clint_size_int)))))))`;


(*val within_htif_writable : mword ty32 -> integer -> bool*)

val _ = Define `
 ((within_htif_writable:(32)words$word -> int -> bool) (addr : xlenbits) (width : int)=
    ((((((plat_htif_tohost ()   :  32 words$word)) = addr))) \/ ((((((((add_vec_int ((plat_htif_tohost ()   :  32 words$word)) (( 4 : int):ii)  :  32 words$word)) = addr))) /\ (((width = (( 4 : int):ii)))))))))`;


(*val within_htif_readable : mword ty32 -> integer -> bool*)

val _ = Define `
 ((within_htif_readable:(32)words$word -> int -> bool) (addr : xlenbits) (width : int)=
    ((((((plat_htif_tohost ()   :  32 words$word)) = addr))) \/ ((((((((add_vec_int ((plat_htif_tohost ()   :  32 words$word)) (( 4 : int):ii)  :  32 words$word)) = addr))) /\ (((width = (( 4 : int):ii)))))))))`;


val _ = Define `
((MSIP_BASE:(32)words$word)=  ((0x00000000w :  32 words$word)))`;


val _ = Define `
((MTIMECMP_BASE:(32)words$word)=  ((0x00004000w :  32 words$word)))`;


val _ = Define `
((MTIMECMP_BASE_HI:(32)words$word)=  ((0x00004004w :  32 words$word)))`;


val _ = Define `
((MTIME_BASE:(32)words$word)=  ((0x0000BFF8w :  32 words$word)))`;


val _ = Define `
((MTIME_BASE_HI:(32)words$word)=  ((0x0000BFFCw :  32 words$word)))`;


(*val clint_load : forall 'int8_times_n. Size 'int8_times_n => AccessType unit -> mword ty32 -> integer -> M (MemoryOpResult (mword 'int8_times_n))*)

val _ = Define `
 ((clint_load:(unit)AccessType ->(32)words$word -> int ->(regstate)sail2_state_monad$sequential_state ->(((('int8_times_n words$word)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) t addr width=
    (let addr = ((sub_vec addr ((plat_clint_base ()   :  32 words$word))  :  32 words$word)) in
   if ((((((addr = MSIP_BASE))) /\ ((((((((id width)) = (( 8 : int):ii)))) \/ (((((id width)) = (( 4 : int):ii)))))))))) then sail2_state_monad$bindS (sail2_state_monad$seqS
     (if ((get_config_print_platform () )) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mip_ref) (\ (w__0 : Minterrupts) . 
        sail2_state_monad$returnS ((print_dbg
                   ((STRCAT "clint["
                       ((STRCAT ((string_of_bits addr))
                           ((STRCAT "] -> "
                               ((string_of_bits ((get_Minterrupts_MSI w__0  :  1 words$word)))))))))))))
      else sail2_state_monad$returnS () )
     (sail2_state_monad$read_regS mip_ref)) (\ (w__1 : Minterrupts) . 
     sail2_state_monad$returnS (MemValue ((zero_extend ((get_Minterrupts_MSI w__1  :  1 words$word))
                          (((( 8 : int):ii) * ((id width))))
                         :  'int8_times_n words$word))))
   else if ((((((addr = MTIMECMP_BASE))) /\ (((((id width)) = (( 4 : int):ii))))))) then sail2_state_monad$bindS (sail2_state_monad$seqS
     (if ((get_config_print_platform () )) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mtimecmp_ref  : ( 64 words$word) M) (\ (w__2 :  64 words$word) . 
        sail2_state_monad$returnS ((print_dbg
                   ((STRCAT "clint<4>["
                       ((STRCAT ((string_of_bits addr))
                           ((STRCAT "] -> "
                               ((string_of_bits
                                   ((subrange_vec_dec w__2 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)))))))))))))
      else sail2_state_monad$returnS () )
     (sail2_state_monad$read_regS mtimecmp_ref  : ( 64 words$word) M)) (\ (w__3 :  64 words$word) . 
     sail2_state_monad$returnS (MemValue ((words$w2w
                          ((zero_extend ((subrange_vec_dec w__3 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                              (( 32 : int):ii)
                             :  32 words$word))
                         :  'int8_times_n words$word))))
   else if ((((((addr = MTIMECMP_BASE))) /\ (((((id width)) = (( 8 : int):ii))))))) then sail2_state_monad$bindS (sail2_state_monad$seqS
     (if ((get_config_print_platform () )) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mtimecmp_ref  : ( 64 words$word) M) (\ (w__4 :  64 words$word) . 
        sail2_state_monad$returnS ((print_dbg
                   ((STRCAT "clint<8>["
                       ((STRCAT ((string_of_bits addr))
                           ((STRCAT "] -> " ((string_of_bits w__4)))))))))))
      else sail2_state_monad$returnS () )
     (sail2_state_monad$read_regS mtimecmp_ref  : ( 64 words$word) M)) (\ (w__5 :  64 words$word) . 
     sail2_state_monad$returnS (MemValue ((words$w2w ((zero_extend w__5 (( 64 : int):ii)  :  64 words$word))  :  'int8_times_n words$word))))
   else if ((((((addr = MTIMECMP_BASE_HI))) /\ (((((id width)) = (( 4 : int):ii))))))) then sail2_state_monad$bindS (sail2_state_monad$seqS
     (if ((get_config_print_platform () )) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mtimecmp_ref  : ( 64 words$word) M) (\ (w__6 :  64 words$word) . 
        sail2_state_monad$returnS ((print_dbg
                   ((STRCAT "clint-hi<4>["
                       ((STRCAT ((string_of_bits addr))
                           ((STRCAT "] -> "
                               ((string_of_bits
                                   ((subrange_vec_dec w__6 (( 63 : int):ii) (( 32 : int):ii)  :  32 words$word)))))))))))))
      else sail2_state_monad$returnS () )
     (sail2_state_monad$read_regS mtimecmp_ref  : ( 64 words$word) M)) (\ (w__7 :  64 words$word) . 
     sail2_state_monad$returnS (MemValue ((words$w2w
                          ((zero_extend ((subrange_vec_dec w__7 (( 63 : int):ii) (( 32 : int):ii)  :  32 words$word))
                              (( 32 : int):ii)
                             :  32 words$word))
                         :  'int8_times_n words$word))))
   else if ((((((addr = MTIME_BASE))) /\ (((((id width)) = (( 4 : int):ii))))))) then sail2_state_monad$bindS (sail2_state_monad$seqS
     (if ((get_config_print_platform () )) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mtime_ref  : ( 64 words$word) M) (\ (w__8 :  64 words$word) . 
        sail2_state_monad$returnS ((print_dbg
                   ((STRCAT "clint["
                       ((STRCAT ((string_of_bits addr))
                           ((STRCAT "] -> " ((string_of_bits w__8)))))))))))
      else sail2_state_monad$returnS () )
     (sail2_state_monad$read_regS mtime_ref  : ( 64 words$word) M)) (\ (w__9 :  64 words$word) . 
     sail2_state_monad$returnS (MemValue ((words$w2w
                          ((zero_extend ((subrange_vec_dec w__9 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                              (( 32 : int):ii)
                             :  32 words$word))
                         :  'int8_times_n words$word))))
   else if ((((((addr = MTIME_BASE))) /\ (((((id width)) = (( 8 : int):ii))))))) then sail2_state_monad$bindS (sail2_state_monad$seqS
     (if ((get_config_print_platform () )) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mtime_ref  : ( 64 words$word) M) (\ (w__10 :  64 words$word) . 
        sail2_state_monad$returnS ((print_dbg
                   ((STRCAT "clint["
                       ((STRCAT ((string_of_bits addr))
                           ((STRCAT "] -> " ((string_of_bits w__10)))))))))))
      else sail2_state_monad$returnS () )
     (sail2_state_monad$read_regS mtime_ref  : ( 64 words$word) M)) (\ (w__11 :  64 words$word) . 
     sail2_state_monad$returnS (MemValue ((words$w2w ((zero_extend w__11 (( 64 : int):ii)  :  64 words$word))
                         :  'int8_times_n words$word))))
   else if ((((((addr = MTIME_BASE_HI))) /\ (((((id width)) = (( 4 : int):ii))))))) then sail2_state_monad$bindS (sail2_state_monad$seqS
     (if ((get_config_print_platform () )) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mtime_ref  : ( 64 words$word) M) (\ (w__12 :  64 words$word) . 
        sail2_state_monad$returnS ((print_dbg
                   ((STRCAT "clint["
                       ((STRCAT ((string_of_bits addr))
                           ((STRCAT "] -> " ((string_of_bits w__12)))))))))))
      else sail2_state_monad$returnS () )
     (sail2_state_monad$read_regS mtime_ref  : ( 64 words$word) M)) (\ (w__13 :  64 words$word) . 
     sail2_state_monad$returnS (MemValue ((words$w2w
                          ((zero_extend ((subrange_vec_dec w__13 (( 63 : int):ii) (( 32 : int):ii)  :  32 words$word))
                              (( 32 : int):ii)
                             :  32 words$word))
                         :  'int8_times_n words$word))))
   else
     let (_ : unit) =
       (if ((get_config_print_platform () )) then
         print_dbg
           ((STRCAT "clint[" ((STRCAT ((string_of_bits addr)) "] -> <not-mapped>"))))
       else () ) in
     sail2_state_monad$returnS ((case t of
       Execute (() ) => MemException (E_Fetch_Access_Fault () )
     | Read (Data1) => MemException (E_Load_Access_Fault () )
     | _ => MemException (E_SAMO_Access_Fault () )
     ))))`;


(*val clint_dispatch : unit -> M unit*)

val _ = Define `
 ((clint_dispatch:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS (sail2_state_monad$seqS (sail2_state_monad$seqS
   (if ((get_config_print_platform () )) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS mtime_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
      sail2_state_monad$returnS ((print_dbg ((STRCAT "clint::tick mtime <- " ((string_of_bits w__0)))))))
    else sail2_state_monad$returnS () )
   (set_Minterrupts_MTI mip_ref (0b0w :  1 words$word)))
   (sail2_state_monad$read_regS mtimecmp_ref  : ( 64 words$word) M)) (\ (w__1 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS mtime_ref  : ( 64 words$word) M) (\ (w__2 :  64 words$word) . 
   if ((zopz0zIzJ_u w__1 w__2)) then sail2_state_monad$seqS
     (if ((get_config_print_platform () )) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mtime_ref  : ( 64 words$word) M) (\ (w__3 :  64 words$word) . 
        sail2_state_monad$returnS ((print_dbg ((STRCAT " clint timer pending at mtime " ((string_of_bits w__3)))))))
      else sail2_state_monad$returnS () )
     (set_Minterrupts_MTI mip_ref (0b1w :  1 words$word))
   else sail2_state_monad$returnS () ))))`;


(*val clint_store : forall 'int8_times_n. Size 'int8_times_n => mword ty32 -> integer -> mword 'int8_times_n -> M (MemoryOpResult bool)*)

val _ = Define `
 ((clint_store:(32)words$word -> int -> 'int8_times_n words$word ->(regstate)sail2_state_monad$sequential_state ->((((bool)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) addr width data=
    (let addr = ((sub_vec addr ((plat_clint_base ()   :  32 words$word))  :  32 words$word)) in
   if ((((((addr = MSIP_BASE))) /\ ((((((((id width)) = (( 8 : int):ii)))) \/ (((((id width)) = (( 4 : int):ii)))))))))) then
     let (_ : unit) =
       (if ((get_config_print_platform () )) then
         print_dbg
           ((STRCAT "clint["
               ((STRCAT ((string_of_bits addr))
                   ((STRCAT "] <- "
                       ((STRCAT ((string_of_bits data))
                           ((STRCAT " (mip.MSI <- "
                               ((STRCAT ((string_of_bit ((access_vec_dec data (( 0 : int):ii))))) ")"))))))))))))
       else () ) in sail2_state_monad$seqS (sail2_state_monad$seqS
     (set_Minterrupts_MSI mip_ref (vec_of_bits [access_vec_dec data (( 0 : int):ii)]  :  1 words$word))
     (clint_dispatch () )) (sail2_state_monad$returnS (MemValue T))
   else if ((((((addr = MTIMECMP_BASE))) /\ (((((id width)) = (( 8 : int):ii))))))) then
     let (data :  64 words$word) = ((words$w2w data  :  64 words$word)) in
     let (_ : unit) =
       (if ((get_config_print_platform () )) then
         print_dbg
           ((STRCAT "clint<8>["
               ((STRCAT ((string_of_bits addr))
                   ((STRCAT "] <- " ((STRCAT ((string_of_bits data)) " (mtimecmp)"))))))))
       else () ) in sail2_state_monad$seqS (sail2_state_monad$seqS
     (sail2_state_monad$write_regS mtimecmp_ref ((zero_extend data (( 64 : int):ii)  :  64 words$word)))
     (clint_dispatch () )) (sail2_state_monad$returnS (MemValue T))
   else if ((((((addr = MTIMECMP_BASE))) /\ (((((id width)) = (( 4 : int):ii))))))) then
     let (data :  32 words$word) = ((words$w2w data  :  32 words$word)) in
     let (_ : unit) =
       (if ((get_config_print_platform () )) then
         print_dbg
           ((STRCAT "clint<4>["
               ((STRCAT ((string_of_bits addr))
                   ((STRCAT "] <- " ((STRCAT ((string_of_bits data)) " (mtimecmp)"))))))))
       else () ) in sail2_state_monad$bindS
     (sail2_state_monad$read_regS mtimecmp_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$seqS (sail2_state_monad$seqS
     (sail2_state_monad$write_regS
       mtimecmp_ref
       ((update_subrange_vec_dec w__0 (( 31 : int):ii) (( 0 : int):ii) ((zero_extend data (( 32 : int):ii)  :  32 words$word))
          :  64 words$word)))
     (clint_dispatch () )) (sail2_state_monad$returnS (MemValue T)))
   else if ((((((addr = MTIMECMP_BASE_HI))) /\ (((((id width)) = (( 4 : int):ii))))))) then
     let (data :  32 words$word) = ((words$w2w data  :  32 words$word)) in
     let (_ : unit) =
       (if ((get_config_print_platform () )) then
         print_dbg
           ((STRCAT "clint<4>["
               ((STRCAT ((string_of_bits addr))
                   ((STRCAT "] <- " ((STRCAT ((string_of_bits data)) " (mtimecmp)"))))))))
       else () ) in sail2_state_monad$bindS
     (sail2_state_monad$read_regS mtimecmp_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) .  sail2_state_monad$seqS (sail2_state_monad$seqS
     (sail2_state_monad$write_regS
       mtimecmp_ref
       ((update_subrange_vec_dec w__1 (( 63 : int):ii) (( 32 : int):ii) ((zero_extend data (( 32 : int):ii)  :  32 words$word))
          :  64 words$word)))
     (clint_dispatch () )) (sail2_state_monad$returnS (MemValue T)))
   else
     let (_ : unit) =
       (if ((get_config_print_platform () )) then
         print_dbg
           ((STRCAT "clint["
               ((STRCAT ((string_of_bits addr))
                   ((STRCAT "] <- " ((STRCAT ((string_of_bits data)) " (<unmapped>)"))))))))
       else () ) in
     sail2_state_monad$returnS (MemException (E_SAMO_Access_Fault () ))))`;


(*val tick_clock : unit -> M unit*)

val _ = Define `
 ((tick_clock:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS mcountinhibit_ref) (\ (w__0 : Counterin) .  sail2_state_monad$bindS (sail2_state_monad$seqS
   (if (((((get_Counterin_CY w__0  :  1 words$word)) = (0b0w :  1 words$word)))) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS mcycle_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
      sail2_state_monad$write_regS mcycle_ref ((add_vec_int w__1 (( 1 : int):ii)  :  64 words$word)))
    else sail2_state_monad$returnS () )
   (sail2_state_monad$read_regS mtime_ref  : ( 64 words$word) M)) (\ (w__2 :  64 words$word) .  sail2_state_monad$seqS
   (sail2_state_monad$write_regS mtime_ref ((add_vec_int w__2 (( 1 : int):ii)  :  64 words$word))) (clint_dispatch () )))))`;


(*val Mk_htif_cmd : mword ty64 -> htif_cmd*)

val _ = Define `
 ((Mk_htif_cmd:(64)words$word -> htif_cmd) v=
    (<| htif_cmd_htif_cmd_chunk_0 := ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)) |>))`;


val _ = Define `
 ((get_htif_cmd_bits:htif_cmd ->(64)words$word) v=
    ((subrange_vec_dec v.htif_cmd_htif_cmd_chunk_0 (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)))`;


val _ = Define `
 ((set_htif_cmd_bits:((regstate),(register_value),(htif_cmd))register_ref ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       htif_cmd_htif_cmd_chunk_0 :=
         ((update_subrange_vec_dec r.htif_cmd_htif_cmd_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
            :  64 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_htif_cmd_bits:htif_cmd ->(64)words$word -> htif_cmd) v x=
    (( v with<|
     htif_cmd_htif_cmd_chunk_0 :=
       ((update_subrange_vec_dec v.htif_cmd_htif_cmd_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
          :  64 words$word)) |>)))`;


(*val _get_htif_cmd_device : htif_cmd -> mword ty8*)

val _ = Define `
 ((get_htif_cmd_device:htif_cmd ->(8)words$word) v=
    ((subrange_vec_dec v.htif_cmd_htif_cmd_chunk_0 (( 63 : int):ii) (( 56 : int):ii)  :  8 words$word)))`;


(*val _set_htif_cmd_device : register_ref regstate register_value htif_cmd -> mword ty8 -> M unit*)

val _ = Define `
 ((set_htif_cmd_device:((regstate),(register_value),(htif_cmd))register_ref ->(8)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       htif_cmd_htif_cmd_chunk_0 :=
         ((update_subrange_vec_dec r.htif_cmd_htif_cmd_chunk_0 (( 63 : int):ii) (( 56 : int):ii)
             ((subrange_vec_dec v (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
            :  64 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_htif_cmd_device : htif_cmd -> mword ty8 -> htif_cmd*)

val _ = Define `
 ((update_htif_cmd_device:htif_cmd ->(8)words$word -> htif_cmd) v x=
    (( v with<|
     htif_cmd_htif_cmd_chunk_0 :=
       ((update_subrange_vec_dec v.htif_cmd_htif_cmd_chunk_0 (( 63 : int):ii) (( 56 : int):ii)
           ((subrange_vec_dec x (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
          :  64 words$word)) |>)))`;


(*val _get_htif_cmd_cmd : htif_cmd -> mword ty8*)

val _ = Define `
 ((get_htif_cmd_cmd:htif_cmd ->(8)words$word) v=
    ((subrange_vec_dec v.htif_cmd_htif_cmd_chunk_0 (( 55 : int):ii) (( 48 : int):ii)  :  8 words$word)))`;


(*val _set_htif_cmd_cmd : register_ref regstate register_value htif_cmd -> mword ty8 -> M unit*)

val _ = Define `
 ((set_htif_cmd_cmd:((regstate),(register_value),(htif_cmd))register_ref ->(8)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       htif_cmd_htif_cmd_chunk_0 :=
         ((update_subrange_vec_dec r.htif_cmd_htif_cmd_chunk_0 (( 55 : int):ii) (( 48 : int):ii)
             ((subrange_vec_dec v (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
            :  64 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_htif_cmd_cmd : htif_cmd -> mword ty8 -> htif_cmd*)

val _ = Define `
 ((update_htif_cmd_cmd:htif_cmd ->(8)words$word -> htif_cmd) v x=
    (( v with<|
     htif_cmd_htif_cmd_chunk_0 :=
       ((update_subrange_vec_dec v.htif_cmd_htif_cmd_chunk_0 (( 55 : int):ii) (( 48 : int):ii)
           ((subrange_vec_dec x (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
          :  64 words$word)) |>)))`;


(*val _get_htif_cmd_payload : htif_cmd -> mword ty48*)

val _ = Define `
 ((get_htif_cmd_payload:htif_cmd ->(48)words$word) v=
    ((subrange_vec_dec v.htif_cmd_htif_cmd_chunk_0 (( 47 : int):ii) (( 0 : int):ii)  :  48 words$word)))`;


(*val _set_htif_cmd_payload : register_ref regstate register_value htif_cmd -> mword ty48 -> M unit*)

val _ = Define `
 ((set_htif_cmd_payload:((regstate),(register_value),(htif_cmd))register_ref ->(48)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       htif_cmd_htif_cmd_chunk_0 :=
         ((update_subrange_vec_dec r.htif_cmd_htif_cmd_chunk_0 (( 47 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 47 : int):ii) (( 0 : int):ii)  :  48 words$word))
            :  64 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_htif_cmd_payload : htif_cmd -> mword ty48 -> htif_cmd*)

val _ = Define `
 ((update_htif_cmd_payload:htif_cmd ->(48)words$word -> htif_cmd) v x=
    (( v with<|
     htif_cmd_htif_cmd_chunk_0 :=
       ((update_subrange_vec_dec v.htif_cmd_htif_cmd_chunk_0 (( 47 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 47 : int):ii) (( 0 : int):ii)  :  48 words$word))
          :  64 words$word)) |>)))`;


(*val reset_htif : unit -> M unit*)

val _ = Define `
 ((reset_htif:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$seqS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS htif_cmd_write_ref B0)
   (sail2_state_monad$write_regS htif_payload_writes_ref (0x0w :  4 words$word)))
   (sail2_state_monad$write_regS htif_tohost_ref ((EXTZ (( 64 : int):ii) (0b0w :  1 words$word)  :  64 words$word)))))`;


(*val htif_load : forall 'int8_times_n. Size 'int8_times_n => AccessType unit -> mword ty32 -> integer -> M (MemoryOpResult (mword 'int8_times_n))*)

val _ = Define `
 ((htif_load:(unit)AccessType ->(32)words$word -> int ->(regstate)sail2_state_monad$sequential_state ->(((('int8_times_n words$word)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) t paddr width=  (sail2_state_monad$seqS
   (if ((get_config_print_platform () )) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS htif_tohost_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
      sail2_state_monad$returnS ((print_dbg
                 ((STRCAT "htif["
                     ((STRCAT ((string_of_bits paddr))
                         ((STRCAT "] -> " ((string_of_bits w__0)))))))))))
    else sail2_state_monad$returnS () )
   (if ((((((width = (( 8 : int):ii)))) /\ (((paddr = ((plat_htif_tohost ()   :  32 words$word)))))))) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS htif_tohost_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
     sail2_state_monad$returnS (MemValue ((words$w2w ((zero_extend w__1 (( 64 : int):ii)  :  64 words$word))  :  'int8_times_n words$word))))
   else if ((((((width = (( 4 : int):ii)))) /\ (((paddr = ((plat_htif_tohost ()   :  32 words$word))))))))
   then sail2_state_monad$bindS
     (sail2_state_monad$read_regS htif_tohost_ref  : ( 64 words$word) M) (\ (w__2 :  64 words$word) . 
     sail2_state_monad$returnS (MemValue ((words$w2w
                          ((zero_extend ((subrange_vec_dec w__2 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                              (( 32 : int):ii)
                             :  32 words$word))
                         :  'int8_times_n words$word))))
   else if ((((((width = (( 4 : int):ii)))) /\ (((paddr = ((add_vec_int ((plat_htif_tohost ()   :  32 words$word)) (( 4 : int):ii)  :  32 words$word))))))))
   then sail2_state_monad$bindS
     (sail2_state_monad$read_regS htif_tohost_ref  : ( 64 words$word) M) (\ (w__3 :  64 words$word) . 
     sail2_state_monad$returnS (MemValue ((words$w2w
                          ((zero_extend ((subrange_vec_dec w__3 (( 63 : int):ii) (( 32 : int):ii)  :  32 words$word))
                              (( 32 : int):ii)
                             :  32 words$word))
                         :  'int8_times_n words$word))))
   else
     sail2_state_monad$returnS ((case t of
       Execute (() ) => MemException (E_Fetch_Access_Fault () )
     | Read (Data1) => MemException (E_Load_Access_Fault () )
     | _ => MemException (E_SAMO_Access_Fault () )
     )))))`;


(*val htif_store : forall 'int8_times_n. Size 'int8_times_n => mword ty32 -> integer -> mword 'int8_times_n -> M (MemoryOpResult bool)*)

val _ = Define `
 ((htif_store:(32)words$word -> int -> 'int8_times_n words$word ->(regstate)sail2_state_monad$sequential_state ->((((bool)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) paddr width data=
    (let (_ : unit) =
     (if ((get_config_print_platform () )) then
       print_dbg
         ((STRCAT "htif["
             ((STRCAT ((string_of_bits paddr))
                 ((STRCAT "] <- " ((string_of_bits data))))))))
     else () ) in sail2_state_monad$bindS (sail2_state_monad$seqS
   (if (((width = (( 8 : int):ii)))) then
      let (data :  64 words$word) = ((words$w2w data  :  64 words$word)) in sail2_state_monad$bindS (sail2_state_monad$seqS
      (sail2_state_monad$write_regS htif_cmd_write_ref B1)
      (sail2_state_monad$read_regS htif_payload_writes_ref  : ( 4 words$word) M)) (\ (w__0 :  4 words$word) .  sail2_state_monad$seqS
      (sail2_state_monad$write_regS htif_payload_writes_ref ((add_vec_int w__0 (( 1 : int):ii)  :  4 words$word)))
      (sail2_state_monad$write_regS htif_tohost_ref ((EXTZ (( 64 : int):ii) data  :  64 words$word))))
    else if ((((((width = (( 4 : int):ii)))) /\ (((paddr = ((plat_htif_tohost ()   :  32 words$word))))))))
    then
      let (data :  32 words$word) = ((words$w2w data  :  32 words$word)) in sail2_state_monad$bindS
      (sail2_state_monad$read_regS htif_tohost_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) .  sail2_state_monad$bindS (sail2_state_monad$seqS
      (if (((data = ((subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))))) then sail2_state_monad$bindS
         (sail2_state_monad$read_regS htif_payload_writes_ref  : ( 4 words$word) M) (\ (w__2 :  4 words$word) . 
         sail2_state_monad$write_regS htif_payload_writes_ref ((add_vec_int w__2 (( 1 : int):ii)  :  4 words$word)))
       else sail2_state_monad$write_regS htif_payload_writes_ref (0x1w :  4 words$word))
      (sail2_state_monad$read_regS htif_tohost_ref  : ( 64 words$word) M)) (\ (w__3 :  64 words$word) . 
      sail2_state_monad$write_regS htif_tohost_ref ((update_subrange_vec_dec w__3 (( 31 : int):ii) (( 0 : int):ii) data  :  64 words$word))))
    else if ((((((width = (( 4 : int):ii)))) /\ (((paddr = ((add_vec_int ((plat_htif_tohost ()   :  32 words$word)) (( 4 : int):ii)  :  32 words$word))))))))
    then
      let (data :  32 words$word) = ((words$w2w data  :  32 words$word)) in sail2_state_monad$bindS
      (sail2_state_monad$read_regS htif_tohost_ref  : ( 64 words$word) M) (\ (w__4 :  64 words$word) .  sail2_state_monad$bindS (sail2_state_monad$seqS (sail2_state_monad$seqS
      (if (((((subrange_vec_dec data (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = ((subrange_vec_dec w__4 (( 47 : int):ii) (( 32 : int):ii)  :  16 words$word))))) then sail2_state_monad$bindS
         (sail2_state_monad$read_regS htif_payload_writes_ref  : ( 4 words$word) M) (\ (w__5 :  4 words$word) . 
         sail2_state_monad$write_regS htif_payload_writes_ref ((add_vec_int w__5 (( 1 : int):ii)  :  4 words$word)))
       else sail2_state_monad$write_regS htif_payload_writes_ref (0x1w :  4 words$word))
      (sail2_state_monad$write_regS htif_cmd_write_ref B1))
      (sail2_state_monad$read_regS htif_tohost_ref  : ( 64 words$word) M)) (\ (w__6 :  64 words$word) . 
      sail2_state_monad$write_regS htif_tohost_ref ((update_subrange_vec_dec w__6 (( 63 : int):ii) (( 32 : int):ii) data  :  64 words$word))))
    else sail2_state_monad$write_regS htif_tohost_ref ((EXTZ (( 64 : int):ii) data  :  64 words$word)))
   (sail2_state$or_boolS
     (sail2_state$and_boolS ( sail2_state_monad$bindS(sail2_state_monad$read_regS htif_cmd_write_ref) (\ (w__7 : bitU) .  sail2_state_monad$returnS (((w__7 = B1)))))
        ( sail2_state_monad$bindS(sail2_state_monad$read_regS htif_payload_writes_ref  : ( 4 words$word) M) (\ (w__8 :  4 words$word) . 
         sail2_state_monad$returnS ((((lem$w2ui w__8)) > (( 0 : int):ii))))))
     ( sail2_state_monad$bindS(sail2_state_monad$read_regS htif_payload_writes_ref  : ( 4 words$word) M) (\ (w__10 :  4 words$word) . 
      sail2_state_monad$returnS ((((lem$w2ui w__10)) > (( 2 : int):ii))))))) (\ (w__11 : bool) .  sail2_state_monad$seqS
   (if w__11 then sail2_state_monad$bindS
      (sail2_state_monad$read_regS htif_tohost_ref  : ( 64 words$word) M) (\ (w__12 :  64 words$word) . 
      let cmd = (Mk_htif_cmd w__12) in
      let b__0 = ((get_htif_cmd_device cmd  :  8 words$word)) in
      if (((b__0 = (0x00w :  8 words$word)))) then
        let (_ : unit) =
          (if ((get_config_print_platform () )) then
            print_dbg
              ((STRCAT "htif-syscall-proxy cmd: "
                  ((string_of_bits ((get_htif_cmd_payload cmd  :  48 words$word))))))
          else () ) in
        if (((((access_vec_dec ((get_htif_cmd_payload cmd  :  48 words$word)) (( 0 : int):ii))) = B1))) then sail2_state_monad$seqS
          (sail2_state_monad$write_regS htif_done_ref T)
          (sail2_state_monad$write_regS
            htif_exit_code_ref
            ((shiftr
                ((zero_extend ((get_htif_cmd_payload cmd  :  48 words$word)) (( 64 : int):ii)  :  64 words$word))
                (( 1 : int):ii)
               :  64 words$word)))
        else sail2_state_monad$returnS () 
      else if (((b__0 = (0x01w :  8 words$word)))) then
        let (_ : unit) =
          (if ((get_config_print_platform () )) then
            print_dbg
              ((STRCAT "htif-term cmd: "
                  ((string_of_bits ((get_htif_cmd_payload cmd  :  48 words$word))))))
          else () ) in
        let b__2 = ((get_htif_cmd_cmd cmd  :  8 words$word)) in
        let (_ : unit) =
          (if (((b__2 = (0x00w :  8 words$word)))) then () 
          else if (((b__2 = (0x01w :  8 words$word)))) then
            plat_term_write
              ((subrange_vec_dec ((get_htif_cmd_payload cmd  :  48 words$word)) (( 7 : int):ii) (( 0 : int):ii)
                 :  8 words$word))
          else print_endline ((STRCAT "Unknown term cmd: " ((string_of_bits b__2))))) in
        reset_htif () 
      else sail2_state_monad$returnS ((print_endline ((STRCAT "htif-???? cmd: " ((string_of_bits data)))))))
    else sail2_state_monad$returnS () )
   (sail2_state_monad$returnS (MemValue T)))))`;


(*val htif_tick : unit -> M unit*)

val _ = Define `
 ((htif_tick:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS (sail2_state_monad$seqS
   (if ((get_config_print_platform () )) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS htif_tohost_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
      sail2_state_monad$returnS ((print_dbg ((STRCAT "htif::tick " ((string_of_bits w__0)))))))
    else sail2_state_monad$returnS () )
   (sail2_state_monad$read_regS htif_tohost_ref  : ( 64 words$word) M)) (\ (w__1 :  64 words$word) . 
   sail2_state_monad$write_regS htif_tohost_ref w__1)))`;


(*val within_mmio_readable : mword ty32 -> integer -> bool*)

val _ = Define `
 ((within_mmio_readable:(32)words$word -> int -> bool) (addr : xlenbits) (width : int)=
    (((within_clint addr width)) \/ (((((within_htif_readable addr width)) /\ (((( 1 : int):ii) <= ((id width)))))))))`;


(*val within_mmio_writable : mword ty32 -> integer -> bool*)

val _ = Define `
 ((within_mmio_writable:(32)words$word -> int -> bool) (addr : xlenbits) (width : int)=
    (((within_clint addr width)) \/ (((((within_htif_writable addr width)) /\ ((((id width)) <= (( 8 : int):ii))))))))`;


(*val mmio_read : forall 'int8_times_n. Size 'int8_times_n => AccessType unit -> mword ty32 -> integer -> M (MemoryOpResult (mword 'int8_times_n))*)

val _ = Define `
 ((mmio_read:(ext_access_type)AccessType ->(32)words$word -> int ->(regstate)sail2_state_monad$sequential_state ->(((('int8_times_n words$word)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (t : ext_access_type AccessType) (paddr : xlenbits) (width : int)=
    (if ((within_clint paddr width)) then
     (clint_load t paddr width  : ( ( 'int8_times_n words$word)MemoryOpResult) M)
   else if (((((within_htif_readable paddr width)) /\ (((( 1 : int):ii) <= ((id width))))))) then
     (htif_load t paddr width  : ( ( 'int8_times_n words$word)MemoryOpResult) M)
   else
     sail2_state_monad$returnS ((case t of
       Execute (() ) => MemException (E_Fetch_Access_Fault () )
     | Read (Data1) => MemException (E_Load_Access_Fault () )
     | _ => MemException (E_SAMO_Access_Fault () )
     ))))`;


(*val mmio_write : forall 'int8_times_n. Size 'int8_times_n => mword ty32 -> integer -> mword 'int8_times_n -> M (MemoryOpResult bool)*)

val _ = Define `
 ((mmio_write:(32)words$word -> int -> 'int8_times_n words$word ->(regstate)sail2_state_monad$sequential_state ->((((bool)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (paddr : xlenbits) (width : int) (data :  'int8_times_n words$word)=
    (if ((within_clint paddr width)) then clint_store paddr width data
   else if (((((within_htif_writable paddr width)) /\ ((((id width)) <= (( 8 : int):ii)))))) then
     htif_store paddr width data
   else sail2_state_monad$returnS (MemException (E_SAMO_Access_Fault () ))))`;


(*val init_platform : unit -> M unit*)

val _ = Define `
 ((init_platform:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS htif_tohost_ref ((EXTZ (( 64 : int):ii) (0b0w :  1 words$word)  :  64 words$word)))
   (sail2_state_monad$write_regS htif_done_ref F))
   (sail2_state_monad$write_regS htif_exit_code_ref ((EXTZ (( 64 : int):ii) (0b0w :  1 words$word)  :  64 words$word))))
   (sail2_state_monad$write_regS htif_cmd_write_ref B0))
   (sail2_state_monad$write_regS htif_payload_writes_ref ((EXTZ (( 4 : int):ii) (0b0w :  1 words$word)  :  4 words$word)))))`;


(*val tick_platform : unit -> M unit*)

val _ = Define `
 ((tick_platform:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (htif_tick () ))`;


(*val handle_illegal : unit -> M unit*)

val _ = Define `
 ((handle_illegal:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (if ((plat_mtval_has_illegal_inst_bits () )) then sail2_state_monad$bindS
      (sail2_state_monad$read_regS instbits_ref  : ( 32 words$word) M) (\ (w__0 :  32 words$word) .  sail2_state_monad$returnS (SOME w__0))
    else sail2_state_monad$returnS NONE) (\ info . 
   let (t : sync_exception) =
     (<| sync_exception_trap := (E_Illegal_Instr () ); 
        sync_exception_excinfo := info; 
        sync_exception_ext := NONE |>) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__1 : Privilege) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS PC_ref  : ( 32 words$word) M) (\ (w__2 :  32 words$word) .  sail2_state_monad$bindS
   (exception_handler w__1 (CTL_TRAP t) w__2  : ( 32 words$word) M) (\ (w__3 :  32 words$word) . 
   set_next_pc w__3))))))`;


(*val platform_wfi : unit -> M unit*)

val _ = Define `
 ((platform_wfi:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =
    (let (_ : unit) = (cancel_reservation () ) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS mtime_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS mtimecmp_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   if ((zopz0zI_u w__0 w__1)) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS mtimecmp_ref  : ( 64 words$word) M) (\ (w__2 :  64 words$word) .  sail2_state_monad$bindS (sail2_state_monad$seqS
     (sail2_state_monad$write_regS mtime_ref w__2)
     (sail2_state_monad$read_regS mtimecmp_ref  : ( 64 words$word) M)) (\ (w__3 :  64 words$word) . 
     sail2_state_monad$write_regS mcycle_ref w__3))
   else sail2_state_monad$returnS () ))))`;


(*val is_aligned_addr : mword ty32 -> integer -> bool*)

val _ = Define `
 ((is_aligned_addr:(32)words$word -> int -> bool) (addr : xlenbits) (width : int)=
    (((((lem$w2ui addr)) % width)) = (( 0 : int):ii)))`;


(*val read_kind_of_flags : bool -> bool -> bool -> maybe read_kind*)

val _ = Define `
 ((read_kind_of_flags:bool -> bool -> bool ->(read_kind)option) (aq : bool) (rl : bool) (res : bool)=
    ((case (aq, rl, res) of
     (F, F, F) => SOME Read_plain
   | (T, F, F) => SOME Read_RISCV_acquire
   | (T, T, F) => SOME Read_RISCV_strong_acquire
   | (F, F, T) => SOME Read_RISCV_reserved
   | (T, F, T) => SOME Read_RISCV_reserved_acquire
   | (T, T, T) => SOME Read_RISCV_reserved_strong_acquire
   | (F, T, F) => NONE
   | (F, T, T) => NONE
   )))`;


(*val phys_mem_read : forall 'int8_times_n. Size 'int8_times_n => AccessType unit -> mword ty32 -> integer -> bool -> bool -> bool -> bool -> M (MemoryOpResult ((mword 'int8_times_n * unit)))*)

val _ = Define `
 ((phys_mem_read:(ext_access_type)AccessType ->(32)words$word -> int -> bool -> bool -> bool -> bool ->(regstate)sail2_state_monad$sequential_state ->(((('int8_times_n words$word#unit)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (t : ext_access_type AccessType) (paddr : xlenbits) (width : int) (aq : bool) (rl :
  bool) (res : bool) (meta : bool)=  (sail2_state_monad$bindS
   (case ((read_kind_of_flags aq rl res)) of
     SOME (rk) => sail2_state_monad$bindS
      (read_ram rk paddr width meta  : (( 'int8_times_n words$word # unit)) M) (\ (w__0 :
        ( 'int8_times_n words$word # unit)) . 
      sail2_state_monad$returnS (SOME w__0))
   | NONE => sail2_state_monad$returnS NONE
   ) (\ (w__1 :  (( 'int8_times_n words$word # unit))option) . 
   let result = w__1 in
   sail2_state_monad$returnS ((case (t, result) of
     (Execute (() ), NONE) => MemException (E_Fetch_Access_Fault () )
   | (Read (Data1), NONE) => MemException (E_Load_Access_Fault () )
   | (_, NONE) => MemException (E_SAMO_Access_Fault () )
   | (_, SOME ((v, m))) =>
      let (_ : unit) =
        (if ((get_config_print_mem () )) then
          print_dbg
            ((STRCAT "mem["
                ((STRCAT ((accessType_to_str t))
                    ((STRCAT ","
                        ((STRCAT ((string_of_bits paddr))
                            ((STRCAT "] -> " ((string_of_bits v))))))))))))
        else () ) in
      MemValue (v, m)
   )))))`;


(*val checked_mem_read : forall 'int8_times_n. Size 'int8_times_n => AccessType unit -> mword ty32 -> integer -> bool -> bool -> bool -> bool -> M (MemoryOpResult ((mword 'int8_times_n * unit)))*)

val _ = Define `
 ((checked_mem_read:(ext_access_type)AccessType ->(32)words$word -> int -> bool -> bool -> bool -> bool ->(regstate)sail2_state_monad$sequential_state ->(((('int8_times_n words$word#unit)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (t : ext_access_type AccessType) (paddr : xlenbits) (width : int) (aq :
  bool) (rl : bool) (res : bool) (meta : bool)=
    (if ((within_mmio_readable paddr width)) then sail2_state_monad$bindS
     (mmio_read t paddr width  : ( ( 'int8_times_n words$word)MemoryOpResult) M) (\ (w__0 : ( 'int8_times_n words$word)
       MemoryOpResult) . 
     sail2_state_monad$returnS ((MemoryOpResult_add_meta w__0 default_meta
               : (( 'int8_times_n words$word # unit)) MemoryOpResult)))
   else if ((within_phys_mem paddr width)) then
     (case ((ext_check_phys_mem_read t paddr width aq rl res meta)) of
       Ext_PhysAddr_OK (() ) =>
        (phys_mem_read t paddr width aq rl res meta
          : ( (( 'int8_times_n words$word # unit))MemoryOpResult) M)
     | Ext_PhysAddr_Error (e) => sail2_state_monad$returnS (MemException e)
     )
   else
     sail2_state_monad$returnS ((case t of
       Execute (() ) => MemException (E_Fetch_Access_Fault () )
     | Read (Data1) => MemException (E_Load_Access_Fault () )
     | _ => MemException (E_SAMO_Access_Fault () )
     ))))`;


(*val pmp_mem_read : forall 'int8_times_n. Size 'int8_times_n => AccessType unit -> Privilege -> mword ty32 -> integer -> bool -> bool -> bool -> bool -> M (MemoryOpResult ((mword 'int8_times_n * unit)))*)

val _ = Define `
 ((pmp_mem_read:(ext_access_type)AccessType -> Privilege ->(32)words$word -> int -> bool -> bool -> bool -> bool ->(regstate)sail2_state_monad$sequential_state ->(((('int8_times_n words$word#unit)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (t : ext_access_type AccessType) (p : Privilege) (paddr : xlenbits) (width :
  int) (aq : bool) (rl : bool) (res : bool) (meta : bool)=
    (if ((~ ((plat_enable_pmp () )))) then
     (checked_mem_read t paddr width aq rl res meta
       : ( (( 'int8_times_n words$word # unit))MemoryOpResult) M)
   else sail2_state_monad$bindS
     (pmpCheck paddr width t p) (\ (w__1 :  ExceptionType option) . 
     (case w__1 of
       NONE =>
        (checked_mem_read t paddr width aq rl res meta
          : ( (( 'int8_times_n words$word # unit))MemoryOpResult) M)
     | SOME (e) => sail2_state_monad$returnS (MemException e)
     ))))`;


(*val rvfi_read : forall 'int8_times_n. Size 'int8_times_n => mword ty32 -> integer -> MemoryOpResult ((mword 'int8_times_n * unit)) -> unit*)

val _ = Define `
 ((rvfi_read:(32)words$word -> int ->('int8_times_n words$word#unit)MemoryOpResult -> unit) addr width result=  () )`;


(*val mem_read : forall 'int8_times_n. Size 'int8_times_n => AccessType unit -> mword ty32 -> integer -> bool -> bool -> bool -> M (MemoryOpResult (mword 'int8_times_n))*)

(*val mem_read_priv : forall 'int8_times_n. Size 'int8_times_n => AccessType unit -> Privilege -> mword ty32 -> integer -> bool -> bool -> bool -> M (MemoryOpResult (mword 'int8_times_n))*)

(*val mem_read_meta : forall 'int8_times_n. Size 'int8_times_n => AccessType unit -> mword ty32 -> integer -> bool -> bool -> bool -> bool -> M (MemoryOpResult ((mword 'int8_times_n * unit)))*)

(*val mem_read_priv_meta : forall 'int8_times_n. Size 'int8_times_n => AccessType unit -> Privilege -> mword ty32 -> integer -> bool -> bool -> bool -> bool -> M (MemoryOpResult ((mword 'int8_times_n * unit)))*)

val _ = Define `
 ((mem_read_priv_meta:(unit)AccessType -> Privilege ->(32)words$word -> int -> bool -> bool -> bool -> bool ->(regstate)sail2_state_monad$sequential_state ->(((('int8_times_n words$word#unit)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) typ priv paddr width aq rl res meta=  (sail2_state_monad$bindS
   (if ((((((aq \/ res))) /\ ((~ ((is_aligned_addr paddr width))))))) then
      sail2_state_monad$returnS (MemException (E_Load_Addr_Align () ))
    else
      (case (aq, rl, res) of
        (F, T, F) => sail2_state_monad$throwS (Error_not_implemented "load.rl")
      | (F, T, T) => sail2_state_monad$throwS (Error_not_implemented "lr.rl")
      | (_, _, _) =>
         (pmp_mem_read typ priv paddr width aq rl res meta
           : ( (( 'int8_times_n words$word # unit))MemoryOpResult) M)
      )) (\ (result : (( 'int8_times_n words$word # unit)) MemoryOpResult) . 
   let (_ : unit) = (rvfi_read paddr width result) in
   sail2_state_monad$returnS result)))`;


val _ = Define `
 ((mem_read_meta:(unit)AccessType ->(32)words$word -> int -> bool -> bool -> bool -> bool ->(regstate)sail2_state_monad$sequential_state ->(((('int8_times_n words$word#unit)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) typ paddr width aq rl res meta=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS mstatus_ref) (\ (w__0 : Mstatus) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__1 : Privilege) .  sail2_state_monad$bindS
   (effectivePrivilege typ w__0 w__1) (\ (w__2 : Privilege) . 
   (mem_read_priv_meta typ w__2 paddr width aq rl res meta
     : ( (( 'int8_times_n words$word # unit))MemoryOpResult) M))))))`;


val _ = Define `
 ((mem_read_priv:(unit)AccessType -> Privilege ->(32)words$word -> int -> bool -> bool -> bool ->(regstate)sail2_state_monad$sequential_state ->(((('int8_times_n words$word)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) typ priv paddr width aq rl res=  (sail2_state_monad$bindS
   (mem_read_priv_meta typ priv paddr width aq rl res F
     : ( (( 'int8_times_n words$word # unit))MemoryOpResult) M) (\ (w__0 : (( 'int8_times_n words$word # unit))
     MemoryOpResult) . 
   sail2_state_monad$returnS ((MemoryOpResult_drop_meta w__0  : ( 'int8_times_n words$word) MemoryOpResult)))))`;


val _ = Define `
 ((mem_read:(unit)AccessType ->(32)words$word -> int -> bool -> bool -> bool ->(regstate)sail2_state_monad$sequential_state ->(((('int8_times_n words$word)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) typ paddr width aq rel res=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS mstatus_ref) (\ (w__0 : Mstatus) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__1 : Privilege) .  sail2_state_monad$bindS
   (effectivePrivilege typ w__0 w__1) (\ (w__2 : Privilege) . 
   (mem_read_priv typ w__2 paddr width aq rel res  : ( ( 'int8_times_n words$word)MemoryOpResult) M))))))`;


(*val mem_write_ea : mword ty32 -> integer -> bool -> bool -> bool -> M (MemoryOpResult unit)*)

val _ = Define `
 ((mem_write_ea:(32)words$word -> int -> bool -> bool -> bool ->(regstate)sail2_state_monad$sequential_state ->((((unit)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) addr width aq rl con=
    (if ((((((rl \/ con))) /\ ((~ ((is_aligned_addr addr width))))))) then
     sail2_state_monad$returnS (MemException (E_SAMO_Addr_Align () ))
   else
     (case (aq, rl, con) of
       (F, F, F) => sail2_state_monad$seqS (write_ram_ea Write_plain addr width) (sail2_state_monad$returnS (MemValue () ))
     | (F, T, F) => sail2_state_monad$seqS (write_ram_ea Write_RISCV_release addr width) (sail2_state_monad$returnS (MemValue () ))
     | (F, F, T) => sail2_state_monad$seqS
        (write_ram_ea Write_RISCV_conditional addr width) (sail2_state_monad$returnS (MemValue () ))
     | (F, T, T) => sail2_state_monad$seqS
        (write_ram_ea Write_RISCV_conditional_release addr width) (sail2_state_monad$returnS (MemValue () ))
     | (T, F, F) => sail2_state_monad$throwS (Error_not_implemented "store.aq")
     | (T, T, F) => sail2_state_monad$seqS
        (write_ram_ea Write_RISCV_strong_release addr width) (sail2_state_monad$returnS (MemValue () ))
     | (T, F, T) => sail2_state_monad$throwS (Error_not_implemented "sc.aq")
     | (T, T, T) => sail2_state_monad$seqS
        (write_ram_ea Write_RISCV_conditional_strong_release addr width) (sail2_state_monad$returnS (MemValue () ))
     )))`;


(*val rvfi_write : forall 'int8_times_n. Size 'int8_times_n => mword ty32 -> integer -> mword 'int8_times_n -> unit -> unit*)

val _ = Define `
 ((rvfi_write:(32)words$word -> int -> 'int8_times_n words$word -> unit -> unit) addr width value meta=  () )`;


(*val phys_mem_write : forall 'int8_times_n. Size 'int8_times_n => write_kind -> mword ty32 -> integer -> mword 'int8_times_n -> unit -> M (MemoryOpResult bool)*)

val _ = Define `
 ((phys_mem_write:write_kind ->(32)words$word -> int -> 'int8_times_n words$word -> unit ->(regstate)sail2_state_monad$sequential_state ->((((bool)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (wk : write_kind) (paddr : xlenbits) (width : int) (data :
   'int8_times_n words$word) (meta : mem_meta)=
    (let (_ : unit) = (rvfi_write paddr width data meta) in sail2_state_monad$bindS
   (write_ram wk paddr width data meta) (\ (w__0 : bool) . 
   let result = (MemValue w__0) in
   let (_ : unit) =
     (if ((get_config_print_mem () )) then
       print_dbg
         ((STRCAT "mem["
             ((STRCAT ((string_of_bits paddr))
                 ((STRCAT "] <- " ((string_of_bits data))))))))
     else () ) in
   sail2_state_monad$returnS result)))`;


(*val checked_mem_write : forall 'int8_times_n. Size 'int8_times_n => write_kind -> mword ty32 -> integer -> mword 'int8_times_n -> unit -> M (MemoryOpResult bool)*)

val _ = Define `
 ((checked_mem_write:write_kind ->(32)words$word -> int -> 'int8_times_n words$word -> unit ->(regstate)sail2_state_monad$sequential_state ->((((bool)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (wk : write_kind) (paddr : xlenbits) (width : int) (data :
   'int8_times_n words$word) (meta : mem_meta)=
    (if ((within_mmio_writable paddr width)) then mmio_write paddr width data
   else if ((within_phys_mem paddr width)) then
     (case ((ext_check_phys_mem_write wk paddr width data meta)) of
       Ext_PhysAddr_OK (() ) => phys_mem_write wk paddr width data meta
     | Ext_PhysAddr_Error (e) => sail2_state_monad$returnS (MemException e)
     )
   else sail2_state_monad$returnS (MemException (E_SAMO_Access_Fault () ))))`;


(*val pmp_mem_write : forall 'int8_times_n. Size 'int8_times_n => write_kind -> mword ty32 -> integer -> mword 'int8_times_n -> AccessType unit -> Privilege -> unit -> M (MemoryOpResult bool)*)

val _ = Define `
 ((pmp_mem_write:write_kind ->(32)words$word -> int -> 'int8_times_n words$word ->(ext_access_type)AccessType -> Privilege -> unit ->(regstate)sail2_state_monad$sequential_state ->((((bool)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (wk : write_kind) (paddr : xlenbits) (width : int) (data :  'int8_times_n words$word) (typ : ext_access_type
  AccessType) (priv : Privilege) (meta : mem_meta)=
    (if ((~ ((plat_enable_pmp () )))) then checked_mem_write wk paddr width data meta
   else sail2_state_monad$bindS
     (pmpCheck paddr width typ priv) (\ (w__1 :  ExceptionType option) . 
     (case w__1 of
       NONE => checked_mem_write wk paddr width data meta
     | SOME (e) => sail2_state_monad$returnS (MemException e)
     ))))`;


(*val mem_write_value_priv_meta : forall 'int8_times_n. Size 'int8_times_n => mword ty32 -> integer -> mword 'int8_times_n -> AccessType unit -> Privilege -> unit -> bool -> bool -> bool -> M (MemoryOpResult bool)*)

val _ = Define `
 ((mem_write_value_priv_meta:(32)words$word -> int -> 'int8_times_n words$word ->(unit)AccessType -> Privilege -> unit -> bool -> bool -> bool ->(regstate)sail2_state_monad$sequential_state ->((((bool)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) paddr width value typ priv meta aq rl con=
    (let (_ : unit) = (rvfi_write paddr width value meta) in
   if ((((((rl \/ con))) /\ ((~ ((is_aligned_addr paddr width))))))) then
     sail2_state_monad$returnS (MemException (E_SAMO_Addr_Align () ))
   else sail2_state_monad$bindS
     (case (aq, rl, con) of
       (F, F, F) => sail2_state_monad$returnS Write_plain
     | (F, T, F) => sail2_state_monad$returnS Write_RISCV_release
     | (F, F, T) => sail2_state_monad$returnS Write_RISCV_conditional
     | (F, T, T) => sail2_state_monad$returnS Write_RISCV_conditional_release
     | (T, T, F) => sail2_state_monad$returnS Write_RISCV_strong_release
     | (T, T, T) => sail2_state_monad$returnS Write_RISCV_conditional_strong_release
     | (T, F, F) => sail2_state_monad$throwS (Error_not_implemented "store.aq")
     | (T, F, T) => sail2_state_monad$throwS (Error_not_implemented "sc.aq")
     ) (\ (wk : write_kind) . 
     pmp_mem_write wk paddr width value typ priv meta)))`;


(*val mem_write_value_priv : forall 'int8_times_n. Size 'int8_times_n => mword ty32 -> integer -> mword 'int8_times_n -> Privilege -> bool -> bool -> bool -> M (MemoryOpResult bool)*)

val _ = Define `
 ((mem_write_value_priv:(32)words$word -> int -> 'int8_times_n words$word -> Privilege -> bool -> bool -> bool ->(regstate)sail2_state_monad$sequential_state ->((((bool)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) paddr width value priv aq rl con=
    (mem_write_value_priv_meta paddr width value (Write default_write_acc) priv default_meta aq rl con))`;


(*val mem_write_value_meta : forall 'int8_times_n. Size 'int8_times_n => mword ty32 -> integer -> mword 'int8_times_n -> unit -> unit -> bool -> bool -> bool -> M (MemoryOpResult bool)*)

val _ = Define `
 ((mem_write_value_meta:(32)words$word -> int -> 'int8_times_n words$word -> unit -> unit -> bool -> bool -> bool ->(regstate)sail2_state_monad$sequential_state ->((((bool)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) paddr width value ext_acc meta aq rl con=
    (let typ = (Write ext_acc) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS mstatus_ref) (\ (w__0 : Mstatus) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__1 : Privilege) .  sail2_state_monad$bindS
   (effectivePrivilege typ w__0 w__1) (\ ep . 
   mem_write_value_priv_meta paddr width value typ ep meta aq rl con)))))`;


(*val mem_write_value : forall 'int8_times_n. Size 'int8_times_n => mword ty32 -> integer -> mword 'int8_times_n -> bool -> bool -> bool -> M (MemoryOpResult bool)*)

val _ = Define `
 ((mem_write_value:(32)words$word -> int -> 'int8_times_n words$word -> bool -> bool -> bool ->(regstate)sail2_state_monad$sequential_state ->((((bool)MemoryOpResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) paddr width value aq rl con=
    (mem_write_value_meta paddr width value default_write_acc default_meta aq rl con))`;


val _ = Define `
((default_sv32_ext_pte:(10)words$word)=  ((0b0000000000w :  10 words$word)))`;


(*val Mk_PTE_Bits : mword ty8 -> PTE_Bits*)

val _ = Define `
 ((Mk_PTE_Bits:(8)words$word -> PTE_Bits) v=
    (<| PTE_Bits_PTE_Bits_chunk_0 := ((subrange_vec_dec v (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word)) |>))`;


val _ = Define `
 ((get_PTE_Bits_bits:PTE_Bits ->(8)words$word) v=  ((subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word)))`;


val _ = Define `
 ((set_PTE_Bits_bits:((regstate),(register_value),(PTE_Bits))register_ref ->(8)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       PTE_Bits_PTE_Bits_chunk_0 :=
         ((update_subrange_vec_dec r.PTE_Bits_PTE_Bits_chunk_0 (( 7 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
            :  8 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_PTE_Bits_bits:PTE_Bits ->(8)words$word -> PTE_Bits) v x=
    (( v with<|
     PTE_Bits_PTE_Bits_chunk_0 :=
       ((update_subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 7 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
          :  8 words$word)) |>)))`;


val _ = Define `
 ((get_PTE_Bits_D:PTE_Bits ->(1)words$word) v=  ((subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 7 : int):ii) (( 7 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_PTE_Bits_D:((regstate),(register_value),(PTE_Bits))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       PTE_Bits_PTE_Bits_chunk_0 :=
         ((update_subrange_vec_dec r.PTE_Bits_PTE_Bits_chunk_0 (( 7 : int):ii) (( 7 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  8 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_PTE_Bits_D:PTE_Bits ->(1)words$word -> PTE_Bits) v x=
    (( v with<|
     PTE_Bits_PTE_Bits_chunk_0 :=
       ((update_subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 7 : int):ii) (( 7 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  8 words$word)) |>)))`;


val _ = Define `
 ((get_PTE_Bits_A:PTE_Bits ->(1)words$word) v=  ((subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 6 : int):ii) (( 6 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_PTE_Bits_A:((regstate),(register_value),(PTE_Bits))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       PTE_Bits_PTE_Bits_chunk_0 :=
         ((update_subrange_vec_dec r.PTE_Bits_PTE_Bits_chunk_0 (( 6 : int):ii) (( 6 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  8 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_PTE_Bits_A:PTE_Bits ->(1)words$word -> PTE_Bits) v x=
    (( v with<|
     PTE_Bits_PTE_Bits_chunk_0 :=
       ((update_subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 6 : int):ii) (( 6 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  8 words$word)) |>)))`;


val _ = Define `
 ((get_PTE_Bits_G:PTE_Bits ->(1)words$word) v=  ((subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_PTE_Bits_G:((regstate),(register_value),(PTE_Bits))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       PTE_Bits_PTE_Bits_chunk_0 :=
         ((update_subrange_vec_dec r.PTE_Bits_PTE_Bits_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  8 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_PTE_Bits_G:PTE_Bits ->(1)words$word -> PTE_Bits) v x=
    (( v with<|
     PTE_Bits_PTE_Bits_chunk_0 :=
       ((update_subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 5 : int):ii) (( 5 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  8 words$word)) |>)))`;


val _ = Define `
 ((get_PTE_Bits_U:PTE_Bits ->(1)words$word) v=  ((subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 4 : int):ii) (( 4 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_PTE_Bits_U:((regstate),(register_value),(PTE_Bits))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       PTE_Bits_PTE_Bits_chunk_0 :=
         ((update_subrange_vec_dec r.PTE_Bits_PTE_Bits_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  8 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_PTE_Bits_U:PTE_Bits ->(1)words$word -> PTE_Bits) v x=
    (( v with<|
     PTE_Bits_PTE_Bits_chunk_0 :=
       ((update_subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 4 : int):ii) (( 4 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  8 words$word)) |>)))`;


val _ = Define `
 ((get_PTE_Bits_X:PTE_Bits ->(1)words$word) v=  ((subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 3 : int):ii) (( 3 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_PTE_Bits_X:((regstate),(register_value),(PTE_Bits))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       PTE_Bits_PTE_Bits_chunk_0 :=
         ((update_subrange_vec_dec r.PTE_Bits_PTE_Bits_chunk_0 (( 3 : int):ii) (( 3 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  8 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_PTE_Bits_X:PTE_Bits ->(1)words$word -> PTE_Bits) v x=
    (( v with<|
     PTE_Bits_PTE_Bits_chunk_0 :=
       ((update_subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 3 : int):ii) (( 3 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  8 words$word)) |>)))`;


val _ = Define `
 ((get_PTE_Bits_W:PTE_Bits ->(1)words$word) v=  ((subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_PTE_Bits_W:((regstate),(register_value),(PTE_Bits))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       PTE_Bits_PTE_Bits_chunk_0 :=
         ((update_subrange_vec_dec r.PTE_Bits_PTE_Bits_chunk_0 (( 2 : int):ii) (( 2 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  8 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_PTE_Bits_W:PTE_Bits ->(1)words$word -> PTE_Bits) v x=
    (( v with<|
     PTE_Bits_PTE_Bits_chunk_0 :=
       ((update_subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 2 : int):ii) (( 2 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  8 words$word)) |>)))`;


val _ = Define `
 ((get_PTE_Bits_R:PTE_Bits ->(1)words$word) v=  ((subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_PTE_Bits_R:((regstate),(register_value),(PTE_Bits))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       PTE_Bits_PTE_Bits_chunk_0 :=
         ((update_subrange_vec_dec r.PTE_Bits_PTE_Bits_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  8 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_PTE_Bits_R:PTE_Bits ->(1)words$word -> PTE_Bits) v x=
    (( v with<|
     PTE_Bits_PTE_Bits_chunk_0 :=
       ((update_subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 1 : int):ii) (( 1 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  8 words$word)) |>)))`;


val _ = Define `
 ((get_PTE_Bits_V:PTE_Bits ->(1)words$word) v=  ((subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)))`;


val _ = Define `
 ((set_PTE_Bits_V:((regstate),(register_value),(PTE_Bits))register_ref ->(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       PTE_Bits_PTE_Bits_chunk_0 :=
         ((update_subrange_vec_dec r.PTE_Bits_PTE_Bits_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
            :  8 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_PTE_Bits_V:PTE_Bits ->(1)words$word -> PTE_Bits) v x=
    (( v with<|
     PTE_Bits_PTE_Bits_chunk_0 :=
       ((update_subrange_vec_dec v.PTE_Bits_PTE_Bits_chunk_0 (( 0 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word))
          :  8 words$word)) |>)))`;


(*val isPTEPtr : mword ty8 -> mword ty10 -> bool*)

val _ = Define `
 ((isPTEPtr:(8)words$word ->(10)words$word -> bool) (p : pteAttribs) (ext : extPte)=
    (let a = (Mk_PTE_Bits p) in
   ((((((get_PTE_Bits_R a  :  1 words$word)) = (0b0w :  1 words$word)))) /\ ((((((((get_PTE_Bits_W a  :  1 words$word)) = (0b0w :  1 words$word)))) /\ (((((get_PTE_Bits_X a  :  1 words$word)) = (0b0w :  1 words$word))))))))))`;


(*val isInvalidPTE : mword ty8 -> mword ty10 -> bool*)

val _ = Define `
 ((isInvalidPTE:(8)words$word ->(10)words$word -> bool) (p : pteAttribs) (ext : extPte)=
    (let a = (Mk_PTE_Bits p) in
   ((((((get_PTE_Bits_V a  :  1 words$word)) = (0b0w :  1 words$word)))) \/ ((((((((get_PTE_Bits_W a  :  1 words$word)) = (0b1w :  1 words$word)))) /\ (((((get_PTE_Bits_R a  :  1 words$word)) = (0b0w :  1 words$word))))))))))`;


(*val to_pte_check : bool -> PTE_Check*)

val _ = Define `
 ((to_pte_check:bool -> PTE_Check) b=  (if b then PTE_Check_Success ()  else PTE_Check_Failure (() , () )))`;


(*val checkPTEPermission : AccessType unit -> Privilege -> bool -> bool -> PTE_Bits -> mword ty10 -> unit -> M PTE_Check*)

val _ = Define `
 ((checkPTEPermission:(ext_access_type)AccessType -> Privilege -> bool -> bool -> PTE_Bits ->(10)words$word -> unit ->(regstate)sail2_state_monad$sequential_state ->(((PTE_Check),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (ac : ext_access_type AccessType) (priv : Privilege) (mxr : bool) (do_sum :
  bool) (p : PTE_Bits) (ext : extPte) (ext_ptw : ext_ptw)=
    ((case (ac, priv) of
     (Read (_), User) =>
      sail2_state_monad$returnS ((to_pte_check
                 ((((((((get_PTE_Bits_U p  :  1 words$word)) = (0b1w :  1 words$word)))) /\ ((((((((get_PTE_Bits_R p  :  1 words$word)) = (0b1w :  1 words$word)))) \/ ((((((((get_PTE_Bits_X p  :  1 words$word)) = (0b1w :  1 words$word)))) /\ mxr)))))))))))
   | (Write (_), User) =>
      sail2_state_monad$returnS ((to_pte_check
                 ((((((((get_PTE_Bits_U p  :  1 words$word)) = (0b1w :  1 words$word)))) /\ (((((get_PTE_Bits_W p  :  1 words$word)) = (0b1w :  1 words$word)))))))))
   | (ReadWrite ((_, _)), User) =>
      sail2_state_monad$returnS ((to_pte_check
                 ((((((((get_PTE_Bits_U p  :  1 words$word)) = (0b1w :  1 words$word)))) /\ ((((((((get_PTE_Bits_W p  :  1 words$word)) = (0b1w :  1 words$word)))) /\ ((((((((get_PTE_Bits_R p  :  1 words$word)) = (0b1w :  1 words$word)))) \/ ((((((((get_PTE_Bits_X p  :  1 words$word)) = (0b1w :  1 words$word)))) /\ mxr))))))))))))))
   | (Execute (() ), User) =>
      sail2_state_monad$returnS ((to_pte_check
                 ((((((((get_PTE_Bits_U p  :  1 words$word)) = (0b1w :  1 words$word)))) /\ (((((get_PTE_Bits_X p  :  1 words$word)) = (0b1w :  1 words$word)))))))))
   | (Read (_), Supervisor) =>
      sail2_state_monad$returnS ((to_pte_check
                 (((((((((((get_PTE_Bits_U p  :  1 words$word)) = (0b0w :  1 words$word)))) \/ do_sum))) /\ ((((((((get_PTE_Bits_R p  :  1 words$word)) = (0b1w :  1 words$word)))) \/ ((((((((get_PTE_Bits_X p  :  1 words$word)) = (0b1w :  1 words$word)))) /\ mxr)))))))))))
   | (Write (_), Supervisor) =>
      sail2_state_monad$returnS ((to_pte_check
                 (((((((((((get_PTE_Bits_U p  :  1 words$word)) = (0b0w :  1 words$word)))) \/ do_sum))) /\ (((((get_PTE_Bits_W p  :  1 words$word)) = (0b1w :  1 words$word)))))))))
   | (ReadWrite ((_, _)), Supervisor) =>
      sail2_state_monad$returnS ((to_pte_check
                 (((((((((((get_PTE_Bits_U p  :  1 words$word)) = (0b0w :  1 words$word)))) \/ do_sum))) /\ ((((((((get_PTE_Bits_W p  :  1 words$word)) = (0b1w :  1 words$word)))) /\ ((((((((get_PTE_Bits_R p  :  1 words$word)) = (0b1w :  1 words$word)))) \/ ((((((((get_PTE_Bits_X p  :  1 words$word)) = (0b1w :  1 words$word)))) /\ mxr))))))))))))))
   | (Execute (() ), Supervisor) =>
      sail2_state_monad$returnS ((to_pte_check
                 ((((((((get_PTE_Bits_U p  :  1 words$word)) = (0b0w :  1 words$word)))) /\ (((((get_PTE_Bits_X p  :  1 words$word)) = (0b1w :  1 words$word)))))))))
   | (_, Machine) => internal_error "m-mode mem perm check"
   )))`;


(*val update_PTE_Bits : PTE_Bits -> AccessType unit -> mword ty10 -> maybe ((PTE_Bits * mword ty10))*)

val _ = Define `
 ((update_PTE_Bits:PTE_Bits ->(ext_access_type)AccessType ->(10)words$word ->(PTE_Bits#(10)words$word)option) (p : PTE_Bits) (a : ext_access_type AccessType) (ext : extPte)=
    (let update_d =
     ((((((get_PTE_Bits_D p  :  1 words$word)) = (0b0w :  1 words$word)))) /\ ((case a of
         Execute (() ) => F
       | Read (() ) => F
       | Write (_) => T
       | ReadWrite ((_, _)) => T
       ))) in
   let update_a = (((get_PTE_Bits_A p  :  1 words$word)) = (0b0w :  1 words$word)) in
   if (((update_d \/ update_a))) then
     let np = (update_PTE_Bits_A p (0b1w :  1 words$word)) in
     let np = (if update_d then update_PTE_Bits_D np (0b1w :  1 words$word) else np) in
     SOME (np, ext)
   else NONE))`;


val _ = Define `
 ((ptw_error_to_str:PTW_Error -> string) e=
    ((case e of
     PTW_Invalid_Addr (() ) => "invalid-source-addr"
   | PTW_Access (() ) => "mem-access-error"
   | PTW_Invalid_PTE (() ) => "invalid-pte"
   | PTW_No_Permission (() ) => "no-permission"
   | PTW_Misaligned (() ) => "misaligned-superpage"
   | PTW_PTE_Update (() ) => "pte-update-needed"
   | PTW_Ext_Error (e) => "extension-error"
   )))`;


(*val ext_get_ptw_error : unit -> PTW_Error*)

val _ = Define `
 ((ext_get_ptw_error:unit -> PTW_Error) eptwf=  (PTW_No_Permission () ))`;


(*val translationException : AccessType unit -> PTW_Error -> ExceptionType*)

val _ = Define `
 ((translationException:(ext_access_type)AccessType -> PTW_Error -> ExceptionType) (a : ext_access_type AccessType) (f : PTW_Error)=
    ((case (a, f) of
     (_, PTW_Ext_Error (e)) => E_Extension ((ext_translate_exception e))
   | (ReadWrite (_), PTW_Access (() )) => E_SAMO_Access_Fault () 
   | (ReadWrite (_), _) => E_SAMO_Page_Fault () 
   | (Read (_), PTW_Access (() )) => E_Load_Access_Fault () 
   | (Read (_), _) => E_Load_Page_Fault () 
   | (Write (_), PTW_Access (() )) => E_SAMO_Access_Fault () 
   | (Write (_), _) => E_SAMO_Page_Fault () 
   | (Execute (() ), PTW_Access (() )) => E_Fetch_Access_Fault () 
   | (Execute (() ), _) => E_Fetch_Page_Fault () 
   )))`;


val _ = Define `
((PAGESIZE_BITS:int)=  ((( 12 : int):ii)))`;


(*val curAsid32 : mword ty32 -> mword ty9*)

val _ = Define `
 ((curAsid32:(32)words$word ->(9)words$word) satp=
    (let s = (Mk_Satp32 satp) in
   (get_Satp32_Asid s  :  9 words$word)))`;


(*val curPTB32 : mword ty32 -> mword ty34*)

val _ = Define `
 ((curPTB32:(32)words$word ->(34)words$word) satp=
    (let (s : Satp32) = (Mk_Satp32 satp) in
   (shiftl ((EXTZ (( 34 : int):ii) ((get_Satp32_PPN s  :  22 words$word))  :  34 words$word)) PAGESIZE_BITS
     :  34 words$word)))`;


val _ = Define `
((SV32_LEVEL_BITS:int)=  ((( 10 : int):ii)))`;


val _ = Define `
((SV32_LEVELS:int)=  ((( 2 : int):ii)))`;


val _ = Define `
((PTE32_LOG_SIZE:int)=  ((( 2 : int):ii)))`;


val _ = Define `
((PTE32_SIZE:int)=  ((( 4 : int):ii)))`;


(*val Mk_SV32_Vaddr : mword ty32 -> SV32_Vaddr*)

val _ = Define `
 ((Mk_SV32_Vaddr:(32)words$word -> SV32_Vaddr) v=
    (<| SV32_Vaddr_SV32_Vaddr_chunk_0 := ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) |>))`;


val _ = Define `
 ((get_SV32_Vaddr_bits:SV32_Vaddr ->(32)words$word) v=
    ((subrange_vec_dec v.SV32_Vaddr_SV32_Vaddr_chunk_0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)))`;


val _ = Define `
 ((set_SV32_Vaddr_bits:((regstate),(register_value),(SV32_Vaddr))register_ref ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       SV32_Vaddr_SV32_Vaddr_chunk_0 :=
         ((update_subrange_vec_dec r.SV32_Vaddr_SV32_Vaddr_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_SV32_Vaddr_bits:SV32_Vaddr ->(32)words$word -> SV32_Vaddr) v x=
    (( v with<|
     SV32_Vaddr_SV32_Vaddr_chunk_0 :=
       ((update_subrange_vec_dec v.SV32_Vaddr_SV32_Vaddr_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
          :  32 words$word)) |>)))`;


(*val _get_SV32_Vaddr_VPNi : SV32_Vaddr -> mword ty20*)

val _ = Define `
 ((get_SV32_Vaddr_VPNi:SV32_Vaddr ->(20)words$word) v=
    ((subrange_vec_dec v.SV32_Vaddr_SV32_Vaddr_chunk_0 (( 31 : int):ii) (( 12 : int):ii)  :  20 words$word)))`;


(*val _set_SV32_Vaddr_VPNi : register_ref regstate register_value SV32_Vaddr -> mword ty20 -> M unit*)

val _ = Define `
 ((set_SV32_Vaddr_VPNi:((regstate),(register_value),(SV32_Vaddr))register_ref ->(20)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       SV32_Vaddr_SV32_Vaddr_chunk_0 :=
         ((update_subrange_vec_dec r.SV32_Vaddr_SV32_Vaddr_chunk_0 (( 31 : int):ii) (( 12 : int):ii)
             ((subrange_vec_dec v (( 19 : int):ii) (( 0 : int):ii)  :  20 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_SV32_Vaddr_VPNi : SV32_Vaddr -> mword ty20 -> SV32_Vaddr*)

val _ = Define `
 ((update_SV32_Vaddr_VPNi:SV32_Vaddr ->(20)words$word -> SV32_Vaddr) v x=
    (( v with<|
     SV32_Vaddr_SV32_Vaddr_chunk_0 :=
       ((update_subrange_vec_dec v.SV32_Vaddr_SV32_Vaddr_chunk_0 (( 31 : int):ii) (( 12 : int):ii)
           ((subrange_vec_dec x (( 19 : int):ii) (( 0 : int):ii)  :  20 words$word))
          :  32 words$word)) |>)))`;


(*val _update_SV39_Vaddr_VPNi : SV39_Vaddr -> mword ty27 -> SV39_Vaddr*)

(*val _update_SV48_Vaddr_VPNi : SV48_Vaddr -> mword ty27 -> SV48_Vaddr*)

(*val _get_SV39_Vaddr_VPNi : SV39_Vaddr -> mword ty27*)

(*val _get_SV48_Vaddr_VPNi : SV48_Vaddr -> mword ty27*)

(*val _set_SV39_Vaddr_VPNi : register_ref regstate register_value SV39_Vaddr -> mword ty27 -> M unit*)

(*val _set_SV48_Vaddr_VPNi : register_ref regstate register_value SV48_Vaddr -> mword ty27 -> M unit*)

(*val _get_SV32_Vaddr_PgOfs : SV32_Vaddr -> mword ty12*)

val _ = Define `
 ((get_SV32_Vaddr_PgOfs:SV32_Vaddr ->(12)words$word) v=
    ((subrange_vec_dec v.SV32_Vaddr_SV32_Vaddr_chunk_0 (( 11 : int):ii) (( 0 : int):ii)  :  12 words$word)))`;


(*val _set_SV32_Vaddr_PgOfs : register_ref regstate register_value SV32_Vaddr -> mword ty12 -> M unit*)

val _ = Define `
 ((set_SV32_Vaddr_PgOfs:((regstate),(register_value),(SV32_Vaddr))register_ref ->(12)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       SV32_Vaddr_SV32_Vaddr_chunk_0 :=
         ((update_subrange_vec_dec r.SV32_Vaddr_SV32_Vaddr_chunk_0 (( 11 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 11 : int):ii) (( 0 : int):ii)  :  12 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_SV32_Vaddr_PgOfs : SV32_Vaddr -> mword ty12 -> SV32_Vaddr*)

val _ = Define `
 ((update_SV32_Vaddr_PgOfs:SV32_Vaddr ->(12)words$word -> SV32_Vaddr) v x=
    (( v with<|
     SV32_Vaddr_SV32_Vaddr_chunk_0 :=
       ((update_subrange_vec_dec v.SV32_Vaddr_SV32_Vaddr_chunk_0 (( 11 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 11 : int):ii) (( 0 : int):ii)  :  12 words$word))
          :  32 words$word)) |>)))`;


(*val _update_SV32_Paddr_PgOfs : SV32_Paddr -> mword ty12 -> SV32_Paddr*)

(*val _update_SV39_Paddr_PgOfs : SV39_Paddr -> mword ty12 -> SV39_Paddr*)

(*val _update_SV39_Vaddr_PgOfs : SV39_Vaddr -> mword ty12 -> SV39_Vaddr*)

(*val _update_SV48_Paddr_PgOfs : SV48_Paddr -> mword ty12 -> SV48_Paddr*)

(*val _update_SV48_Vaddr_PgOfs : SV48_Vaddr -> mword ty12 -> SV48_Vaddr*)

(*val _get_SV32_Paddr_PgOfs : SV32_Paddr -> mword ty12*)

(*val _get_SV39_Paddr_PgOfs : SV39_Paddr -> mword ty12*)

(*val _get_SV39_Vaddr_PgOfs : SV39_Vaddr -> mword ty12*)

(*val _get_SV48_Paddr_PgOfs : SV48_Paddr -> mword ty12*)

(*val _get_SV48_Vaddr_PgOfs : SV48_Vaddr -> mword ty12*)

(*val _set_SV32_Paddr_PgOfs : register_ref regstate register_value SV32_Paddr -> mword ty12 -> M unit*)

(*val _set_SV39_Paddr_PgOfs : register_ref regstate register_value SV39_Paddr -> mword ty12 -> M unit*)

(*val _set_SV39_Vaddr_PgOfs : register_ref regstate register_value SV39_Vaddr -> mword ty12 -> M unit*)

(*val _set_SV48_Paddr_PgOfs : register_ref regstate register_value SV48_Paddr -> mword ty12 -> M unit*)

(*val _set_SV48_Vaddr_PgOfs : register_ref regstate register_value SV48_Vaddr -> mword ty12 -> M unit*)

(*val Mk_SV32_Paddr : mword ty34 -> SV32_Paddr*)

val _ = Define `
 ((Mk_SV32_Paddr:(34)words$word -> SV32_Paddr) v=
    (<| SV32_Paddr_SV32_Paddr_chunk_0 := ((subrange_vec_dec v (( 33 : int):ii) (( 0 : int):ii)  :  34 words$word)) |>))`;


val _ = Define `
 ((get_SV32_Paddr_bits:SV32_Paddr ->(34)words$word) v=
    ((subrange_vec_dec v.SV32_Paddr_SV32_Paddr_chunk_0 (( 33 : int):ii) (( 0 : int):ii)  :  34 words$word)))`;


val _ = Define `
 ((set_SV32_Paddr_bits:((regstate),(register_value),(SV32_Paddr))register_ref ->(34)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       SV32_Paddr_SV32_Paddr_chunk_0 :=
         ((update_subrange_vec_dec r.SV32_Paddr_SV32_Paddr_chunk_0 (( 33 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 33 : int):ii) (( 0 : int):ii)  :  34 words$word))
            :  34 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_SV32_Paddr_bits:SV32_Paddr ->(34)words$word -> SV32_Paddr) v x=
    (( v with<|
     SV32_Paddr_SV32_Paddr_chunk_0 :=
       ((update_subrange_vec_dec v.SV32_Paddr_SV32_Paddr_chunk_0 (( 33 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 33 : int):ii) (( 0 : int):ii)  :  34 words$word))
          :  34 words$word)) |>)))`;


(*val _get_SV32_Paddr_PPNi : SV32_Paddr -> mword ty22*)

val _ = Define `
 ((get_SV32_Paddr_PPNi:SV32_Paddr ->(22)words$word) v=
    ((subrange_vec_dec v.SV32_Paddr_SV32_Paddr_chunk_0 (( 33 : int):ii) (( 12 : int):ii)  :  22 words$word)))`;


(*val _set_SV32_Paddr_PPNi : register_ref regstate register_value SV32_Paddr -> mword ty22 -> M unit*)

val _ = Define `
 ((set_SV32_Paddr_PPNi:((regstate),(register_value),(SV32_Paddr))register_ref ->(22)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       SV32_Paddr_SV32_Paddr_chunk_0 :=
         ((update_subrange_vec_dec r.SV32_Paddr_SV32_Paddr_chunk_0 (( 33 : int):ii) (( 12 : int):ii)
             ((subrange_vec_dec v (( 21 : int):ii) (( 0 : int):ii)  :  22 words$word))
            :  34 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_SV32_Paddr_PPNi : SV32_Paddr -> mword ty22 -> SV32_Paddr*)

val _ = Define `
 ((update_SV32_Paddr_PPNi:SV32_Paddr ->(22)words$word -> SV32_Paddr) v x=
    (( v with<|
     SV32_Paddr_SV32_Paddr_chunk_0 :=
       ((update_subrange_vec_dec v.SV32_Paddr_SV32_Paddr_chunk_0 (( 33 : int):ii) (( 12 : int):ii)
           ((subrange_vec_dec x (( 21 : int):ii) (( 0 : int):ii)  :  22 words$word))
          :  34 words$word)) |>)))`;


(*val _update_SV32_PTE_PPNi : SV32_PTE -> mword ty22 -> SV32_PTE*)

(*val _update_SV39_PTE_PPNi : SV39_PTE -> mword ty44 -> SV39_PTE*)

(*val _update_SV39_Paddr_PPNi : SV39_Paddr -> mword ty44 -> SV39_Paddr*)

(*val _update_SV48_PTE_PPNi : SV48_PTE -> mword ty44 -> SV48_PTE*)

(*val _update_SV48_Paddr_PPNi : SV48_Paddr -> mword ty44 -> SV48_Paddr*)

(*val _get_SV32_PTE_PPNi : SV32_PTE -> mword ty22*)

(*val _get_SV39_PTE_PPNi : SV39_PTE -> mword ty44*)

(*val _get_SV39_Paddr_PPNi : SV39_Paddr -> mword ty44*)

(*val _get_SV48_PTE_PPNi : SV48_PTE -> mword ty44*)

(*val _get_SV48_Paddr_PPNi : SV48_Paddr -> mword ty44*)

(*val _set_SV32_PTE_PPNi : register_ref regstate register_value SV32_PTE -> mword ty22 -> M unit*)

(*val _set_SV39_PTE_PPNi : register_ref regstate register_value SV39_PTE -> mword ty44 -> M unit*)

(*val _set_SV39_Paddr_PPNi : register_ref regstate register_value SV39_Paddr -> mword ty44 -> M unit*)

(*val _set_SV48_PTE_PPNi : register_ref regstate register_value SV48_PTE -> mword ty44 -> M unit*)

(*val _set_SV48_Paddr_PPNi : register_ref regstate register_value SV48_Paddr -> mword ty44 -> M unit*)

val _ = Define `
 ((get_SV32_Paddr_PgOfs:SV32_Paddr ->(12)words$word) v=
    ((subrange_vec_dec v.SV32_Paddr_SV32_Paddr_chunk_0 (( 11 : int):ii) (( 0 : int):ii)  :  12 words$word)))`;


val _ = Define `
 ((set_SV32_Paddr_PgOfs:((regstate),(register_value),(SV32_Paddr))register_ref ->(12)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       SV32_Paddr_SV32_Paddr_chunk_0 :=
         ((update_subrange_vec_dec r.SV32_Paddr_SV32_Paddr_chunk_0 (( 11 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 11 : int):ii) (( 0 : int):ii)  :  12 words$word))
            :  34 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_SV32_Paddr_PgOfs:SV32_Paddr ->(12)words$word -> SV32_Paddr) v x=
    (( v with<|
     SV32_Paddr_SV32_Paddr_chunk_0 :=
       ((update_subrange_vec_dec v.SV32_Paddr_SV32_Paddr_chunk_0 (( 11 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 11 : int):ii) (( 0 : int):ii)  :  12 words$word))
          :  34 words$word)) |>)))`;


(*val Mk_SV32_PTE : mword ty32 -> SV32_PTE*)

val _ = Define `
 ((Mk_SV32_PTE:(32)words$word -> SV32_PTE) v=
    (<| SV32_PTE_SV32_PTE_chunk_0 := ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) |>))`;


val _ = Define `
 ((get_SV32_PTE_bits:SV32_PTE ->(32)words$word) v=
    ((subrange_vec_dec v.SV32_PTE_SV32_PTE_chunk_0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)))`;


val _ = Define `
 ((set_SV32_PTE_bits:((regstate),(register_value),(SV32_PTE))register_ref ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       SV32_PTE_SV32_PTE_chunk_0 :=
         ((update_subrange_vec_dec r.SV32_PTE_SV32_PTE_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_SV32_PTE_bits:SV32_PTE ->(32)words$word -> SV32_PTE) v x=
    (( v with<|
     SV32_PTE_SV32_PTE_chunk_0 :=
       ((update_subrange_vec_dec v.SV32_PTE_SV32_PTE_chunk_0 (( 31 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
          :  32 words$word)) |>)))`;


val _ = Define `
 ((get_SV32_PTE_PPNi:SV32_PTE ->(22)words$word) v=
    ((subrange_vec_dec v.SV32_PTE_SV32_PTE_chunk_0 (( 31 : int):ii) (( 10 : int):ii)  :  22 words$word)))`;


val _ = Define `
 ((set_SV32_PTE_PPNi:((regstate),(register_value),(SV32_PTE))register_ref ->(22)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       SV32_PTE_SV32_PTE_chunk_0 :=
         ((update_subrange_vec_dec r.SV32_PTE_SV32_PTE_chunk_0 (( 31 : int):ii) (( 10 : int):ii)
             ((subrange_vec_dec v (( 21 : int):ii) (( 0 : int):ii)  :  22 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_SV32_PTE_PPNi:SV32_PTE ->(22)words$word -> SV32_PTE) v x=
    (( v with<|
     SV32_PTE_SV32_PTE_chunk_0 :=
       ((update_subrange_vec_dec v.SV32_PTE_SV32_PTE_chunk_0 (( 31 : int):ii) (( 10 : int):ii)
           ((subrange_vec_dec x (( 21 : int):ii) (( 0 : int):ii)  :  22 words$word))
          :  32 words$word)) |>)))`;


(*val _get_SV32_PTE_RSW : SV32_PTE -> mword ty2*)

val _ = Define `
 ((get_SV32_PTE_RSW:SV32_PTE ->(2)words$word) v=  ((subrange_vec_dec v.SV32_PTE_SV32_PTE_chunk_0 (( 9 : int):ii) (( 8 : int):ii)  :  2 words$word)))`;


(*val _set_SV32_PTE_RSW : register_ref regstate register_value SV32_PTE -> mword ty2 -> M unit*)

val _ = Define `
 ((set_SV32_PTE_RSW:((regstate),(register_value),(SV32_PTE))register_ref ->(2)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       SV32_PTE_SV32_PTE_chunk_0 :=
         ((update_subrange_vec_dec r.SV32_PTE_SV32_PTE_chunk_0 (( 9 : int):ii) (( 8 : int):ii)
             ((subrange_vec_dec v (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_SV32_PTE_RSW : SV32_PTE -> mword ty2 -> SV32_PTE*)

val _ = Define `
 ((update_SV32_PTE_RSW:SV32_PTE ->(2)words$word -> SV32_PTE) v x=
    (( v with<|
     SV32_PTE_SV32_PTE_chunk_0 :=
       ((update_subrange_vec_dec v.SV32_PTE_SV32_PTE_chunk_0 (( 9 : int):ii) (( 8 : int):ii)
           ((subrange_vec_dec x (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
          :  32 words$word)) |>)))`;


(*val _update_SV39_PTE_RSW : SV39_PTE -> mword ty2 -> SV39_PTE*)

(*val _update_SV48_PTE_RSW : SV48_PTE -> mword ty2 -> SV48_PTE*)

(*val _get_SV39_PTE_RSW : SV39_PTE -> mword ty2*)

(*val _get_SV48_PTE_RSW : SV48_PTE -> mword ty2*)

(*val _set_SV39_PTE_RSW : register_ref regstate register_value SV39_PTE -> mword ty2 -> M unit*)

(*val _set_SV48_PTE_RSW : register_ref regstate register_value SV48_PTE -> mword ty2 -> M unit*)

(*val _get_SV32_PTE_BITS : SV32_PTE -> mword ty8*)

val _ = Define `
 ((get_SV32_PTE_BITS:SV32_PTE ->(8)words$word) v=  ((subrange_vec_dec v.SV32_PTE_SV32_PTE_chunk_0 (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word)))`;


(*val _set_SV32_PTE_BITS : register_ref regstate register_value SV32_PTE -> mword ty8 -> M unit*)

val _ = Define `
 ((set_SV32_PTE_BITS:((regstate),(register_value),(SV32_PTE))register_ref ->(8)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       SV32_PTE_SV32_PTE_chunk_0 :=
         ((update_subrange_vec_dec r.SV32_PTE_SV32_PTE_chunk_0 (( 7 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
            :  32 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_SV32_PTE_BITS : SV32_PTE -> mword ty8 -> SV32_PTE*)

val _ = Define `
 ((update_SV32_PTE_BITS:SV32_PTE ->(8)words$word -> SV32_PTE) v x=
    (( v with<|
     SV32_PTE_SV32_PTE_chunk_0 :=
       ((update_subrange_vec_dec v.SV32_PTE_SV32_PTE_chunk_0 (( 7 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
          :  32 words$word)) |>)))`;


(*val _update_SV39_PTE_BITS : SV39_PTE -> mword ty8 -> SV39_PTE*)

(*val _update_SV48_PTE_BITS : SV48_PTE -> mword ty8 -> SV48_PTE*)

(*val _get_SV39_PTE_BITS : SV39_PTE -> mword ty8*)

(*val _get_SV48_PTE_BITS : SV48_PTE -> mword ty8*)

(*val _set_SV39_PTE_BITS : register_ref regstate register_value SV39_PTE -> mword ty8 -> M unit*)

(*val _set_SV48_PTE_BITS : register_ref regstate register_value SV48_PTE -> mword ty8 -> M unit*)

(*val curAsid64 : mword ty64 -> mword ty16*)

val _ = Define `
 ((curAsid64:(64)words$word ->(16)words$word) satp=
    (let s = (Mk_Satp64 satp) in
   (get_Satp64_Asid s  :  16 words$word)))`;


(*val curPTB64 : mword ty64 -> mword ty56*)

val _ = Define `
 ((curPTB64:(64)words$word ->(56)words$word) satp=
    (let s = (Mk_Satp64 satp) in
   (shiftl ((EXTZ (( 56 : int):ii) ((get_Satp64_PPN s  :  44 words$word))  :  56 words$word)) PAGESIZE_BITS
     :  56 words$word)))`;


val _ = Define `
((SV39_LEVEL_BITS:int)=  ((( 9 : int):ii)))`;


val _ = Define `
((SV39_LEVELS:int)=  ((( 3 : int):ii)))`;


val _ = Define `
((PTE39_LOG_SIZE:int)=  ((( 3 : int):ii)))`;


val _ = Define `
((PTE39_SIZE:int)=  ((( 8 : int):ii)))`;


(*val Mk_SV39_Vaddr : mword ty39 -> SV39_Vaddr*)

val _ = Define `
 ((Mk_SV39_Vaddr:(39)words$word -> SV39_Vaddr) v=
    (<| SV39_Vaddr_SV39_Vaddr_chunk_0 := ((subrange_vec_dec v (( 38 : int):ii) (( 0 : int):ii)  :  39 words$word)) |>))`;


val _ = Define `
 ((get_SV39_Vaddr_bits:SV39_Vaddr ->(39)words$word) v=
    ((subrange_vec_dec v.SV39_Vaddr_SV39_Vaddr_chunk_0 (( 38 : int):ii) (( 0 : int):ii)  :  39 words$word)))`;


val _ = Define `
 ((set_SV39_Vaddr_bits:((regstate),(register_value),(SV39_Vaddr))register_ref ->(39)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       SV39_Vaddr_SV39_Vaddr_chunk_0 :=
         ((update_subrange_vec_dec r.SV39_Vaddr_SV39_Vaddr_chunk_0 (( 38 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 38 : int):ii) (( 0 : int):ii)  :  39 words$word))
            :  39 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_SV39_Vaddr_bits:SV39_Vaddr ->(39)words$word -> SV39_Vaddr) v x=
    (( v with<|
     SV39_Vaddr_SV39_Vaddr_chunk_0 :=
       ((update_subrange_vec_dec v.SV39_Vaddr_SV39_Vaddr_chunk_0 (( 38 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 38 : int):ii) (( 0 : int):ii)  :  39 words$word))
          :  39 words$word)) |>)))`;


val _ = Define `
 ((get_SV39_Vaddr_VPNi:SV39_Vaddr ->(27)words$word) v=
    ((subrange_vec_dec v.SV39_Vaddr_SV39_Vaddr_chunk_0 (( 38 : int):ii) (( 12 : int):ii)  :  27 words$word)))`;


val _ = Define `
 ((set_SV39_Vaddr_VPNi:((regstate),(register_value),(SV39_Vaddr))register_ref ->(27)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       SV39_Vaddr_SV39_Vaddr_chunk_0 :=
         ((update_subrange_vec_dec r.SV39_Vaddr_SV39_Vaddr_chunk_0 (( 38 : int):ii) (( 12 : int):ii)
             ((subrange_vec_dec v (( 26 : int):ii) (( 0 : int):ii)  :  27 words$word))
            :  39 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_SV39_Vaddr_VPNi:SV39_Vaddr ->(27)words$word -> SV39_Vaddr) v x=
    (( v with<|
     SV39_Vaddr_SV39_Vaddr_chunk_0 :=
       ((update_subrange_vec_dec v.SV39_Vaddr_SV39_Vaddr_chunk_0 (( 38 : int):ii) (( 12 : int):ii)
           ((subrange_vec_dec x (( 26 : int):ii) (( 0 : int):ii)  :  27 words$word))
          :  39 words$word)) |>)))`;


val _ = Define `
 ((get_SV39_Vaddr_PgOfs:SV39_Vaddr ->(12)words$word) v=
    ((subrange_vec_dec v.SV39_Vaddr_SV39_Vaddr_chunk_0 (( 11 : int):ii) (( 0 : int):ii)  :  12 words$word)))`;


val _ = Define `
 ((set_SV39_Vaddr_PgOfs:((regstate),(register_value),(SV39_Vaddr))register_ref ->(12)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       SV39_Vaddr_SV39_Vaddr_chunk_0 :=
         ((update_subrange_vec_dec r.SV39_Vaddr_SV39_Vaddr_chunk_0 (( 11 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 11 : int):ii) (( 0 : int):ii)  :  12 words$word))
            :  39 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_SV39_Vaddr_PgOfs:SV39_Vaddr ->(12)words$word -> SV39_Vaddr) v x=
    (( v with<|
     SV39_Vaddr_SV39_Vaddr_chunk_0 :=
       ((update_subrange_vec_dec v.SV39_Vaddr_SV39_Vaddr_chunk_0 (( 11 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 11 : int):ii) (( 0 : int):ii)  :  12 words$word))
          :  39 words$word)) |>)))`;


(*val Mk_SV39_Paddr : mword ty56 -> SV39_Paddr*)

val _ = Define `
 ((Mk_SV39_Paddr:(56)words$word -> SV39_Paddr) v=
    (<| SV39_Paddr_SV39_Paddr_chunk_0 := ((subrange_vec_dec v (( 55 : int):ii) (( 0 : int):ii)  :  56 words$word)) |>))`;


val _ = Define `
 ((get_SV39_Paddr_bits:SV39_Paddr ->(56)words$word) v=
    ((subrange_vec_dec v.SV39_Paddr_SV39_Paddr_chunk_0 (( 55 : int):ii) (( 0 : int):ii)  :  56 words$word)))`;


val _ = Define `
 ((set_SV39_Paddr_bits:((regstate),(register_value),(SV39_Paddr))register_ref ->(56)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       SV39_Paddr_SV39_Paddr_chunk_0 :=
         ((update_subrange_vec_dec r.SV39_Paddr_SV39_Paddr_chunk_0 (( 55 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 55 : int):ii) (( 0 : int):ii)  :  56 words$word))
            :  56 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_SV39_Paddr_bits:SV39_Paddr ->(56)words$word -> SV39_Paddr) v x=
    (( v with<|
     SV39_Paddr_SV39_Paddr_chunk_0 :=
       ((update_subrange_vec_dec v.SV39_Paddr_SV39_Paddr_chunk_0 (( 55 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 55 : int):ii) (( 0 : int):ii)  :  56 words$word))
          :  56 words$word)) |>)))`;


val _ = Define `
 ((get_SV39_Paddr_PPNi:SV39_Paddr ->(44)words$word) v=
    ((subrange_vec_dec v.SV39_Paddr_SV39_Paddr_chunk_0 (( 55 : int):ii) (( 12 : int):ii)  :  44 words$word)))`;


val _ = Define `
 ((set_SV39_Paddr_PPNi:((regstate),(register_value),(SV39_Paddr))register_ref ->(44)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       SV39_Paddr_SV39_Paddr_chunk_0 :=
         ((update_subrange_vec_dec r.SV39_Paddr_SV39_Paddr_chunk_0 (( 55 : int):ii) (( 12 : int):ii)
             ((subrange_vec_dec v (( 43 : int):ii) (( 0 : int):ii)  :  44 words$word))
            :  56 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_SV39_Paddr_PPNi:SV39_Paddr ->(44)words$word -> SV39_Paddr) v x=
    (( v with<|
     SV39_Paddr_SV39_Paddr_chunk_0 :=
       ((update_subrange_vec_dec v.SV39_Paddr_SV39_Paddr_chunk_0 (( 55 : int):ii) (( 12 : int):ii)
           ((subrange_vec_dec x (( 43 : int):ii) (( 0 : int):ii)  :  44 words$word))
          :  56 words$word)) |>)))`;


val _ = Define `
 ((get_SV39_Paddr_PgOfs:SV39_Paddr ->(12)words$word) v=
    ((subrange_vec_dec v.SV39_Paddr_SV39_Paddr_chunk_0 (( 11 : int):ii) (( 0 : int):ii)  :  12 words$word)))`;


val _ = Define `
 ((set_SV39_Paddr_PgOfs:((regstate),(register_value),(SV39_Paddr))register_ref ->(12)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       SV39_Paddr_SV39_Paddr_chunk_0 :=
         ((update_subrange_vec_dec r.SV39_Paddr_SV39_Paddr_chunk_0 (( 11 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 11 : int):ii) (( 0 : int):ii)  :  12 words$word))
            :  56 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_SV39_Paddr_PgOfs:SV39_Paddr ->(12)words$word -> SV39_Paddr) v x=
    (( v with<|
     SV39_Paddr_SV39_Paddr_chunk_0 :=
       ((update_subrange_vec_dec v.SV39_Paddr_SV39_Paddr_chunk_0 (( 11 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 11 : int):ii) (( 0 : int):ii)  :  12 words$word))
          :  56 words$word)) |>)))`;


(*val Mk_SV39_PTE : mword ty64 -> SV39_PTE*)

val _ = Define `
 ((Mk_SV39_PTE:(64)words$word -> SV39_PTE) v=
    (<| SV39_PTE_SV39_PTE_chunk_0 := ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)) |>))`;


val _ = Define `
 ((get_SV39_PTE_bits:SV39_PTE ->(64)words$word) v=
    ((subrange_vec_dec v.SV39_PTE_SV39_PTE_chunk_0 (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)))`;


val _ = Define `
 ((set_SV39_PTE_bits:((regstate),(register_value),(SV39_PTE))register_ref ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       SV39_PTE_SV39_PTE_chunk_0 :=
         ((update_subrange_vec_dec r.SV39_PTE_SV39_PTE_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
            :  64 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_SV39_PTE_bits:SV39_PTE ->(64)words$word -> SV39_PTE) v x=
    (( v with<|
     SV39_PTE_SV39_PTE_chunk_0 :=
       ((update_subrange_vec_dec v.SV39_PTE_SV39_PTE_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
          :  64 words$word)) |>)))`;


(*val _get_SV39_PTE_Ext : SV39_PTE -> mword ty10*)

val _ = Define `
 ((get_SV39_PTE_Ext:SV39_PTE ->(10)words$word) v=
    ((subrange_vec_dec v.SV39_PTE_SV39_PTE_chunk_0 (( 63 : int):ii) (( 54 : int):ii)  :  10 words$word)))`;


(*val _set_SV39_PTE_Ext : register_ref regstate register_value SV39_PTE -> mword ty10 -> M unit*)

val _ = Define `
 ((set_SV39_PTE_Ext:((regstate),(register_value),(SV39_PTE))register_ref ->(10)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       SV39_PTE_SV39_PTE_chunk_0 :=
         ((update_subrange_vec_dec r.SV39_PTE_SV39_PTE_chunk_0 (( 63 : int):ii) (( 54 : int):ii)
             ((subrange_vec_dec v (( 9 : int):ii) (( 0 : int):ii)  :  10 words$word))
            :  64 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


(*val _update_SV39_PTE_Ext : SV39_PTE -> mword ty10 -> SV39_PTE*)

val _ = Define `
 ((update_SV39_PTE_Ext:SV39_PTE ->(10)words$word -> SV39_PTE) v x=
    (( v with<|
     SV39_PTE_SV39_PTE_chunk_0 :=
       ((update_subrange_vec_dec v.SV39_PTE_SV39_PTE_chunk_0 (( 63 : int):ii) (( 54 : int):ii)
           ((subrange_vec_dec x (( 9 : int):ii) (( 0 : int):ii)  :  10 words$word))
          :  64 words$word)) |>)))`;


(*val _update_SV48_PTE_Ext : SV48_PTE -> mword ty10 -> SV48_PTE*)

(*val _get_SV48_PTE_Ext : SV48_PTE -> mword ty10*)

(*val _set_SV48_PTE_Ext : register_ref regstate register_value SV48_PTE -> mword ty10 -> M unit*)

val _ = Define `
 ((get_SV39_PTE_PPNi:SV39_PTE ->(44)words$word) v=
    ((subrange_vec_dec v.SV39_PTE_SV39_PTE_chunk_0 (( 53 : int):ii) (( 10 : int):ii)  :  44 words$word)))`;


val _ = Define `
 ((set_SV39_PTE_PPNi:((regstate),(register_value),(SV39_PTE))register_ref ->(44)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       SV39_PTE_SV39_PTE_chunk_0 :=
         ((update_subrange_vec_dec r.SV39_PTE_SV39_PTE_chunk_0 (( 53 : int):ii) (( 10 : int):ii)
             ((subrange_vec_dec v (( 43 : int):ii) (( 0 : int):ii)  :  44 words$word))
            :  64 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_SV39_PTE_PPNi:SV39_PTE ->(44)words$word -> SV39_PTE) v x=
    (( v with<|
     SV39_PTE_SV39_PTE_chunk_0 :=
       ((update_subrange_vec_dec v.SV39_PTE_SV39_PTE_chunk_0 (( 53 : int):ii) (( 10 : int):ii)
           ((subrange_vec_dec x (( 43 : int):ii) (( 0 : int):ii)  :  44 words$word))
          :  64 words$word)) |>)))`;


val _ = Define `
 ((get_SV39_PTE_RSW:SV39_PTE ->(2)words$word) v=  ((subrange_vec_dec v.SV39_PTE_SV39_PTE_chunk_0 (( 9 : int):ii) (( 8 : int):ii)  :  2 words$word)))`;


val _ = Define `
 ((set_SV39_PTE_RSW:((regstate),(register_value),(SV39_PTE))register_ref ->(2)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       SV39_PTE_SV39_PTE_chunk_0 :=
         ((update_subrange_vec_dec r.SV39_PTE_SV39_PTE_chunk_0 (( 9 : int):ii) (( 8 : int):ii)
             ((subrange_vec_dec v (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
            :  64 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_SV39_PTE_RSW:SV39_PTE ->(2)words$word -> SV39_PTE) v x=
    (( v with<|
     SV39_PTE_SV39_PTE_chunk_0 :=
       ((update_subrange_vec_dec v.SV39_PTE_SV39_PTE_chunk_0 (( 9 : int):ii) (( 8 : int):ii)
           ((subrange_vec_dec x (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
          :  64 words$word)) |>)))`;


val _ = Define `
 ((get_SV39_PTE_BITS:SV39_PTE ->(8)words$word) v=  ((subrange_vec_dec v.SV39_PTE_SV39_PTE_chunk_0 (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word)))`;


val _ = Define `
 ((set_SV39_PTE_BITS:((regstate),(register_value),(SV39_PTE))register_ref ->(8)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       SV39_PTE_SV39_PTE_chunk_0 :=
         ((update_subrange_vec_dec r.SV39_PTE_SV39_PTE_chunk_0 (( 7 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
            :  64 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_SV39_PTE_BITS:SV39_PTE ->(8)words$word -> SV39_PTE) v x=
    (( v with<|
     SV39_PTE_SV39_PTE_chunk_0 :=
       ((update_subrange_vec_dec v.SV39_PTE_SV39_PTE_chunk_0 (( 7 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
          :  64 words$word)) |>)))`;


val _ = Define `
((SV48_LEVEL_BITS:int)=  ((( 9 : int):ii)))`;


val _ = Define `
((SV48_LEVELS:int)=  ((( 4 : int):ii)))`;


val _ = Define `
((PTE48_LOG_SIZE:int)=  ((( 3 : int):ii)))`;


val _ = Define `
((PTE48_SIZE:int)=  ((( 8 : int):ii)))`;


(*val Mk_SV48_Vaddr : mword ty48 -> SV48_Vaddr*)

val _ = Define `
 ((Mk_SV48_Vaddr:(48)words$word -> SV48_Vaddr) v=
    (<| SV48_Vaddr_SV48_Vaddr_chunk_0 := ((subrange_vec_dec v (( 47 : int):ii) (( 0 : int):ii)  :  48 words$word)) |>))`;


val _ = Define `
 ((get_SV48_Vaddr_bits:SV48_Vaddr ->(48)words$word) v=
    ((subrange_vec_dec v.SV48_Vaddr_SV48_Vaddr_chunk_0 (( 47 : int):ii) (( 0 : int):ii)  :  48 words$word)))`;


val _ = Define `
 ((set_SV48_Vaddr_bits:((regstate),(register_value),(SV48_Vaddr))register_ref ->(48)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       SV48_Vaddr_SV48_Vaddr_chunk_0 :=
         ((update_subrange_vec_dec r.SV48_Vaddr_SV48_Vaddr_chunk_0 (( 47 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 47 : int):ii) (( 0 : int):ii)  :  48 words$word))
            :  48 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_SV48_Vaddr_bits:SV48_Vaddr ->(48)words$word -> SV48_Vaddr) v x=
    (( v with<|
     SV48_Vaddr_SV48_Vaddr_chunk_0 :=
       ((update_subrange_vec_dec v.SV48_Vaddr_SV48_Vaddr_chunk_0 (( 47 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 47 : int):ii) (( 0 : int):ii)  :  48 words$word))
          :  48 words$word)) |>)))`;


val _ = Define `
 ((get_SV48_Vaddr_VPNi:SV48_Vaddr ->(27)words$word) v=
    ((subrange_vec_dec v.SV48_Vaddr_SV48_Vaddr_chunk_0 (( 38 : int):ii) (( 12 : int):ii)  :  27 words$word)))`;


val _ = Define `
 ((set_SV48_Vaddr_VPNi:((regstate),(register_value),(SV48_Vaddr))register_ref ->(27)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       SV48_Vaddr_SV48_Vaddr_chunk_0 :=
         ((update_subrange_vec_dec r.SV48_Vaddr_SV48_Vaddr_chunk_0 (( 38 : int):ii) (( 12 : int):ii)
             ((subrange_vec_dec v (( 26 : int):ii) (( 0 : int):ii)  :  27 words$word))
            :  48 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_SV48_Vaddr_VPNi:SV48_Vaddr ->(27)words$word -> SV48_Vaddr) v x=
    (( v with<|
     SV48_Vaddr_SV48_Vaddr_chunk_0 :=
       ((update_subrange_vec_dec v.SV48_Vaddr_SV48_Vaddr_chunk_0 (( 38 : int):ii) (( 12 : int):ii)
           ((subrange_vec_dec x (( 26 : int):ii) (( 0 : int):ii)  :  27 words$word))
          :  48 words$word)) |>)))`;


val _ = Define `
 ((get_SV48_Vaddr_PgOfs:SV48_Vaddr ->(12)words$word) v=
    ((subrange_vec_dec v.SV48_Vaddr_SV48_Vaddr_chunk_0 (( 11 : int):ii) (( 0 : int):ii)  :  12 words$word)))`;


val _ = Define `
 ((set_SV48_Vaddr_PgOfs:((regstate),(register_value),(SV48_Vaddr))register_ref ->(12)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       SV48_Vaddr_SV48_Vaddr_chunk_0 :=
         ((update_subrange_vec_dec r.SV48_Vaddr_SV48_Vaddr_chunk_0 (( 11 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 11 : int):ii) (( 0 : int):ii)  :  12 words$word))
            :  48 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_SV48_Vaddr_PgOfs:SV48_Vaddr ->(12)words$word -> SV48_Vaddr) v x=
    (( v with<|
     SV48_Vaddr_SV48_Vaddr_chunk_0 :=
       ((update_subrange_vec_dec v.SV48_Vaddr_SV48_Vaddr_chunk_0 (( 11 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 11 : int):ii) (( 0 : int):ii)  :  12 words$word))
          :  48 words$word)) |>)))`;


(*val Mk_SV48_Paddr : mword ty56 -> SV48_Paddr*)

val _ = Define `
 ((Mk_SV48_Paddr:(56)words$word -> SV48_Paddr) v=
    (<| SV48_Paddr_SV48_Paddr_chunk_0 := ((subrange_vec_dec v (( 55 : int):ii) (( 0 : int):ii)  :  56 words$word)) |>))`;


val _ = Define `
 ((get_SV48_Paddr_bits:SV48_Paddr ->(56)words$word) v=
    ((subrange_vec_dec v.SV48_Paddr_SV48_Paddr_chunk_0 (( 55 : int):ii) (( 0 : int):ii)  :  56 words$word)))`;


val _ = Define `
 ((set_SV48_Paddr_bits:((regstate),(register_value),(SV48_Paddr))register_ref ->(56)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       SV48_Paddr_SV48_Paddr_chunk_0 :=
         ((update_subrange_vec_dec r.SV48_Paddr_SV48_Paddr_chunk_0 (( 55 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 55 : int):ii) (( 0 : int):ii)  :  56 words$word))
            :  56 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_SV48_Paddr_bits:SV48_Paddr ->(56)words$word -> SV48_Paddr) v x=
    (( v with<|
     SV48_Paddr_SV48_Paddr_chunk_0 :=
       ((update_subrange_vec_dec v.SV48_Paddr_SV48_Paddr_chunk_0 (( 55 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 55 : int):ii) (( 0 : int):ii)  :  56 words$word))
          :  56 words$word)) |>)))`;


val _ = Define `
 ((get_SV48_Paddr_PPNi:SV48_Paddr ->(44)words$word) v=
    ((subrange_vec_dec v.SV48_Paddr_SV48_Paddr_chunk_0 (( 55 : int):ii) (( 12 : int):ii)  :  44 words$word)))`;


val _ = Define `
 ((set_SV48_Paddr_PPNi:((regstate),(register_value),(SV48_Paddr))register_ref ->(44)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       SV48_Paddr_SV48_Paddr_chunk_0 :=
         ((update_subrange_vec_dec r.SV48_Paddr_SV48_Paddr_chunk_0 (( 55 : int):ii) (( 12 : int):ii)
             ((subrange_vec_dec v (( 43 : int):ii) (( 0 : int):ii)  :  44 words$word))
            :  56 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_SV48_Paddr_PPNi:SV48_Paddr ->(44)words$word -> SV48_Paddr) v x=
    (( v with<|
     SV48_Paddr_SV48_Paddr_chunk_0 :=
       ((update_subrange_vec_dec v.SV48_Paddr_SV48_Paddr_chunk_0 (( 55 : int):ii) (( 12 : int):ii)
           ((subrange_vec_dec x (( 43 : int):ii) (( 0 : int):ii)  :  44 words$word))
          :  56 words$word)) |>)))`;


val _ = Define `
 ((get_SV48_Paddr_PgOfs:SV48_Paddr ->(12)words$word) v=
    ((subrange_vec_dec v.SV48_Paddr_SV48_Paddr_chunk_0 (( 11 : int):ii) (( 0 : int):ii)  :  12 words$word)))`;


val _ = Define `
 ((set_SV48_Paddr_PgOfs:((regstate),(register_value),(SV48_Paddr))register_ref ->(12)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       SV48_Paddr_SV48_Paddr_chunk_0 :=
         ((update_subrange_vec_dec r.SV48_Paddr_SV48_Paddr_chunk_0 (( 11 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 11 : int):ii) (( 0 : int):ii)  :  12 words$word))
            :  56 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_SV48_Paddr_PgOfs:SV48_Paddr ->(12)words$word -> SV48_Paddr) v x=
    (( v with<|
     SV48_Paddr_SV48_Paddr_chunk_0 :=
       ((update_subrange_vec_dec v.SV48_Paddr_SV48_Paddr_chunk_0 (( 11 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 11 : int):ii) (( 0 : int):ii)  :  12 words$word))
          :  56 words$word)) |>)))`;


(*val Mk_SV48_PTE : mword ty64 -> SV48_PTE*)

val _ = Define `
 ((Mk_SV48_PTE:(64)words$word -> SV48_PTE) v=
    (<| SV48_PTE_SV48_PTE_chunk_0 := ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)) |>))`;


val _ = Define `
 ((get_SV48_PTE_bits:SV48_PTE ->(64)words$word) v=
    ((subrange_vec_dec v.SV48_PTE_SV48_PTE_chunk_0 (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)))`;


val _ = Define `
 ((set_SV48_PTE_bits:((regstate),(register_value),(SV48_PTE))register_ref ->(64)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       SV48_PTE_SV48_PTE_chunk_0 :=
         ((update_subrange_vec_dec r.SV48_PTE_SV48_PTE_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
            :  64 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_SV48_PTE_bits:SV48_PTE ->(64)words$word -> SV48_PTE) v x=
    (( v with<|
     SV48_PTE_SV48_PTE_chunk_0 :=
       ((update_subrange_vec_dec v.SV48_PTE_SV48_PTE_chunk_0 (( 63 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
          :  64 words$word)) |>)))`;


val _ = Define `
 ((get_SV48_PTE_Ext:SV48_PTE ->(10)words$word) v=
    ((subrange_vec_dec v.SV48_PTE_SV48_PTE_chunk_0 (( 63 : int):ii) (( 54 : int):ii)  :  10 words$word)))`;


val _ = Define `
 ((set_SV48_PTE_Ext:((regstate),(register_value),(SV48_PTE))register_ref ->(10)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       SV48_PTE_SV48_PTE_chunk_0 :=
         ((update_subrange_vec_dec r.SV48_PTE_SV48_PTE_chunk_0 (( 63 : int):ii) (( 54 : int):ii)
             ((subrange_vec_dec v (( 9 : int):ii) (( 0 : int):ii)  :  10 words$word))
            :  64 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_SV48_PTE_Ext:SV48_PTE ->(10)words$word -> SV48_PTE) v x=
    (( v with<|
     SV48_PTE_SV48_PTE_chunk_0 :=
       ((update_subrange_vec_dec v.SV48_PTE_SV48_PTE_chunk_0 (( 63 : int):ii) (( 54 : int):ii)
           ((subrange_vec_dec x (( 9 : int):ii) (( 0 : int):ii)  :  10 words$word))
          :  64 words$word)) |>)))`;


val _ = Define `
 ((get_SV48_PTE_PPNi:SV48_PTE ->(44)words$word) v=
    ((subrange_vec_dec v.SV48_PTE_SV48_PTE_chunk_0 (( 53 : int):ii) (( 10 : int):ii)  :  44 words$word)))`;


val _ = Define `
 ((set_SV48_PTE_PPNi:((regstate),(register_value),(SV48_PTE))register_ref ->(44)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       SV48_PTE_SV48_PTE_chunk_0 :=
         ((update_subrange_vec_dec r.SV48_PTE_SV48_PTE_chunk_0 (( 53 : int):ii) (( 10 : int):ii)
             ((subrange_vec_dec v (( 43 : int):ii) (( 0 : int):ii)  :  44 words$word))
            :  64 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_SV48_PTE_PPNi:SV48_PTE ->(44)words$word -> SV48_PTE) v x=
    (( v with<|
     SV48_PTE_SV48_PTE_chunk_0 :=
       ((update_subrange_vec_dec v.SV48_PTE_SV48_PTE_chunk_0 (( 53 : int):ii) (( 10 : int):ii)
           ((subrange_vec_dec x (( 43 : int):ii) (( 0 : int):ii)  :  44 words$word))
          :  64 words$word)) |>)))`;


val _ = Define `
 ((get_SV48_PTE_RSW:SV48_PTE ->(2)words$word) v=  ((subrange_vec_dec v.SV48_PTE_SV48_PTE_chunk_0 (( 9 : int):ii) (( 8 : int):ii)  :  2 words$word)))`;


val _ = Define `
 ((set_SV48_PTE_RSW:((regstate),(register_value),(SV48_PTE))register_ref ->(2)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       SV48_PTE_SV48_PTE_chunk_0 :=
         ((update_subrange_vec_dec r.SV48_PTE_SV48_PTE_chunk_0 (( 9 : int):ii) (( 8 : int):ii)
             ((subrange_vec_dec v (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
            :  64 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_SV48_PTE_RSW:SV48_PTE ->(2)words$word -> SV48_PTE) v x=
    (( v with<|
     SV48_PTE_SV48_PTE_chunk_0 :=
       ((update_subrange_vec_dec v.SV48_PTE_SV48_PTE_chunk_0 (( 9 : int):ii) (( 8 : int):ii)
           ((subrange_vec_dec x (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word))
          :  64 words$word)) |>)))`;


val _ = Define `
 ((get_SV48_PTE_BITS:SV48_PTE ->(8)words$word) v=  ((subrange_vec_dec v.SV48_PTE_SV48_PTE_chunk_0 (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word)))`;


val _ = Define `
 ((set_SV48_PTE_BITS:((regstate),(register_value),(SV48_PTE))register_ref ->(8)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) r_ref v=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS r_ref) (\ r . 
   let r =
     (( r with<|
       SV48_PTE_SV48_PTE_chunk_0 :=
         ((update_subrange_vec_dec r.SV48_PTE_SV48_PTE_chunk_0 (( 7 : int):ii) (( 0 : int):ii)
             ((subrange_vec_dec v (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
            :  64 words$word)) |>)) in
   sail2_state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((update_SV48_PTE_BITS:SV48_PTE ->(8)words$word -> SV48_PTE) v x=
    (( v with<|
     SV48_PTE_SV48_PTE_chunk_0 :=
       ((update_subrange_vec_dec v.SV48_PTE_SV48_PTE_chunk_0 (( 7 : int):ii) (( 0 : int):ii)
           ((subrange_vec_dec x (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
          :  64 words$word)) |>)))`;


(*val make_TLB_Entry : forall 'asidlen 'palen 'ptelen 'valen. Size 'asidlen, Size 'palen, Size 'ptelen, Size 'valen => mword 'asidlen -> bool -> mword 'valen -> mword 'palen -> mword 'ptelen -> ii -> mword 'palen -> ii -> M (TLB_Entry 'asidlen 'valen 'palen 'ptelen)*)

val _ = Define `
 ((make_TLB_Entry:'asidlen words$word -> bool -> 'valen words$word -> 'palen words$word -> 'ptelen words$word -> int -> 'palen words$word -> int ->(regstate)sail2_state_monad$sequential_state ->(((('asidlen,'valen,'palen,'ptelen)TLB_Entry),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) asid global vAddr pAddr pte level pteAddr levelBitSize=
    (let (shift : ii) = (PAGESIZE_BITS + ((level * levelBitSize))) in
   let (vAddrMask :  'valen words$word) =
     ((sub_vec_int
        ((shiftl
            ((xor_vec vAddr
                ((xor_vec vAddr ((EXTZ ((int_of_num (words$word_len vAddr))) (0b1w :  1 words$word)  :  'valen words$word))
                   :  'valen words$word))
               :  'valen words$word)) shift
           :  'valen words$word)) (( 1 : int):ii)
       :  'valen words$word)) in
   let (vMatchMask :  'valen words$word) = ((not_vec vAddrMask  :  'valen words$word)) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS mcycle_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   sail2_state_monad$returnS (<| TLB_Entry_asid := asid; 
              TLB_Entry_global := global; 
              TLB_Entry_pte := pte; 
              TLB_Entry_pteAddr := pteAddr; 
              TLB_Entry_vAddrMask := vAddrMask; 
              TLB_Entry_vMatchMask := vMatchMask; 
              TLB_Entry_vAddr := ((and_vec vAddr vMatchMask  :  'valen words$word)); 
              TLB_Entry_pAddr :=
                ((shiftl ((shiftr pAddr shift  :  'palen words$word)) shift  :  'palen words$word)); 
              TLB_Entry_age := w__0 |>))))`;


(*val match_TLB_Entry : forall 'asidlen 'palen 'ptelen 'valen. Size 'asidlen, Size 'valen => TLB_Entry 'asidlen 'valen 'palen 'ptelen -> mword 'asidlen -> mword 'valen -> bool*)

val _ = Define `
 ((match_TLB_Entry:('asidlen,'valen,'palen,'ptelen)TLB_Entry -> 'asidlen words$word -> 'valen words$word -> bool) ent asid vaddr=
    ((((ent.TLB_Entry_global \/ (((ent.TLB_Entry_asid = asid)))))) /\ (((ent.TLB_Entry_vAddr = ((and_vec ent.TLB_Entry_vMatchMask vaddr  :  'valen words$word)))))))`;


(*val flush_TLB_Entry : forall 'asidlen 'palen 'ptelen 'valen. Size 'asidlen, Size 'valen => TLB_Entry 'asidlen 'valen 'palen 'ptelen -> maybe (mword 'asidlen) -> maybe (mword 'valen) -> bool*)

val _ = Define `
 ((flush_TLB_Entry:('asidlen,'valen,'palen,'ptelen)TLB_Entry ->('asidlen words$word)option ->('valen words$word)option -> bool) e asid addr=
    ((case (asid, addr) of
     (NONE, NONE) => T
   | (NONE, SOME (a)) =>
      (e.TLB_Entry_vAddr = ((and_vec e.TLB_Entry_vMatchMask a  :  'valen words$word)))
   | (SOME (i), NONE) => ((((e.TLB_Entry_asid = i))) /\ ((~ e.TLB_Entry_global)))
   | (SOME (i), SOME (a)) =>
      ((((e.TLB_Entry_asid = i))) /\ ((((((e.TLB_Entry_vAddr = ((and_vec a e.TLB_Entry_vMatchMask  :  'valen words$word))))) /\ ((~ e.TLB_Entry_global))))))
   )))`;


(*val to_phys_addr : mword ty34 -> mword ty32*)

val _ = Define `
 ((to_phys_addr:(34)words$word ->(32)words$word) a=  ((subrange_vec_dec a (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)))`;


(*val walk32 : mword ty32 -> AccessType unit -> Privilege -> bool -> bool -> mword ty34 -> ii -> bool -> unit -> M (PTW_Result (mword ty34) SV32_PTE)*)

 val walk32_defn = Hol_defn "walk32" `
 ((walk32:(32)words$word ->(unit)AccessType -> Privilege -> bool -> bool ->(34)words$word -> int -> bool -> unit ->(regstate)sail2_state_monad$sequential_state ->((((((34)words$word),(SV32_PTE))PTW_Result),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) vaddr ac priv mxr do_sum ptb level global ext_ptw=
    (let va = (Mk_SV32_Vaddr vaddr) in
   let (pt_ofs : paddr32) =
     ((shiftl
        ((EXTZ (( 34 : int):ii)
            ((subrange_vec_dec
                ((shiftr ((get_SV32_Vaddr_VPNi va  :  20 words$word))
                    ((level * SV32_LEVEL_BITS))
                   :  20 words$word)) ((SV32_LEVEL_BITS - (( 1 : int):ii))) (( 0 : int):ii)
               :  10 words$word))
           :  34 words$word)) PTE32_LOG_SIZE
       :  34 words$word)) in
   let pte_addr = ((add_vec ptb pt_ofs  :  34 words$word)) in sail2_state_monad$bindS
   (mem_read_priv (Read Data) Supervisor ((to_phys_addr pte_addr  :  32 words$word)) (( 4 : int):ii) F F
      F
     : ( ( 32 words$word)MemoryOpResult) M) (\ (w__0 : ( 32 words$word) MemoryOpResult) . 
   (case w__0 of
     MemException (_) => sail2_state_monad$returnS (PTW_Failure (PTW_Access () , ext_ptw))
   | MemValue (v) =>
      let pte = (Mk_SV32_PTE v) in
      let pbits = ((get_SV32_PTE_BITS pte  :  8 words$word)) in
      let (ext_pte : extPte) = default_sv32_ext_pte in
      let pattr = (Mk_PTE_Bits pbits) in
      let is_global =
        (global \/ (((((get_PTE_Bits_G pattr  :  1 words$word)) = (0b1w :  1 words$word))))) in
      if ((isInvalidPTE pbits ext_pte)) then sail2_state_monad$returnS (PTW_Failure (PTW_Invalid_PTE () , ext_ptw))
      else if ((isPTEPtr pbits ext_pte)) then
        if ((level > (( 0 : int):ii))) then
          (walk32 vaddr ac priv mxr do_sum
             ((shiftl ((EXTZ (( 34 : int):ii) ((get_SV32_PTE_PPNi pte  :  22 words$word))  :  34 words$word))
                 PAGESIZE_BITS
                :  34 words$word)) ((level - (( 1 : int):ii))) is_global ext_ptw
            : ( (( 34 words$word), SV32_PTE)PTW_Result) M)
        else sail2_state_monad$returnS (PTW_Failure (PTW_Invalid_PTE () , ext_ptw))
      else sail2_state_monad$bindS
        (checkPTEPermission ac priv mxr do_sum pattr ext_pte ext_ptw) (\ (w__3 : PTE_Check) . 
        sail2_state_monad$returnS ((case w__3 of
          PTE_Check_Failure ((ext_ptw, ext_ptw_fail)) =>
           PTW_Failure (ext_get_ptw_error ext_ptw_fail, ext_ptw)
        | PTE_Check_Success (ext_ptw) =>
           if ((level > (( 0 : int):ii))) then
             let mask =
               ((sub_vec_int
                  ((shiftl
                      ((xor_vec ((get_SV32_PTE_PPNi pte  :  22 words$word))
                          ((xor_vec ((get_SV32_PTE_PPNi pte  :  22 words$word))
                              ((EXTZ (( 22 : int):ii) (0b1w :  1 words$word)  :  22 words$word))
                             :  22 words$word))
                         :  22 words$word)) ((level * SV32_LEVEL_BITS))
                     :  22 words$word)) (( 1 : int):ii)
                 :  22 words$word)) in
             if (((((and_vec ((get_SV32_PTE_PPNi pte  :  22 words$word)) mask  :  22 words$word)) <> ((EXTZ (( 22 : int):ii) (0b0w :  1 words$word)  :  22 words$word))))) then
               PTW_Failure (PTW_Misaligned () , ext_ptw)
             else
               let ppn =
                 ((or_vec ((get_SV32_PTE_PPNi pte  :  22 words$word))
                    ((and_vec
                        ((EXTZ (( 22 : int):ii) ((get_SV32_Vaddr_VPNi va  :  20 words$word))  :  22 words$word))
                        mask
                       :  22 words$word))
                   :  22 words$word)) in
               PTW_Success ((concat_vec ppn ((get_SV32_Vaddr_PgOfs va  :  12 words$word))  :  34 words$word),
                            pte,
                            pte_addr,
                            level,
                            is_global,
                            ext_ptw)
           else
             PTW_Success ((concat_vec ((get_SV32_PTE_PPNi pte  :  22 words$word))
                             ((get_SV32_Vaddr_PgOfs va  :  12 words$word))
                            :  34 words$word),
                          pte,
                          pte_addr,
                          level,
                          is_global,
                          ext_ptw)
        )))
   ))))`;

val _ = Lib.with_flag (computeLib.auto_import_definitions, false) Defn.save_defn walk32_defn;

(*val lookup_TLB32 : mword ty9 -> mword ty32 -> M (maybe ((ii * TLB_Entry ty9 ty32 ty34 ty32)))*)

val _ = Define `
 ((lookup_TLB32:(9)words$word ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->((((int#((9),(32),(34),(32))TLB_Entry)option),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) asid vaddr=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS tlb32_ref) (\ (w__0 :  ( (9, 32, 34, 32)TLB_Entry)option) . 
   sail2_state_monad$returnS ((case w__0 of
     NONE => NONE
   | SOME (e) => if ((match_TLB_Entry e asid vaddr)) then SOME ((( 0 : int):ii), e) else NONE
   )))))`;


(*val add_to_TLB32 : mword ty9 -> mword ty32 -> mword ty34 -> SV32_PTE -> mword ty34 -> ii -> bool -> M unit*)

val _ = Define `
 ((add_to_TLB32:(9)words$word ->(32)words$word ->(34)words$word -> SV32_PTE ->(34)words$word -> int -> bool ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) asid vAddr pAddr pte pteAddr level global=  (sail2_state_monad$bindS
   (make_TLB_Entry asid global vAddr pAddr ((get_SV32_PTE_bits pte  :  32 words$word)) level pteAddr
     SV32_LEVEL_BITS) (\ (ent : TLB32_Entry) . 
   sail2_state_monad$write_regS tlb32_ref (SOME ent))))`;


(*val write_TLB32 : ii -> TLB_Entry ty9 ty32 ty34 ty32 -> M unit*)

val _ = Define `
 ((write_TLB32:int ->((9),(32),(34),(32))TLB_Entry ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (idx : ii) (ent : TLB32_Entry)=  (sail2_state_monad$write_regS tlb32_ref (SOME ent)))`;


(*val flush_TLB32 : maybe (mword ty9) -> maybe (mword ty32) -> M unit*)

val _ = Define `
 ((flush_TLB32:((9)words$word)option ->((32)words$word)option ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) asid addr=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS tlb32_ref) (\ (w__0 :  ( (9, 32, 34, 32)TLB_Entry)option) . 
   (case w__0 of
     NONE => sail2_state_monad$returnS () 
   | SOME (e) => if ((flush_TLB_Entry e asid addr)) then sail2_state_monad$write_regS tlb32_ref NONE else sail2_state_monad$returnS () 
   ))))`;


(*val translate32 : mword ty9 -> mword ty34 -> mword ty32 -> AccessType unit -> Privilege -> bool -> bool -> ii -> unit -> M (TR_Result (mword ty34) PTW_Error)*)

val _ = Define `
 ((translate32:(9)words$word ->(34)words$word ->(32)words$word ->(unit)AccessType -> Privilege -> bool -> bool -> int -> unit ->(regstate)sail2_state_monad$sequential_state ->((((((34)words$word),(PTW_Error))TR_Result),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) asid ptb vAddr ac priv mxr do_sum level ext_ptw=  (sail2_state_monad$bindS
   (lookup_TLB32 asid vAddr) (\ (w__0 :  ((ii # (9, 32, 34, 32) TLB_Entry))option) . 
   (case w__0 of
     SOME ((idx, ent)) =>
      let pte = (Mk_SV32_PTE ent.TLB_Entry_pte) in
      let (ext_pte : extPte) = ((zeros_implicit (( 10 : int):ii)  :  10 words$word)) in
      let pteBits = (Mk_PTE_Bits ((get_SV32_PTE_BITS pte  :  8 words$word))) in sail2_state_monad$bindS
      (checkPTEPermission ac priv mxr do_sum pteBits ext_pte ext_ptw) (\ (w__1 : PTE_Check) . 
      (case w__1 of
        PTE_Check_Failure ((ext_ptw, ext_ptw_fail)) =>
         sail2_state_monad$returnS (TR_Failure (ext_get_ptw_error ext_ptw_fail, ext_ptw))
      | PTE_Check_Success (ext_ptw) =>
         (case ((update_PTE_Bits pteBits ac ext_pte  :  ((PTE_Bits #  10 words$word))option)) of
           NONE =>
            sail2_state_monad$returnS (TR_Address ((or_vec ent.TLB_Entry_pAddr
                                   ((EXTZ (( 34 : int):ii)
                                       ((and_vec vAddr ent.TLB_Entry_vAddrMask  :  32 words$word))
                                      :  34 words$word))
                                  :  34 words$word),
                                ext_ptw))
         | SOME ((pbits, ext)) =>
            if ((~ ((plat_enable_dirty_update () )))) then
              sail2_state_monad$returnS (TR_Failure (PTW_PTE_Update () , ext_ptw))
            else
              let n_pte = (update_SV32_PTE_BITS pte ((get_PTE_Bits_bits pbits  :  8 words$word))) in
              let (n_ent : TLB32_Entry) = ent in
              let n_ent =
                (( n_ent with<| TLB_Entry_pte := ((get_SV32_PTE_bits n_pte  :  32 words$word)) |>)) in sail2_state_monad$bindS (sail2_state_monad$seqS
              (write_TLB32 idx n_ent)
              (mem_write_value_priv
                ((to_phys_addr ((EXTZ (( 34 : int):ii) ent.TLB_Entry_pteAddr  :  34 words$word))  :  32 words$word))
                (( 4 : int):ii) ((get_SV32_PTE_bits n_pte  :  32 words$word)) Supervisor F F F)) (\ (w__2 : bool
                MemoryOpResult) .  sail2_state_monad$seqS
              (case w__2 of
                MemValue (_) => sail2_state_monad$returnS () 
              | MemException (e) => internal_error "invalid physical address in TLB"
              )
              (sail2_state_monad$returnS (TR_Address ((or_vec ent.TLB_Entry_pAddr
                                     ((EXTZ (( 34 : int):ii)
                                         ((and_vec vAddr ent.TLB_Entry_vAddrMask  :  32 words$word))
                                        :  34 words$word))
                                    :  34 words$word),
                                  ext_ptw))))
         )
      ))
   | NONE => sail2_state_monad$bindS
      (walk32 vAddr ac priv mxr do_sum ptb level F ext_ptw
        : ( (( 34 words$word), SV32_PTE)PTW_Result) M) (\ (w__6 : (( 34 words$word), SV32_PTE) PTW_Result) . 
      (case w__6 of
        PTW_Failure ((f, ext_ptw)) => sail2_state_monad$returnS (TR_Failure (f, ext_ptw))
      | PTW_Success ((pAddr, pte, pteAddr, level, global, ext_ptw)) =>
         (case ((update_PTE_Bits ((Mk_PTE_Bits ((get_SV32_PTE_BITS pte  :  8 words$word)))) ac
                   ((zeros_implicit (( 10 : int):ii)  :  10 words$word))
                  :  ((PTE_Bits #  10 words$word))option)) of
           NONE => sail2_state_monad$seqS
            (add_to_TLB32 asid vAddr pAddr pte pteAddr level global)
            (sail2_state_monad$returnS (TR_Address (pAddr, ext_ptw)))
         | SOME ((pbits, ext)) =>
            if ((~ ((plat_enable_dirty_update () )))) then
              sail2_state_monad$returnS (TR_Failure (PTW_PTE_Update () , ext_ptw))
            else
              let (w_pte : SV32_PTE) =
                (update_SV32_PTE_BITS pte ((get_PTE_Bits_bits pbits  :  8 words$word))) in sail2_state_monad$bindS
              (mem_write_value_priv ((to_phys_addr pteAddr  :  32 words$word)) (( 4 : int):ii)
                ((get_SV32_PTE_bits w_pte  :  32 words$word)) Supervisor F F F) (\ (w__7 : bool
                MemoryOpResult) . 
              (case w__7 of
                MemValue (_) => sail2_state_monad$seqS
                 (add_to_TLB32 asid vAddr pAddr w_pte pteAddr level global)
                 (sail2_state_monad$returnS (TR_Address (pAddr, ext_ptw)))
              | MemException (e) => sail2_state_monad$returnS (TR_Failure (PTW_Access () , ext_ptw))
              ))
         )
      ))
   ))))`;


(*val init_vmem_sv32 : unit -> M unit*)

val _ = Define `
 ((init_vmem_sv32:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$write_regS tlb32_ref NONE))`;


(*val legalize_satp : Architecture -> mword ty32 -> mword ty32 -> mword ty32*)

val _ = Define `
 ((legalize_satp:Architecture ->(32)words$word ->(32)words$word ->(32)words$word) (a : Architecture) (o1 : xlenbits) (v : xlenbits)=
    ((legalize_satp32 a o1 v  :  32 words$word)))`;


(*val translationMode : Privilege -> M SATPMode*)

val _ = Define `
 ((translationMode:Privilege ->(regstate)sail2_state_monad$sequential_state ->(((SATPMode),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) priv=
    (if (((priv = Machine))) then sail2_state_monad$returnS Sbare
   else sail2_state_monad$bindS
     (sail2_state_monad$read_regS mstatus_ref) (\ (w__0 : Mstatus) . 
     let arch = (architecture ((get_mstatus_SXL w__0  :  2 words$word))) in
     (case arch of
       SOME (RV32) => sail2_state_monad$bindS
        (sail2_state_monad$read_regS satp_ref  : ( 32 words$word) M) (\ (w__1 :  32 words$word) . 
        let s = (Mk_Satp32 ((subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))) in
        sail2_state_monad$returnS (if (((((get_Satp32_Mode s  :  1 words$word)) = (0b0w :  1 words$word)))) then Sbare
                else Sv32))
     | _ => internal_error "unsupported address translation arch"
     ))))`;


(*val translateAddr_priv : mword ty32 -> AccessType unit -> Privilege -> M (TR_Result (mword ty32) ExceptionType)*)

val _ = Define `
 ((translateAddr_priv:(32)words$word ->(unit)AccessType -> Privilege ->(regstate)sail2_state_monad$sequential_state ->((((((32)words$word),(ExceptionType))TR_Result),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) vAddr ac effPriv=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS mstatus_ref) (\ (w__0 : Mstatus) . 
   let (mxr : bool) = (((get_Mstatus_MXR w__0  :  1 words$word)) = (0b1w :  1 words$word)) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS mstatus_ref) (\ (w__1 : Mstatus) . 
   let (do_sum : bool) = (((get_Mstatus_SUM w__1  :  1 words$word)) = (0b1w :  1 words$word)) in sail2_state_monad$bindS
   (translationMode effPriv) (\ (mode : SATPMode) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS satp_ref  : ( 32 words$word) M) (\ (w__2 :  32 words$word) . 
   let asid = ((curAsid32 w__2  :  9 words$word)) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS satp_ref  : ( 32 words$word) M) (\ (w__3 :  32 words$word) . 
   let ptb = ((curPTB32 w__3  :  34 words$word)) in
   let (ext_ptw : ext_ptw) = init_ext_ptw in
   (case mode of
     Sbare => sail2_state_monad$returnS (TR_Address (vAddr, ext_ptw))
   | Sv32 => sail2_state_monad$bindS
      (translate32 asid ptb vAddr ac effPriv mxr do_sum ((SV32_LEVELS - (( 1 : int):ii))) ext_ptw
        : ( (( 34 words$word), PTW_Error)TR_Result) M) (\ (w__4 : (( 34 words$word), PTW_Error) TR_Result) . 
      sail2_state_monad$returnS ((case w__4 of
        TR_Address ((pa, ext_ptw)) => TR_Address ((to_phys_addr pa  :  32 words$word), ext_ptw)
      | TR_Failure ((f, ext_ptw)) => TR_Failure (translationException ac f, ext_ptw)
      )))
   | _ =>
      (internal_error "unsupported address translation scheme"
        : ( (( 32 words$word), ExceptionType)TR_Result) M)
   ))))))))`;


(*val translateAddr : mword ty32 -> AccessType unit -> M (TR_Result (mword ty32) ExceptionType)*)

val _ = Define `
 ((translateAddr:(32)words$word ->(unit)AccessType ->(regstate)sail2_state_monad$sequential_state ->((((((32)words$word),(ExceptionType))TR_Result),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) vAddr ac=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS mstatus_ref) (\ (w__0 : Mstatus) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__1 : Privilege) .  sail2_state_monad$bindS
   (effectivePrivilege ac w__0 w__1) (\ (w__2 : Privilege) . 
   (translateAddr_priv vAddr ac w__2  : ( (( 32 words$word), ExceptionType)TR_Result) M))))))`;


(*val flush_TLB : maybe (mword ty32) -> maybe (mword ty32) -> M unit*)

val _ = Define `
 ((flush_TLB:((32)words$word)option ->((32)words$word)option ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) asid_xlen addr_xlen=
    (let (asid :  asid32 option) =
     ((case asid_xlen of
       NONE => NONE
     | SOME (a) => SOME ((subrange_vec_dec a (( 8 : int):ii) (( 0 : int):ii)  :  9 words$word))
     )) in
   flush_TLB32 asid addr_xlen))`;


(*val init_vmem : unit -> M unit*)

val _ = Define `
 ((init_vmem:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (init_vmem_sv32 () ))`;


(*val execute : ast -> M Retired*)

(*val assembly_forwards : ast -> M string*)

(*val assembly_backwards : string -> M ast*)

(*val assembly_forwards_matches : ast -> bool*)

(*val assembly_backwards_matches : string -> bool*)

(*val assembly_matches_prefix : string -> maybe ((ast * ii))*)

(*val encdec_forwards : ast -> M (mword ty32)*)

(*val encdec_backwards : mword ty32 -> M ast*)

(*val encdec_forwards_matches : ast -> M bool*)

(*val encdec_backwards_matches : mword ty32 -> M bool*)

(*val encdec_compressed_forwards : ast -> M (mword ty16)*)

(*val encdec_compressed_backwards : mword ty16 -> M ast*)

(*val encdec_compressed_forwards_matches : ast -> M bool*)

(*val encdec_compressed_backwards_matches : mword ty16 -> M bool*)

(*val encdec_uop_forwards : uop -> mword ty7*)

(*val encdec_uop_backwards : mword ty7 -> M uop*)

(*val encdec_uop_forwards_matches : uop -> bool*)

(*val encdec_uop_backwards_matches : mword ty7 -> bool*)

val _ = Define `
 ((encdec_uop_forwards:uop ->(7)words$word) arg_=
    ((case arg_ of
     RISCV_LUI => (0b0110111w :  7 words$word)
   | RISCV_AUIPC => (0b0010111w :  7 words$word)
   )))`;


val _ = Define `
 ((encdec_uop_backwards:(7)words$word ->(regstate)sail2_state_monad$sequential_state ->(((uop),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b0110111w :  7 words$word)))) then sail2_state_monad$returnS RISCV_LUI
   else if (((b__0 = (0b0010111w :  7 words$word)))) then sail2_state_monad$returnS RISCV_AUIPC
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((encdec_uop_forwards_matches:uop -> bool) arg_= 
  ((case arg_ of   RISCV_LUI => T | RISCV_AUIPC => T )))`;


val _ = Define `
 ((encdec_uop_backwards_matches:(7)words$word -> bool) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b0110111w :  7 words$word)))) then T
   else if (((b__0 = (0b0010111w :  7 words$word)))) then T
   else F))`;


(*val utype_mnemonic_forwards : uop -> string*)

(*val utype_mnemonic_backwards : string -> M uop*)

(*val utype_mnemonic_forwards_matches : uop -> bool*)

(*val utype_mnemonic_backwards_matches : string -> bool*)

(*val utype_mnemonic_matches_prefix : string -> maybe ((uop * ii))*)

val _ = Define `
 ((utype_mnemonic_forwards:uop -> string) arg_=  ((case arg_ of   RISCV_LUI => "lui" | RISCV_AUIPC => "auipc" )))`;


val _ = Define `
 ((utype_mnemonic_backwards:string ->(regstate)sail2_state_monad$sequential_state ->(((uop),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "lui"))) then sail2_state_monad$returnS RISCV_LUI
   else if (((p0_ = "auipc"))) then sail2_state_monad$returnS RISCV_AUIPC
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((utype_mnemonic_forwards_matches:uop -> bool) arg_= 
  ((case arg_ of   RISCV_LUI => T | RISCV_AUIPC => T )))`;


val _ = Define `
 ((utype_mnemonic_backwards_matches:string -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "lui"))) then T
   else if (((p0_ = "auipc"))) then T
   else F))`;


(*val _s761_ : string -> maybe string*)

val _ = Define `
 ((s761_:string ->(string)option) s762_0=
    (let s763_0 = s762_0 in
   if ((string_startswith s763_0 "auipc")) then  
  (case ((string_drop s763_0 ((string_length "auipc")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s757_ : string -> maybe string*)

val _ = Define `
 ((s757_:string ->(string)option) s758_0=
    (let s759_0 = s758_0 in
   if ((string_startswith s759_0 "lui")) then  
  (case ((string_drop s759_0 ((string_length "lui")))) of   s_ => SOME s_ )
   else NONE))`;


val _ = Define `
 ((utype_mnemonic_matches_prefix:string ->(uop#int)option) arg_=
    (let s760_0 = arg_ in
   if ((case ((s757_ s760_0)) of   SOME (s_) => T | _ => F )) then  
  (case s757_ s760_0 of
      (SOME (s_)) =>
  SOME (RISCV_LUI, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s761_ s760_0)) of   SOME (s_) => T | _ => F )) then  
  (case s761_ s760_0 of
      (SOME (s_)) =>
  SOME (RISCV_AUIPC, ((string_length arg_)) - ((string_length s_)))
  )
   else NONE))`;


(*val encdec_bop_forwards : bop -> mword ty3*)

(*val encdec_bop_backwards : mword ty3 -> M bop*)

(*val encdec_bop_forwards_matches : bop -> bool*)

(*val encdec_bop_backwards_matches : mword ty3 -> bool*)

val _ = Define `
 ((encdec_bop_forwards:bop ->(3)words$word) arg_=
    ((case arg_ of
     RISCV_BEQ => (0b000w :  3 words$word)
   | RISCV_BNE => (0b001w :  3 words$word)
   | RISCV_BLT => (0b100w :  3 words$word)
   | RISCV_BGE => (0b101w :  3 words$word)
   | RISCV_BLTU => (0b110w :  3 words$word)
   | RISCV_BGEU => (0b111w :  3 words$word)
   )))`;


val _ = Define `
 ((encdec_bop_backwards:(3)words$word ->(regstate)sail2_state_monad$sequential_state ->(((bop),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b000w :  3 words$word)))) then sail2_state_monad$returnS RISCV_BEQ
   else if (((b__0 = (0b001w :  3 words$word)))) then sail2_state_monad$returnS RISCV_BNE
   else if (((b__0 = (0b100w :  3 words$word)))) then sail2_state_monad$returnS RISCV_BLT
   else if (((b__0 = (0b101w :  3 words$word)))) then sail2_state_monad$returnS RISCV_BGE
   else if (((b__0 = (0b110w :  3 words$word)))) then sail2_state_monad$returnS RISCV_BLTU
   else if (((b__0 = (0b111w :  3 words$word)))) then sail2_state_monad$returnS RISCV_BGEU
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((encdec_bop_forwards_matches:bop -> bool) arg_= 
  ((case arg_ of
         RISCV_BEQ => T
     | RISCV_BNE => T
     | RISCV_BLT => T
     | RISCV_BGE => T
     | RISCV_BLTU => T
     | RISCV_BGEU => T
   )))`;


val _ = Define `
 ((encdec_bop_backwards_matches:(3)words$word -> bool) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b000w :  3 words$word)))) then T
   else if (((b__0 = (0b001w :  3 words$word)))) then T
   else if (((b__0 = (0b100w :  3 words$word)))) then T
   else if (((b__0 = (0b101w :  3 words$word)))) then T
   else if (((b__0 = (0b110w :  3 words$word)))) then T
   else if (((b__0 = (0b111w :  3 words$word)))) then T
   else F))`;


(*val btype_mnemonic_forwards : bop -> string*)

(*val btype_mnemonic_backwards : string -> M bop*)

(*val btype_mnemonic_forwards_matches : bop -> bool*)

(*val btype_mnemonic_backwards_matches : string -> bool*)

(*val btype_mnemonic_matches_prefix : string -> maybe ((bop * ii))*)

val _ = Define `
 ((btype_mnemonic_forwards:bop -> string) arg_=
    ((case arg_ of
     RISCV_BEQ => "beq"
   | RISCV_BNE => "bne"
   | RISCV_BLT => "blt"
   | RISCV_BGE => "bge"
   | RISCV_BLTU => "bltu"
   | RISCV_BGEU => "bgeu"
   )))`;


val _ = Define `
 ((btype_mnemonic_backwards:string ->(regstate)sail2_state_monad$sequential_state ->(((bop),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "beq"))) then sail2_state_monad$returnS RISCV_BEQ
   else if (((p0_ = "bne"))) then sail2_state_monad$returnS RISCV_BNE
   else if (((p0_ = "blt"))) then sail2_state_monad$returnS RISCV_BLT
   else if (((p0_ = "bge"))) then sail2_state_monad$returnS RISCV_BGE
   else if (((p0_ = "bltu"))) then sail2_state_monad$returnS RISCV_BLTU
   else if (((p0_ = "bgeu"))) then sail2_state_monad$returnS RISCV_BGEU
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((btype_mnemonic_forwards_matches:bop -> bool) arg_= 
  ((case arg_ of
         RISCV_BEQ => T
     | RISCV_BNE => T
     | RISCV_BLT => T
     | RISCV_BGE => T
     | RISCV_BLTU => T
     | RISCV_BGEU => T
   )))`;


val _ = Define `
 ((btype_mnemonic_backwards_matches:string -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "beq"))) then T
   else if (((p0_ = "bne"))) then T
   else if (((p0_ = "blt"))) then T
   else if (((p0_ = "bge"))) then T
   else if (((p0_ = "bltu"))) then T
   else if (((p0_ = "bgeu"))) then T
   else F))`;


(*val _s785_ : string -> maybe string*)

val _ = Define `
 ((s785_:string ->(string)option) s786_0=
    (let s787_0 = s786_0 in
   if ((string_startswith s787_0 "bgeu")) then  
  (case ((string_drop s787_0 ((string_length "bgeu")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s781_ : string -> maybe string*)

val _ = Define `
 ((s781_:string ->(string)option) s782_0=
    (let s783_0 = s782_0 in
   if ((string_startswith s783_0 "bltu")) then  
  (case ((string_drop s783_0 ((string_length "bltu")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s777_ : string -> maybe string*)

val _ = Define `
 ((s777_:string ->(string)option) s778_0=
    (let s779_0 = s778_0 in
   if ((string_startswith s779_0 "bge")) then  
  (case ((string_drop s779_0 ((string_length "bge")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s773_ : string -> maybe string*)

val _ = Define `
 ((s773_:string ->(string)option) s774_0=
    (let s775_0 = s774_0 in
   if ((string_startswith s775_0 "blt")) then  
  (case ((string_drop s775_0 ((string_length "blt")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s769_ : string -> maybe string*)

val _ = Define `
 ((s769_:string ->(string)option) s770_0=
    (let s771_0 = s770_0 in
   if ((string_startswith s771_0 "bne")) then  
  (case ((string_drop s771_0 ((string_length "bne")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s765_ : string -> maybe string*)

val _ = Define `
 ((s765_:string ->(string)option) s766_0=
    (let s767_0 = s766_0 in
   if ((string_startswith s767_0 "beq")) then  
  (case ((string_drop s767_0 ((string_length "beq")))) of   s_ => SOME s_ )
   else NONE))`;


val _ = Define `
 ((btype_mnemonic_matches_prefix:string ->(bop#int)option) arg_=
    (let s768_0 = arg_ in
   if ((case ((s765_ s768_0)) of   SOME (s_) => T | _ => F )) then  
  (case s765_ s768_0 of
      (SOME (s_)) =>
  SOME (RISCV_BEQ, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s769_ s768_0)) of   SOME (s_) => T | _ => F )) then  
  (case s769_ s768_0 of
      (SOME (s_)) =>
  SOME (RISCV_BNE, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s773_ s768_0)) of   SOME (s_) => T | _ => F )) then  
  (case s773_ s768_0 of
      (SOME (s_)) =>
  SOME (RISCV_BLT, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s777_ s768_0)) of   SOME (s_) => T | _ => F )) then  
  (case s777_ s768_0 of
      (SOME (s_)) =>
  SOME (RISCV_BGE, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s781_ s768_0)) of   SOME (s_) => T | _ => F )) then  
  (case s781_ s768_0 of
      (SOME (s_)) =>
  SOME (RISCV_BLTU, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s785_ s768_0)) of   SOME (s_) => T | _ => F )) then  
  (case s785_ s768_0 of
      (SOME (s_)) =>
  SOME (RISCV_BGEU, ((string_length arg_)) - ((string_length s_)))
  )
   else NONE))`;


(*val encdec_iop_forwards : iop -> mword ty3*)

(*val encdec_iop_backwards : mword ty3 -> M iop*)

(*val encdec_iop_forwards_matches : iop -> bool*)

(*val encdec_iop_backwards_matches : mword ty3 -> bool*)

val _ = Define `
 ((encdec_iop_forwards:iop ->(3)words$word) arg_=
    ((case arg_ of
     RISCV_ADDI => (0b000w :  3 words$word)
   | RISCV_SLTI => (0b010w :  3 words$word)
   | RISCV_SLTIU => (0b011w :  3 words$word)
   | RISCV_ANDI => (0b111w :  3 words$word)
   | RISCV_ORI => (0b110w :  3 words$word)
   | RISCV_XORI => (0b100w :  3 words$word)
   )))`;


val _ = Define `
 ((encdec_iop_backwards:(3)words$word ->(regstate)sail2_state_monad$sequential_state ->(((iop),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b000w :  3 words$word)))) then sail2_state_monad$returnS RISCV_ADDI
   else if (((b__0 = (0b010w :  3 words$word)))) then sail2_state_monad$returnS RISCV_SLTI
   else if (((b__0 = (0b011w :  3 words$word)))) then sail2_state_monad$returnS RISCV_SLTIU
   else if (((b__0 = (0b111w :  3 words$word)))) then sail2_state_monad$returnS RISCV_ANDI
   else if (((b__0 = (0b110w :  3 words$word)))) then sail2_state_monad$returnS RISCV_ORI
   else if (((b__0 = (0b100w :  3 words$word)))) then sail2_state_monad$returnS RISCV_XORI
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((encdec_iop_forwards_matches:iop -> bool) arg_= 
  ((case arg_ of
         RISCV_ADDI => T
     | RISCV_SLTI => T
     | RISCV_SLTIU => T
     | RISCV_ANDI => T
     | RISCV_ORI => T
     | RISCV_XORI => T
   )))`;


val _ = Define `
 ((encdec_iop_backwards_matches:(3)words$word -> bool) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b000w :  3 words$word)))) then T
   else if (((b__0 = (0b010w :  3 words$word)))) then T
   else if (((b__0 = (0b011w :  3 words$word)))) then T
   else if (((b__0 = (0b111w :  3 words$word)))) then T
   else if (((b__0 = (0b110w :  3 words$word)))) then T
   else if (((b__0 = (0b100w :  3 words$word)))) then T
   else F))`;


(*val itype_mnemonic_forwards : iop -> string*)

(*val itype_mnemonic_backwards : string -> M iop*)

(*val itype_mnemonic_forwards_matches : iop -> bool*)

(*val itype_mnemonic_backwards_matches : string -> bool*)

(*val itype_mnemonic_matches_prefix : string -> maybe ((iop * ii))*)

val _ = Define `
 ((itype_mnemonic_forwards:iop -> string) arg_=
    ((case arg_ of
     RISCV_ADDI => "addi"
   | RISCV_SLTI => "slti"
   | RISCV_SLTIU => "sltiu"
   | RISCV_XORI => "xori"
   | RISCV_ORI => "ori"
   | RISCV_ANDI => "andi"
   )))`;


val _ = Define `
 ((itype_mnemonic_backwards:string ->(regstate)sail2_state_monad$sequential_state ->(((iop),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "addi"))) then sail2_state_monad$returnS RISCV_ADDI
   else if (((p0_ = "slti"))) then sail2_state_monad$returnS RISCV_SLTI
   else if (((p0_ = "sltiu"))) then sail2_state_monad$returnS RISCV_SLTIU
   else if (((p0_ = "xori"))) then sail2_state_monad$returnS RISCV_XORI
   else if (((p0_ = "ori"))) then sail2_state_monad$returnS RISCV_ORI
   else if (((p0_ = "andi"))) then sail2_state_monad$returnS RISCV_ANDI
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((itype_mnemonic_forwards_matches:iop -> bool) arg_= 
  ((case arg_ of
         RISCV_ADDI => T
     | RISCV_SLTI => T
     | RISCV_SLTIU => T
     | RISCV_XORI => T
     | RISCV_ORI => T
     | RISCV_ANDI => T
   )))`;


val _ = Define `
 ((itype_mnemonic_backwards_matches:string -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "addi"))) then T
   else if (((p0_ = "slti"))) then T
   else if (((p0_ = "sltiu"))) then T
   else if (((p0_ = "xori"))) then T
   else if (((p0_ = "ori"))) then T
   else if (((p0_ = "andi"))) then T
   else F))`;


(*val _s809_ : string -> maybe string*)

val _ = Define `
 ((s809_:string ->(string)option) s810_0=
    (let s811_0 = s810_0 in
   if ((string_startswith s811_0 "andi")) then  
  (case ((string_drop s811_0 ((string_length "andi")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s805_ : string -> maybe string*)

val _ = Define `
 ((s805_:string ->(string)option) s806_0=
    (let s807_0 = s806_0 in
   if ((string_startswith s807_0 "ori")) then  
  (case ((string_drop s807_0 ((string_length "ori")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s801_ : string -> maybe string*)

val _ = Define `
 ((s801_:string ->(string)option) s802_0=
    (let s803_0 = s802_0 in
   if ((string_startswith s803_0 "xori")) then  
  (case ((string_drop s803_0 ((string_length "xori")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s797_ : string -> maybe string*)

val _ = Define `
 ((s797_:string ->(string)option) s798_0=
    (let s799_0 = s798_0 in
   if ((string_startswith s799_0 "sltiu")) then  
  (case ((string_drop s799_0 ((string_length "sltiu")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s793_ : string -> maybe string*)

val _ = Define `
 ((s793_:string ->(string)option) s794_0=
    (let s795_0 = s794_0 in
   if ((string_startswith s795_0 "slti")) then  
  (case ((string_drop s795_0 ((string_length "slti")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s789_ : string -> maybe string*)

val _ = Define `
 ((s789_:string ->(string)option) s790_0=
    (let s791_0 = s790_0 in
   if ((string_startswith s791_0 "addi")) then  
  (case ((string_drop s791_0 ((string_length "addi")))) of   s_ => SOME s_ )
   else NONE))`;


val _ = Define `
 ((itype_mnemonic_matches_prefix:string ->(iop#int)option) arg_=
    (let s792_0 = arg_ in
   if ((case ((s789_ s792_0)) of   SOME (s_) => T | _ => F )) then  
  (case s789_ s792_0 of
      (SOME (s_)) =>
  SOME (RISCV_ADDI, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s793_ s792_0)) of   SOME (s_) => T | _ => F )) then  
  (case s793_ s792_0 of
      (SOME (s_)) =>
  SOME (RISCV_SLTI, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s797_ s792_0)) of   SOME (s_) => T | _ => F )) then  
  (case s797_ s792_0 of
      (SOME (s_)) =>
  SOME (RISCV_SLTIU, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s801_ s792_0)) of   SOME (s_) => T | _ => F )) then  
  (case s801_ s792_0 of
      (SOME (s_)) =>
  SOME (RISCV_XORI, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s805_ s792_0)) of   SOME (s_) => T | _ => F )) then  
  (case s805_ s792_0 of
      (SOME (s_)) =>
  SOME (RISCV_ORI, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s809_ s792_0)) of   SOME (s_) => T | _ => F )) then  
  (case s809_ s792_0 of
      (SOME (s_)) =>
  SOME (RISCV_ANDI, ((string_length arg_)) - ((string_length s_)))
  )
   else NONE))`;


(*val encdec_sop_forwards : sop -> mword ty3*)

(*val encdec_sop_backwards : mword ty3 -> M sop*)

(*val encdec_sop_forwards_matches : sop -> bool*)

(*val encdec_sop_backwards_matches : mword ty3 -> bool*)

val _ = Define `
 ((encdec_sop_forwards:sop ->(3)words$word) arg_=
    ((case arg_ of
     RISCV_SLLI => (0b001w :  3 words$word)
   | RISCV_SRLI => (0b101w :  3 words$word)
   | RISCV_SRAI => (0b101w :  3 words$word)
   )))`;


val _ = Define `
 ((encdec_sop_backwards:(3)words$word ->(regstate)sail2_state_monad$sequential_state ->(((sop),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b001w :  3 words$word)))) then sail2_state_monad$returnS RISCV_SLLI
   else if (((b__0 = (0b101w :  3 words$word)))) then sail2_state_monad$returnS RISCV_SRLI
   else if (((b__0 = (0b101w :  3 words$word)))) then sail2_state_monad$returnS RISCV_SRAI
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((encdec_sop_forwards_matches:sop -> bool) arg_= 
  ((case arg_ of   RISCV_SLLI => T | RISCV_SRLI => T | RISCV_SRAI => T )))`;


val _ = Define `
 ((encdec_sop_backwards_matches:(3)words$word -> bool) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b001w :  3 words$word)))) then T
   else if (((b__0 = (0b101w :  3 words$word)))) then T
   else if (((b__0 = (0b101w :  3 words$word)))) then T
   else F))`;


(*val shiftiop_mnemonic_forwards : sop -> string*)

(*val shiftiop_mnemonic_backwards : string -> M sop*)

(*val shiftiop_mnemonic_forwards_matches : sop -> bool*)

(*val shiftiop_mnemonic_backwards_matches : string -> bool*)

(*val shiftiop_mnemonic_matches_prefix : string -> maybe ((sop * ii))*)

val _ = Define `
 ((shiftiop_mnemonic_forwards:sop -> string) arg_=
    ((case arg_ of   RISCV_SLLI => "slli" | RISCV_SRLI => "srli" | RISCV_SRAI => "srai" )))`;


val _ = Define `
 ((shiftiop_mnemonic_backwards:string ->(regstate)sail2_state_monad$sequential_state ->(((sop),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "slli"))) then sail2_state_monad$returnS RISCV_SLLI
   else if (((p0_ = "srli"))) then sail2_state_monad$returnS RISCV_SRLI
   else if (((p0_ = "srai"))) then sail2_state_monad$returnS RISCV_SRAI
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((shiftiop_mnemonic_forwards_matches:sop -> bool) arg_= 
  ((case arg_ of   RISCV_SLLI => T | RISCV_SRLI => T | RISCV_SRAI => T )))`;


val _ = Define `
 ((shiftiop_mnemonic_backwards_matches:string -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "slli"))) then T
   else if (((p0_ = "srli"))) then T
   else if (((p0_ = "srai"))) then T
   else F))`;


(*val _s821_ : string -> maybe string*)

val _ = Define `
 ((s821_:string ->(string)option) s822_0=
    (let s823_0 = s822_0 in
   if ((string_startswith s823_0 "srai")) then  
  (case ((string_drop s823_0 ((string_length "srai")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s817_ : string -> maybe string*)

val _ = Define `
 ((s817_:string ->(string)option) s818_0=
    (let s819_0 = s818_0 in
   if ((string_startswith s819_0 "srli")) then  
  (case ((string_drop s819_0 ((string_length "srli")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s813_ : string -> maybe string*)

val _ = Define `
 ((s813_:string ->(string)option) s814_0=
    (let s815_0 = s814_0 in
   if ((string_startswith s815_0 "slli")) then  
  (case ((string_drop s815_0 ((string_length "slli")))) of   s_ => SOME s_ )
   else NONE))`;


val _ = Define `
 ((shiftiop_mnemonic_matches_prefix:string ->(sop#int)option) arg_=
    (let s816_0 = arg_ in
   if ((case ((s813_ s816_0)) of   SOME (s_) => T | _ => F )) then  
  (case s813_ s816_0 of
      (SOME (s_)) =>
  SOME (RISCV_SLLI, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s817_ s816_0)) of   SOME (s_) => T | _ => F )) then  
  (case s817_ s816_0 of
      (SOME (s_)) =>
  SOME (RISCV_SRLI, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s821_ s816_0)) of   SOME (s_) => T | _ => F )) then  
  (case s821_ s816_0 of
      (SOME (s_)) =>
  SOME (RISCV_SRAI, ((string_length arg_)) - ((string_length s_)))
  )
   else NONE))`;


(*val rtype_mnemonic_forwards : rop -> string*)

(*val rtype_mnemonic_backwards : string -> M rop*)

(*val rtype_mnemonic_forwards_matches : rop -> bool*)

(*val rtype_mnemonic_backwards_matches : string -> bool*)

(*val rtype_mnemonic_matches_prefix : string -> maybe ((rop * ii))*)

val _ = Define `
 ((rtype_mnemonic_forwards:rop -> string) arg_=
    ((case arg_ of
     RISCV_ADD => "add"
   | RISCV_SLT => "slt"
   | RISCV_SLTU => "sltu"
   | RISCV_AND => "and"
   | RISCV_OR => "or"
   | RISCV_XOR => "xor"
   | RISCV_SLL => "sll"
   | RISCV_SRL => "srl"
   | RISCV_SUB => "sub"
   | RISCV_SRA => "sra"
   )))`;


val _ = Define `
 ((rtype_mnemonic_backwards:string ->(regstate)sail2_state_monad$sequential_state ->(((rop),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "add"))) then sail2_state_monad$returnS RISCV_ADD
   else if (((p0_ = "slt"))) then sail2_state_monad$returnS RISCV_SLT
   else if (((p0_ = "sltu"))) then sail2_state_monad$returnS RISCV_SLTU
   else if (((p0_ = "and"))) then sail2_state_monad$returnS RISCV_AND
   else if (((p0_ = "or"))) then sail2_state_monad$returnS RISCV_OR
   else if (((p0_ = "xor"))) then sail2_state_monad$returnS RISCV_XOR
   else if (((p0_ = "sll"))) then sail2_state_monad$returnS RISCV_SLL
   else if (((p0_ = "srl"))) then sail2_state_monad$returnS RISCV_SRL
   else if (((p0_ = "sub"))) then sail2_state_monad$returnS RISCV_SUB
   else if (((p0_ = "sra"))) then sail2_state_monad$returnS RISCV_SRA
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((rtype_mnemonic_forwards_matches:rop -> bool) arg_= 
  ((case arg_ of
         RISCV_ADD => T
     | RISCV_SLT => T
     | RISCV_SLTU => T
     | RISCV_AND => T
     | RISCV_OR => T
     | RISCV_XOR => T
     | RISCV_SLL => T
     | RISCV_SRL => T
     | RISCV_SUB => T
     | RISCV_SRA => T
   )))`;


val _ = Define `
 ((rtype_mnemonic_backwards_matches:string -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "add"))) then T
   else if (((p0_ = "slt"))) then T
   else if (((p0_ = "sltu"))) then T
   else if (((p0_ = "and"))) then T
   else if (((p0_ = "or"))) then T
   else if (((p0_ = "xor"))) then T
   else if (((p0_ = "sll"))) then T
   else if (((p0_ = "srl"))) then T
   else if (((p0_ = "sub"))) then T
   else if (((p0_ = "sra"))) then T
   else F))`;


(*val _s861_ : string -> maybe string*)

val _ = Define `
 ((s861_:string ->(string)option) s862_0=
    (let s863_0 = s862_0 in
   if ((string_startswith s863_0 "sra")) then  
  (case ((string_drop s863_0 ((string_length "sra")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s857_ : string -> maybe string*)

val _ = Define `
 ((s857_:string ->(string)option) s858_0=
    (let s859_0 = s858_0 in
   if ((string_startswith s859_0 "sub")) then  
  (case ((string_drop s859_0 ((string_length "sub")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s853_ : string -> maybe string*)

val _ = Define `
 ((s853_:string ->(string)option) s854_0=
    (let s855_0 = s854_0 in
   if ((string_startswith s855_0 "srl")) then  
  (case ((string_drop s855_0 ((string_length "srl")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s849_ : string -> maybe string*)

val _ = Define `
 ((s849_:string ->(string)option) s850_0=
    (let s851_0 = s850_0 in
   if ((string_startswith s851_0 "sll")) then  
  (case ((string_drop s851_0 ((string_length "sll")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s845_ : string -> maybe string*)

val _ = Define `
 ((s845_:string ->(string)option) s846_0=
    (let s847_0 = s846_0 in
   if ((string_startswith s847_0 "xor")) then  
  (case ((string_drop s847_0 ((string_length "xor")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s841_ : string -> maybe string*)

val _ = Define `
 ((s841_:string ->(string)option) s842_0=
    (let s843_0 = s842_0 in
   if ((string_startswith s843_0 "or")) then  
  (case ((string_drop s843_0 ((string_length "or")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s837_ : string -> maybe string*)

val _ = Define `
 ((s837_:string ->(string)option) s838_0=
    (let s839_0 = s838_0 in
   if ((string_startswith s839_0 "and")) then  
  (case ((string_drop s839_0 ((string_length "and")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s833_ : string -> maybe string*)

val _ = Define `
 ((s833_:string ->(string)option) s834_0=
    (let s835_0 = s834_0 in
   if ((string_startswith s835_0 "sltu")) then  
  (case ((string_drop s835_0 ((string_length "sltu")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s829_ : string -> maybe string*)

val _ = Define `
 ((s829_:string ->(string)option) s830_0=
    (let s831_0 = s830_0 in
   if ((string_startswith s831_0 "slt")) then  
  (case ((string_drop s831_0 ((string_length "slt")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s825_ : string -> maybe string*)

val _ = Define `
 ((s825_:string ->(string)option) s826_0=
    (let s827_0 = s826_0 in
   if ((string_startswith s827_0 "add")) then  
  (case ((string_drop s827_0 ((string_length "add")))) of   s_ => SOME s_ )
   else NONE))`;


val _ = Define `
 ((rtype_mnemonic_matches_prefix:string ->(rop#int)option) arg_=
    (let s828_0 = arg_ in
   if ((case ((s825_ s828_0)) of   SOME (s_) => T | _ => F )) then  
  (case s825_ s828_0 of
      (SOME (s_)) =>
  SOME (RISCV_ADD, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s829_ s828_0)) of   SOME (s_) => T | _ => F )) then  
  (case s829_ s828_0 of
      (SOME (s_)) =>
  SOME (RISCV_SLT, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s833_ s828_0)) of   SOME (s_) => T | _ => F )) then  
  (case s833_ s828_0 of
      (SOME (s_)) =>
  SOME (RISCV_SLTU, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s837_ s828_0)) of   SOME (s_) => T | _ => F )) then  
  (case s837_ s828_0 of
      (SOME (s_)) =>
  SOME (RISCV_AND, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s841_ s828_0)) of   SOME (s_) => T | _ => F )) then  
  (case s841_ s828_0 of
      (SOME (s_)) =>
  SOME (RISCV_OR, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s845_ s828_0)) of   SOME (s_) => T | _ => F )) then  
  (case s845_ s828_0 of
      (SOME (s_)) =>
  SOME (RISCV_XOR, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s849_ s828_0)) of   SOME (s_) => T | _ => F )) then  
  (case s849_ s828_0 of
      (SOME (s_)) =>
  SOME (RISCV_SLL, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s853_ s828_0)) of   SOME (s_) => T | _ => F )) then  
  (case s853_ s828_0 of
      (SOME (s_)) =>
  SOME (RISCV_SRL, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s857_ s828_0)) of   SOME (s_) => T | _ => F )) then  
  (case s857_ s828_0 of
      (SOME (s_)) =>
  SOME (RISCV_SUB, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s861_ s828_0)) of   SOME (s_) => T | _ => F )) then  
  (case s861_ s828_0 of
      (SOME (s_)) =>
  SOME (RISCV_SRA, ((string_length arg_)) - ((string_length s_)))
  )
   else NONE))`;


(*val extend_value : forall 'int8_times_n. Size 'int8_times_n => bool -> MemoryOpResult (mword 'int8_times_n) -> MemoryOpResult (mword ty32)*)

val _ = Define `
 ((extend_value:bool ->('int8_times_n words$word)MemoryOpResult ->((32)words$word)MemoryOpResult) is_unsigned value=
    ((case value of
     MemValue (v) =>
      MemValue (if is_unsigned then (EXTZ (( 32 : int):ii) v  :  32 words$word)
                else (EXTS (( 32 : int):ii) v  :  32 words$word))
   | MemException (e) => MemException e
   )))`;


(*val process_load : forall 'int8_times_n. Size 'int8_times_n => mword ty5 -> mword ty32 -> MemoryOpResult (mword 'int8_times_n) -> bool -> M Retired*)

val _ = Define `
 ((process_load:(5)words$word ->(32)words$word ->('int8_times_n words$word)MemoryOpResult -> bool ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rd vaddr value is_unsigned=
    ((case ((extend_value is_unsigned value  : ( 32 words$word) MemoryOpResult)) of
     MemValue (result) => sail2_state_monad$seqS (wX_bits rd result) (sail2_state_monad$returnS RETIRE_SUCCESS)
   | MemException (e) => sail2_state_monad$seqS (handle_mem_exception vaddr e) (sail2_state_monad$returnS RETIRE_FAIL)
   )))`;


(*val check_misaligned : mword ty32 -> word_width -> bool*)

val _ = Define `
 ((check_misaligned:(32)words$word -> word_width -> bool) (vaddr : xlenbits) (width : word_width)=
    (if ((plat_enable_misaligned_access () )) then F
   else
     (case width of
       BYTE => F
     | HALF => (((access_vec_dec vaddr (( 0 : int):ii))) = B1)
     | WORD =>
        ((((((access_vec_dec vaddr (( 0 : int):ii))) = B1))) \/ (((((access_vec_dec vaddr (( 1 : int):ii))) = B1))))
     | DOUBLE =>
        ((((((access_vec_dec vaddr (( 0 : int):ii))) = B1))) \/ ((((((((access_vec_dec vaddr (( 1 : int):ii))) = B1))) \/ (((((access_vec_dec vaddr (( 2 : int):ii))) = B1)))))))
     )))`;


(*val maybe_aq_forwards : bool -> string*)

(*val maybe_aq_backwards : string -> M bool*)

(*val maybe_aq_forwards_matches : bool -> bool*)

(*val maybe_aq_backwards_matches : string -> bool*)

(*val maybe_aq_matches_prefix : string -> maybe ((bool * ii))*)

val _ = Define `
 ((maybe_aq_forwards:bool -> string) arg_=  ((case arg_ of   T => ".aq" | F => "" )))`;


val _ = Define `
 ((maybe_aq_backwards:string ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = ".aq"))) then sail2_state_monad$returnS T
   else if (((p0_ = ""))) then sail2_state_monad$returnS F
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((maybe_aq_forwards_matches:bool -> bool) arg_= 
  ((case arg_ of   T => T | F => T )))`;


val _ = Define `
 ((maybe_aq_backwards_matches:string -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = ".aq"))) then T
   else if (((p0_ = ""))) then T
   else F))`;


(*val _s869_ : string -> maybe string*)

val _ = Define `
 ((s869_:string ->(string)option) s870_0=
    (let s871_0 = s870_0 in
   if ((string_startswith s871_0 "")) then  
  (case ((string_drop s871_0 ((string_length "")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s865_ : string -> maybe string*)

val _ = Define `
 ((s865_:string ->(string)option) s866_0=
    (let s867_0 = s866_0 in
   if ((string_startswith s867_0 ".aq")) then  
  (case ((string_drop s867_0 ((string_length ".aq")))) of   s_ => SOME s_ )
   else NONE))`;


val _ = Define `
 ((maybe_aq_matches_prefix:string ->(bool#int)option) arg_=
    (let s868_0 = arg_ in
   if ((case ((s865_ s868_0)) of   SOME (s_) => T | _ => F )) then  
  (case s865_ s868_0 of
      (SOME (s_)) =>
  SOME (T, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s869_ s868_0)) of   SOME (s_) => T | _ => F )) then  
  (case s869_ s868_0 of
      (SOME (s_)) =>
  SOME (F, ((string_length arg_)) - ((string_length s_)))
  )
   else NONE))`;


(*val maybe_rl_forwards : bool -> string*)

(*val maybe_rl_backwards : string -> M bool*)

(*val maybe_rl_forwards_matches : bool -> bool*)

(*val maybe_rl_backwards_matches : string -> bool*)

(*val maybe_rl_matches_prefix : string -> maybe ((bool * ii))*)

val _ = Define `
 ((maybe_rl_forwards:bool -> string) arg_=  ((case arg_ of   T => ".rl" | F => "" )))`;


val _ = Define `
 ((maybe_rl_backwards:string ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = ".rl"))) then sail2_state_monad$returnS T
   else if (((p0_ = ""))) then sail2_state_monad$returnS F
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((maybe_rl_forwards_matches:bool -> bool) arg_= 
  ((case arg_ of   T => T | F => T )))`;


val _ = Define `
 ((maybe_rl_backwards_matches:string -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = ".rl"))) then T
   else if (((p0_ = ""))) then T
   else F))`;


(*val _s877_ : string -> maybe string*)

val _ = Define `
 ((s877_:string ->(string)option) s878_0=
    (let s879_0 = s878_0 in
   if ((string_startswith s879_0 "")) then  
  (case ((string_drop s879_0 ((string_length "")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s873_ : string -> maybe string*)

val _ = Define `
 ((s873_:string ->(string)option) s874_0=
    (let s875_0 = s874_0 in
   if ((string_startswith s875_0 ".rl")) then  
  (case ((string_drop s875_0 ((string_length ".rl")))) of   s_ => SOME s_ )
   else NONE))`;


val _ = Define `
 ((maybe_rl_matches_prefix:string ->(bool#int)option) arg_=
    (let s876_0 = arg_ in
   if ((case ((s873_ s876_0)) of   SOME (s_) => T | _ => F )) then  
  (case s873_ s876_0 of
      (SOME (s_)) =>
  SOME (T, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s877_ s876_0)) of   SOME (s_) => T | _ => F )) then  
  (case s877_ s876_0 of
      (SOME (s_)) =>
  SOME (F, ((string_length arg_)) - ((string_length s_)))
  )
   else NONE))`;


(*val maybe_u_forwards : bool -> string*)

(*val maybe_u_backwards : string -> M bool*)

(*val maybe_u_forwards_matches : bool -> bool*)

(*val maybe_u_backwards_matches : string -> bool*)

(*val maybe_u_matches_prefix : string -> maybe ((bool * ii))*)

val _ = Define `
 ((maybe_u_forwards:bool -> string) arg_=  ((case arg_ of   T => "u" | F => "" )))`;


val _ = Define `
 ((maybe_u_backwards:string ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "u"))) then sail2_state_monad$returnS T
   else if (((p0_ = ""))) then sail2_state_monad$returnS F
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((maybe_u_forwards_matches:bool -> bool) arg_= 
  ((case arg_ of   T => T | F => T )))`;


val _ = Define `
 ((maybe_u_backwards_matches:string -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "u"))) then T
   else if (((p0_ = ""))) then T
   else F))`;


(*val _s885_ : string -> maybe string*)

val _ = Define `
 ((s885_:string ->(string)option) s886_0=
    (let s887_0 = s886_0 in
   if ((string_startswith s887_0 "")) then  
  (case ((string_drop s887_0 ((string_length "")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s881_ : string -> maybe string*)

val _ = Define `
 ((s881_:string ->(string)option) s882_0=
    (let s883_0 = s882_0 in
   if ((string_startswith s883_0 "u")) then  
  (case ((string_drop s883_0 ((string_length "u")))) of   s_ => SOME s_ )
   else NONE))`;


val _ = Define `
 ((maybe_u_matches_prefix:string ->(bool#int)option) arg_=
    (let s884_0 = arg_ in
   if ((case ((s881_ s884_0)) of   SOME (s_) => T | _ => F )) then  
  (case s881_ s884_0 of
      (SOME (s_)) =>
  SOME (T, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s885_ s884_0)) of   SOME (s_) => T | _ => F )) then  
  (case s885_ s884_0 of
      (SOME (s_)) =>
  SOME (F, ((string_length arg_)) - ((string_length s_)))
  )
   else NONE))`;


(*val shiftw_mnemonic_forwards : sop -> string*)

(*val shiftw_mnemonic_backwards : string -> M sop*)

(*val shiftw_mnemonic_forwards_matches : sop -> bool*)

(*val shiftw_mnemonic_backwards_matches : string -> bool*)

(*val shiftw_mnemonic_matches_prefix : string -> maybe ((sop * ii))*)

val _ = Define `
 ((shiftw_mnemonic_forwards:sop -> string) arg_=
    ((case arg_ of   RISCV_SLLI => "slli" | RISCV_SRLI => "srli" | RISCV_SRAI => "srai" )))`;


val _ = Define `
 ((shiftw_mnemonic_backwards:string ->(regstate)sail2_state_monad$sequential_state ->(((sop),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "slli"))) then sail2_state_monad$returnS RISCV_SLLI
   else if (((p0_ = "srli"))) then sail2_state_monad$returnS RISCV_SRLI
   else if (((p0_ = "srai"))) then sail2_state_monad$returnS RISCV_SRAI
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((shiftw_mnemonic_forwards_matches:sop -> bool) arg_= 
  ((case arg_ of   RISCV_SLLI => T | RISCV_SRLI => T | RISCV_SRAI => T )))`;


val _ = Define `
 ((shiftw_mnemonic_backwards_matches:string -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "slli"))) then T
   else if (((p0_ = "srli"))) then T
   else if (((p0_ = "srai"))) then T
   else F))`;


(*val _s897_ : string -> maybe string*)

val _ = Define `
 ((s897_:string ->(string)option) s898_0=
    (let s899_0 = s898_0 in
   if ((string_startswith s899_0 "srai")) then  
  (case ((string_drop s899_0 ((string_length "srai")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s893_ : string -> maybe string*)

val _ = Define `
 ((s893_:string ->(string)option) s894_0=
    (let s895_0 = s894_0 in
   if ((string_startswith s895_0 "srli")) then  
  (case ((string_drop s895_0 ((string_length "srli")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s889_ : string -> maybe string*)

val _ = Define `
 ((s889_:string ->(string)option) s890_0=
    (let s891_0 = s890_0 in
   if ((string_startswith s891_0 "slli")) then  
  (case ((string_drop s891_0 ((string_length "slli")))) of   s_ => SOME s_ )
   else NONE))`;


val _ = Define `
 ((shiftw_mnemonic_matches_prefix:string ->(sop#int)option) arg_=
    (let s892_0 = arg_ in
   if ((case ((s889_ s892_0)) of   SOME (s_) => T | _ => F )) then  
  (case s889_ s892_0 of
      (SOME (s_)) =>
  SOME (RISCV_SLLI, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s893_ s892_0)) of   SOME (s_) => T | _ => F )) then  
  (case s893_ s892_0 of
      (SOME (s_)) =>
  SOME (RISCV_SRLI, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s897_ s892_0)) of   SOME (s_) => T | _ => F )) then  
  (case s897_ s892_0 of
      (SOME (s_)) =>
  SOME (RISCV_SRAI, ((string_length arg_)) - ((string_length s_)))
  )
   else NONE))`;


(*val rtypew_mnemonic_forwards : ropw -> string*)

(*val rtypew_mnemonic_backwards : string -> M ropw*)

(*val rtypew_mnemonic_forwards_matches : ropw -> bool*)

(*val rtypew_mnemonic_backwards_matches : string -> bool*)

(*val rtypew_mnemonic_matches_prefix : string -> maybe ((ropw * ii))*)

val _ = Define `
 ((rtypew_mnemonic_forwards:ropw -> string) arg_=
    ((case arg_ of
     RISCV_ADDW => "addw"
   | RISCV_SUBW => "subw"
   | RISCV_SLLW => "sllw"
   | RISCV_SRLW => "srlw"
   | RISCV_SRAW => "sraw"
   )))`;


val _ = Define `
 ((rtypew_mnemonic_backwards:string ->(regstate)sail2_state_monad$sequential_state ->(((ropw),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "addw"))) then sail2_state_monad$returnS RISCV_ADDW
   else if (((p0_ = "subw"))) then sail2_state_monad$returnS RISCV_SUBW
   else if (((p0_ = "sllw"))) then sail2_state_monad$returnS RISCV_SLLW
   else if (((p0_ = "srlw"))) then sail2_state_monad$returnS RISCV_SRLW
   else if (((p0_ = "sraw"))) then sail2_state_monad$returnS RISCV_SRAW
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((rtypew_mnemonic_forwards_matches:ropw -> bool) arg_= 
  ((case arg_ of
         RISCV_ADDW => T
     | RISCV_SUBW => T
     | RISCV_SLLW => T
     | RISCV_SRLW => T
     | RISCV_SRAW => T
   )))`;


val _ = Define `
 ((rtypew_mnemonic_backwards_matches:string -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "addw"))) then T
   else if (((p0_ = "subw"))) then T
   else if (((p0_ = "sllw"))) then T
   else if (((p0_ = "srlw"))) then T
   else if (((p0_ = "sraw"))) then T
   else F))`;


(*val _s917_ : string -> maybe string*)

val _ = Define `
 ((s917_:string ->(string)option) s918_0=
    (let s919_0 = s918_0 in
   if ((string_startswith s919_0 "sraw")) then  
  (case ((string_drop s919_0 ((string_length "sraw")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s913_ : string -> maybe string*)

val _ = Define `
 ((s913_:string ->(string)option) s914_0=
    (let s915_0 = s914_0 in
   if ((string_startswith s915_0 "srlw")) then  
  (case ((string_drop s915_0 ((string_length "srlw")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s909_ : string -> maybe string*)

val _ = Define `
 ((s909_:string ->(string)option) s910_0=
    (let s911_0 = s910_0 in
   if ((string_startswith s911_0 "sllw")) then  
  (case ((string_drop s911_0 ((string_length "sllw")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s905_ : string -> maybe string*)

val _ = Define `
 ((s905_:string ->(string)option) s906_0=
    (let s907_0 = s906_0 in
   if ((string_startswith s907_0 "subw")) then  
  (case ((string_drop s907_0 ((string_length "subw")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s901_ : string -> maybe string*)

val _ = Define `
 ((s901_:string ->(string)option) s902_0=
    (let s903_0 = s902_0 in
   if ((string_startswith s903_0 "addw")) then  
  (case ((string_drop s903_0 ((string_length "addw")))) of   s_ => SOME s_ )
   else NONE))`;


val _ = Define `
 ((rtypew_mnemonic_matches_prefix:string ->(ropw#int)option) arg_=
    (let s904_0 = arg_ in
   if ((case ((s901_ s904_0)) of   SOME (s_) => T | _ => F )) then  
  (case s901_ s904_0 of
      (SOME (s_)) =>
  SOME (RISCV_ADDW, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s905_ s904_0)) of   SOME (s_) => T | _ => F )) then  
  (case s905_ s904_0 of
      (SOME (s_)) =>
  SOME (RISCV_SUBW, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s909_ s904_0)) of   SOME (s_) => T | _ => F )) then  
  (case s909_ s904_0 of
      (SOME (s_)) =>
  SOME (RISCV_SLLW, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s913_ s904_0)) of   SOME (s_) => T | _ => F )) then  
  (case s913_ s904_0 of
      (SOME (s_)) =>
  SOME (RISCV_SRLW, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s917_ s904_0)) of   SOME (s_) => T | _ => F )) then  
  (case s917_ s904_0 of
      (SOME (s_)) =>
  SOME (RISCV_SRAW, ((string_length arg_)) - ((string_length s_)))
  )
   else NONE))`;


(*val shiftiwop_mnemonic_forwards : sopw -> string*)

(*val shiftiwop_mnemonic_backwards : string -> M sopw*)

(*val shiftiwop_mnemonic_forwards_matches : sopw -> bool*)

(*val shiftiwop_mnemonic_backwards_matches : string -> bool*)

(*val shiftiwop_mnemonic_matches_prefix : string -> maybe ((sopw * ii))*)

val _ = Define `
 ((shiftiwop_mnemonic_forwards:sopw -> string) arg_=
    ((case arg_ of   RISCV_SLLIW => "slliw" | RISCV_SRLIW => "srliw" | RISCV_SRAIW => "sraiw" )))`;


val _ = Define `
 ((shiftiwop_mnemonic_backwards:string ->(regstate)sail2_state_monad$sequential_state ->(((sopw),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "slliw"))) then sail2_state_monad$returnS RISCV_SLLIW
   else if (((p0_ = "srliw"))) then sail2_state_monad$returnS RISCV_SRLIW
   else if (((p0_ = "sraiw"))) then sail2_state_monad$returnS RISCV_SRAIW
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((shiftiwop_mnemonic_forwards_matches:sopw -> bool) arg_= 
  ((case arg_ of   RISCV_SLLIW => T | RISCV_SRLIW => T | RISCV_SRAIW => T )))`;


val _ = Define `
 ((shiftiwop_mnemonic_backwards_matches:string -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "slliw"))) then T
   else if (((p0_ = "srliw"))) then T
   else if (((p0_ = "sraiw"))) then T
   else F))`;


(*val _s929_ : string -> maybe string*)

val _ = Define `
 ((s929_:string ->(string)option) s930_0=
    (let s931_0 = s930_0 in
   if ((string_startswith s931_0 "sraiw")) then  
  (case ((string_drop s931_0 ((string_length "sraiw")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s925_ : string -> maybe string*)

val _ = Define `
 ((s925_:string ->(string)option) s926_0=
    (let s927_0 = s926_0 in
   if ((string_startswith s927_0 "srliw")) then  
  (case ((string_drop s927_0 ((string_length "srliw")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s921_ : string -> maybe string*)

val _ = Define `
 ((s921_:string ->(string)option) s922_0=
    (let s923_0 = s922_0 in
   if ((string_startswith s923_0 "slliw")) then  
  (case ((string_drop s923_0 ((string_length "slliw")))) of   s_ => SOME s_ )
   else NONE))`;


val _ = Define `
 ((shiftiwop_mnemonic_matches_prefix:string ->(sopw#int)option) arg_=
    (let s924_0 = arg_ in
   if ((case ((s921_ s924_0)) of   SOME (s_) => T | _ => F )) then  
  (case s921_ s924_0 of
      (SOME (s_)) =>
  SOME (RISCV_SLLIW, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s925_ s924_0)) of   SOME (s_) => T | _ => F )) then  
  (case s925_ s924_0 of
      (SOME (s_)) =>
  SOME (RISCV_SRLIW, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s929_ s924_0)) of   SOME (s_) => T | _ => F )) then  
  (case s929_ s924_0 of
      (SOME (s_)) =>
  SOME (RISCV_SRAIW, ((string_length arg_)) - ((string_length s_)))
  )
   else NONE))`;


(*val bit_maybe_r_forwards : mword ty1 -> M string*)

(*val bit_maybe_r_backwards : string -> M (mword ty1)*)

(*val bit_maybe_r_forwards_matches : mword ty1 -> bool*)

(*val bit_maybe_r_backwards_matches : string -> bool*)

(*val bit_maybe_r_matches_prefix : string -> maybe ((mword ty1 * ii))*)

val _ = Define `
 ((bit_maybe_r_forwards:(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((string),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b1w :  1 words$word)))) then sail2_state_monad$returnS "r"
   else if (((b__0 = (0b0w :  1 words$word)))) then sail2_state_monad$returnS ""
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((bit_maybe_r_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((1)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "r"))) then sail2_state_monad$returnS (0b1w :  1 words$word)
   else if (((p0_ = ""))) then sail2_state_monad$returnS (0b0w :  1 words$word)
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((bit_maybe_r_forwards_matches:(1)words$word -> bool) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b1w :  1 words$word)))) then T
   else if (((b__0 = (0b0w :  1 words$word)))) then T
   else F))`;


val _ = Define `
 ((bit_maybe_r_backwards_matches:string -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "r"))) then T
   else if (((p0_ = ""))) then T
   else F))`;


(*val _s937_ : string -> maybe string*)

val _ = Define `
 ((s937_:string ->(string)option) s938_0=
    (let s939_0 = s938_0 in
   if ((string_startswith s939_0 "")) then  
  (case ((string_drop s939_0 ((string_length "")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s933_ : string -> maybe string*)

val _ = Define `
 ((s933_:string ->(string)option) s934_0=
    (let s935_0 = s934_0 in
   if ((string_startswith s935_0 "r")) then  
  (case ((string_drop s935_0 ((string_length "r")))) of   s_ => SOME s_ )
   else NONE))`;


val _ = Define `
 ((bit_maybe_r_matches_prefix:string ->((1)words$word#int)option) arg_=
    (let s936_0 = arg_ in
   if ((case ((s933_ s936_0)) of   SOME (s_) => T | _ => F )) then  
  (case s933_ s936_0 of
      (SOME (s_)) =>
  SOME ((0b1w : 1 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s937_ s936_0)) of   SOME (s_) => T | _ => F )) then  
  (case s937_ s936_0 of
      (SOME (s_)) =>
  SOME ((0b0w : 1 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else NONE))`;


(*val bit_maybe_w_forwards : mword ty1 -> M string*)

(*val bit_maybe_w_backwards : string -> M (mword ty1)*)

(*val bit_maybe_w_forwards_matches : mword ty1 -> bool*)

(*val bit_maybe_w_backwards_matches : string -> bool*)

(*val bit_maybe_w_matches_prefix : string -> maybe ((mword ty1 * ii))*)

val _ = Define `
 ((bit_maybe_w_forwards:(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((string),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b1w :  1 words$word)))) then sail2_state_monad$returnS "w"
   else if (((b__0 = (0b0w :  1 words$word)))) then sail2_state_monad$returnS ""
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((bit_maybe_w_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((1)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "w"))) then sail2_state_monad$returnS (0b1w :  1 words$word)
   else if (((p0_ = ""))) then sail2_state_monad$returnS (0b0w :  1 words$word)
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((bit_maybe_w_forwards_matches:(1)words$word -> bool) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b1w :  1 words$word)))) then T
   else if (((b__0 = (0b0w :  1 words$word)))) then T
   else F))`;


val _ = Define `
 ((bit_maybe_w_backwards_matches:string -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "w"))) then T
   else if (((p0_ = ""))) then T
   else F))`;


(*val _s945_ : string -> maybe string*)

val _ = Define `
 ((s945_:string ->(string)option) s946_0=
    (let s947_0 = s946_0 in
   if ((string_startswith s947_0 "")) then  
  (case ((string_drop s947_0 ((string_length "")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s941_ : string -> maybe string*)

val _ = Define `
 ((s941_:string ->(string)option) s942_0=
    (let s943_0 = s942_0 in
   if ((string_startswith s943_0 "w")) then  
  (case ((string_drop s943_0 ((string_length "w")))) of   s_ => SOME s_ )
   else NONE))`;


val _ = Define `
 ((bit_maybe_w_matches_prefix:string ->((1)words$word#int)option) arg_=
    (let s944_0 = arg_ in
   if ((case ((s941_ s944_0)) of   SOME (s_) => T | _ => F )) then  
  (case s941_ s944_0 of
      (SOME (s_)) =>
  SOME ((0b1w : 1 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s945_ s944_0)) of   SOME (s_) => T | _ => F )) then  
  (case s945_ s944_0 of
      (SOME (s_)) =>
  SOME ((0b0w : 1 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else NONE))`;


(*val bit_maybe_i_forwards : mword ty1 -> M string*)

(*val bit_maybe_i_backwards : string -> M (mword ty1)*)

(*val bit_maybe_i_forwards_matches : mword ty1 -> bool*)

(*val bit_maybe_i_backwards_matches : string -> bool*)

(*val bit_maybe_i_matches_prefix : string -> maybe ((mword ty1 * ii))*)

val _ = Define `
 ((bit_maybe_i_forwards:(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((string),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b1w :  1 words$word)))) then sail2_state_monad$returnS "i"
   else if (((b__0 = (0b0w :  1 words$word)))) then sail2_state_monad$returnS ""
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((bit_maybe_i_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((1)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "i"))) then sail2_state_monad$returnS (0b1w :  1 words$word)
   else if (((p0_ = ""))) then sail2_state_monad$returnS (0b0w :  1 words$word)
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((bit_maybe_i_forwards_matches:(1)words$word -> bool) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b1w :  1 words$word)))) then T
   else if (((b__0 = (0b0w :  1 words$word)))) then T
   else F))`;


val _ = Define `
 ((bit_maybe_i_backwards_matches:string -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "i"))) then T
   else if (((p0_ = ""))) then T
   else F))`;


(*val _s953_ : string -> maybe string*)

val _ = Define `
 ((s953_:string ->(string)option) s954_0=
    (let s955_0 = s954_0 in
   if ((string_startswith s955_0 "")) then  
  (case ((string_drop s955_0 ((string_length "")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s949_ : string -> maybe string*)

val _ = Define `
 ((s949_:string ->(string)option) s950_0=
    (let s951_0 = s950_0 in
   if ((string_startswith s951_0 "i")) then  
  (case ((string_drop s951_0 ((string_length "i")))) of   s_ => SOME s_ )
   else NONE))`;


val _ = Define `
 ((bit_maybe_i_matches_prefix:string ->((1)words$word#int)option) arg_=
    (let s952_0 = arg_ in
   if ((case ((s949_ s952_0)) of   SOME (s_) => T | _ => F )) then  
  (case s949_ s952_0 of
      (SOME (s_)) =>
  SOME ((0b1w : 1 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s953_ s952_0)) of   SOME (s_) => T | _ => F )) then  
  (case s953_ s952_0 of
      (SOME (s_)) =>
  SOME ((0b0w : 1 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else NONE))`;


(*val bit_maybe_o_forwards : mword ty1 -> M string*)

(*val bit_maybe_o_backwards : string -> M (mword ty1)*)

(*val bit_maybe_o_forwards_matches : mword ty1 -> bool*)

(*val bit_maybe_o_backwards_matches : string -> bool*)

(*val bit_maybe_o_matches_prefix : string -> maybe ((mword ty1 * ii))*)

val _ = Define `
 ((bit_maybe_o_forwards:(1)words$word ->(regstate)sail2_state_monad$sequential_state ->(((string),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b1w :  1 words$word)))) then sail2_state_monad$returnS "o"
   else if (((b__0 = (0b0w :  1 words$word)))) then sail2_state_monad$returnS ""
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((bit_maybe_o_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((1)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "o"))) then sail2_state_monad$returnS (0b1w :  1 words$word)
   else if (((p0_ = ""))) then sail2_state_monad$returnS (0b0w :  1 words$word)
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((bit_maybe_o_forwards_matches:(1)words$word -> bool) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b1w :  1 words$word)))) then T
   else if (((b__0 = (0b0w :  1 words$word)))) then T
   else F))`;


val _ = Define `
 ((bit_maybe_o_backwards_matches:string -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "o"))) then T
   else if (((p0_ = ""))) then T
   else F))`;


(*val _s961_ : string -> maybe string*)

val _ = Define `
 ((s961_:string ->(string)option) s962_0=
    (let s963_0 = s962_0 in
   if ((string_startswith s963_0 "")) then  
  (case ((string_drop s963_0 ((string_length "")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s957_ : string -> maybe string*)

val _ = Define `
 ((s957_:string ->(string)option) s958_0=
    (let s959_0 = s958_0 in
   if ((string_startswith s959_0 "o")) then  
  (case ((string_drop s959_0 ((string_length "o")))) of   s_ => SOME s_ )
   else NONE))`;


val _ = Define `
 ((bit_maybe_o_matches_prefix:string ->((1)words$word#int)option) arg_=
    (let s960_0 = arg_ in
   if ((case ((s957_ s960_0)) of   SOME (s_) => T | _ => F )) then  
  (case s957_ s960_0 of
      (SOME (s_)) =>
  SOME ((0b1w : 1 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s961_ s960_0)) of   SOME (s_) => T | _ => F )) then  
  (case s961_ s960_0 of
      (SOME (s_)) =>
  SOME ((0b0w : 1 words$word), ((string_length arg_)) - ((string_length s_)))
  )
   else NONE))`;


(*val fence_bits_forwards : mword ty4 -> M string*)

(*val fence_bits_backwards : string -> M (mword ty4)*)

(*val fence_bits_forwards_matches : mword ty4 -> bool*)

(*val fence_bits_backwards_matches : string -> bool*)

(*val fence_bits_matches_prefix : string -> maybe ((mword ty4 * ii))*)

val _ = Define `
 ((fence_bits_forwards:(4)words$word ->(regstate)sail2_state_monad$sequential_state ->(((string),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    ((case arg_ of
     v__0 =>
      let (i : 1 bits) = ((subrange_vec_dec v__0 (( 3 : int):ii) (( 3 : int):ii)  :  1 words$word)) in
      let (w : 1 bits) = ((subrange_vec_dec v__0 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)) in
      let (r : 1 bits) = ((subrange_vec_dec v__0 (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)) in
      let (o1 : 1 bits) = ((subrange_vec_dec v__0 (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)) in
      let (i : 1 bits) = ((subrange_vec_dec v__0 (( 3 : int):ii) (( 3 : int):ii)  :  1 words$word)) in sail2_state_monad$bindS
      (bit_maybe_i_forwards i) (\ (w__0 : string) .  sail2_state_monad$bindS
      (bit_maybe_o_forwards o1) (\ (w__1 : string) .  sail2_state_monad$bindS
      (bit_maybe_r_forwards r) (\ (w__2 : string) .  sail2_state_monad$bindS
      (bit_maybe_w_forwards w) (\ (w__3 : string) . 
      sail2_state_monad$returnS ((string_append w__0
                 ((string_append w__1 ((string_append w__2 ((string_append w__3 ""))))))))))))
   )))`;


(*val _s965_ : string -> maybe ((mword ty1 * mword ty1 * mword ty1 * mword ty1))*)

val _ = Define `
 ((s965_:string ->((1)words$word#(1)words$word#(1)words$word#(1)words$word)option) s966_0= 
  ((case s966_0 of
         s967_0 =>
   (case ((bit_maybe_i_matches_prefix s967_0 : (( 1 words$word # ii)) option)) of
         SOME ((i, s968_0)) =>
   (case ((string_drop s967_0 s968_0)) of
         s969_0 =>
   (case ((bit_maybe_o_matches_prefix s969_0 : (( 1 words$word # ii)) option)) of
         SOME ((o1, s970_0)) =>
   (case ((string_drop s969_0 s970_0)) of
         s971_0 =>
   (case ((bit_maybe_r_matches_prefix s971_0 : (( 1 words$word # ii)) option)) of
         SOME ((r, s972_0)) =>
   (case ((string_drop s971_0 s972_0)) of
         s973_0 =>
   (case ((bit_maybe_w_matches_prefix s973_0 : (( 1 words$word # ii)) option)) of
         SOME ((w, s974_0)) =>
   let p0_ = (string_drop s973_0 s974_0) in
   if (((p0_ = ""))) then SOME (i, o1, r, w) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


val _ = Define `
 ((fence_bits_backwards:string ->(regstate)sail2_state_monad$sequential_state ->((((4)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let s975_0 = arg_ in
   if ((case ((s965_ s975_0  :  (( 1 words$word #  1 words$word #  1 words$word #  1 words$word))option)) of
       SOME ((i, o1, r, w)) => T
     | _ => F
     )) then  (case
 (s965_ s975_0 : (( 1 words$word # 1 words$word # 1 words$word # 1 words$word)) option) of
     (SOME ((i, o1, r, w))) =>
 sail2_state_monad$returnS
   ((concat_vec i
       ((concat_vec o1 ((concat_vec r w : 2 words$word)) : 3 words$word))
    : 4 words$word))
 )
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((fence_bits_forwards_matches:(4)words$word -> bool) arg_= 
  ((case arg_ of   v__1 => T )))`;


(*val _s976_ : string -> maybe ((mword ty1 * mword ty1 * mword ty1 * mword ty1))*)

val _ = Define `
 ((s976_:string ->((1)words$word#(1)words$word#(1)words$word#(1)words$word)option) s977_0= 
  ((case s977_0 of
         s978_0 =>
   (case ((bit_maybe_i_matches_prefix s978_0 : (( 1 words$word # ii)) option)) of
         SOME ((i, s979_0)) =>
   (case ((string_drop s978_0 s979_0)) of
         s980_0 =>
   (case ((bit_maybe_o_matches_prefix s980_0 : (( 1 words$word # ii)) option)) of
         SOME ((o1, s981_0)) =>
   (case ((string_drop s980_0 s981_0)) of
         s982_0 =>
   (case ((bit_maybe_r_matches_prefix s982_0 : (( 1 words$word # ii)) option)) of
         SOME ((r, s983_0)) =>
   (case ((string_drop s982_0 s983_0)) of
         s984_0 =>
   (case ((bit_maybe_w_matches_prefix s984_0 : (( 1 words$word # ii)) option)) of
         SOME ((w, s985_0)) =>
   let p0_ = (string_drop s984_0 s985_0) in
   if (((p0_ = ""))) then SOME (i, o1, r, w) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


val _ = Define `
 ((fence_bits_backwards_matches:string -> bool) arg_=
    (let s986_0 = arg_ in
   if ((case ((s976_ s986_0  :  (( 1 words$word #  1 words$word #  1 words$word #  1 words$word))option)) of
       SOME ((i, o1, r, w)) => T
     | _ => F
     )) then  (case
 (s976_ s986_0 : (( 1 words$word # 1 words$word # 1 words$word # 1 words$word)) option) of
     (SOME ((i, o1, r, w))) =>
 T
 )
   else F))`;


(*val _s987_ : string -> maybe ((mword ty1 * mword ty1 * mword ty1 * mword ty1 * string))*)

val _ = Define `
 ((s987_:string ->((1)words$word#(1)words$word#(1)words$word#(1)words$word#string)option) s988_0= 
  ((case s988_0 of
         s989_0 =>
   (case ((bit_maybe_i_matches_prefix s989_0 : (( 1 words$word # ii)) option)) of
         SOME ((i, s990_0)) =>
   (case ((string_drop s989_0 s990_0)) of
         s991_0 =>
   (case ((bit_maybe_o_matches_prefix s991_0 : (( 1 words$word # ii)) option)) of
         SOME ((o1, s992_0)) =>
   (case ((string_drop s991_0 s992_0)) of
         s993_0 =>
   (case ((bit_maybe_r_matches_prefix s993_0 : (( 1 words$word # ii)) option)) of
         SOME ((r, s994_0)) =>
   (case ((string_drop s993_0 s994_0)) of
         s995_0 =>
   (case ((bit_maybe_w_matches_prefix s995_0 : (( 1 words$word # ii)) option)) of
         SOME ((w, s996_0)) =>
   (case ((string_drop s995_0 s996_0)) of   s_ => SOME (i, o1, r, w, s_) )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


val _ = Define `
 ((fence_bits_matches_prefix:string ->((4)words$word#int)option) arg_=
    (let s997_0 = arg_ in
   if ((case ((s987_ s997_0  :  (( 1 words$word #  1 words$word #  1 words$word #  1 words$word # string))option)) of
       SOME ((i, o1, r, w, s_)) => T
     | _ => F
     )) then  (case
 (s987_ s997_0 : (( 1 words$word # 1 words$word # 1 words$word # 1 words$word # string)) option) of
     (SOME ((i, o1, r, w, s_))) =>
 SOME
   ((concat_vec i
       ((concat_vec o1 ((concat_vec r w : 2 words$word)) : 3 words$word)) : 4 words$word),
   ((string_length arg_)) - ((string_length s_)))
 )
   else NONE))`;


(*val aqrl_str : bool -> bool -> string*)

val _ = Define `
 ((aqrl_str:bool -> bool -> string) (aq : bool) (rl : bool)=
    ((case (aq, rl) of
     (F, F) => ""
   | (F, T) => ".rl"
   | (T, F) => ".aq"
   | (T, T) => ".aqrl"
   )))`;


(*val lrsc_width_str : word_width -> string*)

val _ = Define `
 ((lrsc_width_str:word_width -> string) width=
    ((case width of   BYTE => ".b" | HALF => ".h" | WORD => ".w" | DOUBLE => ".d" )))`;


(*val amo_width_valid : word_width -> bool*)

val _ = Define `
 ((amo_width_valid:word_width -> bool) size1=
    ((case size1 of   WORD => T | DOUBLE => (( 32 : int):ii) >= (( 64 : int):ii) | _ => F )))`;


(*val process_loadres : forall 'int8_times_n. Size 'int8_times_n => mword ty5 -> mword ty32 -> MemoryOpResult (mword 'int8_times_n) -> bool -> M Retired*)

val _ = Define `
 ((process_loadres:(5)words$word ->(32)words$word ->('int8_times_n words$word)MemoryOpResult -> bool ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rd addr value is_unsigned=
    ((case ((extend_value is_unsigned value  : ( 32 words$word) MemoryOpResult)) of
     MemValue (result) =>
      let (_ : unit) = (load_reservation addr) in sail2_state_monad$seqS
      (wX_bits rd result) (sail2_state_monad$returnS RETIRE_SUCCESS)
   | MemException (e) => sail2_state_monad$seqS (handle_mem_exception addr e) (sail2_state_monad$returnS RETIRE_FAIL)
   )))`;


(*val encdec_amoop_forwards : amoop -> mword ty5*)

(*val encdec_amoop_backwards : mword ty5 -> M amoop*)

(*val encdec_amoop_forwards_matches : amoop -> bool*)

(*val encdec_amoop_backwards_matches : mword ty5 -> bool*)

val _ = Define `
 ((encdec_amoop_forwards:amoop ->(5)words$word) arg_=
    ((case arg_ of
     AMOSWAP => (0b00001w :  5 words$word)
   | AMOADD => (0b00000w :  5 words$word)
   | AMOXOR => (0b00100w :  5 words$word)
   | AMOAND => (0b01100w :  5 words$word)
   | AMOOR => (0b01000w :  5 words$word)
   | AMOMIN => (0b10000w :  5 words$word)
   | AMOMAX => (0b10100w :  5 words$word)
   | AMOMINU => (0b11000w :  5 words$word)
   | AMOMAXU => (0b11100w :  5 words$word)
   )))`;


val _ = Define `
 ((encdec_amoop_backwards:(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((amoop),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b00001w :  5 words$word)))) then sail2_state_monad$returnS AMOSWAP
   else if (((b__0 = (0b00000w :  5 words$word)))) then sail2_state_monad$returnS AMOADD
   else if (((b__0 = (0b00100w :  5 words$word)))) then sail2_state_monad$returnS AMOXOR
   else if (((b__0 = (0b01100w :  5 words$word)))) then sail2_state_monad$returnS AMOAND
   else if (((b__0 = (0b01000w :  5 words$word)))) then sail2_state_monad$returnS AMOOR
   else if (((b__0 = (0b10000w :  5 words$word)))) then sail2_state_monad$returnS AMOMIN
   else if (((b__0 = (0b10100w :  5 words$word)))) then sail2_state_monad$returnS AMOMAX
   else if (((b__0 = (0b11000w :  5 words$word)))) then sail2_state_monad$returnS AMOMINU
   else if (((b__0 = (0b11100w :  5 words$word)))) then sail2_state_monad$returnS AMOMAXU
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((encdec_amoop_forwards_matches:amoop -> bool) arg_= 
  ((case arg_ of
         AMOSWAP => T
     | AMOADD => T
     | AMOXOR => T
     | AMOAND => T
     | AMOOR => T
     | AMOMIN => T
     | AMOMAX => T
     | AMOMINU => T
     | AMOMAXU => T
   )))`;


val _ = Define `
 ((encdec_amoop_backwards_matches:(5)words$word -> bool) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b00001w :  5 words$word)))) then T
   else if (((b__0 = (0b00000w :  5 words$word)))) then T
   else if (((b__0 = (0b00100w :  5 words$word)))) then T
   else if (((b__0 = (0b01100w :  5 words$word)))) then T
   else if (((b__0 = (0b01000w :  5 words$word)))) then T
   else if (((b__0 = (0b10000w :  5 words$word)))) then T
   else if (((b__0 = (0b10100w :  5 words$word)))) then T
   else if (((b__0 = (0b11000w :  5 words$word)))) then T
   else if (((b__0 = (0b11100w :  5 words$word)))) then T
   else F))`;


(*val amo_mnemonic_forwards : amoop -> string*)

(*val amo_mnemonic_backwards : string -> M amoop*)

(*val amo_mnemonic_forwards_matches : amoop -> bool*)

(*val amo_mnemonic_backwards_matches : string -> bool*)

(*val amo_mnemonic_matches_prefix : string -> maybe ((amoop * ii))*)

val _ = Define `
 ((amo_mnemonic_forwards:amoop -> string) arg_=
    ((case arg_ of
     AMOSWAP => "amoswap"
   | AMOADD => "amoadd"
   | AMOXOR => "amoxor"
   | AMOAND => "amoand"
   | AMOOR => "amoor"
   | AMOMIN => "amomin"
   | AMOMAX => "amomax"
   | AMOMINU => "amominu"
   | AMOMAXU => "amomaxu"
   )))`;


val _ = Define `
 ((amo_mnemonic_backwards:string ->(regstate)sail2_state_monad$sequential_state ->(((amoop),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "amoswap"))) then sail2_state_monad$returnS AMOSWAP
   else if (((p0_ = "amoadd"))) then sail2_state_monad$returnS AMOADD
   else if (((p0_ = "amoxor"))) then sail2_state_monad$returnS AMOXOR
   else if (((p0_ = "amoand"))) then sail2_state_monad$returnS AMOAND
   else if (((p0_ = "amoor"))) then sail2_state_monad$returnS AMOOR
   else if (((p0_ = "amomin"))) then sail2_state_monad$returnS AMOMIN
   else if (((p0_ = "amomax"))) then sail2_state_monad$returnS AMOMAX
   else if (((p0_ = "amominu"))) then sail2_state_monad$returnS AMOMINU
   else if (((p0_ = "amomaxu"))) then sail2_state_monad$returnS AMOMAXU
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((amo_mnemonic_forwards_matches:amoop -> bool) arg_= 
  ((case arg_ of
         AMOSWAP => T
     | AMOADD => T
     | AMOXOR => T
     | AMOAND => T
     | AMOOR => T
     | AMOMIN => T
     | AMOMAX => T
     | AMOMINU => T
     | AMOMAXU => T
   )))`;


val _ = Define `
 ((amo_mnemonic_backwards_matches:string -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "amoswap"))) then T
   else if (((p0_ = "amoadd"))) then T
   else if (((p0_ = "amoxor"))) then T
   else if (((p0_ = "amoand"))) then T
   else if (((p0_ = "amoor"))) then T
   else if (((p0_ = "amomin"))) then T
   else if (((p0_ = "amomax"))) then T
   else if (((p0_ = "amominu"))) then T
   else if (((p0_ = "amomaxu"))) then T
   else F))`;


(*val _s1030_ : string -> maybe string*)

val _ = Define `
 ((s1030_:string ->(string)option) s1031_0=
    (let s1032_0 = s1031_0 in
   if ((string_startswith s1032_0 "amomaxu")) then  
  (case ((string_drop s1032_0 ((string_length "amomaxu")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s1026_ : string -> maybe string*)

val _ = Define `
 ((s1026_:string ->(string)option) s1027_0=
    (let s1028_0 = s1027_0 in
   if ((string_startswith s1028_0 "amominu")) then  
  (case ((string_drop s1028_0 ((string_length "amominu")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s1022_ : string -> maybe string*)

val _ = Define `
 ((s1022_:string ->(string)option) s1023_0=
    (let s1024_0 = s1023_0 in
   if ((string_startswith s1024_0 "amomax")) then  
  (case ((string_drop s1024_0 ((string_length "amomax")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s1018_ : string -> maybe string*)

val _ = Define `
 ((s1018_:string ->(string)option) s1019_0=
    (let s1020_0 = s1019_0 in
   if ((string_startswith s1020_0 "amomin")) then  
  (case ((string_drop s1020_0 ((string_length "amomin")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s1014_ : string -> maybe string*)

val _ = Define `
 ((s1014_:string ->(string)option) s1015_0=
    (let s1016_0 = s1015_0 in
   if ((string_startswith s1016_0 "amoor")) then  
  (case ((string_drop s1016_0 ((string_length "amoor")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s1010_ : string -> maybe string*)

val _ = Define `
 ((s1010_:string ->(string)option) s1011_0=
    (let s1012_0 = s1011_0 in
   if ((string_startswith s1012_0 "amoand")) then  
  (case ((string_drop s1012_0 ((string_length "amoand")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s1006_ : string -> maybe string*)

val _ = Define `
 ((s1006_:string ->(string)option) s1007_0=
    (let s1008_0 = s1007_0 in
   if ((string_startswith s1008_0 "amoxor")) then  
  (case ((string_drop s1008_0 ((string_length "amoxor")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s1002_ : string -> maybe string*)

val _ = Define `
 ((s1002_:string ->(string)option) s1003_0=
    (let s1004_0 = s1003_0 in
   if ((string_startswith s1004_0 "amoadd")) then  
  (case ((string_drop s1004_0 ((string_length "amoadd")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s998_ : string -> maybe string*)

val _ = Define `
 ((s998_:string ->(string)option) s999_0=
    (let s1000_0 = s999_0 in
   if ((string_startswith s1000_0 "amoswap")) then  
  (case ((string_drop s1000_0 ((string_length "amoswap")))) of
        s_ => SOME s_
  )
   else NONE))`;


val _ = Define `
 ((amo_mnemonic_matches_prefix:string ->(amoop#int)option) arg_=
    (let s1001_0 = arg_ in
   if ((case ((s998_ s1001_0)) of   SOME (s_) => T | _ => F )) then  
  (case s998_ s1001_0 of
      (SOME (s_)) =>
  SOME (AMOSWAP, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1002_ s1001_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1002_ s1001_0 of
      (SOME (s_)) =>
  SOME (AMOADD, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1006_ s1001_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1006_ s1001_0 of
      (SOME (s_)) =>
  SOME (AMOXOR, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1010_ s1001_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1010_ s1001_0 of
      (SOME (s_)) =>
  SOME (AMOAND, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1014_ s1001_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1014_ s1001_0 of
      (SOME (s_)) =>
  SOME (AMOOR, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1018_ s1001_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1018_ s1001_0 of
      (SOME (s_)) =>
  SOME (AMOMIN, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1022_ s1001_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1022_ s1001_0 of
      (SOME (s_)) =>
  SOME (AMOMAX, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1026_ s1001_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1026_ s1001_0 of
      (SOME (s_)) =>
  SOME (AMOMINU, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1030_ s1001_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1030_ s1001_0 of
      (SOME (s_)) =>
  SOME (AMOMAXU, ((string_length arg_)) - ((string_length s_)))
  )
   else NONE))`;


(*val encdec_mul_op_forwards : (bool * bool * bool) -> mword ty3*)

(*val encdec_mul_op_backwards : mword ty3 -> M (bool * bool * bool)*)

(*val encdec_mul_op_forwards_matches : (bool * bool * bool) -> bool*)

(*val encdec_mul_op_backwards_matches : mword ty3 -> bool*)

val _ = Define `
 ((encdec_mul_op_forwards:bool#bool#bool ->(3)words$word) arg_=
    ((case arg_ of
     (F, T, T) => (0b000w :  3 words$word)
   | (T, T, T) => (0b001w :  3 words$word)
   | (T, T, F) => (0b010w :  3 words$word)
   | (T, F, F) => (0b011w :  3 words$word)
   )))`;


val _ = Define `
 ((encdec_mul_op_backwards:(3)words$word ->(regstate)sail2_state_monad$sequential_state ->(((bool#bool#bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b000w :  3 words$word)))) then sail2_state_monad$returnS (F, T, T)
   else if (((b__0 = (0b001w :  3 words$word)))) then sail2_state_monad$returnS (T, T, T)
   else if (((b__0 = (0b010w :  3 words$word)))) then sail2_state_monad$returnS (T, T, F)
   else if (((b__0 = (0b011w :  3 words$word)))) then sail2_state_monad$returnS (T, F, F)
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((encdec_mul_op_forwards_matches:bool#bool#bool -> bool) arg_=
    ((case arg_ of
     (F, T, T) => T
   | (T, T, T) => T
   | (T, T, F) => T
   | (T, F, F) => T
   | _ => F
   )))`;


val _ = Define `
 ((encdec_mul_op_backwards_matches:(3)words$word -> bool) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b000w :  3 words$word)))) then T
   else if (((b__0 = (0b001w :  3 words$word)))) then T
   else if (((b__0 = (0b010w :  3 words$word)))) then T
   else if (((b__0 = (0b011w :  3 words$word)))) then T
   else F))`;


(*val mul_mnemonic_forwards : (bool * bool * bool) -> string*)

(*val mul_mnemonic_backwards : string -> M (bool * bool * bool)*)

(*val mul_mnemonic_forwards_matches : (bool * bool * bool) -> bool*)

(*val mul_mnemonic_backwards_matches : string -> bool*)

(*val mul_mnemonic_matches_prefix : string -> maybe (((bool * bool * bool) * ii))*)

val _ = Define `
 ((mul_mnemonic_forwards:bool#bool#bool -> string) arg_=
    ((case arg_ of
     (F, T, T) => "mul"
   | (T, T, T) => "mulh"
   | (T, T, F) => "mulhsu"
   | (T, F, F) => "mulhu"
   )))`;


val _ = Define `
 ((mul_mnemonic_backwards:string ->(regstate)sail2_state_monad$sequential_state ->(((bool#bool#bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "mul"))) then sail2_state_monad$returnS (F, T, T)
   else if (((p0_ = "mulh"))) then sail2_state_monad$returnS (T, T, T)
   else if (((p0_ = "mulhsu"))) then sail2_state_monad$returnS (T, T, F)
   else if (((p0_ = "mulhu"))) then sail2_state_monad$returnS (T, F, F)
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((mul_mnemonic_forwards_matches:bool#bool#bool -> bool) arg_=
    ((case arg_ of
     (F, T, T) => T
   | (T, T, T) => T
   | (T, T, F) => T
   | (T, F, F) => T
   | _ => F
   )))`;


val _ = Define `
 ((mul_mnemonic_backwards_matches:string -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "mul"))) then T
   else if (((p0_ = "mulh"))) then T
   else if (((p0_ = "mulhsu"))) then T
   else if (((p0_ = "mulhu"))) then T
   else F))`;


(*val _s1046_ : string -> maybe string*)

val _ = Define `
 ((s1046_:string ->(string)option) s1047_0=
    (let s1048_0 = s1047_0 in
   if ((string_startswith s1048_0 "mulhu")) then  
  (case ((string_drop s1048_0 ((string_length "mulhu")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s1042_ : string -> maybe string*)

val _ = Define `
 ((s1042_:string ->(string)option) s1043_0=
    (let s1044_0 = s1043_0 in
   if ((string_startswith s1044_0 "mulhsu")) then  
  (case ((string_drop s1044_0 ((string_length "mulhsu")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s1038_ : string -> maybe string*)

val _ = Define `
 ((s1038_:string ->(string)option) s1039_0=
    (let s1040_0 = s1039_0 in
   if ((string_startswith s1040_0 "mulh")) then  
  (case ((string_drop s1040_0 ((string_length "mulh")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s1034_ : string -> maybe string*)

val _ = Define `
 ((s1034_:string ->(string)option) s1035_0=
    (let s1036_0 = s1035_0 in
   if ((string_startswith s1036_0 "mul")) then  
  (case ((string_drop s1036_0 ((string_length "mul")))) of   s_ => SOME s_ )
   else NONE))`;


val _ = Define `
 ((mul_mnemonic_matches_prefix:string ->((bool#bool#bool)#int)option) arg_=
    (let s1037_0 = arg_ in
   if ((case ((s1034_ s1037_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1034_ s1037_0 of
      (SOME (s_)) =>
  SOME ((F, T, T), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1038_ s1037_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1038_ s1037_0 of
      (SOME (s_)) =>
  SOME ((T, T, T), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1042_ s1037_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1042_ s1037_0 of
      (SOME (s_)) =>
  SOME ((T, T, F), ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1046_ s1037_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1046_ s1037_0 of
      (SOME (s_)) =>
  SOME ((T, F, F), ((string_length arg_)) - ((string_length s_)))
  )
   else NONE))`;


(*val maybe_not_u_forwards : bool -> string*)

(*val maybe_not_u_backwards : string -> M bool*)

(*val maybe_not_u_forwards_matches : bool -> bool*)

(*val maybe_not_u_backwards_matches : string -> bool*)

(*val maybe_not_u_matches_prefix : string -> maybe ((bool * ii))*)

val _ = Define `
 ((maybe_not_u_forwards:bool -> string) arg_=  ((case arg_ of   F => "u" | T => "" )))`;


val _ = Define `
 ((maybe_not_u_backwards:string ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "u"))) then sail2_state_monad$returnS F
   else if (((p0_ = ""))) then sail2_state_monad$returnS T
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((maybe_not_u_forwards_matches:bool -> bool) arg_= 
  ((case arg_ of   F => T | T => T )))`;


val _ = Define `
 ((maybe_not_u_backwards_matches:string -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "u"))) then T
   else if (((p0_ = ""))) then T
   else F))`;


(*val _s1054_ : string -> maybe string*)

val _ = Define `
 ((s1054_:string ->(string)option) s1055_0=
    (let s1056_0 = s1055_0 in
   if ((string_startswith s1056_0 "")) then  
  (case ((string_drop s1056_0 ((string_length "")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s1050_ : string -> maybe string*)

val _ = Define `
 ((s1050_:string ->(string)option) s1051_0=
    (let s1052_0 = s1051_0 in
   if ((string_startswith s1052_0 "u")) then  
  (case ((string_drop s1052_0 ((string_length "u")))) of   s_ => SOME s_ )
   else NONE))`;


val _ = Define `
 ((maybe_not_u_matches_prefix:string ->(bool#int)option) arg_=
    (let s1053_0 = arg_ in
   if ((case ((s1050_ s1053_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1050_ s1053_0 of
      (SOME (s_)) =>
  SOME (F, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1054_ s1053_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1054_ s1053_0 of
      (SOME (s_)) =>
  SOME (T, ((string_length arg_)) - ((string_length s_)))
  )
   else NONE))`;


(*val encdec_csrop_forwards : csrop -> mword ty2*)

(*val encdec_csrop_backwards : mword ty2 -> M csrop*)

(*val encdec_csrop_forwards_matches : csrop -> bool*)

(*val encdec_csrop_backwards_matches : mword ty2 -> bool*)

val _ = Define `
 ((encdec_csrop_forwards:csrop ->(2)words$word) arg_=
    ((case arg_ of
     CSRRW => (0b01w :  2 words$word)
   | CSRRS => (0b10w :  2 words$word)
   | CSRRC => (0b11w :  2 words$word)
   )))`;


val _ = Define `
 ((encdec_csrop_backwards:(2)words$word ->(regstate)sail2_state_monad$sequential_state ->(((csrop),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b01w :  2 words$word)))) then sail2_state_monad$returnS CSRRW
   else if (((b__0 = (0b10w :  2 words$word)))) then sail2_state_monad$returnS CSRRS
   else if (((b__0 = (0b11w :  2 words$word)))) then sail2_state_monad$returnS CSRRC
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((encdec_csrop_forwards_matches:csrop -> bool) arg_= 
  ((case arg_ of   CSRRW => T | CSRRS => T | CSRRC => T )))`;


val _ = Define `
 ((encdec_csrop_backwards_matches:(2)words$word -> bool) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b01w :  2 words$word)))) then T
   else if (((b__0 = (0b10w :  2 words$word)))) then T
   else if (((b__0 = (0b11w :  2 words$word)))) then T
   else F))`;


(*val readCSR : mword ty12 -> M (mword ty32)*)

val _ = Define `
 ((readCSR:(12)words$word ->(regstate)sail2_state_monad$sequential_state ->((((32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) csr=  (sail2_state_monad$bindS
   (case (csr, (( 32 : int):ii)) of
     (b__0, g__325) =>
      if (((b__0 = (0xF11w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mvendorid_ref  : ( 32 words$word) M) (\ (w__0 :  32 words$word) . 
        sail2_state_monad$returnS ((EXTZ (( 32 : int):ii) w__0  :  32 words$word)))
      else if (((b__0 = (0xF12w :  12 words$word)))) then (sail2_state_monad$read_regS marchid_ref  : ( 32 words$word) M)
      else if (((b__0 = (0xF13w :  12 words$word)))) then (sail2_state_monad$read_regS mimpid_ref  : ( 32 words$word) M)
      else if (((b__0 = (0xF14w :  12 words$word)))) then (sail2_state_monad$read_regS mhartid_ref  : ( 32 words$word) M)
      else if (((b__0 = (0x300w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mstatus_ref) (\ (w__4 : Mstatus) . 
        sail2_state_monad$returnS ((get_Mstatus_bits w__4  :  32 words$word)))
      else if (((b__0 = (0x301w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS misa_ref) (\ (w__5 : Misa) .  sail2_state_monad$returnS ((get_Misa_bits w__5  :  32 words$word)))
      else if (((b__0 = (0x302w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS medeleg_ref) (\ (w__6 : Medeleg) . 
        sail2_state_monad$returnS ((get_Medeleg_bits w__6  :  32 words$word)))
      else if (((b__0 = (0x303w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mideleg_ref) (\ (w__7 : Minterrupts) . 
        sail2_state_monad$returnS ((get_Minterrupts_bits w__7  :  32 words$word)))
      else if (((b__0 = (0x304w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mie_ref) (\ (w__8 : Minterrupts) . 
        sail2_state_monad$returnS ((get_Minterrupts_bits w__8  :  32 words$word)))
      else if (((b__0 = (0x305w :  12 words$word)))) then (get_mtvec ()   : ( 32 words$word) M)
      else if (((b__0 = (0x306w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mcounteren_ref) (\ (w__10 : Counteren) . 
        sail2_state_monad$returnS ((EXTZ (( 32 : int):ii) ((get_Counteren_bits w__10  :  32 words$word))  :  32 words$word)))
      else if ((((((b__0 = (0x310w :  12 words$word)))) /\ (((g__325 = (( 32 : int):ii))))))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mstatush_ref) (\ (w__11 : Mstatush) . 
        sail2_state_monad$returnS ((get_Mstatush_bits w__11  :  32 words$word)))
      else if (((b__0 = (0x320w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mcountinhibit_ref) (\ (w__12 : Counterin) . 
        sail2_state_monad$returnS ((EXTZ (( 32 : int):ii) ((get_Counterin_bits w__12  :  32 words$word))  :  32 words$word)))
      else if (((b__0 = (0x340w :  12 words$word)))) then (sail2_state_monad$read_regS mscratch_ref  : ( 32 words$word) M)
      else if (((b__0 = (0x341w :  12 words$word)))) then sail2_state_monad$bindS
        (get_xret_target Machine  : ( 32 words$word) M) (\ (w__14 :  32 words$word) .  sail2_state_monad$bindS
        (pc_alignment_mask ()   : ( 32 words$word) M) (\ (w__15 :  32 words$word) . 
        sail2_state_monad$returnS ((and_vec w__14 w__15  :  32 words$word))))
      else if (((b__0 = (0x342w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mcause_ref) (\ (w__16 : Mcause) . 
        sail2_state_monad$returnS ((get_Mcause_bits w__16  :  32 words$word)))
      else if (((b__0 = (0x343w :  12 words$word)))) then (sail2_state_monad$read_regS mtval_ref  : ( 32 words$word) M)
      else if (((b__0 = (0x344w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mip_ref) (\ (w__18 : Minterrupts) . 
        sail2_state_monad$returnS ((get_Minterrupts_bits w__18  :  32 words$word)))
      else if (((b__0 = (0x3A0w :  12 words$word)))) then (pmpReadCfgReg (( 0 : int):ii)  : ( 32 words$word) M)
      else if ((((((b__0 = (0x3A1w :  12 words$word)))) /\ (((g__325 = (( 32 : int):ii))))))) then
        (pmpReadCfgReg (( 1 : int):ii)  : ( 32 words$word) M)
      else if (((b__0 = (0x3A2w :  12 words$word)))) then (pmpReadCfgReg (( 2 : int):ii)  : ( 32 words$word) M)
      else if ((((((b__0 = (0x3A3w :  12 words$word)))) /\ (((g__325 = (( 32 : int):ii))))))) then
        (pmpReadCfgReg (( 3 : int):ii)  : ( 32 words$word) M)
      else if (((b__0 = (0x3B0w :  12 words$word)))) then (sail2_state_monad$read_regS pmpaddr0_ref  : ( 32 words$word) M)
      else if (((b__0 = (0x3B1w :  12 words$word)))) then (sail2_state_monad$read_regS pmpaddr1_ref  : ( 32 words$word) M)
      else if (((b__0 = (0x3B2w :  12 words$word)))) then (sail2_state_monad$read_regS pmpaddr2_ref  : ( 32 words$word) M)
      else if (((b__0 = (0x3B3w :  12 words$word)))) then (sail2_state_monad$read_regS pmpaddr3_ref  : ( 32 words$word) M)
      else if (((b__0 = (0x3B4w :  12 words$word)))) then (sail2_state_monad$read_regS pmpaddr4_ref  : ( 32 words$word) M)
      else if (((b__0 = (0x3B5w :  12 words$word)))) then (sail2_state_monad$read_regS pmpaddr5_ref  : ( 32 words$word) M)
      else if (((b__0 = (0x3B6w :  12 words$word)))) then (sail2_state_monad$read_regS pmpaddr6_ref  : ( 32 words$word) M)
      else if (((b__0 = (0x3B7w :  12 words$word)))) then (sail2_state_monad$read_regS pmpaddr7_ref  : ( 32 words$word) M)
      else if (((b__0 = (0x3B8w :  12 words$word)))) then (sail2_state_monad$read_regS pmpaddr8_ref  : ( 32 words$word) M)
      else if (((b__0 = (0x3B9w :  12 words$word)))) then (sail2_state_monad$read_regS pmpaddr9_ref  : ( 32 words$word) M)
      else if (((b__0 = (0x3BAw :  12 words$word)))) then (sail2_state_monad$read_regS pmpaddr10_ref  : ( 32 words$word) M)
      else if (((b__0 = (0x3BBw :  12 words$word)))) then (sail2_state_monad$read_regS pmpaddr11_ref  : ( 32 words$word) M)
      else if (((b__0 = (0x3BCw :  12 words$word)))) then (sail2_state_monad$read_regS pmpaddr12_ref  : ( 32 words$word) M)
      else if (((b__0 = (0x3BDw :  12 words$word)))) then (sail2_state_monad$read_regS pmpaddr13_ref  : ( 32 words$word) M)
      else if (((b__0 = (0x3BEw :  12 words$word)))) then (sail2_state_monad$read_regS pmpaddr14_ref  : ( 32 words$word) M)
      else if (((b__0 = (0x3BFw :  12 words$word)))) then (sail2_state_monad$read_regS pmpaddr15_ref  : ( 32 words$word) M)
      else if (((b__0 = (0xB00w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mcycle_ref  : ( 64 words$word) M) (\ (w__39 :  64 words$word) . 
        sail2_state_monad$returnS ((subrange_vec_dec w__39 (((( 32 : int):ii) - (( 1 : int):ii))) (( 0 : int):ii)  :  32 words$word)))
      else if (((b__0 = (0xB02w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS minstret_ref  : ( 64 words$word) M) (\ (w__40 :  64 words$word) . 
        sail2_state_monad$returnS ((subrange_vec_dec w__40 (((( 32 : int):ii) - (( 1 : int):ii))) (( 0 : int):ii)  :  32 words$word)))
      else if ((((((b__0 = (0xB80w :  12 words$word)))) /\ (((g__325 = (( 32 : int):ii))))))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mcycle_ref  : ( 64 words$word) M) (\ (w__41 :  64 words$word) . 
        sail2_state_monad$returnS ((subrange_vec_dec w__41 (( 63 : int):ii) (( 32 : int):ii)  :  32 words$word)))
      else if ((((((b__0 = (0xB82w :  12 words$word)))) /\ (((g__325 = (( 32 : int):ii))))))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS minstret_ref  : ( 64 words$word) M) (\ (w__42 :  64 words$word) . 
        sail2_state_monad$returnS ((subrange_vec_dec w__42 (( 63 : int):ii) (( 32 : int):ii)  :  32 words$word)))
      else if (((b__0 = (0x7A0w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS tselect_ref  : ( 32 words$word) M) (\ (w__43 :  32 words$word) . 
        sail2_state_monad$returnS ((not_vec w__43  :  32 words$word)))
      else if (((b__0 = (0x100w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mstatus_ref) (\ (w__44 : Mstatus) . 
        sail2_state_monad$returnS ((get_Sstatus_bits ((lower_mstatus w__44))  :  32 words$word)))
      else if (((b__0 = (0x102w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS sedeleg_ref) (\ (w__45 : Sedeleg) . 
        sail2_state_monad$returnS ((get_Sedeleg_bits w__45  :  32 words$word)))
      else if (((b__0 = (0x103w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS sideleg_ref) (\ (w__46 : Sinterrupts) . 
        sail2_state_monad$returnS ((get_Sinterrupts_bits w__46  :  32 words$word)))
      else if (((b__0 = (0x104w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mie_ref) (\ (w__47 : Minterrupts) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS mideleg_ref) (\ (w__48 : Minterrupts) . 
        sail2_state_monad$returnS ((get_Sinterrupts_bits ((lower_mie w__47 w__48))  :  32 words$word))))
      else if (((b__0 = (0x105w :  12 words$word)))) then (get_stvec ()   : ( 32 words$word) M)
      else if (((b__0 = (0x106w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS scounteren_ref) (\ (w__50 : Counteren) . 
        sail2_state_monad$returnS ((EXTZ (( 32 : int):ii) ((get_Counteren_bits w__50  :  32 words$word))  :  32 words$word)))
      else if (((b__0 = (0x140w :  12 words$word)))) then (sail2_state_monad$read_regS sscratch_ref  : ( 32 words$word) M)
      else if (((b__0 = (0x141w :  12 words$word)))) then sail2_state_monad$bindS
        (get_xret_target Supervisor  : ( 32 words$word) M) (\ (w__52 :  32 words$word) .  sail2_state_monad$bindS
        (pc_alignment_mask ()   : ( 32 words$word) M) (\ (w__53 :  32 words$word) . 
        sail2_state_monad$returnS ((and_vec w__52 w__53  :  32 words$word))))
      else if (((b__0 = (0x142w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS scause_ref) (\ (w__54 : Mcause) . 
        sail2_state_monad$returnS ((get_Mcause_bits w__54  :  32 words$word)))
      else if (((b__0 = (0x143w :  12 words$word)))) then (sail2_state_monad$read_regS stval_ref  : ( 32 words$word) M)
      else if (((b__0 = (0x144w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mip_ref) (\ (w__56 : Minterrupts) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS mideleg_ref) (\ (w__57 : Minterrupts) . 
        sail2_state_monad$returnS ((get_Sinterrupts_bits ((lower_mip w__56 w__57))  :  32 words$word))))
      else if (((b__0 = (0x180w :  12 words$word)))) then (sail2_state_monad$read_regS satp_ref  : ( 32 words$word) M)
      else if (((b__0 = (0xC00w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mcycle_ref  : ( 64 words$word) M) (\ (w__59 :  64 words$word) . 
        sail2_state_monad$returnS ((subrange_vec_dec w__59 (((( 32 : int):ii) - (( 1 : int):ii))) (( 0 : int):ii)  :  32 words$word)))
      else if (((b__0 = (0xC01w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mtime_ref  : ( 64 words$word) M) (\ (w__60 :  64 words$word) . 
        sail2_state_monad$returnS ((subrange_vec_dec w__60 (((( 32 : int):ii) - (( 1 : int):ii))) (( 0 : int):ii)  :  32 words$word)))
      else if (((b__0 = (0xC02w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS minstret_ref  : ( 64 words$word) M) (\ (w__61 :  64 words$word) . 
        sail2_state_monad$returnS ((subrange_vec_dec w__61 (((( 32 : int):ii) - (( 1 : int):ii))) (( 0 : int):ii)  :  32 words$word)))
      else if ((((((b__0 = (0xC80w :  12 words$word)))) /\ (((g__325 = (( 32 : int):ii))))))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mcycle_ref  : ( 64 words$word) M) (\ (w__62 :  64 words$word) . 
        sail2_state_monad$returnS ((subrange_vec_dec w__62 (( 63 : int):ii) (( 32 : int):ii)  :  32 words$word)))
      else if ((((((b__0 = (0xC81w :  12 words$word)))) /\ (((g__325 = (( 32 : int):ii))))))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mtime_ref  : ( 64 words$word) M) (\ (w__63 :  64 words$word) . 
        sail2_state_monad$returnS ((subrange_vec_dec w__63 (( 63 : int):ii) (( 32 : int):ii)  :  32 words$word)))
      else if ((((((b__0 = (0xC82w :  12 words$word)))) /\ (((g__325 = (( 32 : int):ii))))))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS minstret_ref  : ( 64 words$word) M) (\ (w__64 :  64 words$word) . 
        sail2_state_monad$returnS ((subrange_vec_dec w__64 (( 63 : int):ii) (( 32 : int):ii)  :  32 words$word)))
      else sail2_state_monad$bindS
        (ext_read_CSR csr  : ( ( 32 words$word)option) M) (\ (w__65 :  ( 32 words$word)option) . 
        sail2_state_monad$returnS ((case w__65 of
          SOME (res) => res
        | NONE =>
           let (_ : unit) = (print_bits0 "unhandled read to CSR " csr) in
           (EXTZ (( 32 : int):ii) (0x0w :  4 words$word)  :  32 words$word)
        )))
   ) (\ (res : xlenbits) . 
   let (_ : unit) =
     (if ((get_config_print_reg () )) then
       print_dbg
         ((STRCAT "CSR "
             ((STRCAT ((csr_name csr)) ((STRCAT " -> " ((string_of_bits res))))))))
     else () ) in
   sail2_state_monad$returnS res)))`;


(*val writeCSR : mword ty12 -> mword ty32 -> M unit*)

val _ = Define `
 ((writeCSR:(12)words$word ->(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) (csr : csreg) (value : xlenbits)=  (sail2_state_monad$bindS
   (case (csr, (( 32 : int):ii)) of
     (b__0, g__324) =>
      if (((b__0 = (0x300w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mstatus_ref) (\ (w__0 : Mstatus) .  sail2_state_monad$bindS
        (legalize_mstatus w__0 value) (\ (w__1 : Mstatus) .  sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS mstatus_ref w__1)
        (sail2_state_monad$read_regS mstatus_ref)) (\ (w__2 : Mstatus) . 
        sail2_state_monad$returnS (SOME ((get_Mstatus_bits w__2  :  32 words$word))))))
      else if (((b__0 = (0x301w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS misa_ref) (\ (w__3 : Misa) .  sail2_state_monad$bindS
        (legalize_misa w__3 value) (\ (w__4 : Misa) .  sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS misa_ref w__4)
        (sail2_state_monad$read_regS misa_ref)) (\ (w__5 : Misa) . 
        sail2_state_monad$returnS (SOME ((get_Misa_bits w__5  :  32 words$word))))))
      else if (((b__0 = (0x302w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS medeleg_ref) (\ (w__6 : Medeleg) .  sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS medeleg_ref ((legalize_medeleg w__6 value)))
        (sail2_state_monad$read_regS medeleg_ref)) (\ (w__7 : Medeleg) . 
        sail2_state_monad$returnS (SOME ((get_Medeleg_bits w__7  :  32 words$word)))))
      else if (((b__0 = (0x303w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mideleg_ref) (\ (w__8 : Minterrupts) .  sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS mideleg_ref ((legalize_mideleg w__8 value)))
        (sail2_state_monad$read_regS mideleg_ref)) (\ (w__9 : Minterrupts) . 
        sail2_state_monad$returnS (SOME ((get_Minterrupts_bits w__9  :  32 words$word)))))
      else if (((b__0 = (0x304w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mie_ref) (\ (w__10 : Minterrupts) .  sail2_state_monad$bindS
        (legalize_mie w__10 value) (\ (w__11 : Minterrupts) .  sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS mie_ref w__11)
        (sail2_state_monad$read_regS mie_ref)) (\ (w__12 : Minterrupts) . 
        sail2_state_monad$returnS (SOME ((get_Minterrupts_bits w__12  :  32 words$word))))))
      else if (((b__0 = (0x305w :  12 words$word)))) then sail2_state_monad$bindS
        (set_mtvec value  : ( 32 words$word) M) (\ (w__13 :  32 words$word) .  sail2_state_monad$returnS (SOME w__13))
      else if (((b__0 = (0x306w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mcounteren_ref) (\ (w__14 : Counteren) .  sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS mcounteren_ref ((legalize_mcounteren w__14 value)))
        (sail2_state_monad$read_regS mcounteren_ref)) (\ (w__15 : Counteren) . 
        sail2_state_monad$returnS (SOME ((EXTZ (( 32 : int):ii) ((get_Counteren_bits w__15  :  32 words$word))  :  32 words$word)))))
      else if ((((((b__0 = (0x310w :  12 words$word)))) /\ (((g__324 = (( 32 : int):ii))))))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mstatush_ref) (\ (w__16 : Mstatush) . 
        sail2_state_monad$returnS (SOME ((get_Mstatush_bits w__16  :  32 words$word))))
      else if (((b__0 = (0x320w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mcountinhibit_ref) (\ (w__17 : Counterin) .  sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS mcountinhibit_ref ((legalize_mcountinhibit w__17 value)))
        (sail2_state_monad$read_regS mcountinhibit_ref)) (\ (w__18 : Counterin) . 
        sail2_state_monad$returnS (SOME ((EXTZ (( 32 : int):ii) ((get_Counterin_bits w__18  :  32 words$word))  :  32 words$word)))))
      else if (((b__0 = (0x340w :  12 words$word)))) then sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS mscratch_ref value)
        (sail2_state_monad$read_regS mscratch_ref  : ( 32 words$word) M)) (\ (w__19 :  32 words$word) . 
        sail2_state_monad$returnS (SOME w__19))
      else if (((b__0 = (0x341w :  12 words$word)))) then sail2_state_monad$bindS
        (set_xret_target Machine value  : ( 32 words$word) M) (\ (w__20 :  32 words$word) . 
        sail2_state_monad$returnS (SOME w__20))
      else if (((b__0 = (0x342w :  12 words$word)))) then sail2_state_monad$bindS (sail2_state_monad$seqS
        (set_Mcause_bits mcause_ref value)
        (sail2_state_monad$read_regS mcause_ref)) (\ (w__21 : Mcause) . 
        sail2_state_monad$returnS (SOME ((get_Mcause_bits w__21  :  32 words$word))))
      else if (((b__0 = (0x343w :  12 words$word)))) then sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS mtval_ref value)
        (sail2_state_monad$read_regS mtval_ref  : ( 32 words$word) M)) (\ (w__22 :  32 words$word) .  sail2_state_monad$returnS (SOME w__22))
      else if (((b__0 = (0x344w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mip_ref) (\ (w__23 : Minterrupts) .  sail2_state_monad$bindS
        (legalize_mip w__23 value) (\ (w__24 : Minterrupts) .  sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS mip_ref w__24)
        (sail2_state_monad$read_regS mip_ref)) (\ (w__25 : Minterrupts) . 
        sail2_state_monad$returnS (SOME ((get_Minterrupts_bits w__25  :  32 words$word))))))
      else if (((b__0 = (0x3A0w :  12 words$word)))) then sail2_state_monad$bindS (sail2_state_monad$seqS
        (pmpWriteCfgReg (( 0 : int):ii) value)
        (pmpReadCfgReg (( 0 : int):ii)  : ( 32 words$word) M)) (\ (w__26 :  32 words$word) .  sail2_state_monad$returnS (SOME w__26))
      else if ((((((b__0 = (0x3A1w :  12 words$word)))) /\ (((g__324 = (( 32 : int):ii))))))) then sail2_state_monad$bindS (sail2_state_monad$seqS
        (pmpWriteCfgReg (( 1 : int):ii) value)
        (pmpReadCfgReg (( 1 : int):ii)  : ( 32 words$word) M)) (\ (w__27 :  32 words$word) .  sail2_state_monad$returnS (SOME w__27))
      else if (((b__0 = (0x3A2w :  12 words$word)))) then sail2_state_monad$bindS (sail2_state_monad$seqS
        (pmpWriteCfgReg (( 2 : int):ii) value)
        (pmpReadCfgReg (( 2 : int):ii)  : ( 32 words$word) M)) (\ (w__28 :  32 words$word) .  sail2_state_monad$returnS (SOME w__28))
      else if ((((((b__0 = (0x3A3w :  12 words$word)))) /\ (((g__324 = (( 32 : int):ii))))))) then sail2_state_monad$bindS (sail2_state_monad$seqS
        (pmpWriteCfgReg (( 3 : int):ii) value)
        (pmpReadCfgReg (( 3 : int):ii)  : ( 32 words$word) M)) (\ (w__29 :  32 words$word) .  sail2_state_monad$returnS (SOME w__29))
      else if (((b__0 = (0x3B0w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmp0cfg_ref) (\ (w__30 : Pmpcfg_ent) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmp1cfg_ref) (\ (w__31 : Pmpcfg_ent) .  sail2_state_monad$bindS
        (pmpTORLocked w__31) (\ (w__32 : bool) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmpaddr0_ref  : ( 32 words$word) M) (\ (w__33 :  32 words$word) .  sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS pmpaddr0_ref ((pmpWriteAddr ((pmpLocked w__30)) w__32 w__33 value  :  32 words$word)))
        (sail2_state_monad$read_regS pmpaddr0_ref  : ( 32 words$word) M)) (\ (w__34 :  32 words$word) . 
        sail2_state_monad$returnS (SOME w__34))))))
      else if (((b__0 = (0x3B1w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmp1cfg_ref) (\ (w__35 : Pmpcfg_ent) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmp2cfg_ref) (\ (w__36 : Pmpcfg_ent) .  sail2_state_monad$bindS
        (pmpTORLocked w__36) (\ (w__37 : bool) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmpaddr1_ref  : ( 32 words$word) M) (\ (w__38 :  32 words$word) .  sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS pmpaddr1_ref ((pmpWriteAddr ((pmpLocked w__35)) w__37 w__38 value  :  32 words$word)))
        (sail2_state_monad$read_regS pmpaddr1_ref  : ( 32 words$word) M)) (\ (w__39 :  32 words$word) . 
        sail2_state_monad$returnS (SOME w__39))))))
      else if (((b__0 = (0x3B2w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmp2cfg_ref) (\ (w__40 : Pmpcfg_ent) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmp3cfg_ref) (\ (w__41 : Pmpcfg_ent) .  sail2_state_monad$bindS
        (pmpTORLocked w__41) (\ (w__42 : bool) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmpaddr2_ref  : ( 32 words$word) M) (\ (w__43 :  32 words$word) .  sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS pmpaddr2_ref ((pmpWriteAddr ((pmpLocked w__40)) w__42 w__43 value  :  32 words$word)))
        (sail2_state_monad$read_regS pmpaddr2_ref  : ( 32 words$word) M)) (\ (w__44 :  32 words$word) . 
        sail2_state_monad$returnS (SOME w__44))))))
      else if (((b__0 = (0x3B3w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmp3cfg_ref) (\ (w__45 : Pmpcfg_ent) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmp4cfg_ref) (\ (w__46 : Pmpcfg_ent) .  sail2_state_monad$bindS
        (pmpTORLocked w__46) (\ (w__47 : bool) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmpaddr3_ref  : ( 32 words$word) M) (\ (w__48 :  32 words$word) .  sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS pmpaddr3_ref ((pmpWriteAddr ((pmpLocked w__45)) w__47 w__48 value  :  32 words$word)))
        (sail2_state_monad$read_regS pmpaddr3_ref  : ( 32 words$word) M)) (\ (w__49 :  32 words$word) . 
        sail2_state_monad$returnS (SOME w__49))))))
      else if (((b__0 = (0x3B4w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmp4cfg_ref) (\ (w__50 : Pmpcfg_ent) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmp5cfg_ref) (\ (w__51 : Pmpcfg_ent) .  sail2_state_monad$bindS
        (pmpTORLocked w__51) (\ (w__52 : bool) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmpaddr4_ref  : ( 32 words$word) M) (\ (w__53 :  32 words$word) .  sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS pmpaddr4_ref ((pmpWriteAddr ((pmpLocked w__50)) w__52 w__53 value  :  32 words$word)))
        (sail2_state_monad$read_regS pmpaddr4_ref  : ( 32 words$word) M)) (\ (w__54 :  32 words$word) . 
        sail2_state_monad$returnS (SOME w__54))))))
      else if (((b__0 = (0x3B5w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmp5cfg_ref) (\ (w__55 : Pmpcfg_ent) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmp6cfg_ref) (\ (w__56 : Pmpcfg_ent) .  sail2_state_monad$bindS
        (pmpTORLocked w__56) (\ (w__57 : bool) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmpaddr5_ref  : ( 32 words$word) M) (\ (w__58 :  32 words$word) .  sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS pmpaddr5_ref ((pmpWriteAddr ((pmpLocked w__55)) w__57 w__58 value  :  32 words$word)))
        (sail2_state_monad$read_regS pmpaddr5_ref  : ( 32 words$word) M)) (\ (w__59 :  32 words$word) . 
        sail2_state_monad$returnS (SOME w__59))))))
      else if (((b__0 = (0x3B6w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmp6cfg_ref) (\ (w__60 : Pmpcfg_ent) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmp7cfg_ref) (\ (w__61 : Pmpcfg_ent) .  sail2_state_monad$bindS
        (pmpTORLocked w__61) (\ (w__62 : bool) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmpaddr6_ref  : ( 32 words$word) M) (\ (w__63 :  32 words$word) .  sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS pmpaddr6_ref ((pmpWriteAddr ((pmpLocked w__60)) w__62 w__63 value  :  32 words$word)))
        (sail2_state_monad$read_regS pmpaddr6_ref  : ( 32 words$word) M)) (\ (w__64 :  32 words$word) . 
        sail2_state_monad$returnS (SOME w__64))))))
      else if (((b__0 = (0x3B7w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmp7cfg_ref) (\ (w__65 : Pmpcfg_ent) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmp8cfg_ref) (\ (w__66 : Pmpcfg_ent) .  sail2_state_monad$bindS
        (pmpTORLocked w__66) (\ (w__67 : bool) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmpaddr7_ref  : ( 32 words$word) M) (\ (w__68 :  32 words$word) .  sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS pmpaddr7_ref ((pmpWriteAddr ((pmpLocked w__65)) w__67 w__68 value  :  32 words$word)))
        (sail2_state_monad$read_regS pmpaddr7_ref  : ( 32 words$word) M)) (\ (w__69 :  32 words$word) . 
        sail2_state_monad$returnS (SOME w__69))))))
      else if (((b__0 = (0x3B8w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmp8cfg_ref) (\ (w__70 : Pmpcfg_ent) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmp9cfg_ref) (\ (w__71 : Pmpcfg_ent) .  sail2_state_monad$bindS
        (pmpTORLocked w__71) (\ (w__72 : bool) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmpaddr8_ref  : ( 32 words$word) M) (\ (w__73 :  32 words$word) .  sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS pmpaddr8_ref ((pmpWriteAddr ((pmpLocked w__70)) w__72 w__73 value  :  32 words$word)))
        (sail2_state_monad$read_regS pmpaddr8_ref  : ( 32 words$word) M)) (\ (w__74 :  32 words$word) . 
        sail2_state_monad$returnS (SOME w__74))))))
      else if (((b__0 = (0x3B9w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmp9cfg_ref) (\ (w__75 : Pmpcfg_ent) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmp10cfg_ref) (\ (w__76 : Pmpcfg_ent) .  sail2_state_monad$bindS
        (pmpTORLocked w__76) (\ (w__77 : bool) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmpaddr9_ref  : ( 32 words$word) M) (\ (w__78 :  32 words$word) .  sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS pmpaddr9_ref ((pmpWriteAddr ((pmpLocked w__75)) w__77 w__78 value  :  32 words$word)))
        (sail2_state_monad$read_regS pmpaddr9_ref  : ( 32 words$word) M)) (\ (w__79 :  32 words$word) . 
        sail2_state_monad$returnS (SOME w__79))))))
      else if (((b__0 = (0x3BAw :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmp10cfg_ref) (\ (w__80 : Pmpcfg_ent) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmp11cfg_ref) (\ (w__81 : Pmpcfg_ent) .  sail2_state_monad$bindS
        (pmpTORLocked w__81) (\ (w__82 : bool) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmpaddr10_ref  : ( 32 words$word) M) (\ (w__83 :  32 words$word) .  sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS pmpaddr10_ref ((pmpWriteAddr ((pmpLocked w__80)) w__82 w__83 value  :  32 words$word)))
        (sail2_state_monad$read_regS pmpaddr10_ref  : ( 32 words$word) M)) (\ (w__84 :  32 words$word) . 
        sail2_state_monad$returnS (SOME w__84))))))
      else if (((b__0 = (0x3BBw :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmp11cfg_ref) (\ (w__85 : Pmpcfg_ent) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmp12cfg_ref) (\ (w__86 : Pmpcfg_ent) .  sail2_state_monad$bindS
        (pmpTORLocked w__86) (\ (w__87 : bool) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmpaddr11_ref  : ( 32 words$word) M) (\ (w__88 :  32 words$word) .  sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS pmpaddr11_ref ((pmpWriteAddr ((pmpLocked w__85)) w__87 w__88 value  :  32 words$word)))
        (sail2_state_monad$read_regS pmpaddr11_ref  : ( 32 words$word) M)) (\ (w__89 :  32 words$word) . 
        sail2_state_monad$returnS (SOME w__89))))))
      else if (((b__0 = (0x3BCw :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmp12cfg_ref) (\ (w__90 : Pmpcfg_ent) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmp13cfg_ref) (\ (w__91 : Pmpcfg_ent) .  sail2_state_monad$bindS
        (pmpTORLocked w__91) (\ (w__92 : bool) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmpaddr12_ref  : ( 32 words$word) M) (\ (w__93 :  32 words$word) .  sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS pmpaddr12_ref ((pmpWriteAddr ((pmpLocked w__90)) w__92 w__93 value  :  32 words$word)))
        (sail2_state_monad$read_regS pmpaddr12_ref  : ( 32 words$word) M)) (\ (w__94 :  32 words$word) . 
        sail2_state_monad$returnS (SOME w__94))))))
      else if (((b__0 = (0x3BDw :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmp13cfg_ref) (\ (w__95 : Pmpcfg_ent) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmp14cfg_ref) (\ (w__96 : Pmpcfg_ent) .  sail2_state_monad$bindS
        (pmpTORLocked w__96) (\ (w__97 : bool) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmpaddr13_ref  : ( 32 words$word) M) (\ (w__98 :  32 words$word) .  sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS pmpaddr13_ref ((pmpWriteAddr ((pmpLocked w__95)) w__97 w__98 value  :  32 words$word)))
        (sail2_state_monad$read_regS pmpaddr13_ref  : ( 32 words$word) M)) (\ (w__99 :  32 words$word) . 
        sail2_state_monad$returnS (SOME w__99))))))
      else if (((b__0 = (0x3BEw :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmp14cfg_ref) (\ (w__100 : Pmpcfg_ent) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmp15cfg_ref) (\ (w__101 : Pmpcfg_ent) .  sail2_state_monad$bindS
        (pmpTORLocked w__101) (\ (w__102 : bool) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmpaddr14_ref  : ( 32 words$word) M) (\ (w__103 :  32 words$word) .  sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS
          pmpaddr14_ref
          ((pmpWriteAddr ((pmpLocked w__100)) w__102 w__103 value  :  32 words$word)))
        (sail2_state_monad$read_regS pmpaddr14_ref  : ( 32 words$word) M)) (\ (w__104 :  32 words$word) . 
        sail2_state_monad$returnS (SOME w__104))))))
      else if (((b__0 = (0x3BFw :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmp15cfg_ref) (\ (w__105 : Pmpcfg_ent) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS pmpaddr15_ref  : ( 32 words$word) M) (\ (w__106 :  32 words$word) .  sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS
          pmpaddr15_ref
          ((pmpWriteAddr ((pmpLocked w__105)) F w__106 value  :  32 words$word)))
        (sail2_state_monad$read_regS pmpaddr15_ref  : ( 32 words$word) M)) (\ (w__107 :  32 words$word) . 
        sail2_state_monad$returnS (SOME w__107))))
      else if (((b__0 = (0xB00w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mcycle_ref  : ( 64 words$word) M) (\ (w__108 :  64 words$word) .  sail2_state_monad$seqS
        (sail2_state_monad$write_regS
          mcycle_ref
          ((update_subrange_vec_dec w__108 (((( 32 : int):ii) - (( 1 : int):ii))) (( 0 : int):ii) value
             :  64 words$word)))
        (sail2_state_monad$returnS (SOME value)))
      else if (((b__0 = (0xB02w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS minstret_ref  : ( 64 words$word) M) (\ (w__109 :  64 words$word) .  sail2_state_monad$seqS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS
          minstret_ref
          ((update_subrange_vec_dec w__109 (((( 32 : int):ii) - (( 1 : int):ii))) (( 0 : int):ii) value
             :  64 words$word)))
        (sail2_state_monad$write_regS minstret_written_ref T)) (sail2_state_monad$returnS (SOME value)))
      else if ((((((b__0 = (0xB80w :  12 words$word)))) /\ (((g__324 = (( 32 : int):ii))))))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mcycle_ref  : ( 64 words$word) M) (\ (w__110 :  64 words$word) .  sail2_state_monad$seqS
        (sail2_state_monad$write_regS mcycle_ref ((update_subrange_vec_dec w__110 (( 63 : int):ii) (( 32 : int):ii) value  :  64 words$word)))
        (sail2_state_monad$returnS (SOME value)))
      else if ((((((b__0 = (0xB82w :  12 words$word)))) /\ (((g__324 = (( 32 : int):ii))))))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS minstret_ref  : ( 64 words$word) M) (\ (w__111 :  64 words$word) .  sail2_state_monad$seqS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS
          minstret_ref
          ((update_subrange_vec_dec w__111 (( 63 : int):ii) (( 32 : int):ii) value  :  64 words$word)))
        (sail2_state_monad$write_regS minstret_written_ref T)) (sail2_state_monad$returnS (SOME value)))
      else if (((b__0 = (0x7A0w :  12 words$word)))) then sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS tselect_ref value)
        (sail2_state_monad$read_regS tselect_ref  : ( 32 words$word) M)) (\ (w__112 :  32 words$word) . 
        sail2_state_monad$returnS (SOME w__112))
      else if (((b__0 = (0x100w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mstatus_ref) (\ (w__113 : Mstatus) .  sail2_state_monad$bindS
        (legalize_sstatus w__113 value) (\ (w__114 : Mstatus) .  sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS mstatus_ref w__114)
        (sail2_state_monad$read_regS mstatus_ref)) (\ (w__115 : Mstatus) . 
        sail2_state_monad$returnS (SOME ((get_Mstatus_bits w__115  :  32 words$word))))))
      else if (((b__0 = (0x102w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS sedeleg_ref) (\ (w__116 : Sedeleg) .  sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS sedeleg_ref ((legalize_sedeleg w__116 value)))
        (sail2_state_monad$read_regS sedeleg_ref)) (\ (w__117 : Sedeleg) . 
        sail2_state_monad$returnS (SOME ((get_Sedeleg_bits w__117  :  32 words$word)))))
      else if (((b__0 = (0x103w :  12 words$word)))) then sail2_state_monad$bindS (sail2_state_monad$seqS
        (set_Sinterrupts_bits sideleg_ref value)
        (sail2_state_monad$read_regS sideleg_ref)) (\ (w__118 : Sinterrupts) . 
        sail2_state_monad$returnS (SOME ((get_Sinterrupts_bits w__118  :  32 words$word))))
      else if (((b__0 = (0x104w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mie_ref) (\ (w__119 : Minterrupts) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS mideleg_ref) (\ (w__120 : Minterrupts) .  sail2_state_monad$bindS
        (legalize_sie w__119 w__120 value) (\ (w__121 : Minterrupts) .  sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS mie_ref w__121)
        (sail2_state_monad$read_regS mie_ref)) (\ (w__122 : Minterrupts) . 
        sail2_state_monad$returnS (SOME ((get_Minterrupts_bits w__122  :  32 words$word)))))))
      else if (((b__0 = (0x105w :  12 words$word)))) then sail2_state_monad$bindS
        (set_stvec value  : ( 32 words$word) M) (\ (w__123 :  32 words$word) .  sail2_state_monad$returnS (SOME w__123))
      else if (((b__0 = (0x106w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS scounteren_ref) (\ (w__124 : Counteren) .  sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS scounteren_ref ((legalize_scounteren w__124 value)))
        (sail2_state_monad$read_regS scounteren_ref)) (\ (w__125 : Counteren) . 
        sail2_state_monad$returnS (SOME ((EXTZ (( 32 : int):ii) ((get_Counteren_bits w__125  :  32 words$word))  :  32 words$word)))))
      else if (((b__0 = (0x140w :  12 words$word)))) then sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS sscratch_ref value)
        (sail2_state_monad$read_regS sscratch_ref  : ( 32 words$word) M)) (\ (w__126 :  32 words$word) . 
        sail2_state_monad$returnS (SOME w__126))
      else if (((b__0 = (0x141w :  12 words$word)))) then sail2_state_monad$bindS
        (set_xret_target Supervisor value  : ( 32 words$word) M) (\ (w__127 :  32 words$word) . 
        sail2_state_monad$returnS (SOME w__127))
      else if (((b__0 = (0x142w :  12 words$word)))) then sail2_state_monad$bindS (sail2_state_monad$seqS
        (set_Mcause_bits scause_ref value)
        (sail2_state_monad$read_regS scause_ref)) (\ (w__128 : Mcause) . 
        sail2_state_monad$returnS (SOME ((get_Mcause_bits w__128  :  32 words$word))))
      else if (((b__0 = (0x143w :  12 words$word)))) then sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS stval_ref value)
        (sail2_state_monad$read_regS stval_ref  : ( 32 words$word) M)) (\ (w__129 :  32 words$word) .  sail2_state_monad$returnS (SOME w__129))
      else if (((b__0 = (0x144w :  12 words$word)))) then sail2_state_monad$bindS
        (sail2_state_monad$read_regS mip_ref) (\ (w__130 : Minterrupts) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS mideleg_ref) (\ (w__131 : Minterrupts) .  sail2_state_monad$bindS
        (legalize_sip w__130 w__131 value) (\ (w__132 : Minterrupts) .  sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS mip_ref w__132)
        (sail2_state_monad$read_regS mip_ref)) (\ (w__133 : Minterrupts) . 
        sail2_state_monad$returnS (SOME ((get_Minterrupts_bits w__133  :  32 words$word)))))))
      else if (((b__0 = (0x180w :  12 words$word)))) then sail2_state_monad$bindS
        (cur_Architecture () ) (\ (w__134 : Architecture) .  sail2_state_monad$bindS
        (sail2_state_monad$read_regS satp_ref  : ( 32 words$word) M) (\ (w__135 :  32 words$word) .  sail2_state_monad$bindS (sail2_state_monad$seqS
        (sail2_state_monad$write_regS satp_ref ((legalize_satp w__134 w__135 value  :  32 words$word)))
        (sail2_state_monad$read_regS satp_ref  : ( 32 words$word) M)) (\ (w__136 :  32 words$word) .  sail2_state_monad$returnS (SOME w__136))))
      else (ext_write_CSR csr value  : ( ( 32 words$word)option) M)
   ) (\ (res :  xlenbits option) . 
   sail2_state_monad$returnS ((case res of
     SOME (v) =>
      if ((get_config_print_reg () )) then
        print_dbg
          ((STRCAT "CSR "
              ((STRCAT ((csr_name csr))
                  ((STRCAT " <- "
                      ((STRCAT ((string_of_bits v))
                          ((STRCAT " (input: " ((STRCAT ((string_of_bits value)) ")"))))))))))))
      else () 
   | NONE => print_bits0 "unhandled write to CSR " csr
   )))))`;


(*val maybe_i_forwards : bool -> string*)

(*val maybe_i_backwards : string -> M bool*)

(*val maybe_i_forwards_matches : bool -> bool*)

(*val maybe_i_backwards_matches : string -> bool*)

(*val maybe_i_matches_prefix : string -> maybe ((bool * ii))*)

val _ = Define `
 ((maybe_i_forwards:bool -> string) arg_=  ((case arg_ of   T => "i" | F => "" )))`;


val _ = Define `
 ((maybe_i_backwards:string ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "i"))) then sail2_state_monad$returnS T
   else if (((p0_ = ""))) then sail2_state_monad$returnS F
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((maybe_i_forwards_matches:bool -> bool) arg_= 
  ((case arg_ of   T => T | F => T )))`;


val _ = Define `
 ((maybe_i_backwards_matches:string -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "i"))) then T
   else if (((p0_ = ""))) then T
   else F))`;


(*val _s1062_ : string -> maybe string*)

val _ = Define `
 ((s1062_:string ->(string)option) s1063_0=
    (let s1064_0 = s1063_0 in
   if ((string_startswith s1064_0 "")) then  
  (case ((string_drop s1064_0 ((string_length "")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s1058_ : string -> maybe string*)

val _ = Define `
 ((s1058_:string ->(string)option) s1059_0=
    (let s1060_0 = s1059_0 in
   if ((string_startswith s1060_0 "i")) then  
  (case ((string_drop s1060_0 ((string_length "i")))) of   s_ => SOME s_ )
   else NONE))`;


val _ = Define `
 ((maybe_i_matches_prefix:string ->(bool#int)option) arg_=
    (let s1061_0 = arg_ in
   if ((case ((s1058_ s1061_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1058_ s1061_0 of
      (SOME (s_)) =>
  SOME (T, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1062_ s1061_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1062_ s1061_0 of
      (SOME (s_)) =>
  SOME (F, ((string_length arg_)) - ((string_length s_)))
  )
   else NONE))`;


(*val csr_mnemonic_forwards : csrop -> string*)

(*val csr_mnemonic_backwards : string -> M csrop*)

(*val csr_mnemonic_forwards_matches : csrop -> bool*)

(*val csr_mnemonic_backwards_matches : string -> bool*)

(*val csr_mnemonic_matches_prefix : string -> maybe ((csrop * ii))*)

val _ = Define `
 ((csr_mnemonic_forwards:csrop -> string) arg_=
    ((case arg_ of   CSRRW => "csrrw" | CSRRS => "csrrs" | CSRRC => "csrrc" )))`;


val _ = Define `
 ((csr_mnemonic_backwards:string ->(regstate)sail2_state_monad$sequential_state ->(((csrop),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "csrrw"))) then sail2_state_monad$returnS CSRRW
   else if (((p0_ = "csrrs"))) then sail2_state_monad$returnS CSRRS
   else if (((p0_ = "csrrc"))) then sail2_state_monad$returnS CSRRC
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((csr_mnemonic_forwards_matches:csrop -> bool) arg_= 
  ((case arg_ of   CSRRW => T | CSRRS => T | CSRRC => T )))`;


val _ = Define `
 ((csr_mnemonic_backwards_matches:string -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "csrrw"))) then T
   else if (((p0_ = "csrrs"))) then T
   else if (((p0_ = "csrrc"))) then T
   else F))`;


(*val _s1074_ : string -> maybe string*)

val _ = Define `
 ((s1074_:string ->(string)option) s1075_0=
    (let s1076_0 = s1075_0 in
   if ((string_startswith s1076_0 "csrrc")) then  
  (case ((string_drop s1076_0 ((string_length "csrrc")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s1070_ : string -> maybe string*)

val _ = Define `
 ((s1070_:string ->(string)option) s1071_0=
    (let s1072_0 = s1071_0 in
   if ((string_startswith s1072_0 "csrrs")) then  
  (case ((string_drop s1072_0 ((string_length "csrrs")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s1066_ : string -> maybe string*)

val _ = Define `
 ((s1066_:string ->(string)option) s1067_0=
    (let s1068_0 = s1067_0 in
   if ((string_startswith s1068_0 "csrrw")) then  
  (case ((string_drop s1068_0 ((string_length "csrrw")))) of   s_ => SOME s_ )
   else NONE))`;


val _ = Define `
 ((csr_mnemonic_matches_prefix:string ->(csrop#int)option) arg_=
    (let s1069_0 = arg_ in
   if ((case ((s1066_ s1069_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1066_ s1069_0 of
      (SOME (s_)) =>
  SOME (CSRRW, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1070_ s1069_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1070_ s1069_0 of
      (SOME (s_)) =>
  SOME (CSRRS, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1074_ s1069_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1074_ s1069_0 of
      (SOME (s_)) =>
  SOME (CSRRC, ((string_length arg_)) - ((string_length s_)))
  )
   else NONE))`;


(*val encdec_rounding_mode_forwards : rounding_mode -> mword ty3*)

(*val encdec_rounding_mode_backwards : mword ty3 -> M rounding_mode*)

(*val encdec_rounding_mode_forwards_matches : rounding_mode -> bool*)

(*val encdec_rounding_mode_backwards_matches : mword ty3 -> bool*)

val _ = Define `
 ((encdec_rounding_mode_forwards:rounding_mode ->(3)words$word) arg_=
    ((case arg_ of
     RM_RNE => (0b000w :  3 words$word)
   | RM_RTZ => (0b001w :  3 words$word)
   | RM_RDN => (0b010w :  3 words$word)
   | RM_RUP => (0b011w :  3 words$word)
   | RM_RMM => (0b100w :  3 words$word)
   | RM_DYN => (0b111w :  3 words$word)
   )))`;


val _ = Define `
 ((encdec_rounding_mode_backwards:(3)words$word ->(regstate)sail2_state_monad$sequential_state ->(((rounding_mode),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b000w :  3 words$word)))) then sail2_state_monad$returnS RM_RNE
   else if (((b__0 = (0b001w :  3 words$word)))) then sail2_state_monad$returnS RM_RTZ
   else if (((b__0 = (0b010w :  3 words$word)))) then sail2_state_monad$returnS RM_RDN
   else if (((b__0 = (0b011w :  3 words$word)))) then sail2_state_monad$returnS RM_RUP
   else if (((b__0 = (0b100w :  3 words$word)))) then sail2_state_monad$returnS RM_RMM
   else if (((b__0 = (0b111w :  3 words$word)))) then sail2_state_monad$returnS RM_DYN
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((encdec_rounding_mode_forwards_matches:rounding_mode -> bool) arg_= 
  ((case arg_ of
         RM_RNE => T
     | RM_RTZ => T
     | RM_RDN => T
     | RM_RUP => T
     | RM_RMM => T
     | RM_DYN => T
   )))`;


val _ = Define `
 ((encdec_rounding_mode_backwards_matches:(3)words$word -> bool) arg_=
    (let b__0 = arg_ in
   if (((b__0 = (0b000w :  3 words$word)))) then T
   else if (((b__0 = (0b001w :  3 words$word)))) then T
   else if (((b__0 = (0b010w :  3 words$word)))) then T
   else if (((b__0 = (0b011w :  3 words$word)))) then T
   else if (((b__0 = (0b100w :  3 words$word)))) then T
   else if (((b__0 = (0b111w :  3 words$word)))) then T
   else F))`;


(*val frm_mnemonic_forwards : rounding_mode -> string*)

(*val frm_mnemonic_backwards : string -> M rounding_mode*)

(*val frm_mnemonic_forwards_matches : rounding_mode -> bool*)

(*val frm_mnemonic_backwards_matches : string -> bool*)

(*val frm_mnemonic_matches_prefix : string -> maybe ((rounding_mode * ii))*)

val _ = Define `
 ((frm_mnemonic_forwards:rounding_mode -> string) arg_=
    ((case arg_ of
     RM_RNE => "rne"
   | RM_RTZ => "rtz"
   | RM_RDN => "rdn"
   | RM_RUP => "rup"
   | RM_RMM => "rmm"
   | RM_DYN => "dyn"
   )))`;


val _ = Define `
 ((frm_mnemonic_backwards:string ->(regstate)sail2_state_monad$sequential_state ->(((rounding_mode),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "rne"))) then sail2_state_monad$returnS RM_RNE
   else if (((p0_ = "rtz"))) then sail2_state_monad$returnS RM_RTZ
   else if (((p0_ = "rdn"))) then sail2_state_monad$returnS RM_RDN
   else if (((p0_ = "rup"))) then sail2_state_monad$returnS RM_RUP
   else if (((p0_ = "rmm"))) then sail2_state_monad$returnS RM_RMM
   else if (((p0_ = "dyn"))) then sail2_state_monad$returnS RM_DYN
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((frm_mnemonic_forwards_matches:rounding_mode -> bool) arg_= 
  ((case arg_ of
         RM_RNE => T
     | RM_RTZ => T
     | RM_RDN => T
     | RM_RUP => T
     | RM_RMM => T
     | RM_DYN => T
   )))`;


val _ = Define `
 ((frm_mnemonic_backwards_matches:string -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "rne"))) then T
   else if (((p0_ = "rtz"))) then T
   else if (((p0_ = "rdn"))) then T
   else if (((p0_ = "rup"))) then T
   else if (((p0_ = "rmm"))) then T
   else if (((p0_ = "dyn"))) then T
   else F))`;


(*val _s1098_ : string -> maybe string*)

val _ = Define `
 ((s1098_:string ->(string)option) s1099_0=
    (let s1100_0 = s1099_0 in
   if ((string_startswith s1100_0 "dyn")) then  
  (case ((string_drop s1100_0 ((string_length "dyn")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s1094_ : string -> maybe string*)

val _ = Define `
 ((s1094_:string ->(string)option) s1095_0=
    (let s1096_0 = s1095_0 in
   if ((string_startswith s1096_0 "rmm")) then  
  (case ((string_drop s1096_0 ((string_length "rmm")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s1090_ : string -> maybe string*)

val _ = Define `
 ((s1090_:string ->(string)option) s1091_0=
    (let s1092_0 = s1091_0 in
   if ((string_startswith s1092_0 "rup")) then  
  (case ((string_drop s1092_0 ((string_length "rup")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s1086_ : string -> maybe string*)

val _ = Define `
 ((s1086_:string ->(string)option) s1087_0=
    (let s1088_0 = s1087_0 in
   if ((string_startswith s1088_0 "rdn")) then  
  (case ((string_drop s1088_0 ((string_length "rdn")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s1082_ : string -> maybe string*)

val _ = Define `
 ((s1082_:string ->(string)option) s1083_0=
    (let s1084_0 = s1083_0 in
   if ((string_startswith s1084_0 "rtz")) then  
  (case ((string_drop s1084_0 ((string_length "rtz")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s1078_ : string -> maybe string*)

val _ = Define `
 ((s1078_:string ->(string)option) s1079_0=
    (let s1080_0 = s1079_0 in
   if ((string_startswith s1080_0 "rne")) then  
  (case ((string_drop s1080_0 ((string_length "rne")))) of   s_ => SOME s_ )
   else NONE))`;


val _ = Define `
 ((frm_mnemonic_matches_prefix:string ->(rounding_mode#int)option) arg_=
    (let s1081_0 = arg_ in
   if ((case ((s1078_ s1081_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1078_ s1081_0 of
      (SOME (s_)) =>
  SOME (RM_RNE, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1082_ s1081_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1082_ s1081_0 of
      (SOME (s_)) =>
  SOME (RM_RTZ, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1086_ s1081_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1086_ s1081_0 of
      (SOME (s_)) =>
  SOME (RM_RDN, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1090_ s1081_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1090_ s1081_0 of
      (SOME (s_)) =>
  SOME (RM_RUP, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1094_ s1081_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1094_ s1081_0 of
      (SOME (s_)) =>
  SOME (RM_RMM, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1098_ s1081_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1098_ s1081_0 of
      (SOME (s_)) =>
  SOME (RM_DYN, ((string_length arg_)) - ((string_length s_)))
  )
   else NONE))`;


(*val select_instr_or_fcsr_rm : rounding_mode -> M rounding_mode*)

val _ = Define `
 ((select_instr_or_fcsr_rm:rounding_mode ->(regstate)sail2_state_monad$sequential_state ->(((rounding_mode),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) instr_rm=
    (if (((instr_rm = RM_DYN))) then sail2_state_monad$bindS
     (sail2_state_monad$read_regS fcsr_ref) (\ (w__0 : Fcsr) . 
     encdec_rounding_mode_backwards ((get_Fcsr_FRM w__0  :  3 words$word)))
   else sail2_state_monad$returnS instr_rm))`;


(*val nxFlag : unit -> mword ty5*)

val _ = Define `
 ((nxFlag:unit ->(5)words$word) () =  ((0b00001w :  5 words$word)))`;


(*val ufFlag : unit -> mword ty5*)

val _ = Define `
 ((ufFlag:unit ->(5)words$word) () =  ((0b00010w :  5 words$word)))`;


(*val ofFlag : unit -> mword ty5*)

val _ = Define `
 ((ofFlag:unit ->(5)words$word) () =  ((0b00100w :  5 words$word)))`;


(*val dzFlag : unit -> mword ty5*)

val _ = Define `
 ((dzFlag:unit ->(5)words$word) () =  ((0b01000w :  5 words$word)))`;


(*val nvFlag : unit -> mword ty5*)

val _ = Define `
 ((nvFlag:unit ->(5)words$word) () =  ((0b10000w :  5 words$word)))`;


(*val fsplit_S : mword ty32 -> (mword ty1 * mword ty8 * mword ty23)*)

val _ = Define `
 ((fsplit_S:(32)words$word ->(1)words$word#(8)words$word#(23)words$word) x32=
    ((subrange_vec_dec x32 (( 31 : int):ii) (( 31 : int):ii)  :  1 words$word),
    (subrange_vec_dec x32 (( 30 : int):ii) (( 23 : int):ii)  :  8 words$word),
    (subrange_vec_dec x32 (( 22 : int):ii) (( 0 : int):ii)  :  23 words$word)))`;


(*val fmake_S : mword ty1 -> mword ty8 -> mword ty23 -> mword ty32*)

val _ = Define `
 ((fmake_S:(1)words$word ->(8)words$word ->(23)words$word ->(32)words$word) sign exp mant=  ((concat_vec sign ((concat_vec exp mant  :  31 words$word))  :  32 words$word)))`;


(*val canonical_NaN_S : unit -> mword ty32*)

val _ = Define `
 ((canonical_NaN_S:unit ->(32)words$word) () =  ((0x7FC00000w :  32 words$word)))`;


(*val f_is_neg_inf_S : mword ty32 -> bool*)

val _ = Define `
 ((f_is_neg_inf_S:(32)words$word -> bool) x32=
    (let (sign, exp, mant) = ((fsplit_S x32  : ( 1 words$word #  8 words$word #  23 words$word))) in
   ((((sign = (0b1w :  1 words$word)))) /\ ((((((exp = ((ones (( 8 : int):ii)  :  8 words$word))))) /\ (((mant = ((zeros_implicit (( 23 : int):ii)  :  23 words$word)))))))))))`;


(*val f_is_neg_norm_S : mword ty32 -> bool*)

val _ = Define `
 ((f_is_neg_norm_S:(32)words$word -> bool) x32=
    (let (sign, exp, mant) = ((fsplit_S x32  : ( 1 words$word #  8 words$word #  23 words$word))) in
   ((((sign = (0b1w :  1 words$word)))) /\ ((((((exp <> ((zeros_implicit (( 8 : int):ii)  :  8 words$word))))) /\ (((exp <> ((ones (( 8 : int):ii)  :  8 words$word)))))))))))`;


(*val f_is_neg_subnorm_S : mword ty32 -> bool*)

val _ = Define `
 ((f_is_neg_subnorm_S:(32)words$word -> bool) x32=
    (let (sign, exp, mant) = ((fsplit_S x32  : ( 1 words$word #  8 words$word #  23 words$word))) in
   ((((sign = (0b1w :  1 words$word)))) /\ ((((((exp = ((zeros_implicit (( 8 : int):ii)  :  8 words$word))))) /\ (((mant <> ((zeros_implicit (( 23 : int):ii)  :  23 words$word)))))))))))`;


(*val f_is_neg_zero_S : mword ty32 -> bool*)

val _ = Define `
 ((f_is_neg_zero_S:(32)words$word -> bool) x32=
    (let (sign, exp, mant) = ((fsplit_S x32  : ( 1 words$word #  8 words$word #  23 words$word))) in
   ((((sign = ((ones (( 1 : int):ii)  :  1 words$word))))) /\ ((((((exp = ((zeros_implicit (( 8 : int):ii)  :  8 words$word))))) /\ (((mant = ((zeros_implicit (( 23 : int):ii)  :  23 words$word)))))))))))`;


(*val f_is_pos_zero_S : mword ty32 -> bool*)

val _ = Define `
 ((f_is_pos_zero_S:(32)words$word -> bool) x32=
    (let (sign, exp, mant) = ((fsplit_S x32  : ( 1 words$word #  8 words$word #  23 words$word))) in
   ((((sign = ((zeros_implicit (( 1 : int):ii)  :  1 words$word))))) /\ ((((((exp = ((zeros_implicit (( 8 : int):ii)  :  8 words$word))))) /\ (((mant = ((zeros_implicit (( 23 : int):ii)  :  23 words$word)))))))))))`;


(*val f_is_pos_subnorm_S : mword ty32 -> bool*)

val _ = Define `
 ((f_is_pos_subnorm_S:(32)words$word -> bool) x32=
    (let (sign, exp, mant) = ((fsplit_S x32  : ( 1 words$word #  8 words$word #  23 words$word))) in
   ((((sign = ((zeros_implicit (( 1 : int):ii)  :  1 words$word))))) /\ ((((((exp = ((zeros_implicit (( 8 : int):ii)  :  8 words$word))))) /\ (((mant <> ((zeros_implicit (( 23 : int):ii)  :  23 words$word)))))))))))`;


(*val f_is_pos_norm_S : mword ty32 -> bool*)

val _ = Define `
 ((f_is_pos_norm_S:(32)words$word -> bool) x32=
    (let (sign, exp, mant) = ((fsplit_S x32  : ( 1 words$word #  8 words$word #  23 words$word))) in
   ((((sign = ((zeros_implicit (( 1 : int):ii)  :  1 words$word))))) /\ ((((((exp <> ((zeros_implicit (( 8 : int):ii)  :  8 words$word))))) /\ (((exp <> ((ones (( 8 : int):ii)  :  8 words$word)))))))))))`;


(*val f_is_pos_inf_S : mword ty32 -> bool*)

val _ = Define `
 ((f_is_pos_inf_S:(32)words$word -> bool) x32=
    (let (sign, exp, mant) = ((fsplit_S x32  : ( 1 words$word #  8 words$word #  23 words$word))) in
   ((((sign = ((zeros_implicit (( 1 : int):ii)  :  1 words$word))))) /\ ((((((exp = ((ones (( 8 : int):ii)  :  8 words$word))))) /\ (((mant = ((zeros_implicit (( 23 : int):ii)  :  23 words$word)))))))))))`;


(*val f_is_SNaN_S : mword ty32 -> bool*)

val _ = Define `
 ((f_is_SNaN_S:(32)words$word -> bool) x32=
    (let (sign, exp, mant) = ((fsplit_S x32  : ( 1 words$word #  8 words$word #  23 words$word))) in
   ((((exp = ((ones (( 8 : int):ii)  :  8 words$word))))) /\ ((((((((access_vec_dec mant (( 22 : int):ii))) = B0))) /\ (((mant <> ((zeros_implicit (( 23 : int):ii)  :  23 words$word)))))))))))`;


(*val f_is_QNaN_S : mword ty32 -> bool*)

val _ = Define `
 ((f_is_QNaN_S:(32)words$word -> bool) x32=
    (let (sign, exp, mant) = ((fsplit_S x32  : ( 1 words$word #  8 words$word #  23 words$word))) in
   ((((exp = ((ones (( 8 : int):ii)  :  8 words$word))))) /\ (((((access_vec_dec mant (( 22 : int):ii))) = B1))))))`;


(*val f_is_NaN_S : mword ty32 -> bool*)

val _ = Define `
 ((f_is_NaN_S:(32)words$word -> bool) x32=
    (let (sign, exp, mant) = ((fsplit_S x32  : ( 1 words$word #  8 words$word #  23 words$word))) in
   ((((exp = ((ones (( 8 : int):ii)  :  8 words$word))))) /\ (((mant <> ((zeros_implicit (( 23 : int):ii)  :  23 words$word))))))))`;


(*val negate_S : mword ty32 -> mword ty32*)

val _ = Define `
 ((negate_S:(32)words$word ->(32)words$word) x32=
    (let (sign, exp, mant) = ((fsplit_S x32  : ( 1 words$word #  8 words$word #  23 words$word))) in
   let new_sign = (if (((sign = (0b0w :  1 words$word)))) then (0b1w :  1 words$word) else (0b0w :  1 words$word)) in
   (fmake_S new_sign exp mant  :  32 words$word)))`;


(*val feq_quiet_S : mword ty32 -> mword ty32 -> (bool * mword ty5)*)

val _ = Define `
 ((feq_quiet_S:(32)words$word ->(32)words$word -> bool#(5)words$word) v1 v2=
    (let (s1, e1, m1) = ((fsplit_S v1  : ( 1 words$word #  8 words$word #  23 words$word))) in
   let (s2, e2, m2) = ((fsplit_S v2  : ( 1 words$word #  8 words$word #  23 words$word))) in
   let v1Is0 = (((f_is_neg_zero_S v1)) \/ ((f_is_pos_zero_S v1))) in
   let v2Is0 = (((f_is_neg_zero_S v2)) \/ ((f_is_pos_zero_S v2))) in
   let result = ((((v1 = v2))) \/ (((v1Is0 /\ v2Is0)))) in
   let fflags =
     (if (((((f_is_SNaN_S v1)) \/ ((f_is_SNaN_S v2))))) then (nvFlag ()   :  5 words$word)
     else (zeros_implicit (( 5 : int):ii)  :  5 words$word)) in
   (result, fflags)))`;


(*val flt_S : mword ty32 -> mword ty32 -> bool -> (bool * mword ty5)*)

val _ = Define `
 ((flt_S:(32)words$word ->(32)words$word -> bool -> bool#(5)words$word) v1 v2 is_quiet=
    (let (s1, e1, m1) = ((fsplit_S v1  : ( 1 words$word #  8 words$word #  23 words$word))) in
   let (s2, e2, m2) = ((fsplit_S v2  : ( 1 words$word #  8 words$word #  23 words$word))) in
   let (result : bool) =
     (if ((((((s1 = (0b0w :  1 words$word)))) /\ (((s2 = (0b0w :  1 words$word))))))) then
       if (((e1 = e2))) then ((lem$w2ui m1)) < ((lem$w2ui m2))
       else ((lem$w2ui e1)) < ((lem$w2ui e2))
     else if ((((((s1 = (0b0w :  1 words$word)))) /\ (((s2 = (0b1w :  1 words$word))))))) then F
     else if ((((((s1 = (0b1w :  1 words$word)))) /\ (((s2 = (0b0w :  1 words$word))))))) then T
     else if (((e1 = e2))) then ((lem$w2ui m1)) > ((lem$w2ui m2))
     else ((lem$w2ui e1)) > ((lem$w2ui e2))) in
   let fflags =
     (if is_quiet then
       if (((((f_is_SNaN_S v1)) \/ ((f_is_SNaN_S v2))))) then (nvFlag ()   :  5 words$word)
       else (zeros_implicit (( 5 : int):ii)  :  5 words$word)
     else if (((((f_is_NaN_S v1)) \/ ((f_is_NaN_S v2))))) then (nvFlag ()   :  5 words$word)
     else (zeros_implicit (( 5 : int):ii)  :  5 words$word)) in
   (result, fflags)))`;


(*val fle_S : mword ty32 -> mword ty32 -> bool -> (bool * mword ty5)*)

val _ = Define `
 ((fle_S:(32)words$word ->(32)words$word -> bool -> bool#(5)words$word) v1 v2 is_quiet=
    (let (s1, e1, m1) = ((fsplit_S v1  : ( 1 words$word #  8 words$word #  23 words$word))) in
   let (s2, e2, m2) = ((fsplit_S v2  : ( 1 words$word #  8 words$word #  23 words$word))) in
   let v1Is0 = (((f_is_neg_zero_S v1)) \/ ((f_is_pos_zero_S v1))) in
   let v2Is0 = (((f_is_neg_zero_S v2)) \/ ((f_is_pos_zero_S v2))) in
   let (result : bool) =
     (if ((((((s1 = (0b0w :  1 words$word)))) /\ (((s2 = (0b0w :  1 words$word))))))) then
       if (((e1 = e2))) then ((lem$w2ui m1)) <= ((lem$w2ui m2))
       else ((lem$w2ui e1)) < ((lem$w2ui e2))
     else if ((((((s1 = (0b0w :  1 words$word)))) /\ (((s2 = (0b1w :  1 words$word))))))) then
       (v1Is0 /\ v2Is0)
     else if ((((((s1 = (0b1w :  1 words$word)))) /\ (((s2 = (0b0w :  1 words$word))))))) then T
     else if (((e1 = e2))) then ((lem$w2ui m1)) >= ((lem$w2ui m2))
     else ((lem$w2ui e1)) > ((lem$w2ui e2))) in
   let fflags =
     (if is_quiet then
       if (((((f_is_SNaN_S v1)) \/ ((f_is_SNaN_S v2))))) then (nvFlag ()   :  5 words$word)
       else (zeros_implicit (( 5 : int):ii)  :  5 words$word)
     else if (((((f_is_NaN_S v1)) \/ ((f_is_NaN_S v2))))) then (nvFlag ()   :  5 words$word)
     else (zeros_implicit (( 5 : int):ii)  :  5 words$word)) in
   (result, fflags)))`;


(*val nan_box : mword ty32 -> mword ty32*)

val _ = Define `
 ((nan_box:(32)words$word ->(32)words$word) val_32b=  val_32b)`;


(*val nan_unbox : mword ty32 -> mword ty32*)

val _ = Define `
 ((nan_unbox:(32)words$word ->(32)words$word) regval=  regval)`;


(*val is_RV32F_or_RV64F : unit -> M bool*)

val _ = Define `
 ((is_RV32F_or_RV64F:unit ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =
    (sail2_state$and_boolS ((haveFExt () )) (sail2_state_monad$returnS (((((((( 32 : int):ii) = (( 32 : int):ii)))) \/ ((((( 32 : int):ii) = (( 64 : int):ii))))))))))`;


(*val is_RV64F : unit -> M bool*)

val _ = Define `
 ((is_RV64F:unit ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state$and_boolS ((haveFExt () )) (sail2_state_monad$returnS ((((( 32 : int):ii) = (( 64 : int):ii)))))))`;


(*val is_RV32D_or_RV64D : unit -> M bool*)

val _ = Define `
 ((is_RV32D_or_RV64D:unit ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =
    (sail2_state$and_boolS ((haveDExt () )) (sail2_state_monad$returnS (((((((( 32 : int):ii) = (( 32 : int):ii)))) \/ ((((( 32 : int):ii) = (( 64 : int):ii))))))))))`;


(*val is_RV64D : unit -> M bool*)

val _ = Define `
 ((is_RV64D:unit ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state$and_boolS ((haveDExt () )) (sail2_state_monad$returnS ((((( 32 : int):ii) = (( 64 : int):ii)))))))`;


(*val process_fload64 : mword ty5 -> mword ty32 -> MemoryOpResult (mword ty64) -> M Retired*)

val _ = Define `
 ((process_fload64:(5)words$word ->(32)words$word ->((64)words$word)MemoryOpResult ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rd addr value=  (sail2_state_monad$returnS RETIRE_FAIL))`;


(*val process_fload32 : mword ty5 -> mword ty32 -> MemoryOpResult (mword ty32) -> M Retired*)

val _ = Define `
 ((process_fload32:(5)words$word ->(32)words$word ->((32)words$word)MemoryOpResult ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rd addr value=
    ((case value of
     MemValue (result) => sail2_state_monad$seqS (wF_bits rd ((nan_box result  :  32 words$word))) (sail2_state_monad$returnS RETIRE_SUCCESS)
   | MemException (e) => sail2_state_monad$seqS (handle_mem_exception addr e) (sail2_state_monad$returnS RETIRE_FAIL)
   )))`;


(*val process_fstore : mword ty32 -> MemoryOpResult bool -> M Retired*)

val _ = Define `
 ((process_fstore:(32)words$word ->(bool)MemoryOpResult ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) vaddr value=
    ((case value of
     MemValue (T) => sail2_state_monad$returnS RETIRE_SUCCESS
   | MemValue (F) => internal_error "store got false from mem_write_value"
   | MemException (e) => sail2_state_monad$seqS (handle_mem_exception vaddr e) (sail2_state_monad$returnS RETIRE_FAIL)
   )))`;


(*val f_madd_type_mnemonic_S_forwards : f_madd_op_S -> string*)

(*val f_madd_type_mnemonic_S_backwards : string -> M f_madd_op_S*)

(*val f_madd_type_mnemonic_S_forwards_matches : f_madd_op_S -> bool*)

(*val f_madd_type_mnemonic_S_backwards_matches : string -> bool*)

(*val f_madd_type_mnemonic_S_matches_prefix : string -> maybe ((f_madd_op_S * ii))*)

val _ = Define `
 ((f_madd_type_mnemonic_S_forwards:f_madd_op_S -> string) arg_=
    ((case arg_ of
     FMADD_S => "fmadd.s"
   | FMSUB_S => "fmsub.s"
   | FNMSUB_S => "fnmsub.s"
   | FNMADD_S => "fnmadd.s"
   )))`;


val _ = Define `
 ((f_madd_type_mnemonic_S_backwards:string ->(regstate)sail2_state_monad$sequential_state ->(((f_madd_op_S),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "fmadd.s"))) then sail2_state_monad$returnS FMADD_S
   else if (((p0_ = "fmsub.s"))) then sail2_state_monad$returnS FMSUB_S
   else if (((p0_ = "fnmsub.s"))) then sail2_state_monad$returnS FNMSUB_S
   else if (((p0_ = "fnmadd.s"))) then sail2_state_monad$returnS FNMADD_S
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((f_madd_type_mnemonic_S_forwards_matches:f_madd_op_S -> bool) arg_= 
  ((case arg_ of
         FMADD_S => T
     | FMSUB_S => T
     | FNMSUB_S => T
     | FNMADD_S => T
   )))`;


val _ = Define `
 ((f_madd_type_mnemonic_S_backwards_matches:string -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "fmadd.s"))) then T
   else if (((p0_ = "fmsub.s"))) then T
   else if (((p0_ = "fnmsub.s"))) then T
   else if (((p0_ = "fnmadd.s"))) then T
   else F))`;


(*val _s1114_ : string -> maybe string*)

val _ = Define `
 ((s1114_:string ->(string)option) s1115_0=
    (let s1116_0 = s1115_0 in
   if ((string_startswith s1116_0 "fnmadd.s")) then  
  (case ((string_drop s1116_0 ((string_length "fnmadd.s")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s1110_ : string -> maybe string*)

val _ = Define `
 ((s1110_:string ->(string)option) s1111_0=
    (let s1112_0 = s1111_0 in
   if ((string_startswith s1112_0 "fnmsub.s")) then  
  (case ((string_drop s1112_0 ((string_length "fnmsub.s")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s1106_ : string -> maybe string*)

val _ = Define `
 ((s1106_:string ->(string)option) s1107_0=
    (let s1108_0 = s1107_0 in
   if ((string_startswith s1108_0 "fmsub.s")) then  
  (case ((string_drop s1108_0 ((string_length "fmsub.s")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s1102_ : string -> maybe string*)

val _ = Define `
 ((s1102_:string ->(string)option) s1103_0=
    (let s1104_0 = s1103_0 in
   if ((string_startswith s1104_0 "fmadd.s")) then  
  (case ((string_drop s1104_0 ((string_length "fmadd.s")))) of
        s_ => SOME s_
  )
   else NONE))`;


val _ = Define `
 ((f_madd_type_mnemonic_S_matches_prefix:string ->(f_madd_op_S#int)option) arg_=
    (let s1105_0 = arg_ in
   if ((case ((s1102_ s1105_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1102_ s1105_0 of
      (SOME (s_)) =>
  SOME (FMADD_S, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1106_ s1105_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1106_ s1105_0 of
      (SOME (s_)) =>
  SOME (FMSUB_S, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1110_ s1105_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1110_ s1105_0 of
      (SOME (s_)) =>
  SOME (FNMSUB_S, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1114_ s1105_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1114_ s1105_0 of
      (SOME (s_)) =>
  SOME (FNMADD_S, ((string_length arg_)) - ((string_length s_)))
  )
   else NONE))`;


(*val f_bin_rm_type_mnemonic_S_forwards : f_bin_rm_op_S -> string*)

(*val f_bin_rm_type_mnemonic_S_backwards : string -> M f_bin_rm_op_S*)

(*val f_bin_rm_type_mnemonic_S_forwards_matches : f_bin_rm_op_S -> bool*)

(*val f_bin_rm_type_mnemonic_S_backwards_matches : string -> bool*)

(*val f_bin_rm_type_mnemonic_S_matches_prefix : string -> maybe ((f_bin_rm_op_S * ii))*)

val _ = Define `
 ((f_bin_rm_type_mnemonic_S_forwards:f_bin_rm_op_S -> string) arg_=
    ((case arg_ of
     FADD_S => "fadd.s"
   | FSUB_S => "fsub.s"
   | FMUL_S => "fmul.s"
   | FDIV_S => "fdiv.s"
   )))`;


val _ = Define `
 ((f_bin_rm_type_mnemonic_S_backwards:string ->(regstate)sail2_state_monad$sequential_state ->(((f_bin_rm_op_S),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "fadd.s"))) then sail2_state_monad$returnS FADD_S
   else if (((p0_ = "fsub.s"))) then sail2_state_monad$returnS FSUB_S
   else if (((p0_ = "fmul.s"))) then sail2_state_monad$returnS FMUL_S
   else if (((p0_ = "fdiv.s"))) then sail2_state_monad$returnS FDIV_S
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((f_bin_rm_type_mnemonic_S_forwards_matches:f_bin_rm_op_S -> bool) arg_= 
  ((case arg_ of   FADD_S => T | FSUB_S => T | FMUL_S => T | FDIV_S => T )))`;


val _ = Define `
 ((f_bin_rm_type_mnemonic_S_backwards_matches:string -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "fadd.s"))) then T
   else if (((p0_ = "fsub.s"))) then T
   else if (((p0_ = "fmul.s"))) then T
   else if (((p0_ = "fdiv.s"))) then T
   else F))`;


(*val _s1130_ : string -> maybe string*)

val _ = Define `
 ((s1130_:string ->(string)option) s1131_0=
    (let s1132_0 = s1131_0 in
   if ((string_startswith s1132_0 "fdiv.s")) then  
  (case ((string_drop s1132_0 ((string_length "fdiv.s")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s1126_ : string -> maybe string*)

val _ = Define `
 ((s1126_:string ->(string)option) s1127_0=
    (let s1128_0 = s1127_0 in
   if ((string_startswith s1128_0 "fmul.s")) then  
  (case ((string_drop s1128_0 ((string_length "fmul.s")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s1122_ : string -> maybe string*)

val _ = Define `
 ((s1122_:string ->(string)option) s1123_0=
    (let s1124_0 = s1123_0 in
   if ((string_startswith s1124_0 "fsub.s")) then  
  (case ((string_drop s1124_0 ((string_length "fsub.s")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s1118_ : string -> maybe string*)

val _ = Define `
 ((s1118_:string ->(string)option) s1119_0=
    (let s1120_0 = s1119_0 in
   if ((string_startswith s1120_0 "fadd.s")) then  
  (case ((string_drop s1120_0 ((string_length "fadd.s")))) of
        s_ => SOME s_
  )
   else NONE))`;


val _ = Define `
 ((f_bin_rm_type_mnemonic_S_matches_prefix:string ->(f_bin_rm_op_S#int)option) arg_=
    (let s1121_0 = arg_ in
   if ((case ((s1118_ s1121_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1118_ s1121_0 of
      (SOME (s_)) =>
  SOME (FADD_S, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1122_ s1121_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1122_ s1121_0 of
      (SOME (s_)) =>
  SOME (FSUB_S, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1126_ s1121_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1126_ s1121_0 of
      (SOME (s_)) =>
  SOME (FMUL_S, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1130_ s1121_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1130_ s1121_0 of
      (SOME (s_)) =>
  SOME (FDIV_S, ((string_length arg_)) - ((string_length s_)))
  )
   else NONE))`;


(*val f_un_rm_type_mnemonic_S_forwards : f_un_rm_op_S -> string*)

(*val f_un_rm_type_mnemonic_S_backwards : string -> M f_un_rm_op_S*)

(*val f_un_rm_type_mnemonic_S_forwards_matches : f_un_rm_op_S -> bool*)

(*val f_un_rm_type_mnemonic_S_backwards_matches : string -> bool*)

(*val f_un_rm_type_mnemonic_S_matches_prefix : string -> maybe ((f_un_rm_op_S * ii))*)

val _ = Define `
 ((f_un_rm_type_mnemonic_S_forwards:f_un_rm_op_S -> string) arg_=
    ((case arg_ of
     FSQRT_S => "fsqrt.s"
   | FCVT_W_S => "fcvt.w.s"
   | FCVT_WU_S => "fcvt.wu.s"
   | FCVT_S_W => "fcvt.s.w"
   | FCVT_S_WU => "fcvt.s.wu"
   | FCVT_L_S => "fcvt.l.s"
   | FCVT_LU_S => "fcvt.lu.s"
   | FCVT_S_L => "fcvt.s.l"
   | FCVT_S_LU => "fcvt.s.lu"
   )))`;


val _ = Define `
 ((f_un_rm_type_mnemonic_S_backwards:string ->(regstate)sail2_state_monad$sequential_state ->(((f_un_rm_op_S),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "fsqrt.s"))) then sail2_state_monad$returnS FSQRT_S
   else if (((p0_ = "fcvt.w.s"))) then sail2_state_monad$returnS FCVT_W_S
   else if (((p0_ = "fcvt.wu.s"))) then sail2_state_monad$returnS FCVT_WU_S
   else if (((p0_ = "fcvt.s.w"))) then sail2_state_monad$returnS FCVT_S_W
   else if (((p0_ = "fcvt.s.wu"))) then sail2_state_monad$returnS FCVT_S_WU
   else if (((p0_ = "fcvt.l.s"))) then sail2_state_monad$returnS FCVT_L_S
   else if (((p0_ = "fcvt.lu.s"))) then sail2_state_monad$returnS FCVT_LU_S
   else if (((p0_ = "fcvt.s.l"))) then sail2_state_monad$returnS FCVT_S_L
   else if (((p0_ = "fcvt.s.lu"))) then sail2_state_monad$returnS FCVT_S_LU
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((f_un_rm_type_mnemonic_S_forwards_matches:f_un_rm_op_S -> bool) arg_= 
  ((case arg_ of
         FSQRT_S => T
     | FCVT_W_S => T
     | FCVT_WU_S => T
     | FCVT_S_W => T
     | FCVT_S_WU => T
     | FCVT_L_S => T
     | FCVT_LU_S => T
     | FCVT_S_L => T
     | FCVT_S_LU => T
   )))`;


val _ = Define `
 ((f_un_rm_type_mnemonic_S_backwards_matches:string -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "fsqrt.s"))) then T
   else if (((p0_ = "fcvt.w.s"))) then T
   else if (((p0_ = "fcvt.wu.s"))) then T
   else if (((p0_ = "fcvt.s.w"))) then T
   else if (((p0_ = "fcvt.s.wu"))) then T
   else if (((p0_ = "fcvt.l.s"))) then T
   else if (((p0_ = "fcvt.lu.s"))) then T
   else if (((p0_ = "fcvt.s.l"))) then T
   else if (((p0_ = "fcvt.s.lu"))) then T
   else F))`;


(*val _s1166_ : string -> maybe string*)

val _ = Define `
 ((s1166_:string ->(string)option) s1167_0=
    (let s1168_0 = s1167_0 in
   if ((string_startswith s1168_0 "fcvt.s.lu")) then  
  (case ((string_drop s1168_0 ((string_length "fcvt.s.lu")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s1162_ : string -> maybe string*)

val _ = Define `
 ((s1162_:string ->(string)option) s1163_0=
    (let s1164_0 = s1163_0 in
   if ((string_startswith s1164_0 "fcvt.s.l")) then  
  (case ((string_drop s1164_0 ((string_length "fcvt.s.l")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s1158_ : string -> maybe string*)

val _ = Define `
 ((s1158_:string ->(string)option) s1159_0=
    (let s1160_0 = s1159_0 in
   if ((string_startswith s1160_0 "fcvt.lu.s")) then  
  (case ((string_drop s1160_0 ((string_length "fcvt.lu.s")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s1154_ : string -> maybe string*)

val _ = Define `
 ((s1154_:string ->(string)option) s1155_0=
    (let s1156_0 = s1155_0 in
   if ((string_startswith s1156_0 "fcvt.l.s")) then  
  (case ((string_drop s1156_0 ((string_length "fcvt.l.s")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s1150_ : string -> maybe string*)

val _ = Define `
 ((s1150_:string ->(string)option) s1151_0=
    (let s1152_0 = s1151_0 in
   if ((string_startswith s1152_0 "fcvt.s.wu")) then  
  (case ((string_drop s1152_0 ((string_length "fcvt.s.wu")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s1146_ : string -> maybe string*)

val _ = Define `
 ((s1146_:string ->(string)option) s1147_0=
    (let s1148_0 = s1147_0 in
   if ((string_startswith s1148_0 "fcvt.s.w")) then  
  (case ((string_drop s1148_0 ((string_length "fcvt.s.w")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s1142_ : string -> maybe string*)

val _ = Define `
 ((s1142_:string ->(string)option) s1143_0=
    (let s1144_0 = s1143_0 in
   if ((string_startswith s1144_0 "fcvt.wu.s")) then  
  (case ((string_drop s1144_0 ((string_length "fcvt.wu.s")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s1138_ : string -> maybe string*)

val _ = Define `
 ((s1138_:string ->(string)option) s1139_0=
    (let s1140_0 = s1139_0 in
   if ((string_startswith s1140_0 "fcvt.w.s")) then  
  (case ((string_drop s1140_0 ((string_length "fcvt.w.s")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s1134_ : string -> maybe string*)

val _ = Define `
 ((s1134_:string ->(string)option) s1135_0=
    (let s1136_0 = s1135_0 in
   if ((string_startswith s1136_0 "fsqrt.s")) then  
  (case ((string_drop s1136_0 ((string_length "fsqrt.s")))) of
        s_ => SOME s_
  )
   else NONE))`;


val _ = Define `
 ((f_un_rm_type_mnemonic_S_matches_prefix:string ->(f_un_rm_op_S#int)option) arg_=
    (let s1137_0 = arg_ in
   if ((case ((s1134_ s1137_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1134_ s1137_0 of
      (SOME (s_)) =>
  SOME (FSQRT_S, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1138_ s1137_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1138_ s1137_0 of
      (SOME (s_)) =>
  SOME (FCVT_W_S, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1142_ s1137_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1142_ s1137_0 of
      (SOME (s_)) =>
  SOME (FCVT_WU_S, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1146_ s1137_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1146_ s1137_0 of
      (SOME (s_)) =>
  SOME (FCVT_S_W, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1150_ s1137_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1150_ s1137_0 of
      (SOME (s_)) =>
  SOME (FCVT_S_WU, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1154_ s1137_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1154_ s1137_0 of
      (SOME (s_)) =>
  SOME (FCVT_L_S, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1158_ s1137_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1158_ s1137_0 of
      (SOME (s_)) =>
  SOME (FCVT_LU_S, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1162_ s1137_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1162_ s1137_0 of
      (SOME (s_)) =>
  SOME (FCVT_S_L, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1166_ s1137_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1166_ s1137_0 of
      (SOME (s_)) =>
  SOME (FCVT_S_LU, ((string_length arg_)) - ((string_length s_)))
  )
   else NONE))`;


(*val f_bin_type_mnemonic_S_forwards : f_bin_op_S -> string*)

(*val f_bin_type_mnemonic_S_backwards : string -> M f_bin_op_S*)

(*val f_bin_type_mnemonic_S_forwards_matches : f_bin_op_S -> bool*)

(*val f_bin_type_mnemonic_S_backwards_matches : string -> bool*)

(*val f_bin_type_mnemonic_S_matches_prefix : string -> maybe ((f_bin_op_S * ii))*)

val _ = Define `
 ((f_bin_type_mnemonic_S_forwards:f_bin_op_S -> string) arg_=
    ((case arg_ of
     FSGNJ_S => "fsgnj.s"
   | FSGNJN_S => "fsgnjn.s"
   | FSGNJX_S => "fsgnjx.s"
   | FMIN_S => "fmin.s"
   | FMAX_S => "fmax.s"
   | FEQ_S => "feq.s"
   | FLT_S => "flt.s"
   | FLE_S => "fle.s"
   )))`;


val _ = Define `
 ((f_bin_type_mnemonic_S_backwards:string ->(regstate)sail2_state_monad$sequential_state ->(((f_bin_op_S),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "fsgnj.s"))) then sail2_state_monad$returnS FSGNJ_S
   else if (((p0_ = "fsgnjn.s"))) then sail2_state_monad$returnS FSGNJN_S
   else if (((p0_ = "fsgnjx.s"))) then sail2_state_monad$returnS FSGNJX_S
   else if (((p0_ = "fmin.s"))) then sail2_state_monad$returnS FMIN_S
   else if (((p0_ = "fmax.s"))) then sail2_state_monad$returnS FMAX_S
   else if (((p0_ = "feq.s"))) then sail2_state_monad$returnS FEQ_S
   else if (((p0_ = "flt.s"))) then sail2_state_monad$returnS FLT_S
   else if (((p0_ = "fle.s"))) then sail2_state_monad$returnS FLE_S
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((f_bin_type_mnemonic_S_forwards_matches:f_bin_op_S -> bool) arg_= 
  ((case arg_ of
         FSGNJ_S => T
     | FSGNJN_S => T
     | FSGNJX_S => T
     | FMIN_S => T
     | FMAX_S => T
     | FEQ_S => T
     | FLT_S => T
     | FLE_S => T
   )))`;


val _ = Define `
 ((f_bin_type_mnemonic_S_backwards_matches:string -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "fsgnj.s"))) then T
   else if (((p0_ = "fsgnjn.s"))) then T
   else if (((p0_ = "fsgnjx.s"))) then T
   else if (((p0_ = "fmin.s"))) then T
   else if (((p0_ = "fmax.s"))) then T
   else if (((p0_ = "feq.s"))) then T
   else if (((p0_ = "flt.s"))) then T
   else if (((p0_ = "fle.s"))) then T
   else F))`;


(*val _s1198_ : string -> maybe string*)

val _ = Define `
 ((s1198_:string ->(string)option) s1199_0=
    (let s1200_0 = s1199_0 in
   if ((string_startswith s1200_0 "fle.s")) then  
  (case ((string_drop s1200_0 ((string_length "fle.s")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s1194_ : string -> maybe string*)

val _ = Define `
 ((s1194_:string ->(string)option) s1195_0=
    (let s1196_0 = s1195_0 in
   if ((string_startswith s1196_0 "flt.s")) then  
  (case ((string_drop s1196_0 ((string_length "flt.s")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s1190_ : string -> maybe string*)

val _ = Define `
 ((s1190_:string ->(string)option) s1191_0=
    (let s1192_0 = s1191_0 in
   if ((string_startswith s1192_0 "feq.s")) then  
  (case ((string_drop s1192_0 ((string_length "feq.s")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s1186_ : string -> maybe string*)

val _ = Define `
 ((s1186_:string ->(string)option) s1187_0=
    (let s1188_0 = s1187_0 in
   if ((string_startswith s1188_0 "fmax.s")) then  
  (case ((string_drop s1188_0 ((string_length "fmax.s")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s1182_ : string -> maybe string*)

val _ = Define `
 ((s1182_:string ->(string)option) s1183_0=
    (let s1184_0 = s1183_0 in
   if ((string_startswith s1184_0 "fmin.s")) then  
  (case ((string_drop s1184_0 ((string_length "fmin.s")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s1178_ : string -> maybe string*)

val _ = Define `
 ((s1178_:string ->(string)option) s1179_0=
    (let s1180_0 = s1179_0 in
   if ((string_startswith s1180_0 "fsgnjx.s")) then  
  (case ((string_drop s1180_0 ((string_length "fsgnjx.s")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s1174_ : string -> maybe string*)

val _ = Define `
 ((s1174_:string ->(string)option) s1175_0=
    (let s1176_0 = s1175_0 in
   if ((string_startswith s1176_0 "fsgnjn.s")) then  
  (case ((string_drop s1176_0 ((string_length "fsgnjn.s")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s1170_ : string -> maybe string*)

val _ = Define `
 ((s1170_:string ->(string)option) s1171_0=
    (let s1172_0 = s1171_0 in
   if ((string_startswith s1172_0 "fsgnj.s")) then  
  (case ((string_drop s1172_0 ((string_length "fsgnj.s")))) of
        s_ => SOME s_
  )
   else NONE))`;


val _ = Define `
 ((f_bin_type_mnemonic_S_matches_prefix:string ->(f_bin_op_S#int)option) arg_=
    (let s1173_0 = arg_ in
   if ((case ((s1170_ s1173_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1170_ s1173_0 of
      (SOME (s_)) =>
  SOME (FSGNJ_S, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1174_ s1173_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1174_ s1173_0 of
      (SOME (s_)) =>
  SOME (FSGNJN_S, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1178_ s1173_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1178_ s1173_0 of
      (SOME (s_)) =>
  SOME (FSGNJX_S, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1182_ s1173_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1182_ s1173_0 of
      (SOME (s_)) =>
  SOME (FMIN_S, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1186_ s1173_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1186_ s1173_0 of
      (SOME (s_)) =>
  SOME (FMAX_S, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1190_ s1173_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1190_ s1173_0 of
      (SOME (s_)) =>
  SOME (FEQ_S, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1194_ s1173_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1194_ s1173_0 of
      (SOME (s_)) =>
  SOME (FLT_S, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1198_ s1173_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1198_ s1173_0 of
      (SOME (s_)) =>
  SOME (FLE_S, ((string_length arg_)) - ((string_length s_)))
  )
   else NONE))`;


(*val f_un_type_mnemonic_S_forwards : f_un_op_S -> string*)

(*val f_un_type_mnemonic_S_backwards : string -> M f_un_op_S*)

(*val f_un_type_mnemonic_S_forwards_matches : f_un_op_S -> bool*)

(*val f_un_type_mnemonic_S_backwards_matches : string -> bool*)

(*val f_un_type_mnemonic_S_matches_prefix : string -> maybe ((f_un_op_S * ii))*)

val _ = Define `
 ((f_un_type_mnemonic_S_forwards:f_un_op_S -> string) arg_=
    ((case arg_ of   FMV_X_W => "fmv.x.w" | FCLASS_S => "fclass.s" | FMV_W_X => "fmv.w.x" )))`;


val _ = Define `
 ((f_un_type_mnemonic_S_backwards:string ->(regstate)sail2_state_monad$sequential_state ->(((f_un_op_S),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "fmv.x.w"))) then sail2_state_monad$returnS FMV_X_W
   else if (((p0_ = "fclass.s"))) then sail2_state_monad$returnS FCLASS_S
   else if (((p0_ = "fmv.w.x"))) then sail2_state_monad$returnS FMV_W_X
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((f_un_type_mnemonic_S_forwards_matches:f_un_op_S -> bool) arg_= 
  ((case arg_ of   FMV_X_W => T | FCLASS_S => T | FMV_W_X => T )))`;


val _ = Define `
 ((f_un_type_mnemonic_S_backwards_matches:string -> bool) arg_=
    (let p0_ = arg_ in
   if (((p0_ = "fmv.x.w"))) then T
   else if (((p0_ = "fclass.s"))) then T
   else if (((p0_ = "fmv.w.x"))) then T
   else F))`;


(*val _s1210_ : string -> maybe string*)

val _ = Define `
 ((s1210_:string ->(string)option) s1211_0=
    (let s1212_0 = s1211_0 in
   if ((string_startswith s1212_0 "fmv.w.x")) then  
  (case ((string_drop s1212_0 ((string_length "fmv.w.x")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s1206_ : string -> maybe string*)

val _ = Define `
 ((s1206_:string ->(string)option) s1207_0=
    (let s1208_0 = s1207_0 in
   if ((string_startswith s1208_0 "fclass.s")) then  
  (case ((string_drop s1208_0 ((string_length "fclass.s")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s1202_ : string -> maybe string*)

val _ = Define `
 ((s1202_:string ->(string)option) s1203_0=
    (let s1204_0 = s1203_0 in
   if ((string_startswith s1204_0 "fmv.x.w")) then  
  (case ((string_drop s1204_0 ((string_length "fmv.x.w")))) of
        s_ => SOME s_
  )
   else NONE))`;


val _ = Define `
 ((f_un_type_mnemonic_S_matches_prefix:string ->(f_un_op_S#int)option) arg_=
    (let s1205_0 = arg_ in
   if ((case ((s1202_ s1205_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1202_ s1205_0 of
      (SOME (s_)) =>
  SOME (FMV_X_W, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1206_ s1205_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1206_ s1205_0 of
      (SOME (s_)) =>
  SOME (FCLASS_S, ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s1210_ s1205_0)) of   SOME (s_) => T | _ => F )) then  
  (case s1210_ s1205_0 of
      (SOME (s_)) =>
  SOME (FMV_W_X, ((string_length arg_)) - ((string_length s_)))
  )
   else NONE))`;


val _ = Define `
 ((encdec_forwards:ast ->(regstate)sail2_state_monad$sequential_state ->((((32)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    ((case arg_ of
     UTYPE ((imm, rd, op)) =>
      sail2_state_monad$returnS ((concat_vec imm
                 ((concat_vec rd ((encdec_uop_forwards op  :  7 words$word))  :  12 words$word))
                :  32 words$word))
   | RISCV_JAL ((v__2, rd)) =>
      if (((((subrange_vec_dec v__2 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)) = (0b0w :  1 words$word)))) then
        let (imm_19 : 1 bits) = ((subrange_vec_dec v__2 (( 20 : int):ii) (( 20 : int):ii)  :  1 words$word)) in
        let (imm_8 : 1 bits) = ((subrange_vec_dec v__2 (( 11 : int):ii) (( 11 : int):ii)  :  1 words$word)) in
        let (imm_7_0 : 8 bits) = ((subrange_vec_dec v__2 (( 19 : int):ii) (( 12 : int):ii)  :  8 words$word)) in
        let (imm_19 : 1 bits) = ((subrange_vec_dec v__2 (( 20 : int):ii) (( 20 : int):ii)  :  1 words$word)) in
        let (imm_18_13 : 6 bits) = ((subrange_vec_dec v__2 (( 10 : int):ii) (( 5 : int):ii)  :  6 words$word)) in
        let (imm_12_9 : 4 bits) = ((subrange_vec_dec v__2 (( 4 : int):ii) (( 1 : int):ii)  :  4 words$word)) in
        sail2_state_monad$returnS ((concat_vec imm_19
                   ((concat_vec imm_18_13
                       ((concat_vec imm_12_9
                           ((concat_vec imm_8
                               ((concat_vec imm_7_0
                                   ((concat_vec rd (0b1101111w :  7 words$word)  :  12 words$word))
                                  :  20 words$word))
                              :  21 words$word))
                          :  25 words$word))
                      :  31 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | RISCV_JALR ((imm, rs1, rd)) =>
      sail2_state_monad$returnS ((concat_vec imm
                 ((concat_vec rs1
                     ((concat_vec (0b000w :  3 words$word)
                         ((concat_vec rd (0b1100111w :  7 words$word)  :  12 words$word))
                        :  15 words$word))
                    :  20 words$word))
                :  32 words$word))
   | BTYPE ((v__4, rs2, rs1, op)) =>
      if (((((subrange_vec_dec v__4 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)) = (0b0w :  1 words$word)))) then
        let (imm7_6 : 1 bits) = ((subrange_vec_dec v__4 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
        let (imm7_6 : 1 bits) = ((subrange_vec_dec v__4 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
        let (imm7_5_0 : 6 bits) = ((subrange_vec_dec v__4 (( 10 : int):ii) (( 5 : int):ii)  :  6 words$word)) in
        let (imm5_4_1 : 4 bits) = ((subrange_vec_dec v__4 (( 4 : int):ii) (( 1 : int):ii)  :  4 words$word)) in
        let (imm5_0 : 1 bits) = ((subrange_vec_dec v__4 (( 11 : int):ii) (( 11 : int):ii)  :  1 words$word)) in
        sail2_state_monad$returnS ((concat_vec imm7_6
                   ((concat_vec imm7_5_0
                       ((concat_vec rs2
                           ((concat_vec rs1
                               ((concat_vec ((encdec_bop_forwards op  :  3 words$word))
                                   ((concat_vec imm5_4_1
                                       ((concat_vec imm5_0 (0b1100011w :  7 words$word)  :  8 words$word))
                                      :  12 words$word))
                                  :  15 words$word))
                              :  20 words$word))
                          :  25 words$word))
                      :  31 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | ITYPE ((imm, rs1, rd, op)) =>
      sail2_state_monad$returnS ((concat_vec imm
                 ((concat_vec rs1
                     ((concat_vec ((encdec_iop_forwards op  :  3 words$word))
                         ((concat_vec rd (0b0010011w :  7 words$word)  :  12 words$word))
                        :  15 words$word))
                    :  20 words$word))
                :  32 words$word))
   | SHIFTIOP ((shamt, rs1, rd, RISCV_SLLI)) =>
      sail2_state_monad$returnS ((concat_vec (0b000000w :  6 words$word)
                 ((concat_vec shamt
                     ((concat_vec rs1
                         ((concat_vec (0b001w :  3 words$word)
                             ((concat_vec rd (0b0010011w :  7 words$word)  :  12 words$word))
                            :  15 words$word))
                        :  20 words$word))
                    :  26 words$word))
                :  32 words$word))
   | SHIFTIOP ((shamt, rs1, rd, RISCV_SRLI)) =>
      sail2_state_monad$returnS ((concat_vec (0b000000w :  6 words$word)
                 ((concat_vec shamt
                     ((concat_vec rs1
                         ((concat_vec (0b101w :  3 words$word)
                             ((concat_vec rd (0b0010011w :  7 words$word)  :  12 words$word))
                            :  15 words$word))
                        :  20 words$word))
                    :  26 words$word))
                :  32 words$word))
   | SHIFTIOP ((shamt, rs1, rd, RISCV_SRAI)) =>
      sail2_state_monad$returnS ((concat_vec (0b010000w :  6 words$word)
                 ((concat_vec shamt
                     ((concat_vec rs1
                         ((concat_vec (0b101w :  3 words$word)
                             ((concat_vec rd (0b0010011w :  7 words$word)  :  12 words$word))
                            :  15 words$word))
                        :  20 words$word))
                    :  26 words$word))
                :  32 words$word))
   | RTYPE ((rs2, rs1, rd, RISCV_ADD)) =>
      sail2_state_monad$returnS ((concat_vec (0b0000000w :  7 words$word)
                 ((concat_vec rs2
                     ((concat_vec rs1
                         ((concat_vec (0b000w :  3 words$word)
                             ((concat_vec rd (0b0110011w :  7 words$word)  :  12 words$word))
                            :  15 words$word))
                        :  20 words$word))
                    :  25 words$word))
                :  32 words$word))
   | RTYPE ((rs2, rs1, rd, RISCV_SLT)) =>
      sail2_state_monad$returnS ((concat_vec (0b0000000w :  7 words$word)
                 ((concat_vec rs2
                     ((concat_vec rs1
                         ((concat_vec (0b010w :  3 words$word)
                             ((concat_vec rd (0b0110011w :  7 words$word)  :  12 words$word))
                            :  15 words$word))
                        :  20 words$word))
                    :  25 words$word))
                :  32 words$word))
   | RTYPE ((rs2, rs1, rd, RISCV_SLTU)) =>
      sail2_state_monad$returnS ((concat_vec (0b0000000w :  7 words$word)
                 ((concat_vec rs2
                     ((concat_vec rs1
                         ((concat_vec (0b011w :  3 words$word)
                             ((concat_vec rd (0b0110011w :  7 words$word)  :  12 words$word))
                            :  15 words$word))
                        :  20 words$word))
                    :  25 words$word))
                :  32 words$word))
   | RTYPE ((rs2, rs1, rd, RISCV_AND)) =>
      sail2_state_monad$returnS ((concat_vec (0b0000000w :  7 words$word)
                 ((concat_vec rs2
                     ((concat_vec rs1
                         ((concat_vec (0b111w :  3 words$word)
                             ((concat_vec rd (0b0110011w :  7 words$word)  :  12 words$word))
                            :  15 words$word))
                        :  20 words$word))
                    :  25 words$word))
                :  32 words$word))
   | RTYPE ((rs2, rs1, rd, RISCV_OR)) =>
      sail2_state_monad$returnS ((concat_vec (0b0000000w :  7 words$word)
                 ((concat_vec rs2
                     ((concat_vec rs1
                         ((concat_vec (0b110w :  3 words$word)
                             ((concat_vec rd (0b0110011w :  7 words$word)  :  12 words$word))
                            :  15 words$word))
                        :  20 words$word))
                    :  25 words$word))
                :  32 words$word))
   | RTYPE ((rs2, rs1, rd, RISCV_XOR)) =>
      sail2_state_monad$returnS ((concat_vec (0b0000000w :  7 words$word)
                 ((concat_vec rs2
                     ((concat_vec rs1
                         ((concat_vec (0b100w :  3 words$word)
                             ((concat_vec rd (0b0110011w :  7 words$word)  :  12 words$word))
                            :  15 words$word))
                        :  20 words$word))
                    :  25 words$word))
                :  32 words$word))
   | RTYPE ((rs2, rs1, rd, RISCV_SLL)) =>
      sail2_state_monad$returnS ((concat_vec (0b0000000w :  7 words$word)
                 ((concat_vec rs2
                     ((concat_vec rs1
                         ((concat_vec (0b001w :  3 words$word)
                             ((concat_vec rd (0b0110011w :  7 words$word)  :  12 words$word))
                            :  15 words$word))
                        :  20 words$word))
                    :  25 words$word))
                :  32 words$word))
   | RTYPE ((rs2, rs1, rd, RISCV_SRL)) =>
      sail2_state_monad$returnS ((concat_vec (0b0000000w :  7 words$word)
                 ((concat_vec rs2
                     ((concat_vec rs1
                         ((concat_vec (0b101w :  3 words$word)
                             ((concat_vec rd (0b0110011w :  7 words$word)  :  12 words$word))
                            :  15 words$word))
                        :  20 words$word))
                    :  25 words$word))
                :  32 words$word))
   | RTYPE ((rs2, rs1, rd, RISCV_SUB)) =>
      sail2_state_monad$returnS ((concat_vec (0b0100000w :  7 words$word)
                 ((concat_vec rs2
                     ((concat_vec rs1
                         ((concat_vec (0b000w :  3 words$word)
                             ((concat_vec rd (0b0110011w :  7 words$word)  :  12 words$word))
                            :  15 words$word))
                        :  20 words$word))
                    :  25 words$word))
                :  32 words$word))
   | RTYPE ((rs2, rs1, rd, RISCV_SRA)) =>
      sail2_state_monad$returnS ((concat_vec (0b0100000w :  7 words$word)
                 ((concat_vec rs2
                     ((concat_vec rs1
                         ((concat_vec (0b101w :  3 words$word)
                             ((concat_vec rd (0b0110011w :  7 words$word)  :  12 words$word))
                            :  15 words$word))
                        :  20 words$word))
                    :  25 words$word))
                :  32 words$word))
   | LOAD ((imm, rs1, rd, is_unsigned, size1, F, F)) =>
      if (((((((word_width_bytes size1)) < (( 4 : int):ii))) \/ (((((~ is_unsigned)) /\ ((((word_width_bytes size1)) <= (( 4 : int):ii))))))))) then
        sail2_state_monad$returnS ((concat_vec imm
                   ((concat_vec rs1
                       ((concat_vec ((bool_bits_forwards is_unsigned  :  1 words$word))
                           ((concat_vec ((size_bits_forwards size1  :  2 words$word))
                               ((concat_vec rd (0b0000011w :  7 words$word)  :  12 words$word))
                              :  14 words$word))
                          :  15 words$word))
                      :  20 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | STORE ((v__6, rs2, rs1, size1, F, F)) =>
      if ((((word_width_bytes size1)) <= (( 4 : int):ii))) then
        let (imm7 : 7 bits) = ((subrange_vec_dec v__6 (( 11 : int):ii) (( 5 : int):ii)  :  7 words$word)) in
        let (imm7 : 7 bits) = ((subrange_vec_dec v__6 (( 11 : int):ii) (( 5 : int):ii)  :  7 words$word)) in
        let (imm5 : 5 bits) = ((subrange_vec_dec v__6 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
        sail2_state_monad$returnS ((concat_vec imm7
                   ((concat_vec rs2
                       ((concat_vec rs1
                           ((concat_vec (0b0w :  1 words$word)
                               ((concat_vec ((size_bits_forwards size1  :  2 words$word))
                                   ((concat_vec imm5 (0b0100011w :  7 words$word)  :  12 words$word))
                                  :  14 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | ADDIW ((imm, rs1, rd)) =>
      if ((((( 32 : int):ii) = (( 64 : int):ii)))) then
        sail2_state_monad$returnS ((concat_vec imm
                   ((concat_vec rs1
                       ((concat_vec (0b000w :  3 words$word)
                           ((concat_vec rd (0b0011011w :  7 words$word)  :  12 words$word))
                          :  15 words$word))
                      :  20 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | SHIFTW ((shamt, rs1, rd, RISCV_SLLI)) =>
      if ((((( 32 : int):ii) = (( 64 : int):ii)))) then
        sail2_state_monad$returnS ((concat_vec (0b0000000w :  7 words$word)
                   ((concat_vec shamt
                       ((concat_vec rs1
                           ((concat_vec (0b001w :  3 words$word)
                               ((concat_vec rd (0b0011011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | SHIFTW ((shamt, rs1, rd, RISCV_SRLI)) =>
      if ((((( 32 : int):ii) = (( 64 : int):ii)))) then
        sail2_state_monad$returnS ((concat_vec (0b0000000w :  7 words$word)
                   ((concat_vec shamt
                       ((concat_vec rs1
                           ((concat_vec (0b101w :  3 words$word)
                               ((concat_vec rd (0b0011011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | SHIFTW ((shamt, rs1, rd, RISCV_SRAI)) =>
      if ((((( 32 : int):ii) = (( 64 : int):ii)))) then
        sail2_state_monad$returnS ((concat_vec (0b0100000w :  7 words$word)
                   ((concat_vec shamt
                       ((concat_vec rs1
                           ((concat_vec (0b101w :  3 words$word)
                               ((concat_vec rd (0b0011011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | RTYPEW ((rs2, rs1, rd, RISCV_ADDW)) =>
      if ((((( 32 : int):ii) = (( 64 : int):ii)))) then
        sail2_state_monad$returnS ((concat_vec (0b0000000w :  7 words$word)
                   ((concat_vec rs2
                       ((concat_vec rs1
                           ((concat_vec (0b000w :  3 words$word)
                               ((concat_vec rd (0b0111011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | RTYPEW ((rs2, rs1, rd, RISCV_SUBW)) =>
      if ((((( 32 : int):ii) = (( 64 : int):ii)))) then
        sail2_state_monad$returnS ((concat_vec (0b0100000w :  7 words$word)
                   ((concat_vec rs2
                       ((concat_vec rs1
                           ((concat_vec (0b000w :  3 words$word)
                               ((concat_vec rd (0b0111011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | RTYPEW ((rs2, rs1, rd, RISCV_SLLW)) =>
      if ((((( 32 : int):ii) = (( 64 : int):ii)))) then
        sail2_state_monad$returnS ((concat_vec (0b0000000w :  7 words$word)
                   ((concat_vec rs2
                       ((concat_vec rs1
                           ((concat_vec (0b001w :  3 words$word)
                               ((concat_vec rd (0b0111011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | RTYPEW ((rs2, rs1, rd, RISCV_SRLW)) =>
      if ((((( 32 : int):ii) = (( 64 : int):ii)))) then
        sail2_state_monad$returnS ((concat_vec (0b0000000w :  7 words$word)
                   ((concat_vec rs2
                       ((concat_vec rs1
                           ((concat_vec (0b101w :  3 words$word)
                               ((concat_vec rd (0b0111011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | RTYPEW ((rs2, rs1, rd, RISCV_SRAW)) =>
      if ((((( 32 : int):ii) = (( 64 : int):ii)))) then
        sail2_state_monad$returnS ((concat_vec (0b0100000w :  7 words$word)
                   ((concat_vec rs2
                       ((concat_vec rs1
                           ((concat_vec (0b101w :  3 words$word)
                               ((concat_vec rd (0b0111011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | SHIFTIWOP ((shamt, rs1, rd, RISCV_SLLIW)) =>
      if ((((( 32 : int):ii) = (( 64 : int):ii)))) then
        sail2_state_monad$returnS ((concat_vec (0b0000000w :  7 words$word)
                   ((concat_vec shamt
                       ((concat_vec rs1
                           ((concat_vec (0b001w :  3 words$word)
                               ((concat_vec rd (0b0011011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | SHIFTIWOP ((shamt, rs1, rd, RISCV_SRLIW)) =>
      if ((((( 32 : int):ii) = (( 64 : int):ii)))) then
        sail2_state_monad$returnS ((concat_vec (0b0000000w :  7 words$word)
                   ((concat_vec shamt
                       ((concat_vec rs1
                           ((concat_vec (0b101w :  3 words$word)
                               ((concat_vec rd (0b0011011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | SHIFTIWOP ((shamt, rs1, rd, RISCV_SRAIW)) =>
      if ((((( 32 : int):ii) = (( 64 : int):ii)))) then
        sail2_state_monad$returnS ((concat_vec (0b0100000w :  7 words$word)
                   ((concat_vec shamt
                       ((concat_vec rs1
                           ((concat_vec (0b101w :  3 words$word)
                               ((concat_vec rd (0b0011011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | FENCE ((pred, succ)) =>
      sail2_state_monad$returnS ((concat_vec (0x0w :  4 words$word)
                 ((concat_vec pred
                     ((concat_vec succ
                         ((concat_vec (0b00000w :  5 words$word)
                             ((concat_vec (0b000w :  3 words$word)
                                 ((concat_vec (0b00000w :  5 words$word) (0b0001111w :  7 words$word)
                                    :  12 words$word))
                                :  15 words$word))
                            :  20 words$word))
                        :  24 words$word))
                    :  28 words$word))
                :  32 words$word))
   | FENCE_TSO ((pred, succ)) =>
      sail2_state_monad$returnS ((concat_vec (0x8w :  4 words$word)
                 ((concat_vec pred
                     ((concat_vec succ
                         ((concat_vec (0b00000w :  5 words$word)
                             ((concat_vec (0b000w :  3 words$word)
                                 ((concat_vec (0b00000w :  5 words$word) (0b0001111w :  7 words$word)
                                    :  12 words$word))
                                :  15 words$word))
                            :  20 words$word))
                        :  24 words$word))
                    :  28 words$word))
                :  32 words$word))
   | FENCEI (() ) =>
      sail2_state_monad$returnS ((concat_vec (0x000w :  12 words$word)
                 ((concat_vec (0b00000w :  5 words$word)
                     ((concat_vec (0b001w :  3 words$word)
                         ((concat_vec (0b00000w :  5 words$word) (0b0001111w :  7 words$word)  :  12 words$word))
                        :  15 words$word))
                    :  20 words$word))
                :  32 words$word))
   | ECALL (() ) =>
      sail2_state_monad$returnS ((concat_vec (0x000w :  12 words$word)
                 ((concat_vec (0b00000w :  5 words$word)
                     ((concat_vec (0b000w :  3 words$word)
                         ((concat_vec (0b00000w :  5 words$word) (0b1110011w :  7 words$word)  :  12 words$word))
                        :  15 words$word))
                    :  20 words$word))
                :  32 words$word))
   | MRET (() ) =>
      sail2_state_monad$returnS ((concat_vec (0b0011000w :  7 words$word)
                 ((concat_vec (0b00010w :  5 words$word)
                     ((concat_vec (0b00000w :  5 words$word)
                         ((concat_vec (0b000w :  3 words$word)
                             ((concat_vec (0b00000w :  5 words$word) (0b1110011w :  7 words$word)
                                :  12 words$word))
                            :  15 words$word))
                        :  20 words$word))
                    :  25 words$word))
                :  32 words$word))
   | SRET (() ) =>
      sail2_state_monad$returnS ((concat_vec (0b0001000w :  7 words$word)
                 ((concat_vec (0b00010w :  5 words$word)
                     ((concat_vec (0b00000w :  5 words$word)
                         ((concat_vec (0b000w :  3 words$word)
                             ((concat_vec (0b00000w :  5 words$word) (0b1110011w :  7 words$word)
                                :  12 words$word))
                            :  15 words$word))
                        :  20 words$word))
                    :  25 words$word))
                :  32 words$word))
   | EBREAK (() ) =>
      sail2_state_monad$returnS ((concat_vec (0x001w :  12 words$word)
                 ((concat_vec (0b00000w :  5 words$word)
                     ((concat_vec (0b000w :  3 words$word)
                         ((concat_vec (0b00000w :  5 words$word) (0b1110011w :  7 words$word)  :  12 words$word))
                        :  15 words$word))
                    :  20 words$word))
                :  32 words$word))
   | WFI (() ) =>
      sail2_state_monad$returnS ((concat_vec (0x105w :  12 words$word)
                 ((concat_vec (0b00000w :  5 words$word)
                     ((concat_vec (0b000w :  3 words$word)
                         ((concat_vec (0b00000w :  5 words$word) (0b1110011w :  7 words$word)  :  12 words$word))
                        :  15 words$word))
                    :  20 words$word))
                :  32 words$word))
   | SFENCE_VMA ((rs1, rs2)) =>
      sail2_state_monad$returnS ((concat_vec (0b0001001w :  7 words$word)
                 ((concat_vec rs2
                     ((concat_vec rs1
                         ((concat_vec (0b000w :  3 words$word)
                             ((concat_vec (0b00000w :  5 words$word) (0b1110011w :  7 words$word)
                                :  12 words$word))
                            :  15 words$word))
                        :  20 words$word))
                    :  25 words$word))
                :  32 words$word))
   | LOADRES ((aq, rl, rs1, size1, rd)) =>
      if ((amo_width_valid size1)) then
        sail2_state_monad$returnS ((concat_vec (0b00010w :  5 words$word)
                   ((concat_vec ((bool_bits_forwards aq  :  1 words$word))
                       ((concat_vec ((bool_bits_forwards rl  :  1 words$word))
                           ((concat_vec (0b00000w :  5 words$word)
                               ((concat_vec rs1
                                   ((concat_vec (0b0w :  1 words$word)
                                       ((concat_vec ((size_bits_forwards size1  :  2 words$word))
                                           ((concat_vec rd (0b0101111w :  7 words$word)  :  12 words$word))
                                          :  14 words$word))
                                      :  15 words$word))
                                  :  20 words$word))
                              :  25 words$word))
                          :  26 words$word))
                      :  27 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | STORECON ((aq, rl, rs2, rs1, size1, rd)) =>
      if ((amo_width_valid size1)) then
        sail2_state_monad$returnS ((concat_vec (0b00011w :  5 words$word)
                   ((concat_vec ((bool_bits_forwards aq  :  1 words$word))
                       ((concat_vec ((bool_bits_forwards rl  :  1 words$word))
                           ((concat_vec rs2
                               ((concat_vec rs1
                                   ((concat_vec (0b0w :  1 words$word)
                                       ((concat_vec ((size_bits_forwards size1  :  2 words$word))
                                           ((concat_vec rd (0b0101111w :  7 words$word)  :  12 words$word))
                                          :  14 words$word))
                                      :  15 words$word))
                                  :  20 words$word))
                              :  25 words$word))
                          :  26 words$word))
                      :  27 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | AMO ((op, aq, rl, rs2, rs1, size1, rd)) =>
      if ((amo_width_valid size1)) then
        sail2_state_monad$returnS ((concat_vec ((encdec_amoop_forwards op  :  5 words$word))
                   ((concat_vec ((bool_bits_forwards aq  :  1 words$word))
                       ((concat_vec ((bool_bits_forwards rl  :  1 words$word))
                           ((concat_vec rs2
                               ((concat_vec rs1
                                   ((concat_vec (0b0w :  1 words$word)
                                       ((concat_vec ((size_bits_forwards size1  :  2 words$word))
                                           ((concat_vec rd (0b0101111w :  7 words$word)  :  12 words$word))
                                          :  14 words$word))
                                      :  15 words$word))
                                  :  20 words$word))
                              :  25 words$word))
                          :  26 words$word))
                      :  27 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | MUL ((rs2, rs1, rd, high, signed1, signed2)) =>
      sail2_state_monad$returnS ((concat_vec (0b0000001w :  7 words$word)
                 ((concat_vec rs2
                     ((concat_vec rs1
                         ((concat_vec
                             ((encdec_mul_op_forwards (high, signed1, signed2)  :  3 words$word))
                             ((concat_vec rd (0b0110011w :  7 words$word)  :  12 words$word))
                            :  15 words$word))
                        :  20 words$word))
                    :  25 words$word))
                :  32 words$word))
   | DIV0 ((rs2, rs1, rd, s)) =>
      sail2_state_monad$returnS ((concat_vec (0b0000001w :  7 words$word)
                 ((concat_vec rs2
                     ((concat_vec rs1
                         ((concat_vec (0b10w :  2 words$word)
                             ((concat_vec ((bool_not_bits_forwards s  :  1 words$word))
                                 ((concat_vec rd (0b0110011w :  7 words$word)  :  12 words$word))
                                :  13 words$word))
                            :  15 words$word))
                        :  20 words$word))
                    :  25 words$word))
                :  32 words$word))
   | REM ((rs2, rs1, rd, s)) =>
      sail2_state_monad$returnS ((concat_vec (0b0000001w :  7 words$word)
                 ((concat_vec rs2
                     ((concat_vec rs1
                         ((concat_vec (0b11w :  2 words$word)
                             ((concat_vec ((bool_not_bits_forwards s  :  1 words$word))
                                 ((concat_vec rd (0b0110011w :  7 words$word)  :  12 words$word))
                                :  13 words$word))
                            :  15 words$word))
                        :  20 words$word))
                    :  25 words$word))
                :  32 words$word))
   | MULW ((rs2, rs1, rd)) =>
      if ((((( 32 : int):ii) = (( 64 : int):ii)))) then
        sail2_state_monad$returnS ((concat_vec (0b0000001w :  7 words$word)
                   ((concat_vec rs2
                       ((concat_vec rs1
                           ((concat_vec (0b000w :  3 words$word)
                               ((concat_vec rd (0b0111011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | DIVW ((rs2, rs1, rd, s)) =>
      if ((((( 32 : int):ii) = (( 64 : int):ii)))) then
        sail2_state_monad$returnS ((concat_vec (0b0000001w :  7 words$word)
                   ((concat_vec rs2
                       ((concat_vec rs1
                           ((concat_vec (0b10w :  2 words$word)
                               ((concat_vec ((bool_not_bits_forwards s  :  1 words$word))
                                   ((concat_vec rd (0b0111011w :  7 words$word)  :  12 words$word))
                                  :  13 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | REMW ((rs2, rs1, rd, s)) =>
      if ((((( 32 : int):ii) = (( 64 : int):ii)))) then
        sail2_state_monad$returnS ((concat_vec (0b0000001w :  7 words$word)
                   ((concat_vec rs2
                       ((concat_vec rs1
                           ((concat_vec (0b11w :  2 words$word)
                               ((concat_vec ((bool_not_bits_forwards s  :  1 words$word))
                                   ((concat_vec rd (0b0111011w :  7 words$word)  :  12 words$word))
                                  :  13 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | CSR ((csr, rs1, rd, is_imm, op)) =>
      sail2_state_monad$returnS ((concat_vec csr
                 ((concat_vec rs1
                     ((concat_vec ((bool_bits_forwards is_imm  :  1 words$word))
                         ((concat_vec ((encdec_csrop_forwards op  :  2 words$word))
                             ((concat_vec rd (0b1110011w :  7 words$word)  :  12 words$word))
                            :  14 words$word))
                        :  15 words$word))
                    :  20 words$word))
                :  32 words$word))
   | URET (() ) =>
      sail2_state_monad$returnS ((concat_vec (0b0000000w :  7 words$word)
                 ((concat_vec (0b00010w :  5 words$word)
                     ((concat_vec (0b00000w :  5 words$word)
                         ((concat_vec (0b000w :  3 words$word)
                             ((concat_vec (0b00000w :  5 words$word) (0b1110011w :  7 words$word)
                                :  12 words$word))
                            :  15 words$word))
                        :  20 words$word))
                    :  25 words$word))
                :  32 words$word))
   | FENCE_RESERVED ((fm, pred, succ, rs, rd)) =>
      if (((((((((fm <> (0x0w :  4 words$word)))) /\ (((fm <> (0x8w :  4 words$word))))))) \/ ((((((rs <> (0b00000w :  5 words$word)))) \/ (((rd <> (0b00000w :  5 words$word))))))))))
      then
        sail2_state_monad$returnS ((concat_vec fm
                   ((concat_vec pred
                       ((concat_vec succ
                           ((concat_vec rs
                               ((concat_vec (0b000w :  3 words$word)
                                   ((concat_vec rd (0b0001111w :  7 words$word)  :  12 words$word))
                                  :  15 words$word))
                              :  20 words$word))
                          :  24 words$word))
                      :  28 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | FENCEI_RESERVED ((imm, rs, rd)) =>
      if ((((((imm <> (0x000w :  12 words$word)))) \/ ((((((rs <> zreg))) \/ (((rd <> zreg))))))))) then
        sail2_state_monad$returnS ((concat_vec imm
                   ((concat_vec rs
                       ((concat_vec (0b001w :  3 words$word)
                           ((concat_vec rd (0b0001111w :  7 words$word)  :  12 words$word))
                          :  15 words$word))
                      :  20 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | LOAD_FP ((imm, rs1, rd, WORD)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__48 : bool) . 
      if w__48 then
        sail2_state_monad$returnS ((concat_vec imm
                   ((concat_vec rs1
                       ((concat_vec (0b010w :  3 words$word)
                           ((concat_vec rd (0b0000111w :  7 words$word)  :  12 words$word))
                          :  15 words$word))
                      :  20 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | LOAD_FP ((imm, rs1, rd, DOUBLE)) => sail2_state_monad$bindS
      (is_RV32D_or_RV64D () ) (\ (w__51 : bool) . 
      if w__51 then
        sail2_state_monad$returnS ((concat_vec imm
                   ((concat_vec rs1
                       ((concat_vec (0b011w :  3 words$word)
                           ((concat_vec rd (0b0000111w :  7 words$word)  :  12 words$word))
                          :  15 words$word))
                      :  20 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | STORE_FP ((v__7, rs2, rs1, WORD)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__54 : bool) . 
      if w__54 then
        let (imm7 : 7 bits) = ((subrange_vec_dec v__7 (( 11 : int):ii) (( 5 : int):ii)  :  7 words$word)) in
        let (imm7 : 7 bits) = ((subrange_vec_dec v__7 (( 11 : int):ii) (( 5 : int):ii)  :  7 words$word)) in
        let (imm5 : 5 bits) = ((subrange_vec_dec v__7 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
        sail2_state_monad$returnS ((concat_vec imm7
                   ((concat_vec rs2
                       ((concat_vec rs1
                           ((concat_vec (0b010w :  3 words$word)
                               ((concat_vec imm5 (0b0100111w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | STORE_FP ((v__8, rs2, rs1, DOUBLE)) => sail2_state_monad$bindS
      (is_RV32D_or_RV64D () ) (\ (w__57 : bool) . 
      if w__57 then
        let (imm7 : 7 bits) = ((subrange_vec_dec v__8 (( 11 : int):ii) (( 5 : int):ii)  :  7 words$word)) in
        let (imm7 : 7 bits) = ((subrange_vec_dec v__8 (( 11 : int):ii) (( 5 : int):ii)  :  7 words$word)) in
        let (imm5 : 5 bits) = ((subrange_vec_dec v__8 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
        sail2_state_monad$returnS ((concat_vec imm7
                   ((concat_vec rs2
                       ((concat_vec rs1
                           ((concat_vec (0b011w :  3 words$word)
                               ((concat_vec imm5 (0b0100111w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | F_MADD_TYPE_S ((rs3, rs2, rs1, rm, rd, FMADD_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__60 : bool) . 
      if w__60 then
        sail2_state_monad$returnS ((concat_vec rs3
                   ((concat_vec (0b00w :  2 words$word)
                       ((concat_vec rs2
                           ((concat_vec rs1
                               ((concat_vec ((encdec_rounding_mode_forwards rm  :  3 words$word))
                                   ((concat_vec rd (0b1000011w :  7 words$word)  :  12 words$word))
                                  :  15 words$word))
                              :  20 words$word))
                          :  25 words$word))
                      :  27 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | F_MADD_TYPE_S ((rs3, rs2, rs1, rm, rd, FMSUB_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__63 : bool) . 
      if w__63 then
        sail2_state_monad$returnS ((concat_vec rs3
                   ((concat_vec (0b00w :  2 words$word)
                       ((concat_vec rs2
                           ((concat_vec rs1
                               ((concat_vec ((encdec_rounding_mode_forwards rm  :  3 words$word))
                                   ((concat_vec rd (0b1000111w :  7 words$word)  :  12 words$word))
                                  :  15 words$word))
                              :  20 words$word))
                          :  25 words$word))
                      :  27 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | F_MADD_TYPE_S ((rs3, rs2, rs1, rm, rd, FNMSUB_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__66 : bool) . 
      if w__66 then
        sail2_state_monad$returnS ((concat_vec rs3
                   ((concat_vec (0b00w :  2 words$word)
                       ((concat_vec rs2
                           ((concat_vec rs1
                               ((concat_vec ((encdec_rounding_mode_forwards rm  :  3 words$word))
                                   ((concat_vec rd (0b1001011w :  7 words$word)  :  12 words$word))
                                  :  15 words$word))
                              :  20 words$word))
                          :  25 words$word))
                      :  27 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | F_MADD_TYPE_S ((rs3, rs2, rs1, rm, rd, FNMADD_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__69 : bool) . 
      if w__69 then
        sail2_state_monad$returnS ((concat_vec rs3
                   ((concat_vec (0b00w :  2 words$word)
                       ((concat_vec rs2
                           ((concat_vec rs1
                               ((concat_vec ((encdec_rounding_mode_forwards rm  :  3 words$word))
                                   ((concat_vec rd (0b1001111w :  7 words$word)  :  12 words$word))
                                  :  15 words$word))
                              :  20 words$word))
                          :  25 words$word))
                      :  27 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | F_BIN_RM_TYPE_S ((rs2, rs1, rm, rd, FADD_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__72 : bool) . 
      if w__72 then
        sail2_state_monad$returnS ((concat_vec (0b0000000w :  7 words$word)
                   ((concat_vec rs2
                       ((concat_vec rs1
                           ((concat_vec ((encdec_rounding_mode_forwards rm  :  3 words$word))
                               ((concat_vec rd (0b1010011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | F_BIN_RM_TYPE_S ((rs2, rs1, rm, rd, FSUB_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__75 : bool) . 
      if w__75 then
        sail2_state_monad$returnS ((concat_vec (0b0000100w :  7 words$word)
                   ((concat_vec rs2
                       ((concat_vec rs1
                           ((concat_vec ((encdec_rounding_mode_forwards rm  :  3 words$word))
                               ((concat_vec rd (0b1010011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | F_BIN_RM_TYPE_S ((rs2, rs1, rm, rd, FMUL_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__78 : bool) . 
      if w__78 then
        sail2_state_monad$returnS ((concat_vec (0b0001000w :  7 words$word)
                   ((concat_vec rs2
                       ((concat_vec rs1
                           ((concat_vec ((encdec_rounding_mode_forwards rm  :  3 words$word))
                               ((concat_vec rd (0b1010011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | F_BIN_RM_TYPE_S ((rs2, rs1, rm, rd, FDIV_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__81 : bool) . 
      if w__81 then
        sail2_state_monad$returnS ((concat_vec (0b0001100w :  7 words$word)
                   ((concat_vec rs2
                       ((concat_vec rs1
                           ((concat_vec ((encdec_rounding_mode_forwards rm  :  3 words$word))
                               ((concat_vec rd (0b1010011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | F_UN_RM_TYPE_S ((rs1, rm, rd, FSQRT_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__84 : bool) . 
      if w__84 then
        sail2_state_monad$returnS ((concat_vec (0b0101100w :  7 words$word)
                   ((concat_vec (0b00000w :  5 words$word)
                       ((concat_vec rs1
                           ((concat_vec ((encdec_rounding_mode_forwards rm  :  3 words$word))
                               ((concat_vec rd (0b1010011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | F_UN_RM_TYPE_S ((rs1, rm, rd, FCVT_W_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__87 : bool) . 
      if w__87 then
        sail2_state_monad$returnS ((concat_vec (0b1100000w :  7 words$word)
                   ((concat_vec (0b00000w :  5 words$word)
                       ((concat_vec rs1
                           ((concat_vec ((encdec_rounding_mode_forwards rm  :  3 words$word))
                               ((concat_vec rd (0b1010011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | F_UN_RM_TYPE_S ((rs1, rm, rd, FCVT_WU_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__90 : bool) . 
      if w__90 then
        sail2_state_monad$returnS ((concat_vec (0b1100000w :  7 words$word)
                   ((concat_vec (0b00001w :  5 words$word)
                       ((concat_vec rs1
                           ((concat_vec ((encdec_rounding_mode_forwards rm  :  3 words$word))
                               ((concat_vec rd (0b1010011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | F_UN_RM_TYPE_S ((rs1, rm, rd, FCVT_S_W)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__93 : bool) . 
      if w__93 then
        sail2_state_monad$returnS ((concat_vec (0b1101000w :  7 words$word)
                   ((concat_vec (0b00000w :  5 words$word)
                       ((concat_vec rs1
                           ((concat_vec ((encdec_rounding_mode_forwards rm  :  3 words$word))
                               ((concat_vec rd (0b1010011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | F_UN_RM_TYPE_S ((rs1, rm, rd, FCVT_S_WU)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__96 : bool) . 
      if w__96 then
        sail2_state_monad$returnS ((concat_vec (0b1101000w :  7 words$word)
                   ((concat_vec (0b00001w :  5 words$word)
                       ((concat_vec rs1
                           ((concat_vec ((encdec_rounding_mode_forwards rm  :  3 words$word))
                               ((concat_vec rd (0b1010011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | F_UN_RM_TYPE_S ((rs1, rm, rd, FCVT_L_S)) => sail2_state_monad$bindS
      (is_RV64F () ) (\ (w__99 : bool) . 
      if w__99 then
        sail2_state_monad$returnS ((concat_vec (0b1100000w :  7 words$word)
                   ((concat_vec (0b00010w :  5 words$word)
                       ((concat_vec rs1
                           ((concat_vec ((encdec_rounding_mode_forwards rm  :  3 words$word))
                               ((concat_vec rd (0b1010011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | F_UN_RM_TYPE_S ((rs1, rm, rd, FCVT_LU_S)) => sail2_state_monad$bindS
      (is_RV64F () ) (\ (w__102 : bool) . 
      if w__102 then
        sail2_state_monad$returnS ((concat_vec (0b1100000w :  7 words$word)
                   ((concat_vec (0b00011w :  5 words$word)
                       ((concat_vec rs1
                           ((concat_vec ((encdec_rounding_mode_forwards rm  :  3 words$word))
                               ((concat_vec rd (0b1010011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | F_UN_RM_TYPE_S ((rs1, rm, rd, FCVT_S_L)) => sail2_state_monad$bindS
      (is_RV64F () ) (\ (w__105 : bool) . 
      if w__105 then
        sail2_state_monad$returnS ((concat_vec (0b1101000w :  7 words$word)
                   ((concat_vec (0b00010w :  5 words$word)
                       ((concat_vec rs1
                           ((concat_vec ((encdec_rounding_mode_forwards rm  :  3 words$word))
                               ((concat_vec rd (0b1010011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | F_UN_RM_TYPE_S ((rs1, rm, rd, FCVT_S_LU)) => sail2_state_monad$bindS
      (is_RV64F () ) (\ (w__108 : bool) . 
      if w__108 then
        sail2_state_monad$returnS ((concat_vec (0b1101000w :  7 words$word)
                   ((concat_vec (0b00011w :  5 words$word)
                       ((concat_vec rs1
                           ((concat_vec ((encdec_rounding_mode_forwards rm  :  3 words$word))
                               ((concat_vec rd (0b1010011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | F_BIN_TYPE_S ((rs2, rs1, rd, FSGNJ_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__111 : bool) . 
      if w__111 then
        sail2_state_monad$returnS ((concat_vec (0b0010000w :  7 words$word)
                   ((concat_vec rs2
                       ((concat_vec rs1
                           ((concat_vec (0b000w :  3 words$word)
                               ((concat_vec rd (0b1010011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | F_BIN_TYPE_S ((rs2, rs1, rd, FSGNJN_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__114 : bool) . 
      if w__114 then
        sail2_state_monad$returnS ((concat_vec (0b0010000w :  7 words$word)
                   ((concat_vec rs2
                       ((concat_vec rs1
                           ((concat_vec (0b001w :  3 words$word)
                               ((concat_vec rd (0b1010011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | F_BIN_TYPE_S ((rs2, rs1, rd, FSGNJX_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__117 : bool) . 
      if w__117 then
        sail2_state_monad$returnS ((concat_vec (0b0010000w :  7 words$word)
                   ((concat_vec rs2
                       ((concat_vec rs1
                           ((concat_vec (0b010w :  3 words$word)
                               ((concat_vec rd (0b1010011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | F_BIN_TYPE_S ((rs2, rs1, rd, FMIN_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__120 : bool) . 
      if w__120 then
        sail2_state_monad$returnS ((concat_vec (0b0010100w :  7 words$word)
                   ((concat_vec rs2
                       ((concat_vec rs1
                           ((concat_vec (0b000w :  3 words$word)
                               ((concat_vec rd (0b1010011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | F_BIN_TYPE_S ((rs2, rs1, rd, FMAX_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__123 : bool) . 
      if w__123 then
        sail2_state_monad$returnS ((concat_vec (0b0010100w :  7 words$word)
                   ((concat_vec rs2
                       ((concat_vec rs1
                           ((concat_vec (0b001w :  3 words$word)
                               ((concat_vec rd (0b1010011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | F_BIN_TYPE_S ((rs2, rs1, rd, FEQ_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__126 : bool) . 
      if w__126 then
        sail2_state_monad$returnS ((concat_vec (0b1010000w :  7 words$word)
                   ((concat_vec rs2
                       ((concat_vec rs1
                           ((concat_vec (0b010w :  3 words$word)
                               ((concat_vec rd (0b1010011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | F_BIN_TYPE_S ((rs2, rs1, rd, FLT_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__129 : bool) . 
      if w__129 then
        sail2_state_monad$returnS ((concat_vec (0b1010000w :  7 words$word)
                   ((concat_vec rs2
                       ((concat_vec rs1
                           ((concat_vec (0b001w :  3 words$word)
                               ((concat_vec rd (0b1010011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | F_BIN_TYPE_S ((rs2, rs1, rd, FLE_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__132 : bool) . 
      if w__132 then
        sail2_state_monad$returnS ((concat_vec (0b1010000w :  7 words$word)
                   ((concat_vec rs2
                       ((concat_vec rs1
                           ((concat_vec (0b000w :  3 words$word)
                               ((concat_vec rd (0b1010011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | F_UN_TYPE_S ((rs1, rd, FCLASS_S)) => sail2_state_monad$bindS
      (haveFExt () ) (\ (w__135 : bool) . 
      if w__135 then
        sail2_state_monad$returnS ((concat_vec (0b1110000w :  7 words$word)
                   ((concat_vec (0b00000w :  5 words$word)
                       ((concat_vec rs1
                           ((concat_vec (0b001w :  3 words$word)
                               ((concat_vec rd (0b1010011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | F_UN_TYPE_S ((rs1, rd, FMV_X_W)) => sail2_state_monad$bindS
      (haveFExt () ) (\ (w__138 : bool) . 
      if w__138 then
        sail2_state_monad$returnS ((concat_vec (0b1110000w :  7 words$word)
                   ((concat_vec (0b00000w :  5 words$word)
                       ((concat_vec rs1
                           ((concat_vec (0b000w :  3 words$word)
                               ((concat_vec rd (0b1010011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | F_UN_TYPE_S ((rs1, rd, FMV_W_X)) => sail2_state_monad$bindS
      (haveFExt () ) (\ (w__141 : bool) . 
      if w__141 then
        sail2_state_monad$returnS ((concat_vec (0b1111000w :  7 words$word)
                   ((concat_vec (0b00000w :  5 words$word)
                       ((concat_vec rs1
                           ((concat_vec (0b000w :  3 words$word)
                               ((concat_vec rd (0b1010011w :  7 words$word)  :  12 words$word))
                              :  15 words$word))
                          :  20 words$word))
                      :  25 words$word))
                  :  32 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | ILLEGAL (s) => sail2_state_monad$returnS s
   | _ => sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   )))`;


val _ = Define `
 ((encdec_backwards:(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((ast),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let v__9 = arg_ in
   if (let (mappingpatterns_40_0 :  7 words$word) = ((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     encdec_uop_backwards_matches mappingpatterns_40_0) then
     let (imm :  20 words$word) = ((subrange_vec_dec v__9 (( 31 : int):ii) (( 12 : int):ii)  :  20 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let (imm :  20 words$word) = ((subrange_vec_dec v__9 (( 31 : int):ii) (( 12 : int):ii)  :  20 words$word)) in
     let (mappingpatterns_40_0 :  7 words$word) = ((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in sail2_state_monad$bindS
     (encdec_uop_backwards mappingpatterns_40_0) (\ op .  sail2_state_monad$returnS (UTYPE (imm, rd, op)))
   else if (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b1101111w :  7 words$word))))
   then
     let (imm_19 : 1 bits) = ((subrange_vec_dec v__9 (( 31 : int):ii) (( 31 : int):ii)  :  1 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let (imm_8 : 1 bits) = ((subrange_vec_dec v__9 (( 20 : int):ii) (( 20 : int):ii)  :  1 words$word)) in
     let (imm_7_0 : 8 bits) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 12 : int):ii)  :  8 words$word)) in
     let (imm_19 : 1 bits) = ((subrange_vec_dec v__9 (( 31 : int):ii) (( 31 : int):ii)  :  1 words$word)) in
     let (imm_18_13 : 6 bits) = ((subrange_vec_dec v__9 (( 30 : int):ii) (( 25 : int):ii)  :  6 words$word)) in
     let (imm_12_9 : 4 bits) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 21 : int):ii)  :  4 words$word)) in
     sail2_state_monad$returnS (RISCV_JAL ((concat_vec imm_19
                           ((concat_vec imm_7_0
                               ((concat_vec imm_8
                                   ((concat_vec imm_18_13
                                       ((concat_vec imm_12_9 (0b0w :  1 words$word)  :  5 words$word))
                                      :  11 words$word))
                                  :  12 words$word))
                              :  20 words$word))
                          :  21 words$word),
                        rd))
   else if ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b1100111w :  7 words$word)))))))
   then
     let (imm :  12 words$word) = ((subrange_vec_dec v__9 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let (imm :  12 words$word) = ((subrange_vec_dec v__9 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
     sail2_state_monad$returnS (RISCV_JALR (imm, rs1, rd))
   else if ((((let (mappingpatterns_41_0 :  3 words$word) =
                 ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
               encdec_bop_backwards_matches mappingpatterns_41_0) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b1100011w :  7 words$word)))))))
   then
     let (imm7_6 : 1 bits) = ((subrange_vec_dec v__9 (( 31 : int):ii) (( 31 : int):ii)  :  1 words$word)) in
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (imm7_6 : 1 bits) = ((subrange_vec_dec v__9 (( 31 : int):ii) (( 31 : int):ii)  :  1 words$word)) in
     let (imm7_5_0 : 6 bits) = ((subrange_vec_dec v__9 (( 30 : int):ii) (( 25 : int):ii)  :  6 words$word)) in
     let (imm5_4_1 : 4 bits) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 8 : int):ii)  :  4 words$word)) in
     let (imm5_0 : 1 bits) = ((subrange_vec_dec v__9 (( 7 : int):ii) (( 7 : int):ii)  :  1 words$word)) in
     let (mappingpatterns_41_0 :  3 words$word) = ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in sail2_state_monad$bindS
     (encdec_bop_backwards mappingpatterns_41_0) (\ op . 
     sail2_state_monad$returnS (BTYPE ((concat_vec imm7_6
                       ((concat_vec imm5_0
                           ((concat_vec imm7_5_0
                               ((concat_vec imm5_4_1 (0b0w :  1 words$word)  :  5 words$word))
                              :  11 words$word))
                          :  12 words$word))
                      :  13 words$word),
                    rs2,
                    rs1,
                    op)))
   else if ((((let (mappingpatterns_42_0 :  3 words$word) =
                 ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
               encdec_iop_backwards_matches mappingpatterns_42_0) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0010011w :  7 words$word)))))))
   then
     let (imm :  12 words$word) = ((subrange_vec_dec v__9 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let (imm :  12 words$word) = ((subrange_vec_dec v__9 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
     let (mappingpatterns_42_0 :  3 words$word) = ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in sail2_state_monad$bindS
     (encdec_iop_backwards mappingpatterns_42_0) (\ op .  sail2_state_monad$returnS (ITYPE (imm, rs1, rd, op)))
   else if ((((let (shamt :  6 words$word) = ((subrange_vec_dec v__9 (( 25 : int):ii) (( 20 : int):ii)  :  6 words$word)) in
               (((((( 32 : int):ii) = (( 64 : int):ii)))) \/ (((((access_vec_dec shamt (( 5 : int):ii))) = B0))))) /\ ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (0b000000w :  6 words$word)))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b001w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0010011w :  7 words$word))))))))))))) then
     let (shamt :  6 words$word) = ((subrange_vec_dec v__9 (( 25 : int):ii) (( 20 : int):ii)  :  6 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (SHIFTIOP (shamt, rs1, rd, RISCV_SLLI))
   else if ((((let (shamt :  6 words$word) = ((subrange_vec_dec v__9 (( 25 : int):ii) (( 20 : int):ii)  :  6 words$word)) in
               (((((( 32 : int):ii) = (( 64 : int):ii)))) \/ (((((access_vec_dec shamt (( 5 : int):ii))) = B0))))) /\ ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (0b000000w :  6 words$word)))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b101w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0010011w :  7 words$word))))))))))))) then
     let (shamt :  6 words$word) = ((subrange_vec_dec v__9 (( 25 : int):ii) (( 20 : int):ii)  :  6 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (SHIFTIOP (shamt, rs1, rd, RISCV_SRLI))
   else if ((((let (shamt :  6 words$word) = ((subrange_vec_dec v__9 (( 25 : int):ii) (( 20 : int):ii)  :  6 words$word)) in
               (((((( 32 : int):ii) = (( 64 : int):ii)))) \/ (((((access_vec_dec shamt (( 5 : int):ii))) = B0))))) /\ ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (0b010000w :  6 words$word)))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b101w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0010011w :  7 words$word))))))))))))) then
     let (shamt :  6 words$word) = ((subrange_vec_dec v__9 (( 25 : int):ii) (( 20 : int):ii)  :  6 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (SHIFTIOP (shamt, rs1, rd, RISCV_SRAI))
   else if ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0110011w :  7 words$word)))))))))) then
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (RTYPE (rs2, rs1, rd, RISCV_ADD))
   else if ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b010w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0110011w :  7 words$word)))))))))) then
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (RTYPE (rs2, rs1, rd, RISCV_SLT))
   else if ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b011w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0110011w :  7 words$word)))))))))) then
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (RTYPE (rs2, rs1, rd, RISCV_SLTU))
   else if ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b111w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0110011w :  7 words$word)))))))))) then
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (RTYPE (rs2, rs1, rd, RISCV_AND))
   else if ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b110w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0110011w :  7 words$word)))))))))) then
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (RTYPE (rs2, rs1, rd, RISCV_OR))
   else if ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b100w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0110011w :  7 words$word)))))))))) then
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (RTYPE (rs2, rs1, rd, RISCV_XOR))
   else if ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b001w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0110011w :  7 words$word)))))))))) then
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (RTYPE (rs2, rs1, rd, RISCV_SLL))
   else if ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b101w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0110011w :  7 words$word)))))))))) then
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (RTYPE (rs2, rs1, rd, RISCV_SRL))
   else if ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0100000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0110011w :  7 words$word)))))))))) then
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (RTYPE (rs2, rs1, rd, RISCV_SUB))
   else if ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0100000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b101w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0110011w :  7 words$word)))))))))) then
     let (rs2 :  5 words$word) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
     let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
     let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (RTYPE (rs2, rs1, rd, RISCV_SRA))
   else sail2_state_monad$bindS
     (sail2_state$and_boolS
       (let (mappingpatterns_44_0 :  2 words$word) =
         ((subrange_vec_dec v__9 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
       let (mappingpatterns_43_0 :  1 words$word) = ((subrange_vec_dec v__9 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)) in
       if ((size_bits_backwards_matches mappingpatterns_44_0)) then sail2_state_monad$bindS
         (size_bits_backwards mappingpatterns_44_0) (\ size1 . 
         if ((bool_bits_backwards_matches mappingpatterns_43_0)) then sail2_state_monad$bindS
           (bool_bits_backwards mappingpatterns_43_0) (\ is_unsigned . 
           sail2_state_monad$returnS (((((((word_width_bytes size1)) < (( 4 : int):ii))) \/ (((((~ is_unsigned)) /\ ((((word_width_bytes size1)) <= (( 4 : int):ii))))))))))
         else sail2_state_monad$returnS F)
       else sail2_state_monad$returnS F)
       (sail2_state_monad$returnS (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0000011w :  7 words$word)))))) (\ (w__2 :
       bool) . 
     if w__2 then
       let (imm :  12 words$word) = ((subrange_vec_dec v__9 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
       let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
       let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
       let (imm :  12 words$word) = ((subrange_vec_dec v__9 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
       let (mappingpatterns_44_0 :  2 words$word) = ((subrange_vec_dec v__9 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
       let (mappingpatterns_43_0 :  1 words$word) = ((subrange_vec_dec v__9 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)) in sail2_state_monad$bindS
       (size_bits_backwards mappingpatterns_44_0) (\ size1 .  sail2_state_monad$bindS
       (bool_bits_backwards mappingpatterns_43_0) (\ is_unsigned . 
       sail2_state_monad$returnS (LOAD (imm, rs1, rd, is_unsigned, size1, F, F))))
     else sail2_state_monad$bindS
       (sail2_state$and_boolS
         (let (mappingpatterns_45_0 :  2 words$word) =
           ((subrange_vec_dec v__9 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
         if ((size_bits_backwards_matches mappingpatterns_45_0)) then sail2_state_monad$bindS
           (size_bits_backwards mappingpatterns_45_0) (\ size1 . 
           sail2_state_monad$returnS ((((word_width_bytes size1)) <= (( 4 : int):ii))))
         else sail2_state_monad$returnS F)
         (sail2_state_monad$returnS ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)) = (0b0w :  1 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0100011w :  7 words$word))))))))) (\ (w__4 : bool) . 
       if w__4 then
         let (imm7 : 7 bits) = ((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
         let (rs2 :  5 words$word) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
         let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
         let (imm7 : 7 bits) = ((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
         let (imm5 : 5 bits) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
         let (mappingpatterns_45_0 :  2 words$word) =
           ((subrange_vec_dec v__9 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in sail2_state_monad$bindS
         (size_bits_backwards mappingpatterns_45_0) (\ size1 . 
         sail2_state_monad$returnS (STORE ((concat_vec imm7 imm5  :  12 words$word), rs2, rs1, size1, F, F)))
       else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0011011w :  7 words$word)))))))))) then
         let (imm :  12 words$word) = ((subrange_vec_dec v__9 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
         let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
         let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
         let (imm :  12 words$word) = ((subrange_vec_dec v__9 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
         sail2_state_monad$returnS (ADDIW (imm, rs1, rd))
       else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b001w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0011011w :  7 words$word))))))))))))) then
         let (shamt :  5 words$word) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
         let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
         let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
         sail2_state_monad$returnS (SHIFTW (shamt, rs1, rd, RISCV_SLLI))
       else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b101w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0011011w :  7 words$word))))))))))))) then
         let (shamt :  5 words$word) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
         let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
         let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
         sail2_state_monad$returnS (SHIFTW (shamt, rs1, rd, RISCV_SRLI))
       else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0100000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b101w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0011011w :  7 words$word))))))))))))) then
         let (shamt :  5 words$word) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
         let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
         let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
         sail2_state_monad$returnS (SHIFTW (shamt, rs1, rd, RISCV_SRAI))
       else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0111011w :  7 words$word))))))))))))) then
         let (rs2 :  5 words$word) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
         let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
         let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
         sail2_state_monad$returnS (RTYPEW (rs2, rs1, rd, RISCV_ADDW))
       else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0100000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0111011w :  7 words$word))))))))))))) then
         let (rs2 :  5 words$word) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
         let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
         let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
         sail2_state_monad$returnS (RTYPEW (rs2, rs1, rd, RISCV_SUBW))
       else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b001w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0111011w :  7 words$word))))))))))))) then
         let (rs2 :  5 words$word) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
         let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
         let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
         sail2_state_monad$returnS (RTYPEW (rs2, rs1, rd, RISCV_SLLW))
       else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b101w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0111011w :  7 words$word))))))))))))) then
         let (rs2 :  5 words$word) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
         let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
         let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
         sail2_state_monad$returnS (RTYPEW (rs2, rs1, rd, RISCV_SRLW))
       else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0100000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b101w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0111011w :  7 words$word))))))))))))) then
         let (rs2 :  5 words$word) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
         let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
         let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
         sail2_state_monad$returnS (RTYPEW (rs2, rs1, rd, RISCV_SRAW))
       else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b001w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0011011w :  7 words$word))))))))))))) then
         let (shamt :  5 words$word) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
         let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
         let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
         sail2_state_monad$returnS (SHIFTIWOP (shamt, rs1, rd, RISCV_SLLIW))
       else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b101w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0011011w :  7 words$word))))))))))))) then
         let (shamt :  5 words$word) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
         let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
         let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
         sail2_state_monad$returnS (SHIFTIWOP (shamt, rs1, rd, RISCV_SRLIW))
       else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0100000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b101w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0011011w :  7 words$word))))))))))))) then
         let (shamt :  5 words$word) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
         let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
         let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
         sail2_state_monad$returnS (SHIFTIWOP (shamt, rs1, rd, RISCV_SRAIW))
       else if ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 28 : int):ii)  :  4 words$word)) = (0x0w :  4 words$word)))) /\ (((((subrange_vec_dec v__9 (( 19 : int):ii) (( 0 : int):ii)  :  20 words$word)) = (0x0000Fw :  20 words$word))))))) then
         let (succ :  4 words$word) = ((subrange_vec_dec v__9 (( 23 : int):ii) (( 20 : int):ii)  :  4 words$word)) in
         let (pred :  4 words$word) = ((subrange_vec_dec v__9 (( 27 : int):ii) (( 24 : int):ii)  :  4 words$word)) in
         sail2_state_monad$returnS (FENCE (pred, succ))
       else if ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 28 : int):ii)  :  4 words$word)) = (0x8w :  4 words$word)))) /\ (((((subrange_vec_dec v__9 (( 19 : int):ii) (( 0 : int):ii)  :  20 words$word)) = (0x0000Fw :  20 words$word))))))) then
         let (succ :  4 words$word) = ((subrange_vec_dec v__9 (( 23 : int):ii) (( 20 : int):ii)  :  4 words$word)) in
         let (pred :  4 words$word) = ((subrange_vec_dec v__9 (( 27 : int):ii) (( 24 : int):ii)  :  4 words$word)) in
         sail2_state_monad$returnS (FENCE_TSO (pred, succ))
       else if (((v__9 = (0x0000100Fw :  32 words$word)))) then sail2_state_monad$returnS (FENCEI () )
       else if (((v__9 = (0x00000073w :  32 words$word)))) then sail2_state_monad$returnS (ECALL () )
       else if (((v__9 = (0x30200073w :  32 words$word)))) then sail2_state_monad$returnS (MRET () )
       else if (((v__9 = (0x10200073w :  32 words$word)))) then sail2_state_monad$returnS (SRET () )
       else if (((v__9 = (0x00100073w :  32 words$word)))) then sail2_state_monad$returnS (EBREAK () )
       else if (((v__9 = (0x10500073w :  32 words$word)))) then sail2_state_monad$returnS (WFI () )
       else if ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0001001w :  7 words$word)))) /\ (((((subrange_vec_dec v__9 (( 14 : int):ii) (( 0 : int):ii)  :  15 words$word)) = (0b000000001110011w :  15 words$word))))))) then
         let (rs2 :  5 words$word) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
         let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
         sail2_state_monad$returnS (SFENCE_VMA (rs1, rs2))
       else sail2_state_monad$bindS
         (sail2_state$and_boolS
           (let (mappingpatterns_48_0 :  2 words$word) =
             ((subrange_vec_dec v__9 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
           let (mappingpatterns_47_0 :  1 words$word) =
             ((subrange_vec_dec v__9 (( 25 : int):ii) (( 25 : int):ii)  :  1 words$word)) in
           let (mappingpatterns_46_0 :  1 words$word) =
             ((subrange_vec_dec v__9 (( 26 : int):ii) (( 26 : int):ii)  :  1 words$word)) in
           if ((size_bits_backwards_matches mappingpatterns_48_0)) then sail2_state_monad$bindS
             (size_bits_backwards mappingpatterns_48_0) (\ size1 . 
             if ((bool_bits_backwards_matches mappingpatterns_47_0)) then sail2_state_monad$bindS
               (bool_bits_backwards mappingpatterns_47_0) (\ rl . 
               if ((bool_bits_backwards_matches mappingpatterns_46_0)) then sail2_state_monad$bindS
                 (bool_bits_backwards mappingpatterns_46_0) (\ aq . 
                 sail2_state_monad$returnS ((amo_width_valid size1)))
               else sail2_state_monad$returnS F)
             else sail2_state_monad$returnS F)
           else sail2_state_monad$returnS F)
           (sail2_state_monad$returnS ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 27 : int):ii)  :  5 words$word)) = (0b00010w :  5 words$word)))) /\ ((((((((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) = (0b00000w :  5 words$word)))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)) = (0b0w :  1 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0101111w :  7 words$word))))))))))))))) (\ (w__8 : bool) . 
         if w__8 then
           let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
           let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
           let (mappingpatterns_48_0 :  2 words$word) =
             ((subrange_vec_dec v__9 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
           let (mappingpatterns_47_0 :  1 words$word) =
             ((subrange_vec_dec v__9 (( 25 : int):ii) (( 25 : int):ii)  :  1 words$word)) in
           let (mappingpatterns_46_0 :  1 words$word) =
             ((subrange_vec_dec v__9 (( 26 : int):ii) (( 26 : int):ii)  :  1 words$word)) in sail2_state_monad$bindS
           (size_bits_backwards mappingpatterns_48_0) (\ size1 .  sail2_state_monad$bindS
           (bool_bits_backwards mappingpatterns_47_0) (\ rl .  sail2_state_monad$bindS
           (bool_bits_backwards mappingpatterns_46_0) (\ aq . 
           sail2_state_monad$returnS (LOADRES (aq, rl, rs1, size1, rd)))))
         else sail2_state_monad$bindS
           (sail2_state$and_boolS
             (let (mappingpatterns_51_0 :  2 words$word) =
               ((subrange_vec_dec v__9 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
             let (mappingpatterns_50_0 :  1 words$word) =
               ((subrange_vec_dec v__9 (( 25 : int):ii) (( 25 : int):ii)  :  1 words$word)) in
             let (mappingpatterns_49_0 :  1 words$word) =
               ((subrange_vec_dec v__9 (( 26 : int):ii) (( 26 : int):ii)  :  1 words$word)) in
             if ((size_bits_backwards_matches mappingpatterns_51_0)) then sail2_state_monad$bindS
               (size_bits_backwards mappingpatterns_51_0) (\ size1 . 
               if ((bool_bits_backwards_matches mappingpatterns_50_0)) then sail2_state_monad$bindS
                 (bool_bits_backwards mappingpatterns_50_0) (\ rl . 
                 if ((bool_bits_backwards_matches mappingpatterns_49_0)) then sail2_state_monad$bindS
                   (bool_bits_backwards mappingpatterns_49_0) (\ aq . 
                   sail2_state_monad$returnS ((amo_width_valid size1)))
                 else sail2_state_monad$returnS F)
               else sail2_state_monad$returnS F)
             else sail2_state_monad$returnS F)
             (sail2_state_monad$returnS ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 27 : int):ii)  :  5 words$word)) = (0b00011w :  5 words$word)))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)) = (0b0w :  1 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0101111w :  7 words$word)))))))))))) (\ (w__12 : bool) . 
           if w__12 then
             let (rs2 :  5 words$word) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
             let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
             let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
             let (mappingpatterns_51_0 :  2 words$word) =
               ((subrange_vec_dec v__9 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
             let (mappingpatterns_50_0 :  1 words$word) =
               ((subrange_vec_dec v__9 (( 25 : int):ii) (( 25 : int):ii)  :  1 words$word)) in
             let (mappingpatterns_49_0 :  1 words$word) =
               ((subrange_vec_dec v__9 (( 26 : int):ii) (( 26 : int):ii)  :  1 words$word)) in sail2_state_monad$bindS
             (size_bits_backwards mappingpatterns_51_0) (\ size1 .  sail2_state_monad$bindS
             (bool_bits_backwards mappingpatterns_50_0) (\ rl .  sail2_state_monad$bindS
             (bool_bits_backwards mappingpatterns_49_0) (\ aq . 
             sail2_state_monad$returnS (STORECON (aq, rl, rs2, rs1, size1, rd)))))
           else sail2_state_monad$bindS
             (sail2_state$and_boolS
               (let (mappingpatterns_52_0 :  5 words$word) =
                 ((subrange_vec_dec v__9 (( 31 : int):ii) (( 27 : int):ii)  :  5 words$word)) in
               let (mappingpatterns_55_0 :  2 words$word) =
                 ((subrange_vec_dec v__9 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
               let (mappingpatterns_54_0 :  1 words$word) =
                 ((subrange_vec_dec v__9 (( 25 : int):ii) (( 25 : int):ii)  :  1 words$word)) in
               let (mappingpatterns_53_0 :  1 words$word) =
                 ((subrange_vec_dec v__9 (( 26 : int):ii) (( 26 : int):ii)  :  1 words$word)) in
               let (mappingpatterns_52_0 :  5 words$word) =
                 ((subrange_vec_dec v__9 (( 31 : int):ii) (( 27 : int):ii)  :  5 words$word)) in
               if ((size_bits_backwards_matches mappingpatterns_55_0)) then sail2_state_monad$bindS
                 (size_bits_backwards mappingpatterns_55_0) (\ size1 . 
                 if ((bool_bits_backwards_matches mappingpatterns_54_0)) then sail2_state_monad$bindS
                   (bool_bits_backwards mappingpatterns_54_0) (\ rl . 
                   if ((bool_bits_backwards_matches mappingpatterns_53_0)) then sail2_state_monad$bindS
                     (bool_bits_backwards mappingpatterns_53_0) (\ aq . 
                     if ((encdec_amoop_backwards_matches mappingpatterns_52_0)) then sail2_state_monad$bindS
                       (encdec_amoop_backwards mappingpatterns_52_0) (\ op . 
                       sail2_state_monad$returnS ((amo_width_valid size1)))
                     else sail2_state_monad$returnS F)
                   else sail2_state_monad$returnS F)
                 else sail2_state_monad$returnS F)
               else sail2_state_monad$returnS F)
               (sail2_state_monad$returnS ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)) = (0b0w :  1 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0101111w :  7 words$word))))))))) (\ (w__17 : bool) . 
             if w__17 then
               let (mappingpatterns_52_0 :  5 words$word) =
                 ((subrange_vec_dec v__9 (( 31 : int):ii) (( 27 : int):ii)  :  5 words$word)) in
               let (rs2 :  5 words$word) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
               let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
               let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
               let (mappingpatterns_55_0 :  2 words$word) =
                 ((subrange_vec_dec v__9 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
               let (mappingpatterns_54_0 :  1 words$word) =
                 ((subrange_vec_dec v__9 (( 25 : int):ii) (( 25 : int):ii)  :  1 words$word)) in
               let (mappingpatterns_53_0 :  1 words$word) =
                 ((subrange_vec_dec v__9 (( 26 : int):ii) (( 26 : int):ii)  :  1 words$word)) in
               let (mappingpatterns_52_0 :  5 words$word) =
                 ((subrange_vec_dec v__9 (( 31 : int):ii) (( 27 : int):ii)  :  5 words$word)) in sail2_state_monad$bindS
               (size_bits_backwards mappingpatterns_55_0) (\ size1 .  sail2_state_monad$bindS
               (bool_bits_backwards mappingpatterns_54_0) (\ rl .  sail2_state_monad$bindS
               (bool_bits_backwards mappingpatterns_53_0) (\ aq .  sail2_state_monad$bindS
               (encdec_amoop_backwards mappingpatterns_52_0) (\ op . 
               sail2_state_monad$returnS (AMO (op, aq, rl, rs2, rs1, size1, rd))))))
             else if ((((let (mappingpatterns_56_0 :  3 words$word) =
                           ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
                         encdec_mul_op_backwards_matches mappingpatterns_56_0) /\ ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000001w :  7 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0110011w :  7 words$word)))))))))) then
               let (rs2 :  5 words$word) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
               let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
               let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
               let (mappingpatterns_56_0 :  3 words$word) =
                 ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in sail2_state_monad$bindS
               (encdec_mul_op_backwards mappingpatterns_56_0) (\ varstup .  let (high, signed1, signed2) = varstup in
               sail2_state_monad$returnS (MUL (rs2, rs1, rd, high, signed1, signed2)))
             else if ((((let (mappingpatterns_57_0 :  1 words$word) =
                           ((subrange_vec_dec v__9 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
                         bool_not_bits_backwards_matches mappingpatterns_57_0) /\ ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000001w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 13 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0110011w :  7 words$word))))))))))))) then
               let (rs2 :  5 words$word) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
               let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
               let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
               let (mappingpatterns_57_0 :  1 words$word) =
                 ((subrange_vec_dec v__9 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in sail2_state_monad$bindS
               (bool_not_bits_backwards mappingpatterns_57_0) (\ s . 
               sail2_state_monad$returnS (DIV0 (rs2, rs1, rd, s)))
             else if ((((let (mappingpatterns_58_0 :  1 words$word) =
                           ((subrange_vec_dec v__9 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
                         bool_not_bits_backwards_matches mappingpatterns_58_0) /\ ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000001w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 13 : int):ii)  :  2 words$word)) = (0b11w :  2 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0110011w :  7 words$word))))))))))))) then
               let (rs2 :  5 words$word) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
               let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
               let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
               let (mappingpatterns_58_0 :  1 words$word) =
                 ((subrange_vec_dec v__9 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in sail2_state_monad$bindS
               (bool_not_bits_backwards mappingpatterns_58_0) (\ s . 
               sail2_state_monad$returnS (REM (rs2, rs1, rd, s)))
             else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000001w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0111011w :  7 words$word))))))))))))) then
               let (rs2 :  5 words$word) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
               let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
               let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
               sail2_state_monad$returnS (MULW (rs2, rs1, rd))
             else sail2_state_monad$bindS
               (sail2_state$and_boolS
                 (let (mappingpatterns_59_0 :  1 words$word) =
                   ((subrange_vec_dec v__9 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
                 if ((bool_not_bits_backwards_matches mappingpatterns_59_0)) then sail2_state_monad$bindS
                   (bool_not_bits_backwards mappingpatterns_59_0) (\ s . 
                   sail2_state_monad$returnS ((((( 32 : int):ii) = (( 64 : int):ii)))))
                 else sail2_state_monad$returnS F)
                 (sail2_state_monad$returnS ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000001w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 13 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0111011w :  7 words$word)))))))))))) (\ (w__19 : bool) . 
               if w__19 then
                 let (rs2 :  5 words$word) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
                 let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
                 let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
                 let (mappingpatterns_59_0 :  1 words$word) =
                   ((subrange_vec_dec v__9 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in sail2_state_monad$bindS
                 (bool_not_bits_backwards mappingpatterns_59_0) (\ s . 
                 sail2_state_monad$returnS (DIVW (rs2, rs1, rd, s)))
               else sail2_state_monad$bindS
                 (sail2_state$and_boolS
                   (let (mappingpatterns_60_0 :  1 words$word) =
                     ((subrange_vec_dec v__9 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
                   if ((bool_not_bits_backwards_matches mappingpatterns_60_0)) then sail2_state_monad$bindS
                     (bool_not_bits_backwards mappingpatterns_60_0) (\ s . 
                     sail2_state_monad$returnS ((((( 32 : int):ii) = (( 64 : int):ii)))))
                   else sail2_state_monad$returnS F)
                   (sail2_state_monad$returnS ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000001w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 13 : int):ii)  :  2 words$word)) = (0b11w :  2 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0111011w :  7 words$word)))))))))))) (\ (w__21 : bool) . 
                 if w__21 then
                   let (rs2 :  5 words$word) = ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
                   let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
                   let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
                   let (mappingpatterns_60_0 :  1 words$word) =
                     ((subrange_vec_dec v__9 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in sail2_state_monad$bindS
                   (bool_not_bits_backwards mappingpatterns_60_0) (\ s . 
                   sail2_state_monad$returnS (REMW (rs2, rs1, rd, s)))
                 else sail2_state_monad$bindS
                   (sail2_state$and_boolS
                     (let (mappingpatterns_62_0 :  2 words$word) =
                       ((subrange_vec_dec v__9 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
                     let (mappingpatterns_61_0 :  1 words$word) =
                       ((subrange_vec_dec v__9 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)) in
                     if ((encdec_csrop_backwards_matches mappingpatterns_62_0)) then sail2_state_monad$bindS
                       (encdec_csrop_backwards mappingpatterns_62_0) (\ op . 
                       sail2_state_monad$returnS ((bool_bits_backwards_matches mappingpatterns_61_0)))
                     else sail2_state_monad$returnS F)
                     (sail2_state_monad$returnS (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b1110011w :  7 words$word)))))) (\ (w__23 : bool) . 
                   if w__23 then
                     let (csr :  12 words$word) = ((subrange_vec_dec v__9 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
                     let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
                     let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
                     let (csr :  12 words$word) = ((subrange_vec_dec v__9 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
                     let (mappingpatterns_62_0 :  2 words$word) =
                       ((subrange_vec_dec v__9 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
                     let (mappingpatterns_61_0 :  1 words$word) =
                       ((subrange_vec_dec v__9 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)) in sail2_state_monad$bindS
                     (encdec_csrop_backwards mappingpatterns_62_0) (\ op .  sail2_state_monad$bindS
                     (bool_bits_backwards mappingpatterns_61_0) (\ is_imm . 
                     sail2_state_monad$returnS (CSR (csr, rs1, rd, is_imm, op))))
                   else if (((v__9 = (0x00200073w :  32 words$word)))) then sail2_state_monad$returnS (URET () )
                   else if ((((let (fm : 4 bits) =
                                 ((subrange_vec_dec v__9 (( 31 : int):ii) (( 28 : int):ii)  :  4 words$word)) in
                               let (rs : regidx) =
                                 ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
                               let (rd : regidx) =
                                 ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
                               let (fm : 4 bits) =
                                 ((subrange_vec_dec v__9 (( 31 : int):ii) (( 28 : int):ii)  :  4 words$word)) in
                               (((((((fm <> (0x0w :  4 words$word)))) /\ (((fm <> (0x8w :  4 words$word))))))) \/ ((((((rs <> (0b00000w :  5 words$word)))) \/ (((rd <> (0b00000w :  5 words$word))))))))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0001111w :  7 words$word)))))))))) then
                     let (fm : 4 bits) = ((subrange_vec_dec v__9 (( 31 : int):ii) (( 28 : int):ii)  :  4 words$word)) in
                     let (succ : 4 bits) = ((subrange_vec_dec v__9 (( 23 : int):ii) (( 20 : int):ii)  :  4 words$word)) in
                     let (rs : regidx) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
                     let (rd : regidx) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
                     let (pred : 4 bits) = ((subrange_vec_dec v__9 (( 27 : int):ii) (( 24 : int):ii)  :  4 words$word)) in
                     let (fm : 4 bits) = ((subrange_vec_dec v__9 (( 31 : int):ii) (( 28 : int):ii)  :  4 words$word)) in
                     sail2_state_monad$returnS (FENCE_RESERVED (fm, pred, succ, rs, rd))
                   else if ((((let (imm : 12 bits) =
                                 ((subrange_vec_dec v__9 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
                               let (rs : regidx) =
                                 ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
                               let (rd : regidx) =
                                 ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
                               let (imm : 12 bits) =
                                 ((subrange_vec_dec v__9 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
                               ((((imm <> (0x000w :  12 words$word)))) \/ ((((((rs <> zreg))) \/ (((rd <> zreg)))))))) /\ ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b001w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0001111w :  7 words$word)))))))))) then
                     let (imm : 12 bits) = ((subrange_vec_dec v__9 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
                     let (rs : regidx) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
                     let (rd : regidx) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
                     let (imm : 12 bits) = ((subrange_vec_dec v__9 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
                     sail2_state_monad$returnS (FENCEI_RESERVED (imm, rs, rd))
                   else sail2_state_monad$bindS
                     (sail2_state$and_boolS ((is_RV32F_or_RV64F () ))
                       (sail2_state_monad$returnS ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b010w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0000111w :  7 words$word))))))))) (\ (w__25 : bool) . 
                     if w__25 then
                       let (imm :  12 words$word) =
                         ((subrange_vec_dec v__9 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
                       let (rs1 :  5 words$word) = ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
                       let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
                       let (imm :  12 words$word) =
                         ((subrange_vec_dec v__9 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
                       sail2_state_monad$returnS (LOAD_FP (imm, rs1, rd, WORD))
                     else sail2_state_monad$bindS
                       (sail2_state$and_boolS ((is_RV32D_or_RV64D () ))
                         (sail2_state_monad$returnS ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b011w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0000111w :  7 words$word))))))))) (\ (w__27 : bool) . 
                       if w__27 then
                         let (imm :  12 words$word) =
                           ((subrange_vec_dec v__9 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
                         let (rs1 :  5 words$word) =
                           ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
                         let (rd :  5 words$word) = ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
                         let (imm :  12 words$word) =
                           ((subrange_vec_dec v__9 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
                         sail2_state_monad$returnS (LOAD_FP (imm, rs1, rd, DOUBLE))
                       else sail2_state_monad$bindS
                         (sail2_state$and_boolS ((is_RV32F_or_RV64F () ))
                           (sail2_state_monad$returnS ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b010w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0100111w :  7 words$word))))))))) (\ (w__29 : bool) . 
                         if w__29 then
                           let (imm7 : 7 bits) =
                             ((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
                           let (rs2 :  5 words$word) =
                             ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
                           let (rs1 :  5 words$word) =
                             ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
                           let (imm7 : 7 bits) =
                             ((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
                           let (imm5 : 5 bits) =
                             ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
                           sail2_state_monad$returnS (STORE_FP ((concat_vec imm7 imm5  :  12 words$word), rs2, rs1, WORD))
                         else sail2_state_monad$bindS
                           (sail2_state$and_boolS ((is_RV32D_or_RV64D () ))
                             (sail2_state_monad$returnS ((((((((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b011w :  3 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0100111w :  7 words$word))))))))) (\ (w__31 : bool) . 
                           if w__31 then
                             let (imm7 : 7 bits) =
                               ((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
                             let (rs2 :  5 words$word) =
                               ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
                             let (rs1 :  5 words$word) =
                               ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
                             let (imm7 : 7 bits) =
                               ((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) in
                             let (imm5 : 5 bits) =
                               ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
                             sail2_state_monad$returnS (STORE_FP ((concat_vec imm7 imm5  :  12 words$word),
                                               rs2,
                                               rs1,
                                               DOUBLE))
                           else sail2_state_monad$bindS
                             (sail2_state$and_boolS
                               (let (mappingpatterns_63_0 :  3 words$word) =
                                 ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
                               if ((encdec_rounding_mode_backwards_matches mappingpatterns_63_0))
                               then sail2_state_monad$bindS
                                 (encdec_rounding_mode_backwards mappingpatterns_63_0) (\ rm . 
                                 is_RV32F_or_RV64F () )
                               else sail2_state_monad$returnS F)
                               (sail2_state_monad$returnS ((((((((subrange_vec_dec v__9 (( 26 : int):ii) (( 25 : int):ii)  :  2 words$word)) = (0b00w :  2 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b1000011w :  7 words$word))))))))) (\ (w__34 : bool) . 
                             if w__34 then
                               let (rs3 :  5 words$word) =
                                 ((subrange_vec_dec v__9 (( 31 : int):ii) (( 27 : int):ii)  :  5 words$word)) in
                               let (rs3 :  5 words$word) =
                                 ((subrange_vec_dec v__9 (( 31 : int):ii) (( 27 : int):ii)  :  5 words$word)) in
                               let (rs2 :  5 words$word) =
                                 ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
                               let (rs1 :  5 words$word) =
                                 ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
                               let (rd :  5 words$word) =
                                 ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
                               let (mappingpatterns_63_0 :  3 words$word) =
                                 ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in sail2_state_monad$bindS
                               (encdec_rounding_mode_backwards mappingpatterns_63_0) (\ rm . 
                               sail2_state_monad$returnS (F_MADD_TYPE_S (rs3, rs2, rs1, rm, rd, FMADD_S)))
                             else sail2_state_monad$bindS
                               (sail2_state$and_boolS
                                 (let (mappingpatterns_64_0 :  3 words$word) =
                                   ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
                                 if ((encdec_rounding_mode_backwards_matches mappingpatterns_64_0))
                                 then sail2_state_monad$bindS
                                   (encdec_rounding_mode_backwards mappingpatterns_64_0) (\ rm . 
                                   is_RV32F_or_RV64F () )
                                 else sail2_state_monad$returnS F)
                                 (sail2_state_monad$returnS ((((((((subrange_vec_dec v__9 (( 26 : int):ii) (( 25 : int):ii)
                                                    :  2 words$word)) = (0b00w :  2 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b1000111w :  7 words$word))))))))) (\ (w__37 : bool) . 
                               if w__37 then
                                 let (rs3 :  5 words$word) =
                                   ((subrange_vec_dec v__9 (( 31 : int):ii) (( 27 : int):ii)  :  5 words$word)) in
                                 let (rs3 :  5 words$word) =
                                   ((subrange_vec_dec v__9 (( 31 : int):ii) (( 27 : int):ii)  :  5 words$word)) in
                                 let (rs2 :  5 words$word) =
                                   ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
                                 let (rs1 :  5 words$word) =
                                   ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
                                 let (rd :  5 words$word) =
                                   ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
                                 let (mappingpatterns_64_0 :  3 words$word) =
                                   ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in sail2_state_monad$bindS
                                 (encdec_rounding_mode_backwards mappingpatterns_64_0) (\ rm . 
                                 sail2_state_monad$returnS (F_MADD_TYPE_S (rs3, rs2, rs1, rm, rd, FMSUB_S)))
                               else sail2_state_monad$bindS
                                 (sail2_state$and_boolS
                                   (let (mappingpatterns_65_0 :  3 words$word) =
                                     ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
                                   if ((encdec_rounding_mode_backwards_matches mappingpatterns_65_0))
                                   then sail2_state_monad$bindS
                                     (encdec_rounding_mode_backwards mappingpatterns_65_0) (\ rm . 
                                     is_RV32F_or_RV64F () )
                                   else sail2_state_monad$returnS F)
                                   (sail2_state_monad$returnS ((((((((subrange_vec_dec v__9 (( 26 : int):ii) (( 25 : int):ii)
                                                      :  2 words$word)) = (0b00w :  2 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)
                                                      :  7 words$word)) = (0b1001011w :  7 words$word))))))))) (\ (w__40 :
                                   bool) . 
                                 if w__40 then
                                   let (rs3 :  5 words$word) =
                                     ((subrange_vec_dec v__9 (( 31 : int):ii) (( 27 : int):ii)  :  5 words$word)) in
                                   let (rs3 :  5 words$word) =
                                     ((subrange_vec_dec v__9 (( 31 : int):ii) (( 27 : int):ii)  :  5 words$word)) in
                                   let (rs2 :  5 words$word) =
                                     ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
                                   let (rs1 :  5 words$word) =
                                     ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
                                   let (rd :  5 words$word) =
                                     ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
                                   let (mappingpatterns_65_0 :  3 words$word) =
                                     ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in sail2_state_monad$bindS
                                   (encdec_rounding_mode_backwards mappingpatterns_65_0) (\ rm . 
                                   sail2_state_monad$returnS (F_MADD_TYPE_S (rs3, rs2, rs1, rm, rd, FNMSUB_S)))
                                 else sail2_state_monad$bindS
                                   (sail2_state$and_boolS
                                     (let (mappingpatterns_66_0 :  3 words$word) =
                                       ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
                                     if ((encdec_rounding_mode_backwards_matches
                                            mappingpatterns_66_0)) then sail2_state_monad$bindS
                                       (encdec_rounding_mode_backwards mappingpatterns_66_0) (\ rm . 
                                       is_RV32F_or_RV64F () )
                                     else sail2_state_monad$returnS F)
                                     (sail2_state_monad$returnS ((((((((subrange_vec_dec v__9 (( 26 : int):ii) (( 25 : int):ii)
                                                        :  2 words$word)) = (0b00w :  2 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)
                                                        :  7 words$word)) = (0b1001111w :  7 words$word))))))))) (\ (w__43 :
                                     bool) . 
                                   if w__43 then
                                     let (rs3 :  5 words$word) =
                                       ((subrange_vec_dec v__9 (( 31 : int):ii) (( 27 : int):ii)  :  5 words$word)) in
                                     let (rs3 :  5 words$word) =
                                       ((subrange_vec_dec v__9 (( 31 : int):ii) (( 27 : int):ii)  :  5 words$word)) in
                                     let (rs2 :  5 words$word) =
                                       ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
                                     let (rs1 :  5 words$word) =
                                       ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
                                     let (rd :  5 words$word) =
                                       ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
                                     let (mappingpatterns_66_0 :  3 words$word) =
                                       ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in sail2_state_monad$bindS
                                     (encdec_rounding_mode_backwards mappingpatterns_66_0) (\ rm . 
                                     sail2_state_monad$returnS (F_MADD_TYPE_S (rs3, rs2, rs1, rm, rd, FNMADD_S)))
                                   else sail2_state_monad$bindS
                                     (sail2_state$and_boolS
                                       (let (mappingpatterns_67_0 :  3 words$word) =
                                         ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
                                       if ((encdec_rounding_mode_backwards_matches
                                              mappingpatterns_67_0)) then sail2_state_monad$bindS
                                         (encdec_rounding_mode_backwards mappingpatterns_67_0) (\ rm . 
                                         is_RV32F_or_RV64F () )
                                       else sail2_state_monad$returnS F)
                                       (sail2_state_monad$returnS ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)
                                                          :  7 words$word)) = (0b0000000w :  7 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)
                                                          :  7 words$word)) = (0b1010011w :  7 words$word))))))))) (\ (w__46 :
                                       bool) . 
                                     if w__46 then
                                       let (rs2 :  5 words$word) =
                                         ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
                                       let (rs1 :  5 words$word) =
                                         ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
                                       let (rd :  5 words$word) =
                                         ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
                                       let (mappingpatterns_67_0 :  3 words$word) =
                                         ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in sail2_state_monad$bindS
                                       (encdec_rounding_mode_backwards mappingpatterns_67_0) (\ rm . 
                                       sail2_state_monad$returnS (F_BIN_RM_TYPE_S (rs2, rs1, rm, rd, FADD_S)))
                                     else sail2_state_monad$bindS
                                       (sail2_state$and_boolS
                                         (let (mappingpatterns_68_0 :  3 words$word) =
                                           ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
                                         if ((encdec_rounding_mode_backwards_matches
                                                mappingpatterns_68_0)) then sail2_state_monad$bindS
                                           (encdec_rounding_mode_backwards mappingpatterns_68_0) (\ rm . 
                                           is_RV32F_or_RV64F () )
                                         else sail2_state_monad$returnS F)
                                         (sail2_state_monad$returnS ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)
                                                            :  7 words$word)) = (0b0000100w :  7 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)
                                                            :  7 words$word)) = (0b1010011w :  7 words$word))))))))) (\ (w__49 :
                                         bool) . 
                                       if w__49 then
                                         let (rs2 :  5 words$word) =
                                           ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
                                         let (rs1 :  5 words$word) =
                                           ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
                                         let (rd :  5 words$word) =
                                           ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
                                         let (mappingpatterns_68_0 :  3 words$word) =
                                           ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in sail2_state_monad$bindS
                                         (encdec_rounding_mode_backwards mappingpatterns_68_0) (\ rm . 
                                         sail2_state_monad$returnS (F_BIN_RM_TYPE_S (rs2, rs1, rm, rd, FSUB_S)))
                                       else sail2_state_monad$bindS
                                         (sail2_state$and_boolS
                                           (let (mappingpatterns_69_0 :  3 words$word) =
                                             ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
                                           if ((encdec_rounding_mode_backwards_matches
                                                  mappingpatterns_69_0)) then sail2_state_monad$bindS
                                             (encdec_rounding_mode_backwards mappingpatterns_69_0) (\ rm . 
                                             is_RV32F_or_RV64F () )
                                           else sail2_state_monad$returnS F)
                                           (sail2_state_monad$returnS ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)
                                                              :  7 words$word)) = (0b0001000w :  7 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)
                                                              :  7 words$word)) = (0b1010011w :  7 words$word))))))))) (\ (w__52 :
                                           bool) . 
                                         if w__52 then
                                           let (rs2 :  5 words$word) =
                                             ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
                                           let (rs1 :  5 words$word) =
                                             ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
                                           let (rd :  5 words$word) =
                                             ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
                                           let (mappingpatterns_69_0 :  3 words$word) =
                                             ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in sail2_state_monad$bindS
                                           (encdec_rounding_mode_backwards mappingpatterns_69_0) (\ rm . 
                                           sail2_state_monad$returnS (F_BIN_RM_TYPE_S (rs2, rs1, rm, rd, FMUL_S)))
                                         else sail2_state_monad$bindS
                                           (sail2_state$and_boolS
                                             (let (mappingpatterns_70_0 :  3 words$word) =
                                               ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
                                             if ((encdec_rounding_mode_backwards_matches
                                                    mappingpatterns_70_0)) then sail2_state_monad$bindS
                                               (encdec_rounding_mode_backwards mappingpatterns_70_0) (\ rm . 
                                               is_RV32F_or_RV64F () )
                                             else sail2_state_monad$returnS F)
                                             (sail2_state_monad$returnS ((((((((subrange_vec_dec v__9 (( 31 : int):ii) (( 25 : int):ii)
                                                                :  7 words$word)) = (0b0001100w :  7 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)
                                                                :  7 words$word)) = (0b1010011w :  7 words$word))))))))) (\ (w__55 :
                                             bool) . 
                                           if w__55 then
                                             let (rs2 :  5 words$word) =
                                               ((subrange_vec_dec v__9 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) in
                                             let (rs1 :  5 words$word) =
                                               ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
                                             let (rd :  5 words$word) =
                                               ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
                                             let (mappingpatterns_70_0 :  3 words$word) =
                                               ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in sail2_state_monad$bindS
                                             (encdec_rounding_mode_backwards mappingpatterns_70_0) (\ rm . 
                                             sail2_state_monad$returnS (F_BIN_RM_TYPE_S (rs2, rs1, rm, rd, FDIV_S)))
                                           else sail2_state_monad$bindS
                                             (sail2_state$and_boolS
                                               (let (mappingpatterns_71_0 :  3 words$word) =
                                                 ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
                                               if ((encdec_rounding_mode_backwards_matches
                                                      mappingpatterns_71_0)) then sail2_state_monad$bindS
                                                 (encdec_rounding_mode_backwards mappingpatterns_71_0) (\ rm . 
                                                 is_RV32F_or_RV64F () )
                                               else sail2_state_monad$returnS F)
                                               (sail2_state_monad$returnS ((((((((subrange_vec_dec v__9 (( 31 : int):ii)
                                                                   (( 20 : int):ii)
                                                                  :  12 words$word)) = (0x580w :  12 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii) (( 0 : int):ii)
                                                                  :  7 words$word)) = (0b1010011w :  7 words$word))))))))) (\ (w__58 :
                                               bool) . 
                                             if w__58 then
                                               let (rs1 :  5 words$word) =
                                                 ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
                                               let (rd :  5 words$word) =
                                                 ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
                                               let (mappingpatterns_71_0 :  3 words$word) =
                                                 ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in sail2_state_monad$bindS
                                               (encdec_rounding_mode_backwards mappingpatterns_71_0) (\ rm . 
                                               sail2_state_monad$returnS (F_UN_RM_TYPE_S (rs1, rm, rd, FSQRT_S)))
                                             else sail2_state_monad$bindS
                                               (sail2_state$and_boolS
                                                 (let (mappingpatterns_72_0 :  3 words$word) =
                                                   ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)
                                                     :  3 words$word)) in
                                                 if ((encdec_rounding_mode_backwards_matches
                                                        mappingpatterns_72_0)) then sail2_state_monad$bindS
                                                   (encdec_rounding_mode_backwards
                                                     mappingpatterns_72_0) (\ rm . 
                                                   is_RV32F_or_RV64F () )
                                                 else sail2_state_monad$returnS F)
                                                 (sail2_state_monad$returnS ((((((((subrange_vec_dec v__9 (( 31 : int):ii)
                                                                     (( 20 : int):ii)
                                                                    :  12 words$word)) = (0xC00w :  12 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii)
                                                                     (( 0 : int):ii)
                                                                    :  7 words$word)) = (0b1010011w :  7 words$word))))))))) (\ (w__61 :
                                                 bool) . 
                                               if w__61 then
                                                 let (rs1 :  5 words$word) =
                                                   ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)
                                                     :  5 words$word)) in
                                                 let (rd :  5 words$word) =
                                                   ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)
                                                     :  5 words$word)) in
                                                 let (mappingpatterns_72_0 :  3 words$word) =
                                                   ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)
                                                     :  3 words$word)) in sail2_state_monad$bindS
                                                 (encdec_rounding_mode_backwards mappingpatterns_72_0) (\ rm . 
                                                 sail2_state_monad$returnS (F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_W_S)))
                                               else sail2_state_monad$bindS
                                                 (sail2_state$and_boolS
                                                   (let (mappingpatterns_73_0 :  3 words$word) =
                                                     ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)
                                                       :  3 words$word)) in
                                                   if ((encdec_rounding_mode_backwards_matches
                                                          mappingpatterns_73_0)) then sail2_state_monad$bindS
                                                     (encdec_rounding_mode_backwards
                                                       mappingpatterns_73_0) (\ rm . 
                                                     is_RV32F_or_RV64F () )
                                                   else sail2_state_monad$returnS F)
                                                   (sail2_state_monad$returnS ((((((((subrange_vec_dec v__9 (( 31 : int):ii)
                                                                       (( 20 : int):ii)
                                                                      :  12 words$word)) = (0xC01w :  12 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii)
                                                                       (( 0 : int):ii)
                                                                      :  7 words$word)) = (0b1010011w :  7 words$word))))))))) (\ (w__64 :
                                                   bool) . 
                                                 if w__64 then
                                                   let (rs1 :  5 words$word) =
                                                     ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)
                                                       :  5 words$word)) in
                                                   let (rd :  5 words$word) =
                                                     ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)
                                                       :  5 words$word)) in
                                                   let (mappingpatterns_73_0 :  3 words$word) =
                                                     ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)
                                                       :  3 words$word)) in sail2_state_monad$bindS
                                                   (encdec_rounding_mode_backwards
                                                     mappingpatterns_73_0) (\ rm . 
                                                   sail2_state_monad$returnS (F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_WU_S)))
                                                 else sail2_state_monad$bindS
                                                   (sail2_state$and_boolS
                                                     (let (mappingpatterns_74_0 :  3 words$word) =
                                                       ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)
                                                         :  3 words$word)) in
                                                     if ((encdec_rounding_mode_backwards_matches
                                                            mappingpatterns_74_0)) then sail2_state_monad$bindS
                                                       (encdec_rounding_mode_backwards
                                                         mappingpatterns_74_0) (\ rm . 
                                                       is_RV32F_or_RV64F () )
                                                     else sail2_state_monad$returnS F)
                                                     (sail2_state_monad$returnS ((((((((subrange_vec_dec v__9 (( 31 : int):ii)
                                                                         (( 20 : int):ii)
                                                                        :  12 words$word)) = (0xD00w :  12 words$word)))) /\ (((((subrange_vec_dec v__9 (( 6 : int):ii)
                                                                         (( 0 : int):ii)
                                                                        :  7 words$word)) = (0b1010011w :  7 words$word))))))))) (\ (w__67 :
                                                     bool) . 
                                                   if w__67 then
                                                     let (rs1 :  5 words$word) =
                                                       ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)
                                                         :  5 words$word)) in
                                                     let (rd :  5 words$word) =
                                                       ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)
                                                         :  5 words$word)) in
                                                     let (mappingpatterns_74_0 :  3 words$word) =
                                                       ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)
                                                         :  3 words$word)) in sail2_state_monad$bindS
                                                     (encdec_rounding_mode_backwards
                                                       mappingpatterns_74_0) (\ rm . 
                                                     sail2_state_monad$returnS (F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_S_W)))
                                                   else sail2_state_monad$bindS
                                                     (sail2_state$and_boolS
                                                       (let (mappingpatterns_75_0 :  3 words$word) =
                                                         ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)
                                                           :  3 words$word)) in
                                                       if ((encdec_rounding_mode_backwards_matches
                                                              mappingpatterns_75_0)) then sail2_state_monad$bindS
                                                         (encdec_rounding_mode_backwards
                                                           mappingpatterns_75_0) (\ rm . 
                                                         is_RV32F_or_RV64F () )
                                                       else sail2_state_monad$returnS F)
                                                       (sail2_state_monad$returnS ((((((((subrange_vec_dec v__9
                                                                           (( 31 : int):ii) (( 20 : int):ii)
                                                                          :  12 words$word)) = (0xD01w :  12 words$word)))) /\ (((((subrange_vec_dec v__9
                                                                           (( 6 : int):ii) (( 0 : int):ii)
                                                                          :  7 words$word)) = (0b1010011w :  7 words$word))))))))) (\ (w__70 :
                                                       bool) . 
                                                     if w__70 then
                                                       let (rs1 :  5 words$word) =
                                                         ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)
                                                           :  5 words$word)) in
                                                       let (rd :  5 words$word) =
                                                         ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)
                                                           :  5 words$word)) in
                                                       let (mappingpatterns_75_0 :  3 words$word) =
                                                         ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)
                                                           :  3 words$word)) in sail2_state_monad$bindS
                                                       (encdec_rounding_mode_backwards
                                                         mappingpatterns_75_0) (\ rm . 
                                                       sail2_state_monad$returnS (F_UN_RM_TYPE_S (rs1,
                                                                               rm,
                                                                               rd,
                                                                               FCVT_S_WU)))
                                                     else sail2_state_monad$bindS
                                                       (sail2_state$and_boolS
                                                         (let (mappingpatterns_76_0 :  3 words$word) =
                                                           ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)
                                                             :  3 words$word)) in
                                                         if ((encdec_rounding_mode_backwards_matches
                                                                mappingpatterns_76_0)) then sail2_state_monad$bindS
                                                           (encdec_rounding_mode_backwards
                                                             mappingpatterns_76_0) (\ rm . 
                                                           is_RV64F () )
                                                         else sail2_state_monad$returnS F)
                                                         (sail2_state_monad$returnS ((((((((subrange_vec_dec v__9
                                                                             (( 31 : int):ii) (( 20 : int):ii)
                                                                            :  12 words$word)) = (0xC02w :  12 words$word)))) /\ (((((subrange_vec_dec v__9
                                                                             (( 6 : int):ii) (( 0 : int):ii)
                                                                            :  7 words$word)) = (0b1010011w :  7 words$word))))))))) (\ (w__73 :
                                                         bool) . 
                                                       if w__73 then
                                                         let (rs1 :  5 words$word) =
                                                           ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)
                                                             :  5 words$word)) in
                                                         let (rd :  5 words$word) =
                                                           ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)
                                                             :  5 words$word)) in
                                                         let (mappingpatterns_76_0 :  3 words$word) =
                                                           ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)
                                                             :  3 words$word)) in sail2_state_monad$bindS
                                                         (encdec_rounding_mode_backwards
                                                           mappingpatterns_76_0) (\ rm . 
                                                         sail2_state_monad$returnS (F_UN_RM_TYPE_S (rs1,
                                                                                 rm,
                                                                                 rd,
                                                                                 FCVT_L_S)))
                                                       else sail2_state_monad$bindS
                                                         (sail2_state$and_boolS
                                                           (let (mappingpatterns_77_0 :  3 words$word) =
                                                             ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)
                                                               :  3 words$word)) in
                                                           if ((encdec_rounding_mode_backwards_matches
                                                                  mappingpatterns_77_0)) then sail2_state_monad$bindS
                                                             (encdec_rounding_mode_backwards
                                                               mappingpatterns_77_0) (\ rm . 
                                                             is_RV64F () )
                                                           else sail2_state_monad$returnS F)
                                                           (sail2_state_monad$returnS ((((((((subrange_vec_dec v__9
                                                                               (( 31 : int):ii) (( 20 : int):ii)
                                                                              :  12 words$word)) = (0xC03w :  12 words$word)))) /\ (((((subrange_vec_dec v__9
                                                                               (( 6 : int):ii) (( 0 : int):ii)
                                                                              :  7 words$word)) = (0b1010011w :  7 words$word))))))))) (\ (w__76 :
                                                           bool) . 
                                                         if w__76 then
                                                           let (rs1 :  5 words$word) =
                                                             ((subrange_vec_dec v__9 (( 19 : int):ii) (( 15 : int):ii)
                                                               :  5 words$word)) in
                                                           let (rd :  5 words$word) =
                                                             ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)
                                                               :  5 words$word)) in
                                                           let (mappingpatterns_77_0 :  3 words$word) =
                                                             ((subrange_vec_dec v__9 (( 14 : int):ii) (( 12 : int):ii)
                                                               :  3 words$word)) in sail2_state_monad$bindS
                                                           (encdec_rounding_mode_backwards
                                                             mappingpatterns_77_0) (\ rm . 
                                                           sail2_state_monad$returnS (F_UN_RM_TYPE_S (rs1,
                                                                                   rm,
                                                                                   rd,
                                                                                   FCVT_LU_S)))
                                                         else sail2_state_monad$bindS
                                                           (sail2_state$and_boolS
                                                             (let (mappingpatterns_78_0 :  3 words$word) =
                                                               ((subrange_vec_dec v__9 (( 14 : int):ii)
                                                                  (( 12 : int):ii)
                                                                 :  3 words$word)) in
                                                             if ((encdec_rounding_mode_backwards_matches
                                                                    mappingpatterns_78_0)) then sail2_state_monad$bindS
                                                               (encdec_rounding_mode_backwards
                                                                 mappingpatterns_78_0) (\ rm . 
                                                               is_RV64F () )
                                                             else sail2_state_monad$returnS F)
                                                             (sail2_state_monad$returnS ((((((((subrange_vec_dec v__9
                                                                                 (( 31 : int):ii) (( 20 : int):ii)
                                                                                :  12 words$word)) = (0xD02w :  12 words$word)))) /\ (((((subrange_vec_dec v__9
                                                                                 (( 6 : int):ii) (( 0 : int):ii)
                                                                                :  7 words$word)) = (0b1010011w :  7 words$word))))))))) (\ (w__79 :
                                                             bool) . 
                                                           if w__79 then
                                                             let (rs1 :  5 words$word) =
                                                               ((subrange_vec_dec v__9 (( 19 : int):ii)
                                                                  (( 15 : int):ii)
                                                                 :  5 words$word)) in
                                                             let (rd :  5 words$word) =
                                                               ((subrange_vec_dec v__9 (( 11 : int):ii) (( 7 : int):ii)
                                                                 :  5 words$word)) in
                                                             let (mappingpatterns_78_0 :  3 words$word) =
                                                               ((subrange_vec_dec v__9 (( 14 : int):ii)
                                                                  (( 12 : int):ii)
                                                                 :  3 words$word)) in sail2_state_monad$bindS
                                                             (encdec_rounding_mode_backwards
                                                               mappingpatterns_78_0) (\ rm . 
                                                             sail2_state_monad$returnS (F_UN_RM_TYPE_S (rs1,
                                                                                     rm,
                                                                                     rd,
                                                                                     FCVT_S_L)))
                                                           else sail2_state_monad$bindS
                                                             (sail2_state$and_boolS
                                                               (let (mappingpatterns_79_0 :
                                                                  3 words$word) =
                                                                 ((subrange_vec_dec v__9 (( 14 : int):ii)
                                                                    (( 12 : int):ii)
                                                                   :  3 words$word)) in
                                                               if ((encdec_rounding_mode_backwards_matches
                                                                      mappingpatterns_79_0)) then sail2_state_monad$bindS
                                                                 (encdec_rounding_mode_backwards
                                                                   mappingpatterns_79_0) (\ rm . 
                                                                 is_RV64F () )
                                                               else sail2_state_monad$returnS F)
                                                               (sail2_state_monad$returnS ((((((((subrange_vec_dec
                                                                                   v__9 (( 31 : int):ii)
                                                                                   (( 20 : int):ii)
                                                                                  :  12 words$word)) = (0xD03w :  12 words$word)))) /\ (((((subrange_vec_dec
                                                                                   v__9 (( 6 : int):ii)
                                                                                   (( 0 : int):ii)
                                                                                  :  7 words$word)) = (0b1010011w :  7 words$word))))))))) (\ (w__82 :
                                                               bool) . 
                                                             if w__82 then
                                                               let (rs1 :  5 words$word) =
                                                                 ((subrange_vec_dec v__9 (( 19 : int):ii)
                                                                    (( 15 : int):ii)
                                                                   :  5 words$word)) in
                                                               let (rd :  5 words$word) =
                                                                 ((subrange_vec_dec v__9 (( 11 : int):ii)
                                                                    (( 7 : int):ii)
                                                                   :  5 words$word)) in
                                                               let (mappingpatterns_79_0 :  3 words$word) =
                                                                 ((subrange_vec_dec v__9 (( 14 : int):ii)
                                                                    (( 12 : int):ii)
                                                                   :  3 words$word)) in sail2_state_monad$bindS
                                                               (encdec_rounding_mode_backwards
                                                                 mappingpatterns_79_0) (\ rm . 
                                                               sail2_state_monad$returnS (F_UN_RM_TYPE_S (rs1,
                                                                                       rm,
                                                                                       rd,
                                                                                       FCVT_S_LU)))
                                                             else sail2_state_monad$bindS
                                                               (sail2_state$and_boolS ((is_RV32F_or_RV64F () ))
                                                                 (sail2_state_monad$returnS ((((((((subrange_vec_dec
                                                                                     v__9 (( 31 : int):ii)
                                                                                     (( 25 : int):ii)
                                                                                    :  7 words$word)) = (0b0010000w :  7 words$word)))) /\ ((((((((subrange_vec_dec
                                                                                         v__9
                                                                                         (( 14 : int):ii)
                                                                                         (( 12 : int):ii)
                                                                                        :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec
                                                                                         v__9 (( 6 : int):ii)
                                                                                         (( 0 : int):ii)
                                                                                        :  7 words$word)) = (0b1010011w :  7 words$word)))))))))))) (\ (w__84 :
                                                                 bool) . 
                                                               if w__84 then
                                                                 let (rs2 :  5 words$word) =
                                                                   ((subrange_vec_dec v__9 (( 24 : int):ii)
                                                                      (( 20 : int):ii)
                                                                     :  5 words$word)) in
                                                                 let (rs1 :  5 words$word) =
                                                                   ((subrange_vec_dec v__9 (( 19 : int):ii)
                                                                      (( 15 : int):ii)
                                                                     :  5 words$word)) in
                                                                 let (rd :  5 words$word) =
                                                                   ((subrange_vec_dec v__9 (( 11 : int):ii)
                                                                      (( 7 : int):ii)
                                                                     :  5 words$word)) in
                                                                 sail2_state_monad$returnS (F_BIN_TYPE_S (rs2,
                                                                                       rs1,
                                                                                       rd,
                                                                                       FSGNJ_S))
                                                               else sail2_state_monad$bindS
                                                                 (sail2_state$and_boolS ((is_RV32F_or_RV64F () ))
                                                                   (sail2_state_monad$returnS ((((((((subrange_vec_dec
                                                                                       v__9 (( 31 : int):ii)
                                                                                       (( 25 : int):ii)
                                                                                      :  7 words$word)) = (0b0010000w :  7 words$word)))) /\ ((((((((subrange_vec_dec
                                                                                           v__9
                                                                                           (( 14 : int):ii)
                                                                                           (( 12 : int):ii)
                                                                                          :  3 words$word)) = (0b001w :  3 words$word)))) /\ (((((subrange_vec_dec
                                                                                           v__9
                                                                                           (( 6 : int):ii)
                                                                                           (( 0 : int):ii)
                                                                                          :  7 words$word)) = (0b1010011w :  7 words$word)))))))))))) (\ (w__86 :
                                                                   bool) . 
                                                                 if w__86 then
                                                                   let (rs2 :  5 words$word) =
                                                                     ((subrange_vec_dec v__9 (( 24 : int):ii)
                                                                        (( 20 : int):ii)
                                                                       :  5 words$word)) in
                                                                   let (rs1 :  5 words$word) =
                                                                     ((subrange_vec_dec v__9 (( 19 : int):ii)
                                                                        (( 15 : int):ii)
                                                                       :  5 words$word)) in
                                                                   let (rd :  5 words$word) =
                                                                     ((subrange_vec_dec v__9 (( 11 : int):ii)
                                                                        (( 7 : int):ii)
                                                                       :  5 words$word)) in
                                                                   sail2_state_monad$returnS (F_BIN_TYPE_S (rs2,
                                                                                         rs1,
                                                                                         rd,
                                                                                         FSGNJN_S))
                                                                 else sail2_state_monad$bindS
                                                                   (sail2_state$and_boolS
                                                                     ((is_RV32F_or_RV64F () ))
                                                                     (sail2_state_monad$returnS ((((((((subrange_vec_dec
                                                                                         v__9
                                                                                         (( 31 : int):ii)
                                                                                         (( 25 : int):ii)
                                                                                        :  7 words$word)) = (0b0010000w :  7 words$word)))) /\ ((((((((subrange_vec_dec
                                                                                             v__9
                                                                                             (( 14 : int):ii)
                                                                                             (( 12 : int):ii)
                                                                                            :  3 words$word)) = (0b010w :  3 words$word)))) /\ (((((subrange_vec_dec
                                                                                             v__9
                                                                                             (( 6 : int):ii)
                                                                                             (( 0 : int):ii)
                                                                                            :  7 words$word)) = (0b1010011w :  7 words$word)))))))))))) (\ (w__88 :
                                                                     bool) . 
                                                                   if w__88 then
                                                                     let (rs2 :  5 words$word) =
                                                                       ((subrange_vec_dec v__9
                                                                          (( 24 : int):ii) (( 20 : int):ii)
                                                                         :  5 words$word)) in
                                                                     let (rs1 :  5 words$word) =
                                                                       ((subrange_vec_dec v__9
                                                                          (( 19 : int):ii) (( 15 : int):ii)
                                                                         :  5 words$word)) in
                                                                     let (rd :  5 words$word) =
                                                                       ((subrange_vec_dec v__9
                                                                          (( 11 : int):ii) (( 7 : int):ii)
                                                                         :  5 words$word)) in
                                                                     sail2_state_monad$returnS (F_BIN_TYPE_S (rs2,
                                                                                           rs1,
                                                                                           rd,
                                                                                           FSGNJX_S))
                                                                   else sail2_state_monad$bindS
                                                                     (sail2_state$and_boolS
                                                                       ((is_RV32F_or_RV64F () ))
                                                                       (sail2_state_monad$returnS ((((((((subrange_vec_dec
                                                                                           v__9
                                                                                           (( 31 : int):ii)
                                                                                           (( 25 : int):ii)
                                                                                          :  7 words$word)) = (0b0010100w :  7 words$word)))) /\ ((((((((subrange_vec_dec
                                                                                               v__9
                                                                                               (( 14 : int):ii)
                                                                                               (( 12 : int):ii)
                                                                                              :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec
                                                                                               v__9
                                                                                               (( 6 : int):ii)
                                                                                               (( 0 : int):ii)
                                                                                              :  7 words$word)) = (0b1010011w :  7 words$word)))))))))))) (\ (w__90 :
                                                                       bool) . 
                                                                     if w__90 then
                                                                       let (rs2 :  5 words$word) =
                                                                         ((subrange_vec_dec v__9
                                                                            (( 24 : int):ii) (( 20 : int):ii)
                                                                           :  5 words$word)) in
                                                                       let (rs1 :  5 words$word) =
                                                                         ((subrange_vec_dec v__9
                                                                            (( 19 : int):ii) (( 15 : int):ii)
                                                                           :  5 words$word)) in
                                                                       let (rd :  5 words$word) =
                                                                         ((subrange_vec_dec v__9
                                                                            (( 11 : int):ii) (( 7 : int):ii)
                                                                           :  5 words$word)) in
                                                                       sail2_state_monad$returnS (F_BIN_TYPE_S (rs2,
                                                                                             rs1,
                                                                                             rd,
                                                                                             FMIN_S))
                                                                     else sail2_state_monad$bindS
                                                                       (sail2_state$and_boolS
                                                                         ((is_RV32F_or_RV64F () ))
                                                                         (sail2_state_monad$returnS ((((((((subrange_vec_dec
                                                                                             v__9
                                                                                             (( 31 : int):ii)
                                                                                             (( 25 : int):ii)
                                                                                            :  7 words$word)) = (0b0010100w :  7 words$word)))) /\ ((((((((subrange_vec_dec
                                                                                                 v__9
                                                                                                 (( 14 : int):ii)
                                                                                                 (( 12 : int):ii)
                                                                                                :  3 words$word)) = (0b001w :  3 words$word)))) /\ (((((subrange_vec_dec
                                                                                                 v__9
                                                                                                 (( 6 : int):ii)
                                                                                                 (( 0 : int):ii)
                                                                                                :  7 words$word)) = (0b1010011w :  7 words$word)))))))))))) (\ (w__92 :
                                                                         bool) . 
                                                                       if w__92 then
                                                                         let (rs2 :  5 words$word) =
                                                                           ((subrange_vec_dec v__9
                                                                              (( 24 : int):ii) (( 20 : int):ii)
                                                                             :  5 words$word)) in
                                                                         let (rs1 :  5 words$word) =
                                                                           ((subrange_vec_dec v__9
                                                                              (( 19 : int):ii) (( 15 : int):ii)
                                                                             :  5 words$word)) in
                                                                         let (rd :  5 words$word) =
                                                                           ((subrange_vec_dec v__9
                                                                              (( 11 : int):ii) (( 7 : int):ii)
                                                                             :  5 words$word)) in
                                                                         sail2_state_monad$returnS (F_BIN_TYPE_S (rs2,
                                                                                               rs1,
                                                                                               rd,
                                                                                               FMAX_S))
                                                                       else sail2_state_monad$bindS
                                                                         (sail2_state$and_boolS
                                                                           ((is_RV32F_or_RV64F () ))
                                                                           (sail2_state_monad$returnS ((((((((subrange_vec_dec
                                                                                               v__9
                                                                                               (( 31 : int):ii)
                                                                                               (( 25 : int):ii)
                                                                                              :  7 words$word)) = (0b1010000w :  7 words$word)))) /\ ((((((((subrange_vec_dec
                                                                                                   v__9
                                                                                                   (( 14 : int):ii)
                                                                                                   (( 12 : int):ii)
                                                                                                  :  3 words$word)) = (0b010w :  3 words$word)))) /\ (((((subrange_vec_dec
                                                                                                   v__9
                                                                                                   (( 6 : int):ii)
                                                                                                   (( 0 : int):ii)
                                                                                                  :  7 words$word)) = (0b1010011w :  7 words$word)))))))))))) (\ (w__94 :
                                                                           bool) . 
                                                                         if w__94 then
                                                                           let (rs2 :  5 words$word) =
                                                                             ((subrange_vec_dec v__9
                                                                                (( 24 : int):ii) (( 20 : int):ii)
                                                                               :  5 words$word)) in
                                                                           let (rs1 :  5 words$word) =
                                                                             ((subrange_vec_dec v__9
                                                                                (( 19 : int):ii) (( 15 : int):ii)
                                                                               :  5 words$word)) in
                                                                           let (rd :  5 words$word) =
                                                                             ((subrange_vec_dec v__9
                                                                                (( 11 : int):ii) (( 7 : int):ii)
                                                                               :  5 words$word)) in
                                                                           sail2_state_monad$returnS (F_BIN_TYPE_S (rs2,
                                                                                                 rs1,
                                                                                                 rd,
                                                                                                 FEQ_S))
                                                                         else sail2_state_monad$bindS
                                                                           (sail2_state$and_boolS
                                                                             ((is_RV32F_or_RV64F () ))
                                                                             (sail2_state_monad$returnS ((((((((subrange_vec_dec
                                                                                                 v__9
                                                                                                 (( 31 : int):ii)
                                                                                                 (( 25 : int):ii)
                                                                                                :  7 words$word)) = (0b1010000w :  7 words$word)))) /\ ((((((((subrange_vec_dec
                                                                                                     v__9
                                                                                                     (( 14 : int):ii)
                                                                                                     (( 12 : int):ii)
                                                                                                    :  3 words$word)) = (0b001w :  3 words$word)))) /\ (((((subrange_vec_dec
                                                                                                     v__9
                                                                                                     (( 6 : int):ii)
                                                                                                     (( 0 : int):ii)
                                                                                                    :  7 words$word)) = (0b1010011w :  7 words$word)))))))))))) (\ (w__96 :
                                                                             bool) . 
                                                                           if w__96 then
                                                                             let (rs2 :  5 words$word) =
                                                                               ((subrange_vec_dec
                                                                                  v__9 (( 24 : int):ii)
                                                                                  (( 20 : int):ii)
                                                                                 :  5 words$word)) in
                                                                             let (rs1 :  5 words$word) =
                                                                               ((subrange_vec_dec
                                                                                  v__9 (( 19 : int):ii)
                                                                                  (( 15 : int):ii)
                                                                                 :  5 words$word)) in
                                                                             let (rd :  5 words$word) =
                                                                               ((subrange_vec_dec
                                                                                  v__9 (( 11 : int):ii)
                                                                                  (( 7 : int):ii)
                                                                                 :  5 words$word)) in
                                                                             sail2_state_monad$returnS (F_BIN_TYPE_S (rs2,
                                                                                                   rs1,
                                                                                                   rd,
                                                                                                   FLT_S))
                                                                           else sail2_state_monad$bindS
                                                                             (sail2_state$and_boolS
                                                                               ((is_RV32F_or_RV64F
                                                                                   () ))
                                                                               (sail2_state_monad$returnS ((((((((subrange_vec_dec
                                                                                                   v__9
                                                                                                   (( 31 : int):ii)
                                                                                                   (( 25 : int):ii)
                                                                                                  :  7 words$word)) = (0b1010000w :  7 words$word)))) /\ ((((((((subrange_vec_dec
                                                                                                       v__9
                                                                                                       (( 14 : int):ii)
                                                                                                       (( 12 : int):ii)
                                                                                                      :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec
                                                                                                       v__9
                                                                                                       (( 6 : int):ii)
                                                                                                       (( 0 : int):ii)
                                                                                                      :  7 words$word)) = (0b1010011w :  7 words$word)))))))))))) (\ (w__98 :
                                                                               bool) . 
                                                                             if w__98 then
                                                                               let (rs2 :  5 words$word) =
                                                                                 ((subrange_vec_dec
                                                                                    v__9 (( 24 : int):ii)
                                                                                    (( 20 : int):ii)
                                                                                   :  5 words$word)) in
                                                                               let (rs1 :  5 words$word) =
                                                                                 ((subrange_vec_dec
                                                                                    v__9 (( 19 : int):ii)
                                                                                    (( 15 : int):ii)
                                                                                   :  5 words$word)) in
                                                                               let (rd :  5 words$word) =
                                                                                 ((subrange_vec_dec
                                                                                    v__9 (( 11 : int):ii)
                                                                                    (( 7 : int):ii)
                                                                                   :  5 words$word)) in
                                                                               sail2_state_monad$returnS (F_BIN_TYPE_S (rs2,
                                                                                                     rs1,
                                                                                                     rd,
                                                                                                     FLE_S))
                                                                             else sail2_state_monad$bindS
                                                                               (sail2_state$and_boolS
                                                                                 ((haveFExt () ))
                                                                                 (sail2_state_monad$returnS ((((((((subrange_vec_dec
                                                                                                     v__9
                                                                                                     (( 31 : int):ii)
                                                                                                     (( 20 : int):ii)
                                                                                                    :  12 words$word)) = (0xE00w :  12 words$word)))) /\ ((((((((subrange_vec_dec
                                                                                                         v__9
                                                                                                         (( 14 : int):ii)
                                                                                                         (( 12 : int):ii)
                                                                                                        :  3 words$word)) = (0b001w :  3 words$word)))) /\ (((((subrange_vec_dec
                                                                                                         v__9
                                                                                                         (( 6 : int):ii)
                                                                                                         (( 0 : int):ii)
                                                                                                        :  7 words$word)) = (0b1010011w :  7 words$word)))))))))))) (\ (w__100 :
                                                                                 bool) . 
                                                                               if w__100 then
                                                                                 let (rs1 :
                                                                                    5 words$word) =
                                                                                   ((subrange_vec_dec
                                                                                      v__9 (( 19 : int):ii)
                                                                                      (( 15 : int):ii)
                                                                                     :  5 words$word)) in
                                                                                 let (rd :  5 words$word) =
                                                                                   ((subrange_vec_dec
                                                                                      v__9 (( 11 : int):ii)
                                                                                      (( 7 : int):ii)
                                                                                     :  5 words$word)) in
                                                                                 sail2_state_monad$returnS (F_UN_TYPE_S (rs1,
                                                                                                      rd,
                                                                                                      FCLASS_S))
                                                                               else sail2_state_monad$bindS
                                                                                 (sail2_state$and_boolS
                                                                                   ((haveFExt () ))
                                                                                   (sail2_state_monad$returnS ((((((((subrange_vec_dec
                                                                                                       v__9
                                                                                                       (( 31 : int):ii)
                                                                                                       (( 20 : int):ii)
                                                                                                      :  12 words$word)) = (0xE00w :  12 words$word)))) /\ ((((((((subrange_vec_dec
                                                                                                           v__9
                                                                                                           (( 14 : int):ii)
                                                                                                           (( 12 : int):ii)
                                                                                                          :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec
                                                                                                           v__9
                                                                                                           (( 6 : int):ii)
                                                                                                           (( 0 : int):ii)
                                                                                                          :  7 words$word)) = (0b1010011w :  7 words$word)))))))))))) (\ (w__102 :
                                                                                   bool) . 
                                                                                 if w__102 then
                                                                                   let (rs1 :
                                                                                      5 words$word) =
                                                                                     ((subrange_vec_dec
                                                                                        v__9 (( 19 : int):ii)
                                                                                        (( 15 : int):ii)
                                                                                       :  5 words$word)) in
                                                                                   let (rd :
                                                                                      5 words$word) =
                                                                                     ((subrange_vec_dec
                                                                                        v__9 (( 11 : int):ii)
                                                                                        (( 7 : int):ii)
                                                                                       :  5 words$word)) in
                                                                                   sail2_state_monad$returnS (F_UN_TYPE_S (rs1,
                                                                                                        rd,
                                                                                                        FMV_X_W))
                                                                                 else sail2_state_monad$bindS
                                                                                   (sail2_state$and_boolS
                                                                                     ((haveFExt () ))
                                                                                     (sail2_state_monad$returnS ((((((((subrange_vec_dec
                                                                                                         v__9
                                                                                                         (( 31 : int):ii)
                                                                                                         (( 20 : int):ii)
                                                                                                        :  12 words$word)) = (0xF00w :  12 words$word)))) /\ ((((((((subrange_vec_dec
                                                                                                             v__9
                                                                                                             (( 14 : int):ii)
                                                                                                             (( 12 : int):ii)
                                                                                                            :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec
                                                                                                             v__9
                                                                                                             (( 6 : int):ii)
                                                                                                             (( 0 : int):ii)
                                                                                                            :  7 words$word)) = (0b1010011w :  7 words$word)))))))))))) (\ (w__104 :
                                                                                     bool) . 
                                                                                   sail2_state_monad$returnS (if w__104
                                                                                           then
                                                                                             let (rs1 :
                                                                                                5 words$word) =
                                                                                               ((subrange_vec_dec
                                                                                                  v__9
                                                                                                  (( 19 : int):ii)
                                                                                                  (( 15 : int):ii)
                                                                                                 :  5 words$word)) in
                                                                                             let (rd :
                                                                                                5 words$word) =
                                                                                               ((subrange_vec_dec
                                                                                                  v__9
                                                                                                  (( 11 : int):ii)
                                                                                                  (( 7 : int):ii)
                                                                                                 :  5 words$word)) in
                                                                                             F_UN_TYPE_S (rs1,
                                                                                                          rd,
                                                                                                          FMV_W_X)
                                                                                           else
                                                                                             ILLEGAL v__9)))))))))))))))))))))))))))))))))))))))))))`;


val _ = Define `
 ((encdec_forwards_matches:ast ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    ((case arg_ of
     UTYPE ((imm, rd, op)) => sail2_state_monad$returnS T
   | RISCV_JAL ((v__347, rd)) =>
      sail2_state_monad$returnS (if (((((subrange_vec_dec v__347 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)) = (0b0w :  1 words$word))))
              then
                T
              else F)
   | RISCV_JALR ((imm, rs1, rd)) => sail2_state_monad$returnS T
   | BTYPE ((v__349, rs2, rs1, op)) =>
      sail2_state_monad$returnS (if (((((subrange_vec_dec v__349 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)) = (0b0w :  1 words$word))))
              then
                T
              else F)
   | ITYPE ((imm, rs1, rd, op)) => sail2_state_monad$returnS T
   | SHIFTIOP ((shamt, rs1, rd, RISCV_SLLI)) => sail2_state_monad$returnS T
   | SHIFTIOP ((shamt, rs1, rd, RISCV_SRLI)) => sail2_state_monad$returnS T
   | SHIFTIOP ((shamt, rs1, rd, RISCV_SRAI)) => sail2_state_monad$returnS T
   | RTYPE ((rs2, rs1, rd, RISCV_ADD)) => sail2_state_monad$returnS T
   | RTYPE ((rs2, rs1, rd, RISCV_SLT)) => sail2_state_monad$returnS T
   | RTYPE ((rs2, rs1, rd, RISCV_SLTU)) => sail2_state_monad$returnS T
   | RTYPE ((rs2, rs1, rd, RISCV_AND)) => sail2_state_monad$returnS T
   | RTYPE ((rs2, rs1, rd, RISCV_OR)) => sail2_state_monad$returnS T
   | RTYPE ((rs2, rs1, rd, RISCV_XOR)) => sail2_state_monad$returnS T
   | RTYPE ((rs2, rs1, rd, RISCV_SLL)) => sail2_state_monad$returnS T
   | RTYPE ((rs2, rs1, rd, RISCV_SRL)) => sail2_state_monad$returnS T
   | RTYPE ((rs2, rs1, rd, RISCV_SUB)) => sail2_state_monad$returnS T
   | RTYPE ((rs2, rs1, rd, RISCV_SRA)) => sail2_state_monad$returnS T
   | LOAD ((imm, rs1, rd, is_unsigned, size1, F, F)) =>
      sail2_state_monad$returnS (if (((((((word_width_bytes size1)) < (( 4 : int):ii))) \/ (((((~ is_unsigned)) /\ ((((word_width_bytes size1)) <= (( 4 : int):ii)))))))))
              then
                T
              else F)
   | STORE ((v__351, rs2, rs1, size1, F, F)) =>
      sail2_state_monad$returnS (if ((((word_width_bytes size1)) <= (( 4 : int):ii))) then T else F)
   | ADDIW ((imm, rs1, rd)) => sail2_state_monad$returnS (if ((((( 32 : int):ii) = (( 64 : int):ii)))) then T else F)
   | SHIFTW ((shamt, rs1, rd, RISCV_SLLI)) =>
      sail2_state_monad$returnS (if ((((( 32 : int):ii) = (( 64 : int):ii)))) then T else F)
   | SHIFTW ((shamt, rs1, rd, RISCV_SRLI)) =>
      sail2_state_monad$returnS (if ((((( 32 : int):ii) = (( 64 : int):ii)))) then T else F)
   | SHIFTW ((shamt, rs1, rd, RISCV_SRAI)) =>
      sail2_state_monad$returnS (if ((((( 32 : int):ii) = (( 64 : int):ii)))) then T else F)
   | RTYPEW ((rs2, rs1, rd, RISCV_ADDW)) => sail2_state_monad$returnS (if ((((( 32 : int):ii) = (( 64 : int):ii)))) then T else F)
   | RTYPEW ((rs2, rs1, rd, RISCV_SUBW)) => sail2_state_monad$returnS (if ((((( 32 : int):ii) = (( 64 : int):ii)))) then T else F)
   | RTYPEW ((rs2, rs1, rd, RISCV_SLLW)) => sail2_state_monad$returnS (if ((((( 32 : int):ii) = (( 64 : int):ii)))) then T else F)
   | RTYPEW ((rs2, rs1, rd, RISCV_SRLW)) => sail2_state_monad$returnS (if ((((( 32 : int):ii) = (( 64 : int):ii)))) then T else F)
   | RTYPEW ((rs2, rs1, rd, RISCV_SRAW)) => sail2_state_monad$returnS (if ((((( 32 : int):ii) = (( 64 : int):ii)))) then T else F)
   | SHIFTIWOP ((shamt, rs1, rd, RISCV_SLLIW)) =>
      sail2_state_monad$returnS (if ((((( 32 : int):ii) = (( 64 : int):ii)))) then T else F)
   | SHIFTIWOP ((shamt, rs1, rd, RISCV_SRLIW)) =>
      sail2_state_monad$returnS (if ((((( 32 : int):ii) = (( 64 : int):ii)))) then T else F)
   | SHIFTIWOP ((shamt, rs1, rd, RISCV_SRAIW)) =>
      sail2_state_monad$returnS (if ((((( 32 : int):ii) = (( 64 : int):ii)))) then T else F)
   | FENCE ((pred, succ)) => sail2_state_monad$returnS T
   | FENCE_TSO ((pred, succ)) => sail2_state_monad$returnS T
   | FENCEI (() ) => sail2_state_monad$returnS T
   | ECALL (() ) => sail2_state_monad$returnS T
   | MRET (() ) => sail2_state_monad$returnS T
   | SRET (() ) => sail2_state_monad$returnS T
   | EBREAK (() ) => sail2_state_monad$returnS T
   | WFI (() ) => sail2_state_monad$returnS T
   | SFENCE_VMA ((rs1, rs2)) => sail2_state_monad$returnS T
   | LOADRES ((aq, rl, rs1, size1, rd)) => sail2_state_monad$returnS (if ((amo_width_valid size1)) then T else F)
   | STORECON ((aq, rl, rs2, rs1, size1, rd)) =>
      sail2_state_monad$returnS (if ((amo_width_valid size1)) then T else F)
   | AMO ((op, aq, rl, rs2, rs1, size1, rd)) =>
      sail2_state_monad$returnS (if ((amo_width_valid size1)) then T else F)
   | MUL ((rs2, rs1, rd, high, signed1, signed2)) => sail2_state_monad$returnS T
   | DIV0 ((rs2, rs1, rd, s)) => sail2_state_monad$returnS T
   | REM ((rs2, rs1, rd, s)) => sail2_state_monad$returnS T
   | MULW ((rs2, rs1, rd)) => sail2_state_monad$returnS (if ((((( 32 : int):ii) = (( 64 : int):ii)))) then T else F)
   | DIVW ((rs2, rs1, rd, s)) => sail2_state_monad$returnS (if ((((( 32 : int):ii) = (( 64 : int):ii)))) then T else F)
   | REMW ((rs2, rs1, rd, s)) => sail2_state_monad$returnS (if ((((( 32 : int):ii) = (( 64 : int):ii)))) then T else F)
   | CSR ((csr, rs1, rd, is_imm, op)) => sail2_state_monad$returnS T
   | URET (() ) => sail2_state_monad$returnS T
   | FENCE_RESERVED ((fm, pred, succ, rs, rd)) =>
      sail2_state_monad$returnS (if (((((((((fm <> (0x0w :  4 words$word)))) /\ (((fm <> (0x8w :  4 words$word))))))) \/ ((((((rs <> (0b00000w :  5 words$word)))) \/ (((rd <> (0b00000w :  5 words$word)))))))))) then
                T
              else F)
   | FENCEI_RESERVED ((imm, rs, rd)) =>
      sail2_state_monad$returnS (if ((((((imm <> (0x000w :  12 words$word)))) \/ ((((((rs <> zreg))) \/ (((rd <> zreg))))))))) then
                T
              else F)
   | LOAD_FP ((imm, rs1, rd, WORD)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__0 : bool) .  sail2_state_monad$returnS (if w__0 then T else F))
   | LOAD_FP ((imm, rs1, rd, DOUBLE)) => sail2_state_monad$bindS
      (is_RV32D_or_RV64D () ) (\ (w__1 : bool) .  sail2_state_monad$returnS (if w__1 then T else F))
   | STORE_FP ((v__352, rs2, rs1, WORD)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__2 : bool) .  sail2_state_monad$returnS (if w__2 then T else F))
   | STORE_FP ((v__353, rs2, rs1, DOUBLE)) => sail2_state_monad$bindS
      (is_RV32D_or_RV64D () ) (\ (w__3 : bool) .  sail2_state_monad$returnS (if w__3 then T else F))
   | F_MADD_TYPE_S ((rs3, rs2, rs1, rm, rd, FMADD_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__4 : bool) .  sail2_state_monad$returnS (if w__4 then T else F))
   | F_MADD_TYPE_S ((rs3, rs2, rs1, rm, rd, FMSUB_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__5 : bool) .  sail2_state_monad$returnS (if w__5 then T else F))
   | F_MADD_TYPE_S ((rs3, rs2, rs1, rm, rd, FNMSUB_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__6 : bool) .  sail2_state_monad$returnS (if w__6 then T else F))
   | F_MADD_TYPE_S ((rs3, rs2, rs1, rm, rd, FNMADD_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__7 : bool) .  sail2_state_monad$returnS (if w__7 then T else F))
   | F_BIN_RM_TYPE_S ((rs2, rs1, rm, rd, FADD_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__8 : bool) .  sail2_state_monad$returnS (if w__8 then T else F))
   | F_BIN_RM_TYPE_S ((rs2, rs1, rm, rd, FSUB_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__9 : bool) .  sail2_state_monad$returnS (if w__9 then T else F))
   | F_BIN_RM_TYPE_S ((rs2, rs1, rm, rd, FMUL_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__10 : bool) .  sail2_state_monad$returnS (if w__10 then T else F))
   | F_BIN_RM_TYPE_S ((rs2, rs1, rm, rd, FDIV_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__11 : bool) .  sail2_state_monad$returnS (if w__11 then T else F))
   | F_UN_RM_TYPE_S ((rs1, rm, rd, FSQRT_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__12 : bool) .  sail2_state_monad$returnS (if w__12 then T else F))
   | F_UN_RM_TYPE_S ((rs1, rm, rd, FCVT_W_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__13 : bool) .  sail2_state_monad$returnS (if w__13 then T else F))
   | F_UN_RM_TYPE_S ((rs1, rm, rd, FCVT_WU_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__14 : bool) .  sail2_state_monad$returnS (if w__14 then T else F))
   | F_UN_RM_TYPE_S ((rs1, rm, rd, FCVT_S_W)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__15 : bool) .  sail2_state_monad$returnS (if w__15 then T else F))
   | F_UN_RM_TYPE_S ((rs1, rm, rd, FCVT_S_WU)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__16 : bool) .  sail2_state_monad$returnS (if w__16 then T else F))
   | F_UN_RM_TYPE_S ((rs1, rm, rd, FCVT_L_S)) => sail2_state_monad$bindS
      (is_RV64F () ) (\ (w__17 : bool) .  sail2_state_monad$returnS (if w__17 then T else F))
   | F_UN_RM_TYPE_S ((rs1, rm, rd, FCVT_LU_S)) => sail2_state_monad$bindS
      (is_RV64F () ) (\ (w__18 : bool) .  sail2_state_monad$returnS (if w__18 then T else F))
   | F_UN_RM_TYPE_S ((rs1, rm, rd, FCVT_S_L)) => sail2_state_monad$bindS
      (is_RV64F () ) (\ (w__19 : bool) .  sail2_state_monad$returnS (if w__19 then T else F))
   | F_UN_RM_TYPE_S ((rs1, rm, rd, FCVT_S_LU)) => sail2_state_monad$bindS
      (is_RV64F () ) (\ (w__20 : bool) .  sail2_state_monad$returnS (if w__20 then T else F))
   | F_BIN_TYPE_S ((rs2, rs1, rd, FSGNJ_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__21 : bool) .  sail2_state_monad$returnS (if w__21 then T else F))
   | F_BIN_TYPE_S ((rs2, rs1, rd, FSGNJN_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__22 : bool) .  sail2_state_monad$returnS (if w__22 then T else F))
   | F_BIN_TYPE_S ((rs2, rs1, rd, FSGNJX_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__23 : bool) .  sail2_state_monad$returnS (if w__23 then T else F))
   | F_BIN_TYPE_S ((rs2, rs1, rd, FMIN_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__24 : bool) .  sail2_state_monad$returnS (if w__24 then T else F))
   | F_BIN_TYPE_S ((rs2, rs1, rd, FMAX_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__25 : bool) .  sail2_state_monad$returnS (if w__25 then T else F))
   | F_BIN_TYPE_S ((rs2, rs1, rd, FEQ_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__26 : bool) .  sail2_state_monad$returnS (if w__26 then T else F))
   | F_BIN_TYPE_S ((rs2, rs1, rd, FLT_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__27 : bool) .  sail2_state_monad$returnS (if w__27 then T else F))
   | F_BIN_TYPE_S ((rs2, rs1, rd, FLE_S)) => sail2_state_monad$bindS
      (is_RV32F_or_RV64F () ) (\ (w__28 : bool) .  sail2_state_monad$returnS (if w__28 then T else F))
   | F_UN_TYPE_S ((rs1, rd, FCLASS_S)) => sail2_state_monad$bindS
      (haveFExt () ) (\ (w__29 : bool) .  sail2_state_monad$returnS (if w__29 then T else F))
   | F_UN_TYPE_S ((rs1, rd, FMV_X_W)) => sail2_state_monad$bindS
      (haveFExt () ) (\ (w__30 : bool) .  sail2_state_monad$returnS (if w__30 then T else F))
   | F_UN_TYPE_S ((rs1, rd, FMV_W_X)) => sail2_state_monad$bindS
      (haveFExt () ) (\ (w__31 : bool) .  sail2_state_monad$returnS (if w__31 then T else F))
   | ILLEGAL (s) => sail2_state_monad$returnS T
   | _ => sail2_state_monad$returnS F
   )))`;


val _ = Define `
 ((encdec_backwards_matches:(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let v__354 = arg_ in
   if (let (mappingpatterns_0_0 :  7 words$word) = ((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in
     encdec_uop_backwards_matches mappingpatterns_0_0) then
     let (mappingpatterns_0_0 :  7 words$word) = ((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) in sail2_state_monad$bindS
     (encdec_uop_backwards mappingpatterns_0_0) (\ op .  sail2_state_monad$returnS T)
   else if (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b1101111w :  7 words$word))))
   then
     sail2_state_monad$returnS T
   else if ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b1100111w :  7 words$word))))))) then
     sail2_state_monad$returnS T
   else if ((((let (mappingpatterns_1_0 :  3 words$word) =
                 ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
               encdec_bop_backwards_matches mappingpatterns_1_0) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b1100011w :  7 words$word))))))) then
     let (mappingpatterns_1_0 :  3 words$word) = ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in sail2_state_monad$bindS
     (encdec_bop_backwards mappingpatterns_1_0) (\ op .  sail2_state_monad$returnS T)
   else if ((((let (mappingpatterns_2_0 :  3 words$word) =
                 ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
               encdec_iop_backwards_matches mappingpatterns_2_0) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0010011w :  7 words$word))))))) then
     let (mappingpatterns_2_0 :  3 words$word) = ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in sail2_state_monad$bindS
     (encdec_iop_backwards mappingpatterns_2_0) (\ op .  sail2_state_monad$returnS T)
   else if ((((let (shamt :  6 words$word) = ((subrange_vec_dec v__354 (( 25 : int):ii) (( 20 : int):ii)  :  6 words$word)) in
               (((((( 32 : int):ii) = (( 64 : int):ii)))) \/ (((((access_vec_dec shamt (( 5 : int):ii))) = B0))))) /\ ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (0b000000w :  6 words$word)))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b001w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0010011w :  7 words$word))))))))))))) then
     sail2_state_monad$returnS T
   else if ((((let (shamt :  6 words$word) = ((subrange_vec_dec v__354 (( 25 : int):ii) (( 20 : int):ii)  :  6 words$word)) in
               (((((( 32 : int):ii) = (( 64 : int):ii)))) \/ (((((access_vec_dec shamt (( 5 : int):ii))) = B0))))) /\ ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (0b000000w :  6 words$word)))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b101w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0010011w :  7 words$word))))))))))))) then
     sail2_state_monad$returnS T
   else if ((((let (shamt :  6 words$word) = ((subrange_vec_dec v__354 (( 25 : int):ii) (( 20 : int):ii)  :  6 words$word)) in
               (((((( 32 : int):ii) = (( 64 : int):ii)))) \/ (((((access_vec_dec shamt (( 5 : int):ii))) = B0))))) /\ ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (0b010000w :  6 words$word)))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b101w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0010011w :  7 words$word))))))))))))) then
     sail2_state_monad$returnS T
   else if ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0110011w :  7 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b010w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0110011w :  7 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b011w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0110011w :  7 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b111w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0110011w :  7 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b110w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0110011w :  7 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b100w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0110011w :  7 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b001w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0110011w :  7 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b101w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0110011w :  7 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0100000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0110011w :  7 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0100000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b101w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0110011w :  7 words$word)))))))))) then
     sail2_state_monad$returnS T
   else sail2_state_monad$bindS
     (sail2_state$and_boolS
       (let (mappingpatterns_4_0 :  2 words$word) =
         ((subrange_vec_dec v__354 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
       let (mappingpatterns_3_0 :  1 words$word) =
         ((subrange_vec_dec v__354 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)) in
       if ((size_bits_backwards_matches mappingpatterns_4_0)) then sail2_state_monad$bindS
         (size_bits_backwards mappingpatterns_4_0) (\ size1 . 
         if ((bool_bits_backwards_matches mappingpatterns_3_0)) then sail2_state_monad$bindS
           (bool_bits_backwards mappingpatterns_3_0) (\ is_unsigned . 
           sail2_state_monad$returnS (((((((word_width_bytes size1)) < (( 4 : int):ii))) \/ (((((~ is_unsigned)) /\ ((((word_width_bytes size1)) <= (( 4 : int):ii))))))))))
         else sail2_state_monad$returnS F)
       else sail2_state_monad$returnS F)
       (sail2_state_monad$returnS (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0000011w :  7 words$word)))))) (\ (w__2 : bool) . 
     if w__2 then
       let (mappingpatterns_4_0 :  2 words$word) =
         ((subrange_vec_dec v__354 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
       let (mappingpatterns_3_0 :  1 words$word) =
         ((subrange_vec_dec v__354 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)) in sail2_state_monad$bindS
       (size_bits_backwards mappingpatterns_4_0) (\ size1 .  sail2_state_monad$bindS
       (bool_bits_backwards mappingpatterns_3_0) (\ is_unsigned .  sail2_state_monad$returnS T))
     else sail2_state_monad$bindS
       (sail2_state$and_boolS
         (let (mappingpatterns_5_0 :  2 words$word) =
           ((subrange_vec_dec v__354 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
         if ((size_bits_backwards_matches mappingpatterns_5_0)) then sail2_state_monad$bindS
           (size_bits_backwards mappingpatterns_5_0) (\ size1 . 
           sail2_state_monad$returnS ((((word_width_bytes size1)) <= (( 4 : int):ii))))
         else sail2_state_monad$returnS F)
         (sail2_state_monad$returnS ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)) = (0b0w :  1 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0100011w :  7 words$word))))))))) (\ (w__4 : bool) . 
       if w__4 then
         let (mappingpatterns_5_0 :  2 words$word) =
           ((subrange_vec_dec v__354 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in sail2_state_monad$bindS
         (size_bits_backwards mappingpatterns_5_0) (\ size1 .  sail2_state_monad$returnS T)
       else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0011011w :  7 words$word)))))))))) then
         sail2_state_monad$returnS T
       else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b001w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0011011w :  7 words$word))))))))))))) then
         sail2_state_monad$returnS T
       else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b101w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0011011w :  7 words$word))))))))))))) then
         sail2_state_monad$returnS T
       else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0100000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b101w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0011011w :  7 words$word))))))))))))) then
         sail2_state_monad$returnS T
       else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0111011w :  7 words$word))))))))))))) then
         sail2_state_monad$returnS T
       else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0100000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0111011w :  7 words$word))))))))))))) then
         sail2_state_monad$returnS T
       else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b001w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0111011w :  7 words$word))))))))))))) then
         sail2_state_monad$returnS T
       else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b101w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0111011w :  7 words$word))))))))))))) then
         sail2_state_monad$returnS T
       else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0100000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b101w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0111011w :  7 words$word))))))))))))) then
         sail2_state_monad$returnS T
       else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b001w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0011011w :  7 words$word))))))))))))) then
         sail2_state_monad$returnS T
       else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b101w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0011011w :  7 words$word))))))))))))) then
         sail2_state_monad$returnS T
       else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0100000w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b101w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0011011w :  7 words$word))))))))))))) then
         sail2_state_monad$returnS T
       else if ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 28 : int):ii)  :  4 words$word)) = (0x0w :  4 words$word)))) /\ (((((subrange_vec_dec v__354 (( 19 : int):ii) (( 0 : int):ii)  :  20 words$word)) = (0x0000Fw :  20 words$word))))))) then
         sail2_state_monad$returnS T
       else if ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 28 : int):ii)  :  4 words$word)) = (0x8w :  4 words$word)))) /\ (((((subrange_vec_dec v__354 (( 19 : int):ii) (( 0 : int):ii)  :  20 words$word)) = (0x0000Fw :  20 words$word))))))) then
         sail2_state_monad$returnS T
       else if (((v__354 = (0x0000100Fw :  32 words$word)))) then sail2_state_monad$returnS T
       else if (((v__354 = (0x00000073w :  32 words$word)))) then sail2_state_monad$returnS T
       else if (((v__354 = (0x30200073w :  32 words$word)))) then sail2_state_monad$returnS T
       else if (((v__354 = (0x10200073w :  32 words$word)))) then sail2_state_monad$returnS T
       else if (((v__354 = (0x00100073w :  32 words$word)))) then sail2_state_monad$returnS T
       else if (((v__354 = (0x10500073w :  32 words$word)))) then sail2_state_monad$returnS T
       else if ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0001001w :  7 words$word)))) /\ (((((subrange_vec_dec v__354 (( 14 : int):ii) (( 0 : int):ii)  :  15 words$word)) = (0b000000001110011w :  15 words$word))))))) then
         sail2_state_monad$returnS T
       else sail2_state_monad$bindS
         (sail2_state$and_boolS
           (let (mappingpatterns_8_0 :  2 words$word) =
             ((subrange_vec_dec v__354 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
           let (mappingpatterns_7_0 :  1 words$word) =
             ((subrange_vec_dec v__354 (( 25 : int):ii) (( 25 : int):ii)  :  1 words$word)) in
           let (mappingpatterns_6_0 :  1 words$word) =
             ((subrange_vec_dec v__354 (( 26 : int):ii) (( 26 : int):ii)  :  1 words$word)) in
           if ((size_bits_backwards_matches mappingpatterns_8_0)) then sail2_state_monad$bindS
             (size_bits_backwards mappingpatterns_8_0) (\ size1 . 
             if ((bool_bits_backwards_matches mappingpatterns_7_0)) then sail2_state_monad$bindS
               (bool_bits_backwards mappingpatterns_7_0) (\ rl . 
               if ((bool_bits_backwards_matches mappingpatterns_6_0)) then sail2_state_monad$bindS
                 (bool_bits_backwards mappingpatterns_6_0) (\ aq . 
                 sail2_state_monad$returnS ((amo_width_valid size1)))
               else sail2_state_monad$returnS F)
             else sail2_state_monad$returnS F)
           else sail2_state_monad$returnS F)
           (sail2_state_monad$returnS ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 27 : int):ii)  :  5 words$word)) = (0b00010w :  5 words$word)))) /\ ((((((((subrange_vec_dec v__354 (( 24 : int):ii) (( 20 : int):ii)  :  5 words$word)) = (0b00000w :  5 words$word)))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)) = (0b0w :  1 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0101111w :  7 words$word))))))))))))))) (\ (w__8 : bool) . 
         if w__8 then
           let (mappingpatterns_8_0 :  2 words$word) =
             ((subrange_vec_dec v__354 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
           let (mappingpatterns_7_0 :  1 words$word) =
             ((subrange_vec_dec v__354 (( 25 : int):ii) (( 25 : int):ii)  :  1 words$word)) in
           let (mappingpatterns_6_0 :  1 words$word) =
             ((subrange_vec_dec v__354 (( 26 : int):ii) (( 26 : int):ii)  :  1 words$word)) in sail2_state_monad$bindS
           (size_bits_backwards mappingpatterns_8_0) (\ size1 .  sail2_state_monad$bindS
           (bool_bits_backwards mappingpatterns_7_0) (\ rl .  sail2_state_monad$bindS
           (bool_bits_backwards mappingpatterns_6_0) (\ aq .  sail2_state_monad$returnS T)))
         else sail2_state_monad$bindS
           (sail2_state$and_boolS
             (let (mappingpatterns_9_0 :  1 words$word) =
               ((subrange_vec_dec v__354 (( 26 : int):ii) (( 26 : int):ii)  :  1 words$word)) in
             let (mappingpatterns_11_0 :  2 words$word) =
               ((subrange_vec_dec v__354 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
             let (mappingpatterns_10_0 :  1 words$word) =
               ((subrange_vec_dec v__354 (( 25 : int):ii) (( 25 : int):ii)  :  1 words$word)) in
             if ((size_bits_backwards_matches mappingpatterns_11_0)) then sail2_state_monad$bindS
               (size_bits_backwards mappingpatterns_11_0) (\ size1 . 
               if ((bool_bits_backwards_matches mappingpatterns_10_0)) then sail2_state_monad$bindS
                 (bool_bits_backwards mappingpatterns_10_0) (\ rl . 
                 if ((bool_bits_backwards_matches mappingpatterns_9_0)) then sail2_state_monad$bindS
                   (bool_bits_backwards mappingpatterns_9_0) (\ aq . 
                   sail2_state_monad$returnS ((amo_width_valid size1)))
                 else sail2_state_monad$returnS F)
               else sail2_state_monad$returnS F)
             else sail2_state_monad$returnS F)
             (sail2_state_monad$returnS ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 27 : int):ii)  :  5 words$word)) = (0b00011w :  5 words$word)))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)) = (0b0w :  1 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0101111w :  7 words$word)))))))))))) (\ (w__12 : bool) . 
           if w__12 then
             let (mappingpatterns_9_0 :  1 words$word) =
               ((subrange_vec_dec v__354 (( 26 : int):ii) (( 26 : int):ii)  :  1 words$word)) in
             let (mappingpatterns_11_0 :  2 words$word) =
               ((subrange_vec_dec v__354 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
             let (mappingpatterns_10_0 :  1 words$word) =
               ((subrange_vec_dec v__354 (( 25 : int):ii) (( 25 : int):ii)  :  1 words$word)) in sail2_state_monad$bindS
             (size_bits_backwards mappingpatterns_11_0) (\ size1 .  sail2_state_monad$bindS
             (bool_bits_backwards mappingpatterns_10_0) (\ rl .  sail2_state_monad$bindS
             (bool_bits_backwards mappingpatterns_9_0) (\ aq .  sail2_state_monad$returnS T)))
           else sail2_state_monad$bindS
             (sail2_state$and_boolS
               (let (mappingpatterns_12_0 :  5 words$word) =
                 ((subrange_vec_dec v__354 (( 31 : int):ii) (( 27 : int):ii)  :  5 words$word)) in
               let (mappingpatterns_15_0 :  2 words$word) =
                 ((subrange_vec_dec v__354 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
               let (mappingpatterns_14_0 :  1 words$word) =
                 ((subrange_vec_dec v__354 (( 25 : int):ii) (( 25 : int):ii)  :  1 words$word)) in
               let (mappingpatterns_13_0 :  1 words$word) =
                 ((subrange_vec_dec v__354 (( 26 : int):ii) (( 26 : int):ii)  :  1 words$word)) in
               let (mappingpatterns_12_0 :  5 words$word) =
                 ((subrange_vec_dec v__354 (( 31 : int):ii) (( 27 : int):ii)  :  5 words$word)) in
               if ((size_bits_backwards_matches mappingpatterns_15_0)) then sail2_state_monad$bindS
                 (size_bits_backwards mappingpatterns_15_0) (\ size1 . 
                 if ((bool_bits_backwards_matches mappingpatterns_14_0)) then sail2_state_monad$bindS
                   (bool_bits_backwards mappingpatterns_14_0) (\ rl . 
                   if ((bool_bits_backwards_matches mappingpatterns_13_0)) then sail2_state_monad$bindS
                     (bool_bits_backwards mappingpatterns_13_0) (\ aq . 
                     if ((encdec_amoop_backwards_matches mappingpatterns_12_0)) then sail2_state_monad$bindS
                       (encdec_amoop_backwards mappingpatterns_12_0) (\ op . 
                       sail2_state_monad$returnS ((amo_width_valid size1)))
                     else sail2_state_monad$returnS F)
                   else sail2_state_monad$returnS F)
                 else sail2_state_monad$returnS F)
               else sail2_state_monad$returnS F)
               (sail2_state_monad$returnS ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)) = (0b0w :  1 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0101111w :  7 words$word))))))))) (\ (w__17 : bool) . 
             if w__17 then
               let (mappingpatterns_12_0 :  5 words$word) =
                 ((subrange_vec_dec v__354 (( 31 : int):ii) (( 27 : int):ii)  :  5 words$word)) in
               let (mappingpatterns_15_0 :  2 words$word) =
                 ((subrange_vec_dec v__354 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
               let (mappingpatterns_14_0 :  1 words$word) =
                 ((subrange_vec_dec v__354 (( 25 : int):ii) (( 25 : int):ii)  :  1 words$word)) in
               let (mappingpatterns_13_0 :  1 words$word) =
                 ((subrange_vec_dec v__354 (( 26 : int):ii) (( 26 : int):ii)  :  1 words$word)) in
               let (mappingpatterns_12_0 :  5 words$word) =
                 ((subrange_vec_dec v__354 (( 31 : int):ii) (( 27 : int):ii)  :  5 words$word)) in sail2_state_monad$bindS
               (size_bits_backwards mappingpatterns_15_0) (\ size1 .  sail2_state_monad$bindS
               (bool_bits_backwards mappingpatterns_14_0) (\ rl .  sail2_state_monad$bindS
               (bool_bits_backwards mappingpatterns_13_0) (\ aq .  sail2_state_monad$bindS
               (encdec_amoop_backwards mappingpatterns_12_0) (\ op .  sail2_state_monad$returnS T))))
             else if ((((let (mappingpatterns_16_0 :  3 words$word) =
                           ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
                         encdec_mul_op_backwards_matches mappingpatterns_16_0) /\ ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000001w :  7 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0110011w :  7 words$word)))))))))) then
               let (mappingpatterns_16_0 :  3 words$word) =
                 ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in sail2_state_monad$bindS
               (encdec_mul_op_backwards mappingpatterns_16_0) (\ varstup .  let (high, signed1, signed2) = varstup in
               sail2_state_monad$returnS T)
             else if ((((let (mappingpatterns_17_0 :  1 words$word) =
                           ((subrange_vec_dec v__354 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
                         bool_not_bits_backwards_matches mappingpatterns_17_0) /\ ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000001w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 13 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0110011w :  7 words$word))))))))))))) then
               let (mappingpatterns_17_0 :  1 words$word) =
                 ((subrange_vec_dec v__354 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in sail2_state_monad$bindS
               (bool_not_bits_backwards mappingpatterns_17_0) (\ s .  sail2_state_monad$returnS T)
             else if ((((let (mappingpatterns_18_0 :  1 words$word) =
                           ((subrange_vec_dec v__354 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
                         bool_not_bits_backwards_matches mappingpatterns_18_0) /\ ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000001w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 13 : int):ii)  :  2 words$word)) = (0b11w :  2 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0110011w :  7 words$word))))))))))))) then
               let (mappingpatterns_18_0 :  1 words$word) =
                 ((subrange_vec_dec v__354 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in sail2_state_monad$bindS
               (bool_not_bits_backwards mappingpatterns_18_0) (\ s .  sail2_state_monad$returnS T)
             else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000001w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0111011w :  7 words$word))))))))))))) then
               sail2_state_monad$returnS T
             else sail2_state_monad$bindS
               (sail2_state$and_boolS
                 (let (mappingpatterns_19_0 :  1 words$word) =
                   ((subrange_vec_dec v__354 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
                 if ((bool_not_bits_backwards_matches mappingpatterns_19_0)) then sail2_state_monad$bindS
                   (bool_not_bits_backwards mappingpatterns_19_0) (\ s . 
                   sail2_state_monad$returnS ((((( 32 : int):ii) = (( 64 : int):ii)))))
                 else sail2_state_monad$returnS F)
                 (sail2_state_monad$returnS ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000001w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 13 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0111011w :  7 words$word)))))))))))) (\ (w__19 : bool) . 
               if w__19 then
                 let (mappingpatterns_19_0 :  1 words$word) =
                   ((subrange_vec_dec v__354 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in sail2_state_monad$bindS
                 (bool_not_bits_backwards mappingpatterns_19_0) (\ s .  sail2_state_monad$returnS T)
               else sail2_state_monad$bindS
                 (sail2_state$and_boolS
                   (let (mappingpatterns_20_0 :  1 words$word) =
                     ((subrange_vec_dec v__354 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
                   if ((bool_not_bits_backwards_matches mappingpatterns_20_0)) then sail2_state_monad$bindS
                     (bool_not_bits_backwards mappingpatterns_20_0) (\ s . 
                     sail2_state_monad$returnS ((((( 32 : int):ii) = (( 64 : int):ii)))))
                   else sail2_state_monad$returnS F)
                   (sail2_state_monad$returnS ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 25 : int):ii)  :  7 words$word)) = (0b0000001w :  7 words$word)))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 13 : int):ii)  :  2 words$word)) = (0b11w :  2 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0111011w :  7 words$word)))))))))))) (\ (w__21 : bool) . 
                 if w__21 then
                   let (mappingpatterns_20_0 :  1 words$word) =
                     ((subrange_vec_dec v__354 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in sail2_state_monad$bindS
                   (bool_not_bits_backwards mappingpatterns_20_0) (\ s .  sail2_state_monad$returnS T)
                 else sail2_state_monad$bindS
                   (sail2_state$and_boolS
                     (let (mappingpatterns_22_0 :  2 words$word) =
                       ((subrange_vec_dec v__354 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
                     let (mappingpatterns_21_0 :  1 words$word) =
                       ((subrange_vec_dec v__354 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)) in
                     if ((encdec_csrop_backwards_matches mappingpatterns_22_0)) then sail2_state_monad$bindS
                       (encdec_csrop_backwards mappingpatterns_22_0) (\ op . 
                       sail2_state_monad$returnS ((bool_bits_backwards_matches mappingpatterns_21_0)))
                     else sail2_state_monad$returnS F)
                     (sail2_state_monad$returnS (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b1110011w :  7 words$word)))))) (\ (w__23 : bool) . 
                   if w__23 then
                     let (mappingpatterns_22_0 :  2 words$word) =
                       ((subrange_vec_dec v__354 (( 13 : int):ii) (( 12 : int):ii)  :  2 words$word)) in
                     let (mappingpatterns_21_0 :  1 words$word) =
                       ((subrange_vec_dec v__354 (( 14 : int):ii) (( 14 : int):ii)  :  1 words$word)) in sail2_state_monad$bindS
                     (encdec_csrop_backwards mappingpatterns_22_0) (\ op .  sail2_state_monad$bindS
                     (bool_bits_backwards mappingpatterns_21_0) (\ is_imm .  sail2_state_monad$returnS T))
                   else if (((v__354 = (0x00200073w :  32 words$word)))) then sail2_state_monad$returnS T
                   else if ((((let (fm : 4 bits) =
                                 ((subrange_vec_dec v__354 (( 31 : int):ii) (( 28 : int):ii)  :  4 words$word)) in
                               let (rs : regidx) =
                                 ((subrange_vec_dec v__354 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
                               let (rd : regidx) =
                                 ((subrange_vec_dec v__354 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
                               let (fm : 4 bits) =
                                 ((subrange_vec_dec v__354 (( 31 : int):ii) (( 28 : int):ii)  :  4 words$word)) in
                               (((((((fm <> (0x0w :  4 words$word)))) /\ (((fm <> (0x8w :  4 words$word))))))) \/ ((((((rs <> (0b00000w :  5 words$word)))) \/ (((rd <> (0b00000w :  5 words$word))))))))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0001111w :  7 words$word)))))))))) then
                     sail2_state_monad$returnS T
                   else if ((((let (imm : 12 bits) =
                                 ((subrange_vec_dec v__354 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
                               let (rs : regidx) =
                                 ((subrange_vec_dec v__354 (( 19 : int):ii) (( 15 : int):ii)  :  5 words$word)) in
                               let (rd : regidx) =
                                 ((subrange_vec_dec v__354 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
                               let (imm : 12 bits) =
                                 ((subrange_vec_dec v__354 (( 31 : int):ii) (( 20 : int):ii)  :  12 words$word)) in
                               ((((imm <> (0x000w :  12 words$word)))) \/ ((((((rs <> zreg))) \/ (((rd <> zreg)))))))) /\ ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b001w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0001111w :  7 words$word)))))))))) then
                     sail2_state_monad$returnS T
                   else sail2_state_monad$bindS
                     (sail2_state$and_boolS ((is_RV32F_or_RV64F () ))
                       (sail2_state_monad$returnS ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b010w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0000111w :  7 words$word))))))))) (\ (w__25 : bool) . 
                     if w__25 then sail2_state_monad$returnS T
                     else sail2_state_monad$bindS
                       (sail2_state$and_boolS ((is_RV32D_or_RV64D () ))
                         (sail2_state_monad$returnS ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b011w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0000111w :  7 words$word))))))))) (\ (w__27 : bool) . 
                       if w__27 then sail2_state_monad$returnS T
                       else sail2_state_monad$bindS
                         (sail2_state$and_boolS ((is_RV32F_or_RV64F () ))
                           (sail2_state_monad$returnS ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b010w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0100111w :  7 words$word))))))))) (\ (w__29 : bool) . 
                         if w__29 then sail2_state_monad$returnS T
                         else sail2_state_monad$bindS
                           (sail2_state$and_boolS ((is_RV32D_or_RV64D () ))
                             (sail2_state_monad$returnS ((((((((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) = (0b011w :  3 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0100111w :  7 words$word))))))))) (\ (w__31 : bool) . 
                           if w__31 then sail2_state_monad$returnS T
                           else sail2_state_monad$bindS
                             (sail2_state$and_boolS
                               (let (mappingpatterns_23_0 :  3 words$word) =
                                 ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
                               if ((encdec_rounding_mode_backwards_matches mappingpatterns_23_0))
                               then sail2_state_monad$bindS
                                 (encdec_rounding_mode_backwards mappingpatterns_23_0) (\ rm . 
                                 is_RV32F_or_RV64F () )
                               else sail2_state_monad$returnS F)
                               (sail2_state_monad$returnS ((((((((subrange_vec_dec v__354 (( 26 : int):ii) (( 25 : int):ii)
                                                  :  2 words$word)) = (0b00w :  2 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b1000011w :  7 words$word))))))))) (\ (w__34 : bool) . 
                             if w__34 then
                               let (mappingpatterns_23_0 :  3 words$word) =
                                 ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in sail2_state_monad$bindS
                               (encdec_rounding_mode_backwards mappingpatterns_23_0) (\ rm . 
                               sail2_state_monad$returnS T)
                             else sail2_state_monad$bindS
                               (sail2_state$and_boolS
                                 (let (mappingpatterns_24_0 :  3 words$word) =
                                   ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
                                 if ((encdec_rounding_mode_backwards_matches mappingpatterns_24_0))
                                 then sail2_state_monad$bindS
                                   (encdec_rounding_mode_backwards mappingpatterns_24_0) (\ rm . 
                                   is_RV32F_or_RV64F () )
                                 else sail2_state_monad$returnS F)
                                 (sail2_state_monad$returnS ((((((((subrange_vec_dec v__354 (( 26 : int):ii) (( 25 : int):ii)
                                                    :  2 words$word)) = (0b00w :  2 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)
                                                    :  7 words$word)) = (0b1000111w :  7 words$word))))))))) (\ (w__37 :
                                 bool) . 
                               if w__37 then
                                 let (mappingpatterns_24_0 :  3 words$word) =
                                   ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in sail2_state_monad$bindS
                                 (encdec_rounding_mode_backwards mappingpatterns_24_0) (\ rm . 
                                 sail2_state_monad$returnS T)
                               else sail2_state_monad$bindS
                                 (sail2_state$and_boolS
                                   (let (mappingpatterns_25_0 :  3 words$word) =
                                     ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
                                   if ((encdec_rounding_mode_backwards_matches mappingpatterns_25_0))
                                   then sail2_state_monad$bindS
                                     (encdec_rounding_mode_backwards mappingpatterns_25_0) (\ rm . 
                                     is_RV32F_or_RV64F () )
                                   else sail2_state_monad$returnS F)
                                   (sail2_state_monad$returnS ((((((((subrange_vec_dec v__354 (( 26 : int):ii) (( 25 : int):ii)
                                                      :  2 words$word)) = (0b00w :  2 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)
                                                      :  7 words$word)) = (0b1001011w :  7 words$word))))))))) (\ (w__40 :
                                   bool) . 
                                 if w__40 then
                                   let (mappingpatterns_25_0 :  3 words$word) =
                                     ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in sail2_state_monad$bindS
                                   (encdec_rounding_mode_backwards mappingpatterns_25_0) (\ rm . 
                                   sail2_state_monad$returnS T)
                                 else sail2_state_monad$bindS
                                   (sail2_state$and_boolS
                                     (let (mappingpatterns_26_0 :  3 words$word) =
                                       ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
                                     if ((encdec_rounding_mode_backwards_matches
                                            mappingpatterns_26_0)) then sail2_state_monad$bindS
                                       (encdec_rounding_mode_backwards mappingpatterns_26_0) (\ rm . 
                                       is_RV32F_or_RV64F () )
                                     else sail2_state_monad$returnS F)
                                     (sail2_state_monad$returnS ((((((((subrange_vec_dec v__354 (( 26 : int):ii) (( 25 : int):ii)
                                                        :  2 words$word)) = (0b00w :  2 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)
                                                        :  7 words$word)) = (0b1001111w :  7 words$word))))))))) (\ (w__43 :
                                     bool) . 
                                   if w__43 then
                                     let (mappingpatterns_26_0 :  3 words$word) =
                                       ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in sail2_state_monad$bindS
                                     (encdec_rounding_mode_backwards mappingpatterns_26_0) (\ rm . 
                                     sail2_state_monad$returnS T)
                                   else sail2_state_monad$bindS
                                     (sail2_state$and_boolS
                                       (let (mappingpatterns_27_0 :  3 words$word) =
                                         ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
                                       if ((encdec_rounding_mode_backwards_matches
                                              mappingpatterns_27_0)) then sail2_state_monad$bindS
                                         (encdec_rounding_mode_backwards mappingpatterns_27_0) (\ rm . 
                                         is_RV32F_or_RV64F () )
                                       else sail2_state_monad$returnS F)
                                       (sail2_state_monad$returnS ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 25 : int):ii)
                                                          :  7 words$word)) = (0b0000000w :  7 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)
                                                          :  7 words$word)) = (0b1010011w :  7 words$word))))))))) (\ (w__46 :
                                       bool) . 
                                     if w__46 then
                                       let (mappingpatterns_27_0 :  3 words$word) =
                                         ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in sail2_state_monad$bindS
                                       (encdec_rounding_mode_backwards mappingpatterns_27_0) (\ rm . 
                                       sail2_state_monad$returnS T)
                                     else sail2_state_monad$bindS
                                       (sail2_state$and_boolS
                                         (let (mappingpatterns_28_0 :  3 words$word) =
                                           ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
                                         if ((encdec_rounding_mode_backwards_matches
                                                mappingpatterns_28_0)) then sail2_state_monad$bindS
                                           (encdec_rounding_mode_backwards mappingpatterns_28_0) (\ rm . 
                                           is_RV32F_or_RV64F () )
                                         else sail2_state_monad$returnS F)
                                         (sail2_state_monad$returnS ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 25 : int):ii)
                                                            :  7 words$word)) = (0b0000100w :  7 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)
                                                            :  7 words$word)) = (0b1010011w :  7 words$word))))))))) (\ (w__49 :
                                         bool) . 
                                       if w__49 then
                                         let (mappingpatterns_28_0 :  3 words$word) =
                                           ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in sail2_state_monad$bindS
                                         (encdec_rounding_mode_backwards mappingpatterns_28_0) (\ rm . 
                                         sail2_state_monad$returnS T)
                                       else sail2_state_monad$bindS
                                         (sail2_state$and_boolS
                                           (let (mappingpatterns_29_0 :  3 words$word) =
                                             ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
                                           if ((encdec_rounding_mode_backwards_matches
                                                  mappingpatterns_29_0)) then sail2_state_monad$bindS
                                             (encdec_rounding_mode_backwards mappingpatterns_29_0) (\ rm . 
                                             is_RV32F_or_RV64F () )
                                           else sail2_state_monad$returnS F)
                                           (sail2_state_monad$returnS ((((((((subrange_vec_dec v__354 (( 31 : int):ii) (( 25 : int):ii)
                                                              :  7 words$word)) = (0b0001000w :  7 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)
                                                              :  7 words$word)) = (0b1010011w :  7 words$word))))))))) (\ (w__52 :
                                           bool) . 
                                         if w__52 then
                                           let (mappingpatterns_29_0 :  3 words$word) =
                                             ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in sail2_state_monad$bindS
                                           (encdec_rounding_mode_backwards mappingpatterns_29_0) (\ rm . 
                                           sail2_state_monad$returnS T)
                                         else sail2_state_monad$bindS
                                           (sail2_state$and_boolS
                                             (let (mappingpatterns_30_0 :  3 words$word) =
                                               ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in
                                             if ((encdec_rounding_mode_backwards_matches
                                                    mappingpatterns_30_0)) then sail2_state_monad$bindS
                                               (encdec_rounding_mode_backwards mappingpatterns_30_0) (\ rm . 
                                               is_RV32F_or_RV64F () )
                                             else sail2_state_monad$returnS F)
                                             (sail2_state_monad$returnS ((((((((subrange_vec_dec v__354 (( 31 : int):ii)
                                                                 (( 25 : int):ii)
                                                                :  7 words$word)) = (0b0001100w :  7 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii) (( 0 : int):ii)
                                                                :  7 words$word)) = (0b1010011w :  7 words$word))))))))) (\ (w__55 :
                                             bool) . 
                                           if w__55 then
                                             let (mappingpatterns_30_0 :  3 words$word) =
                                               ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)  :  3 words$word)) in sail2_state_monad$bindS
                                             (encdec_rounding_mode_backwards mappingpatterns_30_0) (\ rm . 
                                             sail2_state_monad$returnS T)
                                           else sail2_state_monad$bindS
                                             (sail2_state$and_boolS
                                               (let (mappingpatterns_31_0 :  3 words$word) =
                                                 ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)
                                                   :  3 words$word)) in
                                               if ((encdec_rounding_mode_backwards_matches
                                                      mappingpatterns_31_0)) then sail2_state_monad$bindS
                                                 (encdec_rounding_mode_backwards mappingpatterns_31_0) (\ rm . 
                                                 is_RV32F_or_RV64F () )
                                               else sail2_state_monad$returnS F)
                                               (sail2_state_monad$returnS ((((((((subrange_vec_dec v__354 (( 31 : int):ii)
                                                                   (( 20 : int):ii)
                                                                  :  12 words$word)) = (0x580w :  12 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii)
                                                                   (( 0 : int):ii)
                                                                  :  7 words$word)) = (0b1010011w :  7 words$word))))))))) (\ (w__58 :
                                               bool) . 
                                             if w__58 then
                                               let (mappingpatterns_31_0 :  3 words$word) =
                                                 ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)
                                                   :  3 words$word)) in sail2_state_monad$bindS
                                               (encdec_rounding_mode_backwards mappingpatterns_31_0) (\ rm . 
                                               sail2_state_monad$returnS T)
                                             else sail2_state_monad$bindS
                                               (sail2_state$and_boolS
                                                 (let (mappingpatterns_32_0 :  3 words$word) =
                                                   ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)
                                                     :  3 words$word)) in
                                                 if ((encdec_rounding_mode_backwards_matches
                                                        mappingpatterns_32_0)) then sail2_state_monad$bindS
                                                   (encdec_rounding_mode_backwards
                                                     mappingpatterns_32_0) (\ rm . 
                                                   is_RV32F_or_RV64F () )
                                                 else sail2_state_monad$returnS F)
                                                 (sail2_state_monad$returnS ((((((((subrange_vec_dec v__354 (( 31 : int):ii)
                                                                     (( 20 : int):ii)
                                                                    :  12 words$word)) = (0xC00w :  12 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii)
                                                                     (( 0 : int):ii)
                                                                    :  7 words$word)) = (0b1010011w :  7 words$word))))))))) (\ (w__61 :
                                                 bool) . 
                                               if w__61 then
                                                 let (mappingpatterns_32_0 :  3 words$word) =
                                                   ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)
                                                     :  3 words$word)) in sail2_state_monad$bindS
                                                 (encdec_rounding_mode_backwards mappingpatterns_32_0) (\ rm . 
                                                 sail2_state_monad$returnS T)
                                               else sail2_state_monad$bindS
                                                 (sail2_state$and_boolS
                                                   (let (mappingpatterns_33_0 :  3 words$word) =
                                                     ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)
                                                       :  3 words$word)) in
                                                   if ((encdec_rounding_mode_backwards_matches
                                                          mappingpatterns_33_0)) then sail2_state_monad$bindS
                                                     (encdec_rounding_mode_backwards
                                                       mappingpatterns_33_0) (\ rm . 
                                                     is_RV32F_or_RV64F () )
                                                   else sail2_state_monad$returnS F)
                                                   (sail2_state_monad$returnS ((((((((subrange_vec_dec v__354 (( 31 : int):ii)
                                                                       (( 20 : int):ii)
                                                                      :  12 words$word)) = (0xC01w :  12 words$word)))) /\ (((((subrange_vec_dec v__354 (( 6 : int):ii)
                                                                       (( 0 : int):ii)
                                                                      :  7 words$word)) = (0b1010011w :  7 words$word))))))))) (\ (w__64 :
                                                   bool) . 
                                                 if w__64 then
                                                   let (mappingpatterns_33_0 :  3 words$word) =
                                                     ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)
                                                       :  3 words$word)) in sail2_state_monad$bindS
                                                   (encdec_rounding_mode_backwards
                                                     mappingpatterns_33_0) (\ rm . 
                                                   sail2_state_monad$returnS T)
                                                 else sail2_state_monad$bindS
                                                   (sail2_state$and_boolS
                                                     (let (mappingpatterns_34_0 :  3 words$word) =
                                                       ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)
                                                         :  3 words$word)) in
                                                     if ((encdec_rounding_mode_backwards_matches
                                                            mappingpatterns_34_0)) then sail2_state_monad$bindS
                                                       (encdec_rounding_mode_backwards
                                                         mappingpatterns_34_0) (\ rm . 
                                                       is_RV32F_or_RV64F () )
                                                     else sail2_state_monad$returnS F)
                                                     (sail2_state_monad$returnS ((((((((subrange_vec_dec v__354
                                                                         (( 31 : int):ii) (( 20 : int):ii)
                                                                        :  12 words$word)) = (0xD00w :  12 words$word)))) /\ (((((subrange_vec_dec v__354
                                                                         (( 6 : int):ii) (( 0 : int):ii)
                                                                        :  7 words$word)) = (0b1010011w :  7 words$word))))))))) (\ (w__67 :
                                                     bool) . 
                                                   if w__67 then
                                                     let (mappingpatterns_34_0 :  3 words$word) =
                                                       ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)
                                                         :  3 words$word)) in sail2_state_monad$bindS
                                                     (encdec_rounding_mode_backwards
                                                       mappingpatterns_34_0) (\ rm . 
                                                     sail2_state_monad$returnS T)
                                                   else sail2_state_monad$bindS
                                                     (sail2_state$and_boolS
                                                       (let (mappingpatterns_35_0 :  3 words$word) =
                                                         ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)
                                                           :  3 words$word)) in
                                                       if ((encdec_rounding_mode_backwards_matches
                                                              mappingpatterns_35_0)) then sail2_state_monad$bindS
                                                         (encdec_rounding_mode_backwards
                                                           mappingpatterns_35_0) (\ rm . 
                                                         is_RV32F_or_RV64F () )
                                                       else sail2_state_monad$returnS F)
                                                       (sail2_state_monad$returnS ((((((((subrange_vec_dec v__354
                                                                           (( 31 : int):ii) (( 20 : int):ii)
                                                                          :  12 words$word)) = (0xD01w :  12 words$word)))) /\ (((((subrange_vec_dec v__354
                                                                           (( 6 : int):ii) (( 0 : int):ii)
                                                                          :  7 words$word)) = (0b1010011w :  7 words$word))))))))) (\ (w__70 :
                                                       bool) . 
                                                     if w__70 then
                                                       let (mappingpatterns_35_0 :  3 words$word) =
                                                         ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)
                                                           :  3 words$word)) in sail2_state_monad$bindS
                                                       (encdec_rounding_mode_backwards
                                                         mappingpatterns_35_0) (\ rm . 
                                                       sail2_state_monad$returnS T)
                                                     else sail2_state_monad$bindS
                                                       (sail2_state$and_boolS
                                                         (let (mappingpatterns_36_0 :  3 words$word) =
                                                           ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)
                                                             :  3 words$word)) in
                                                         if ((encdec_rounding_mode_backwards_matches
                                                                mappingpatterns_36_0)) then sail2_state_monad$bindS
                                                           (encdec_rounding_mode_backwards
                                                             mappingpatterns_36_0) (\ rm . 
                                                           is_RV64F () )
                                                         else sail2_state_monad$returnS F)
                                                         (sail2_state_monad$returnS ((((((((subrange_vec_dec v__354
                                                                             (( 31 : int):ii) (( 20 : int):ii)
                                                                            :  12 words$word)) = (0xC02w :  12 words$word)))) /\ (((((subrange_vec_dec v__354
                                                                             (( 6 : int):ii) (( 0 : int):ii)
                                                                            :  7 words$word)) = (0b1010011w :  7 words$word))))))))) (\ (w__73 :
                                                         bool) . 
                                                       if w__73 then
                                                         let (mappingpatterns_36_0 :  3 words$word) =
                                                           ((subrange_vec_dec v__354 (( 14 : int):ii) (( 12 : int):ii)
                                                             :  3 words$word)) in sail2_state_monad$bindS
                                                         (encdec_rounding_mode_backwards
                                                           mappingpatterns_36_0) (\ rm . 
                                                         sail2_state_monad$returnS T)
                                                       else sail2_state_monad$bindS
                                                         (sail2_state$and_boolS
                                                           (let (mappingpatterns_37_0 :  3 words$word) =
                                                             ((subrange_vec_dec v__354 (( 14 : int):ii)
                                                                (( 12 : int):ii)
                                                               :  3 words$word)) in
                                                           if ((encdec_rounding_mode_backwards_matches
                                                                  mappingpatterns_37_0)) then sail2_state_monad$bindS
                                                             (encdec_rounding_mode_backwards
                                                               mappingpatterns_37_0) (\ rm . 
                                                             is_RV64F () )
                                                           else sail2_state_monad$returnS F)
                                                           (sail2_state_monad$returnS ((((((((subrange_vec_dec v__354
                                                                               (( 31 : int):ii) (( 20 : int):ii)
                                                                              :  12 words$word)) = (0xC03w :  12 words$word)))) /\ (((((subrange_vec_dec v__354
                                                                               (( 6 : int):ii) (( 0 : int):ii)
                                                                              :  7 words$word)) = (0b1010011w :  7 words$word))))))))) (\ (w__76 :
                                                           bool) . 
                                                         if w__76 then
                                                           let (mappingpatterns_37_0 :  3 words$word) =
                                                             ((subrange_vec_dec v__354 (( 14 : int):ii)
                                                                (( 12 : int):ii)
                                                               :  3 words$word)) in sail2_state_monad$bindS
                                                           (encdec_rounding_mode_backwards
                                                             mappingpatterns_37_0) (\ rm . 
                                                           sail2_state_monad$returnS T)
                                                         else sail2_state_monad$bindS
                                                           (sail2_state$and_boolS
                                                             (let (mappingpatterns_38_0 :  3 words$word) =
                                                               ((subrange_vec_dec v__354 (( 14 : int):ii)
                                                                  (( 12 : int):ii)
                                                                 :  3 words$word)) in
                                                             if ((encdec_rounding_mode_backwards_matches
                                                                    mappingpatterns_38_0)) then sail2_state_monad$bindS
                                                               (encdec_rounding_mode_backwards
                                                                 mappingpatterns_38_0) (\ rm . 
                                                               is_RV64F () )
                                                             else sail2_state_monad$returnS F)
                                                             (sail2_state_monad$returnS ((((((((subrange_vec_dec
                                                                                 v__354 (( 31 : int):ii)
                                                                                 (( 20 : int):ii)
                                                                                :  12 words$word)) = (0xD02w :  12 words$word)))) /\ (((((subrange_vec_dec
                                                                                 v__354 (( 6 : int):ii)
                                                                                 (( 0 : int):ii)
                                                                                :  7 words$word)) = (0b1010011w :  7 words$word))))))))) (\ (w__79 :
                                                             bool) . 
                                                           if w__79 then
                                                             let (mappingpatterns_38_0 :  3 words$word) =
                                                               ((subrange_vec_dec v__354 (( 14 : int):ii)
                                                                  (( 12 : int):ii)
                                                                 :  3 words$word)) in sail2_state_monad$bindS
                                                             (encdec_rounding_mode_backwards
                                                               mappingpatterns_38_0) (\ rm . 
                                                             sail2_state_monad$returnS T)
                                                           else sail2_state_monad$bindS
                                                             (sail2_state$and_boolS
                                                               (let (mappingpatterns_39_0 :
                                                                  3 words$word) =
                                                                 ((subrange_vec_dec v__354 (( 14 : int):ii)
                                                                    (( 12 : int):ii)
                                                                   :  3 words$word)) in
                                                               if ((encdec_rounding_mode_backwards_matches
                                                                      mappingpatterns_39_0)) then sail2_state_monad$bindS
                                                                 (encdec_rounding_mode_backwards
                                                                   mappingpatterns_39_0) (\ rm . 
                                                                 is_RV64F () )
                                                               else sail2_state_monad$returnS F)
                                                               (sail2_state_monad$returnS ((((((((subrange_vec_dec
                                                                                   v__354 (( 31 : int):ii)
                                                                                   (( 20 : int):ii)
                                                                                  :  12 words$word)) = (0xD03w :  12 words$word)))) /\ (((((subrange_vec_dec
                                                                                   v__354 (( 6 : int):ii)
                                                                                   (( 0 : int):ii)
                                                                                  :  7 words$word)) = (0b1010011w :  7 words$word))))))))) (\ (w__82 :
                                                               bool) . 
                                                             if w__82 then
                                                               let (mappingpatterns_39_0 :  3 words$word) =
                                                                 ((subrange_vec_dec v__354 (( 14 : int):ii)
                                                                    (( 12 : int):ii)
                                                                   :  3 words$word)) in sail2_state_monad$bindS
                                                               (encdec_rounding_mode_backwards
                                                                 mappingpatterns_39_0) (\ rm . 
                                                               sail2_state_monad$returnS T)
                                                             else sail2_state_monad$bindS
                                                               (sail2_state$and_boolS ((is_RV32F_or_RV64F () ))
                                                                 (sail2_state_monad$returnS ((((((((subrange_vec_dec
                                                                                     v__354 (( 31 : int):ii)
                                                                                     (( 25 : int):ii)
                                                                                    :  7 words$word)) = (0b0010000w :  7 words$word)))) /\ ((((((((subrange_vec_dec
                                                                                         v__354
                                                                                         (( 14 : int):ii)
                                                                                         (( 12 : int):ii)
                                                                                        :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec
                                                                                         v__354
                                                                                         (( 6 : int):ii)
                                                                                         (( 0 : int):ii)
                                                                                        :  7 words$word)) = (0b1010011w :  7 words$word)))))))))))) (\ (w__84 :
                                                                 bool) . 
                                                               if w__84 then sail2_state_monad$returnS T
                                                               else sail2_state_monad$bindS
                                                                 (sail2_state$and_boolS ((is_RV32F_or_RV64F () ))
                                                                   (sail2_state_monad$returnS ((((((((subrange_vec_dec
                                                                                       v__354
                                                                                       (( 31 : int):ii)
                                                                                       (( 25 : int):ii)
                                                                                      :  7 words$word)) = (0b0010000w :  7 words$word)))) /\ ((((((((subrange_vec_dec
                                                                                           v__354
                                                                                           (( 14 : int):ii)
                                                                                           (( 12 : int):ii)
                                                                                          :  3 words$word)) = (0b001w :  3 words$word)))) /\ (((((subrange_vec_dec
                                                                                           v__354
                                                                                           (( 6 : int):ii)
                                                                                           (( 0 : int):ii)
                                                                                          :  7 words$word)) = (0b1010011w :  7 words$word)))))))))))) (\ (w__86 :
                                                                   bool) . 
                                                                 if w__86 then sail2_state_monad$returnS T
                                                                 else sail2_state_monad$bindS
                                                                   (sail2_state$and_boolS
                                                                     ((is_RV32F_or_RV64F () ))
                                                                     (sail2_state_monad$returnS ((((((((subrange_vec_dec
                                                                                         v__354
                                                                                         (( 31 : int):ii)
                                                                                         (( 25 : int):ii)
                                                                                        :  7 words$word)) = (0b0010000w :  7 words$word)))) /\ ((((((((subrange_vec_dec
                                                                                             v__354
                                                                                             (( 14 : int):ii)
                                                                                             (( 12 : int):ii)
                                                                                            :  3 words$word)) = (0b010w :  3 words$word)))) /\ (((((subrange_vec_dec
                                                                                             v__354
                                                                                             (( 6 : int):ii)
                                                                                             (( 0 : int):ii)
                                                                                            :  7 words$word)) = (0b1010011w :  7 words$word)))))))))))) (\ (w__88 :
                                                                     bool) . 
                                                                   if w__88 then sail2_state_monad$returnS T
                                                                   else sail2_state_monad$bindS
                                                                     (sail2_state$and_boolS
                                                                       ((is_RV32F_or_RV64F () ))
                                                                       (sail2_state_monad$returnS ((((((((subrange_vec_dec
                                                                                           v__354
                                                                                           (( 31 : int):ii)
                                                                                           (( 25 : int):ii)
                                                                                          :  7 words$word)) = (0b0010100w :  7 words$word)))) /\ ((((((((subrange_vec_dec
                                                                                               v__354
                                                                                               (( 14 : int):ii)
                                                                                               (( 12 : int):ii)
                                                                                              :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec
                                                                                               v__354
                                                                                               (( 6 : int):ii)
                                                                                               (( 0 : int):ii)
                                                                                              :  7 words$word)) = (0b1010011w :  7 words$word)))))))))))) (\ (w__90 :
                                                                       bool) . 
                                                                     if w__90 then sail2_state_monad$returnS T
                                                                     else sail2_state_monad$bindS
                                                                       (sail2_state$and_boolS
                                                                         ((is_RV32F_or_RV64F () ))
                                                                         (sail2_state_monad$returnS ((((((((subrange_vec_dec
                                                                                             v__354
                                                                                             (( 31 : int):ii)
                                                                                             (( 25 : int):ii)
                                                                                            :  7 words$word)) = (0b0010100w :  7 words$word)))) /\ ((((((((subrange_vec_dec
                                                                                                 v__354
                                                                                                 (( 14 : int):ii)
                                                                                                 (( 12 : int):ii)
                                                                                                :  3 words$word)) = (0b001w :  3 words$word)))) /\ (((((subrange_vec_dec
                                                                                                 v__354
                                                                                                 (( 6 : int):ii)
                                                                                                 (( 0 : int):ii)
                                                                                                :  7 words$word)) = (0b1010011w :  7 words$word)))))))))))) (\ (w__92 :
                                                                         bool) . 
                                                                       if w__92 then sail2_state_monad$returnS T
                                                                       else sail2_state_monad$bindS
                                                                         (sail2_state$and_boolS
                                                                           ((is_RV32F_or_RV64F () ))
                                                                           (sail2_state_monad$returnS ((((((((subrange_vec_dec
                                                                                               v__354
                                                                                               (( 31 : int):ii)
                                                                                               (( 25 : int):ii)
                                                                                              :  7 words$word)) = (0b1010000w :  7 words$word)))) /\ ((((((((subrange_vec_dec
                                                                                                   v__354
                                                                                                   (( 14 : int):ii)
                                                                                                   (( 12 : int):ii)
                                                                                                  :  3 words$word)) = (0b010w :  3 words$word)))) /\ (((((subrange_vec_dec
                                                                                                   v__354
                                                                                                   (( 6 : int):ii)
                                                                                                   (( 0 : int):ii)
                                                                                                  :  7 words$word)) = (0b1010011w :  7 words$word)))))))))))) (\ (w__94 :
                                                                           bool) . 
                                                                         if w__94 then sail2_state_monad$returnS T
                                                                         else sail2_state_monad$bindS
                                                                           (sail2_state$and_boolS
                                                                             ((is_RV32F_or_RV64F () ))
                                                                             (sail2_state_monad$returnS ((((((((subrange_vec_dec
                                                                                                 v__354
                                                                                                 (( 31 : int):ii)
                                                                                                 (( 25 : int):ii)
                                                                                                :  7 words$word)) = (0b1010000w :  7 words$word)))) /\ ((((((((subrange_vec_dec
                                                                                                     v__354
                                                                                                     (( 14 : int):ii)
                                                                                                     (( 12 : int):ii)
                                                                                                    :  3 words$word)) = (0b001w :  3 words$word)))) /\ (((((subrange_vec_dec
                                                                                                     v__354
                                                                                                     (( 6 : int):ii)
                                                                                                     (( 0 : int):ii)
                                                                                                    :  7 words$word)) = (0b1010011w :  7 words$word)))))))))))) (\ (w__96 :
                                                                             bool) . 
                                                                           if w__96 then sail2_state_monad$returnS T
                                                                           else sail2_state_monad$bindS
                                                                             (sail2_state$and_boolS
                                                                               ((is_RV32F_or_RV64F
                                                                                   () ))
                                                                               (sail2_state_monad$returnS ((((((((subrange_vec_dec
                                                                                                   v__354
                                                                                                   (( 31 : int):ii)
                                                                                                   (( 25 : int):ii)
                                                                                                  :  7 words$word)) = (0b1010000w :  7 words$word)))) /\ ((((((((subrange_vec_dec
                                                                                                       v__354
                                                                                                       (( 14 : int):ii)
                                                                                                       (( 12 : int):ii)
                                                                                                      :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec
                                                                                                       v__354
                                                                                                       (( 6 : int):ii)
                                                                                                       (( 0 : int):ii)
                                                                                                      :  7 words$word)) = (0b1010011w :  7 words$word)))))))))))) (\ (w__98 :
                                                                               bool) . 
                                                                             if w__98 then
                                                                               sail2_state_monad$returnS T
                                                                             else sail2_state_monad$bindS
                                                                               (sail2_state$and_boolS
                                                                                 ((haveFExt () ))
                                                                                 (sail2_state_monad$returnS ((((((((subrange_vec_dec
                                                                                                     v__354
                                                                                                     (( 31 : int):ii)
                                                                                                     (( 20 : int):ii)
                                                                                                    :  12 words$word)) = (0xE00w :  12 words$word)))) /\ ((((((((subrange_vec_dec
                                                                                                         v__354
                                                                                                         (( 14 : int):ii)
                                                                                                         (( 12 : int):ii)
                                                                                                        :  3 words$word)) = (0b001w :  3 words$word)))) /\ (((((subrange_vec_dec
                                                                                                         v__354
                                                                                                         (( 6 : int):ii)
                                                                                                         (( 0 : int):ii)
                                                                                                        :  7 words$word)) = (0b1010011w :  7 words$word)))))))))))) (\ (w__100 :
                                                                                 bool) . 
                                                                               if w__100 then
                                                                                 sail2_state_monad$returnS T
                                                                               else sail2_state_monad$bindS
                                                                                 (sail2_state$and_boolS
                                                                                   ((haveFExt () ))
                                                                                   (sail2_state_monad$returnS ((((((((subrange_vec_dec
                                                                                                       v__354
                                                                                                       (( 31 : int):ii)
                                                                                                       (( 20 : int):ii)
                                                                                                      :  12 words$word)) = (0xE00w :  12 words$word)))) /\ ((((((((subrange_vec_dec
                                                                                                           v__354
                                                                                                           (( 14 : int):ii)
                                                                                                           (( 12 : int):ii)
                                                                                                          :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec
                                                                                                           v__354
                                                                                                           (( 6 : int):ii)
                                                                                                           (( 0 : int):ii)
                                                                                                          :  7 words$word)) = (0b1010011w :  7 words$word)))))))))))) (\ (w__102 :
                                                                                   bool) . 
                                                                                 if w__102 then
                                                                                   sail2_state_monad$returnS T
                                                                                 else sail2_state_monad$bindS
                                                                                   (sail2_state$and_boolS
                                                                                     ((haveFExt () ))
                                                                                     (sail2_state_monad$returnS ((((((((subrange_vec_dec
                                                                                                         v__354
                                                                                                         (( 31 : int):ii)
                                                                                                         (( 20 : int):ii)
                                                                                                        :  12 words$word)) = (0xF00w :  12 words$word)))) /\ ((((((((subrange_vec_dec
                                                                                                             v__354
                                                                                                             (( 14 : int):ii)
                                                                                                             (( 12 : int):ii)
                                                                                                            :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec
                                                                                                             v__354
                                                                                                             (( 6 : int):ii)
                                                                                                             (( 0 : int):ii)
                                                                                                            :  7 words$word)) = (0b1010011w :  7 words$word)))))))))))) (\ (w__104 :
                                                                                     bool) . 
                                                                                   sail2_state_monad$returnS (if w__104
                                                                                           then
                                                                                             T
                                                                                           else T)))))))))))))))))))))))))))))))))))))))))))`;


val _ = Define `
 ((encdec_compressed_forwards:ast ->(regstate)sail2_state_monad$sequential_state ->((((16)words$word),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    ((case arg_ of
     C_NOP (() ) =>
      sail2_state_monad$returnS ((concat_vec (0b000w :  3 words$word)
                 ((concat_vec (0b0w :  1 words$word)
                     ((concat_vec (0b00000w :  5 words$word)
                         ((concat_vec (0b00000w :  5 words$word) (0b01w :  2 words$word)  :  7 words$word))
                        :  12 words$word))
                    :  13 words$word))
                :  16 words$word))
   | C_ADDI4SPN ((rd, v__692)) =>
      if (let (nz96 : 4 bits) = ((subrange_vec_dec v__692 (( 7 : int):ii) (( 4 : int):ii)  :  4 words$word)) in
        let (nz96 : 4 bits) = ((subrange_vec_dec v__692 (( 7 : int):ii) (( 4 : int):ii)  :  4 words$word)) in
        let (nz54 : 2 bits) = ((subrange_vec_dec v__692 (( 3 : int):ii) (( 2 : int):ii)  :  2 words$word)) in
        let (nz3 : 1 bits) = ((subrange_vec_dec v__692 (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)) in
        let (nz2 : 1 bits) = ((subrange_vec_dec v__692 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)) in
        (((concat_vec nz96 ((concat_vec nz54 ((concat_vec nz3 nz2  :  2 words$word))  :  4 words$word))
             :  8 words$word)) <> (0x00w :  8 words$word))) then
        let (nz96 : 4 bits) = ((subrange_vec_dec v__692 (( 7 : int):ii) (( 4 : int):ii)  :  4 words$word)) in
        let (nz96 : 4 bits) = ((subrange_vec_dec v__692 (( 7 : int):ii) (( 4 : int):ii)  :  4 words$word)) in
        let (nz54 : 2 bits) = ((subrange_vec_dec v__692 (( 3 : int):ii) (( 2 : int):ii)  :  2 words$word)) in
        let (nz3 : 1 bits) = ((subrange_vec_dec v__692 (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)) in
        let (nz2 : 1 bits) = ((subrange_vec_dec v__692 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)) in
        sail2_state_monad$returnS ((concat_vec (0b000w :  3 words$word)
                   ((concat_vec nz54
                       ((concat_vec nz96
                           ((concat_vec nz2
                               ((concat_vec nz3 ((concat_vec rd (0b00w :  2 words$word)  :  5 words$word))
                                  :  6 words$word))
                              :  7 words$word))
                          :  11 words$word))
                      :  13 words$word))
                  :  16 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | C_LW ((v__693, rs1, rd)) =>
      let (ui6 : 1 bits) = ((subrange_vec_dec v__693 (( 4 : int):ii) (( 4 : int):ii)  :  1 words$word)) in
      let (ui6 : 1 bits) = ((subrange_vec_dec v__693 (( 4 : int):ii) (( 4 : int):ii)  :  1 words$word)) in
      let (ui53 : 3 bits) = ((subrange_vec_dec v__693 (( 3 : int):ii) (( 1 : int):ii)  :  3 words$word)) in
      let (ui2 : 1 bits) = ((subrange_vec_dec v__693 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)) in
      sail2_state_monad$returnS ((concat_vec (0b010w :  3 words$word)
                 ((concat_vec ui53
                     ((concat_vec rs1
                         ((concat_vec ui2
                             ((concat_vec ui6 ((concat_vec rd (0b00w :  2 words$word)  :  5 words$word))
                                :  6 words$word))
                            :  7 words$word))
                        :  10 words$word))
                    :  13 words$word))
                :  16 words$word))
   | C_LD ((v__694, rs1, rd)) =>
      if ((((( 32 : int):ii) = (( 64 : int):ii)))) then
        let (ui76 : 2 bits) = ((subrange_vec_dec v__694 (( 4 : int):ii) (( 3 : int):ii)  :  2 words$word)) in
        let (ui76 : 2 bits) = ((subrange_vec_dec v__694 (( 4 : int):ii) (( 3 : int):ii)  :  2 words$word)) in
        let (ui53 : 3 bits) = ((subrange_vec_dec v__694 (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) in
        sail2_state_monad$returnS ((concat_vec (0b011w :  3 words$word)
                   ((concat_vec ui53
                       ((concat_vec rs1
                           ((concat_vec ui76 ((concat_vec rd (0b00w :  2 words$word)  :  5 words$word))
                              :  7 words$word))
                          :  10 words$word))
                      :  13 words$word))
                  :  16 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | C_SW ((v__695, rs1, rs2)) =>
      let (ui6 : 1 bits) = ((subrange_vec_dec v__695 (( 4 : int):ii) (( 4 : int):ii)  :  1 words$word)) in
      let (ui6 : 1 bits) = ((subrange_vec_dec v__695 (( 4 : int):ii) (( 4 : int):ii)  :  1 words$word)) in
      let (ui53 : 3 bits) = ((subrange_vec_dec v__695 (( 3 : int):ii) (( 1 : int):ii)  :  3 words$word)) in
      let (ui2 : 1 bits) = ((subrange_vec_dec v__695 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)) in
      sail2_state_monad$returnS ((concat_vec (0b110w :  3 words$word)
                 ((concat_vec ui53
                     ((concat_vec rs1
                         ((concat_vec ui2
                             ((concat_vec ui6 ((concat_vec rs2 (0b00w :  2 words$word)  :  5 words$word))
                                :  6 words$word))
                            :  7 words$word))
                        :  10 words$word))
                    :  13 words$word))
                :  16 words$word))
   | C_SD ((v__696, rs1, rs2)) =>
      if ((((( 32 : int):ii) = (( 64 : int):ii)))) then
        let (ui76 : 2 bits) = ((subrange_vec_dec v__696 (( 4 : int):ii) (( 3 : int):ii)  :  2 words$word)) in
        let (ui76 : 2 bits) = ((subrange_vec_dec v__696 (( 4 : int):ii) (( 3 : int):ii)  :  2 words$word)) in
        let (ui53 : 3 bits) = ((subrange_vec_dec v__696 (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) in
        sail2_state_monad$returnS ((concat_vec (0b111w :  3 words$word)
                   ((concat_vec ui53
                       ((concat_vec rs1
                           ((concat_vec ui76 ((concat_vec rs2 (0b00w :  2 words$word)  :  5 words$word))
                              :  7 words$word))
                          :  10 words$word))
                      :  13 words$word))
                  :  16 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | C_ADDI ((v__697, rsd)) =>
      if (let (nzi5 : 1 bits) = ((subrange_vec_dec v__697 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (nzi5 : 1 bits) = ((subrange_vec_dec v__697 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (nzi40 : 5 bits) = ((subrange_vec_dec v__697 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
        ((((((concat_vec nzi5 nzi40  :  6 words$word)) <> (0b000000w :  6 words$word)))) /\ (((rsd <> zreg))))) then
        let (nzi5 : 1 bits) = ((subrange_vec_dec v__697 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (nzi5 : 1 bits) = ((subrange_vec_dec v__697 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (nzi40 : 5 bits) = ((subrange_vec_dec v__697 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
        sail2_state_monad$returnS ((concat_vec (0b000w :  3 words$word)
                   ((concat_vec nzi5
                       ((concat_vec rsd ((concat_vec nzi40 (0b01w :  2 words$word)  :  7 words$word))
                          :  12 words$word))
                      :  13 words$word))
                  :  16 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | C_JAL (v__698) =>
      if ((((( 32 : int):ii) = (( 32 : int):ii)))) then
        let (i11 : 1 bits) = ((subrange_vec_dec v__698 (( 10 : int):ii) (( 10 : int):ii)  :  1 words$word)) in
        let (i98 : 2 bits) = ((subrange_vec_dec v__698 (( 8 : int):ii) (( 7 : int):ii)  :  2 words$word)) in
        let (i7 : 1 bits) = ((subrange_vec_dec v__698 (( 6 : int):ii) (( 6 : int):ii)  :  1 words$word)) in
        let (i6 : 1 bits) = ((subrange_vec_dec v__698 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (i5 : 1 bits) = ((subrange_vec_dec v__698 (( 4 : int):ii) (( 4 : int):ii)  :  1 words$word)) in
        let (i4 : 1 bits) = ((subrange_vec_dec v__698 (( 3 : int):ii) (( 3 : int):ii)  :  1 words$word)) in
        let (i31 : 3 bits) = ((subrange_vec_dec v__698 (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) in
        let (i11 : 1 bits) = ((subrange_vec_dec v__698 (( 10 : int):ii) (( 10 : int):ii)  :  1 words$word)) in
        let (i10 : 1 bits) = ((subrange_vec_dec v__698 (( 9 : int):ii) (( 9 : int):ii)  :  1 words$word)) in
        sail2_state_monad$returnS ((concat_vec (0b001w :  3 words$word)
                   ((concat_vec i11
                       ((concat_vec i4
                           ((concat_vec i98
                               ((concat_vec i10
                                   ((concat_vec i6
                                       ((concat_vec i7
                                           ((concat_vec i31
                                               ((concat_vec i5 (0b01w :  2 words$word)  :  3 words$word))
                                              :  6 words$word))
                                          :  7 words$word))
                                      :  8 words$word))
                                  :  9 words$word))
                              :  11 words$word))
                          :  12 words$word))
                      :  13 words$word))
                  :  16 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | C_ADDIW ((v__699, rsd)) =>
      if ((((((rsd <> zreg))) /\ ((((( 32 : int):ii) = (( 64 : int):ii))))))) then
        let (imm5 : 1 bits) = ((subrange_vec_dec v__699 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (imm5 : 1 bits) = ((subrange_vec_dec v__699 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (imm40 : 5 bits) = ((subrange_vec_dec v__699 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
        sail2_state_monad$returnS ((concat_vec (0b001w :  3 words$word)
                   ((concat_vec imm5
                       ((concat_vec rsd ((concat_vec imm40 (0b01w :  2 words$word)  :  7 words$word))
                          :  12 words$word))
                      :  13 words$word))
                  :  16 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | C_LI ((v__700, rd)) =>
      if (((rd <> zreg))) then
        let (imm5 : 1 bits) = ((subrange_vec_dec v__700 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (imm5 : 1 bits) = ((subrange_vec_dec v__700 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (imm40 : 5 bits) = ((subrange_vec_dec v__700 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
        sail2_state_monad$returnS ((concat_vec (0b010w :  3 words$word)
                   ((concat_vec imm5
                       ((concat_vec rd ((concat_vec imm40 (0b01w :  2 words$word)  :  7 words$word))
                          :  12 words$word))
                      :  13 words$word))
                  :  16 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | C_ADDI16SP (v__701) =>
      if (let (nzi9 : 1 bits) = ((subrange_vec_dec v__701 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (nzi9 : 1 bits) = ((subrange_vec_dec v__701 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (nzi87 : 2 bits) = ((subrange_vec_dec v__701 (( 4 : int):ii) (( 3 : int):ii)  :  2 words$word)) in
        let (nzi6 : 1 bits) = ((subrange_vec_dec v__701 (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)) in
        let (nzi5 : 1 bits) = ((subrange_vec_dec v__701 (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)) in
        let (nzi4 : 1 bits) = ((subrange_vec_dec v__701 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)) in
        (((concat_vec nzi9
              ((concat_vec nzi87
                  ((concat_vec nzi6 ((concat_vec nzi5 nzi4  :  2 words$word))  :  3 words$word))
                 :  5 words$word))
             :  6 words$word)) <> (0b000000w :  6 words$word))) then
        let (nzi9 : 1 bits) = ((subrange_vec_dec v__701 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (nzi9 : 1 bits) = ((subrange_vec_dec v__701 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (nzi87 : 2 bits) = ((subrange_vec_dec v__701 (( 4 : int):ii) (( 3 : int):ii)  :  2 words$word)) in
        let (nzi6 : 1 bits) = ((subrange_vec_dec v__701 (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)) in
        let (nzi5 : 1 bits) = ((subrange_vec_dec v__701 (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)) in
        let (nzi4 : 1 bits) = ((subrange_vec_dec v__701 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)) in
        sail2_state_monad$returnS ((concat_vec (0b011w :  3 words$word)
                   ((concat_vec nzi9
                       ((concat_vec (0b00010w :  5 words$word)
                           ((concat_vec nzi4
                               ((concat_vec nzi6
                                   ((concat_vec nzi87
                                       ((concat_vec nzi5 (0b01w :  2 words$word)  :  3 words$word))
                                      :  5 words$word))
                                  :  6 words$word))
                              :  7 words$word))
                          :  12 words$word))
                      :  13 words$word))
                  :  16 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | C_LUI ((v__702, rd)) =>
      if (let (imm17 : 1 bits) = ((subrange_vec_dec v__702 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (imm17 : 1 bits) = ((subrange_vec_dec v__702 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (imm1612 : 5 bits) = ((subrange_vec_dec v__702 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
        ((((rd <> zreg))) /\ ((((((rd <> sp))) /\ (((((concat_vec imm17 imm1612  :  6 words$word)) <> (0b000000w :  6 words$word))))))))) then
        let (imm17 : 1 bits) = ((subrange_vec_dec v__702 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (imm17 : 1 bits) = ((subrange_vec_dec v__702 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (imm1612 : 5 bits) = ((subrange_vec_dec v__702 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
        sail2_state_monad$returnS ((concat_vec (0b011w :  3 words$word)
                   ((concat_vec imm17
                       ((concat_vec rd ((concat_vec imm1612 (0b01w :  2 words$word)  :  7 words$word))
                          :  12 words$word))
                      :  13 words$word))
                  :  16 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | C_SRLI ((v__703, rsd)) =>
      if (let (nzui5 : 1 bits) = ((subrange_vec_dec v__703 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (nzui5 : 1 bits) = ((subrange_vec_dec v__703 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (nzui40 : 5 bits) = ((subrange_vec_dec v__703 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
        (((concat_vec nzui5 nzui40  :  6 words$word)) <> (0b000000w :  6 words$word))) then
        let (nzui5 : 1 bits) = ((subrange_vec_dec v__703 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (nzui5 : 1 bits) = ((subrange_vec_dec v__703 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (nzui40 : 5 bits) = ((subrange_vec_dec v__703 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
        sail2_state_monad$returnS ((concat_vec (0b100w :  3 words$word)
                   ((concat_vec nzui5
                       ((concat_vec (0b00w :  2 words$word)
                           ((concat_vec rsd ((concat_vec nzui40 (0b01w :  2 words$word)  :  7 words$word))
                              :  10 words$word))
                          :  12 words$word))
                      :  13 words$word))
                  :  16 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | C_SRAI ((v__704, rsd)) =>
      if (let (nzui5 : 1 bits) = ((subrange_vec_dec v__704 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (nzui5 : 1 bits) = ((subrange_vec_dec v__704 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (nzui40 : 5 bits) = ((subrange_vec_dec v__704 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
        (((concat_vec nzui5 nzui40  :  6 words$word)) <> (0b000000w :  6 words$word))) then
        let (nzui5 : 1 bits) = ((subrange_vec_dec v__704 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (nzui5 : 1 bits) = ((subrange_vec_dec v__704 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (nzui40 : 5 bits) = ((subrange_vec_dec v__704 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
        sail2_state_monad$returnS ((concat_vec (0b100w :  3 words$word)
                   ((concat_vec nzui5
                       ((concat_vec (0b01w :  2 words$word)
                           ((concat_vec rsd ((concat_vec nzui40 (0b01w :  2 words$word)  :  7 words$word))
                              :  10 words$word))
                          :  12 words$word))
                      :  13 words$word))
                  :  16 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | C_ANDI ((v__705, rsd)) =>
      let (i5 : 1 bits) = ((subrange_vec_dec v__705 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
      let (i5 : 1 bits) = ((subrange_vec_dec v__705 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
      let (i40 : 5 bits) = ((subrange_vec_dec v__705 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
      sail2_state_monad$returnS ((concat_vec (0b100w :  3 words$word)
                 ((concat_vec i5
                     ((concat_vec (0b10w :  2 words$word)
                         ((concat_vec rsd ((concat_vec i40 (0b01w :  2 words$word)  :  7 words$word))
                            :  10 words$word))
                        :  12 words$word))
                    :  13 words$word))
                :  16 words$word))
   | C_SUB ((rsd, rs2)) =>
      sail2_state_monad$returnS ((concat_vec (0b100w :  3 words$word)
                 ((concat_vec (0b0w :  1 words$word)
                     ((concat_vec (0b11w :  2 words$word)
                         ((concat_vec rsd
                             ((concat_vec (0b00w :  2 words$word)
                                 ((concat_vec rs2 (0b01w :  2 words$word)  :  5 words$word))
                                :  7 words$word))
                            :  10 words$word))
                        :  12 words$word))
                    :  13 words$word))
                :  16 words$word))
   | C_XOR ((rsd, rs2)) =>
      sail2_state_monad$returnS ((concat_vec (0b100w :  3 words$word)
                 ((concat_vec (0b0w :  1 words$word)
                     ((concat_vec (0b11w :  2 words$word)
                         ((concat_vec rsd
                             ((concat_vec (0b01w :  2 words$word)
                                 ((concat_vec rs2 (0b01w :  2 words$word)  :  5 words$word))
                                :  7 words$word))
                            :  10 words$word))
                        :  12 words$word))
                    :  13 words$word))
                :  16 words$word))
   | C_OR ((rsd, rs2)) =>
      sail2_state_monad$returnS ((concat_vec (0b100w :  3 words$word)
                 ((concat_vec (0b0w :  1 words$word)
                     ((concat_vec (0b11w :  2 words$word)
                         ((concat_vec rsd
                             ((concat_vec (0b10w :  2 words$word)
                                 ((concat_vec rs2 (0b01w :  2 words$word)  :  5 words$word))
                                :  7 words$word))
                            :  10 words$word))
                        :  12 words$word))
                    :  13 words$word))
                :  16 words$word))
   | C_AND ((rsd, rs2)) =>
      sail2_state_monad$returnS ((concat_vec (0b100w :  3 words$word)
                 ((concat_vec (0b0w :  1 words$word)
                     ((concat_vec (0b11w :  2 words$word)
                         ((concat_vec rsd
                             ((concat_vec (0b11w :  2 words$word)
                                 ((concat_vec rs2 (0b01w :  2 words$word)  :  5 words$word))
                                :  7 words$word))
                            :  10 words$word))
                        :  12 words$word))
                    :  13 words$word))
                :  16 words$word))
   | C_SUBW ((rsd, rs2)) =>
      if ((((( 32 : int):ii) = (( 64 : int):ii)))) then
        sail2_state_monad$returnS ((concat_vec (0b100w :  3 words$word)
                   ((concat_vec (0b1w :  1 words$word)
                       ((concat_vec (0b11w :  2 words$word)
                           ((concat_vec rsd
                               ((concat_vec (0b00w :  2 words$word)
                                   ((concat_vec rs2 (0b01w :  2 words$word)  :  5 words$word))
                                  :  7 words$word))
                              :  10 words$word))
                          :  12 words$word))
                      :  13 words$word))
                  :  16 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | C_ADDW ((rsd, rs2)) =>
      if ((((( 32 : int):ii) = (( 64 : int):ii)))) then
        sail2_state_monad$returnS ((concat_vec (0b100w :  3 words$word)
                   ((concat_vec (0b1w :  1 words$word)
                       ((concat_vec (0b11w :  2 words$word)
                           ((concat_vec rsd
                               ((concat_vec (0b01w :  2 words$word)
                                   ((concat_vec rs2 (0b01w :  2 words$word)  :  5 words$word))
                                  :  7 words$word))
                              :  10 words$word))
                          :  12 words$word))
                      :  13 words$word))
                  :  16 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | C_J (v__706) =>
      let (i11 : 1 bits) = ((subrange_vec_dec v__706 (( 10 : int):ii) (( 10 : int):ii)  :  1 words$word)) in
      let (i98 : 2 bits) = ((subrange_vec_dec v__706 (( 8 : int):ii) (( 7 : int):ii)  :  2 words$word)) in
      let (i7 : 1 bits) = ((subrange_vec_dec v__706 (( 6 : int):ii) (( 6 : int):ii)  :  1 words$word)) in
      let (i6 : 1 bits) = ((subrange_vec_dec v__706 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
      let (i5 : 1 bits) = ((subrange_vec_dec v__706 (( 4 : int):ii) (( 4 : int):ii)  :  1 words$word)) in
      let (i4 : 1 bits) = ((subrange_vec_dec v__706 (( 3 : int):ii) (( 3 : int):ii)  :  1 words$word)) in
      let (i31 : 3 bits) = ((subrange_vec_dec v__706 (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) in
      let (i11 : 1 bits) = ((subrange_vec_dec v__706 (( 10 : int):ii) (( 10 : int):ii)  :  1 words$word)) in
      let (i10 : 1 bits) = ((subrange_vec_dec v__706 (( 9 : int):ii) (( 9 : int):ii)  :  1 words$word)) in
      sail2_state_monad$returnS ((concat_vec (0b101w :  3 words$word)
                 ((concat_vec i11
                     ((concat_vec i4
                         ((concat_vec i98
                             ((concat_vec i10
                                 ((concat_vec i6
                                     ((concat_vec i7
                                         ((concat_vec i31
                                             ((concat_vec i5 (0b01w :  2 words$word)  :  3 words$word))
                                            :  6 words$word))
                                        :  7 words$word))
                                    :  8 words$word))
                                :  9 words$word))
                            :  11 words$word))
                        :  12 words$word))
                    :  13 words$word))
                :  16 words$word))
   | C_BEQZ ((v__707, rs)) =>
      let (i8 : 1 bits) = ((subrange_vec_dec v__707 (( 7 : int):ii) (( 7 : int):ii)  :  1 words$word)) in
      let (i8 : 1 bits) = ((subrange_vec_dec v__707 (( 7 : int):ii) (( 7 : int):ii)  :  1 words$word)) in
      let (i76 : 2 bits) = ((subrange_vec_dec v__707 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) in
      let (i5 : 1 bits) = ((subrange_vec_dec v__707 (( 4 : int):ii) (( 4 : int):ii)  :  1 words$word)) in
      let (i43 : 2 bits) = ((subrange_vec_dec v__707 (( 3 : int):ii) (( 2 : int):ii)  :  2 words$word)) in
      let (i21 : 2 bits) = ((subrange_vec_dec v__707 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) in
      sail2_state_monad$returnS ((concat_vec (0b110w :  3 words$word)
                 ((concat_vec i8
                     ((concat_vec i43
                         ((concat_vec rs
                             ((concat_vec i76
                                 ((concat_vec i21 ((concat_vec i5 (0b01w :  2 words$word)  :  3 words$word))
                                    :  5 words$word))
                                :  7 words$word))
                            :  10 words$word))
                        :  12 words$word))
                    :  13 words$word))
                :  16 words$word))
   | C_BNEZ ((v__708, rs)) =>
      let (i8 : 1 bits) = ((subrange_vec_dec v__708 (( 7 : int):ii) (( 7 : int):ii)  :  1 words$word)) in
      let (i8 : 1 bits) = ((subrange_vec_dec v__708 (( 7 : int):ii) (( 7 : int):ii)  :  1 words$word)) in
      let (i76 : 2 bits) = ((subrange_vec_dec v__708 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) in
      let (i5 : 1 bits) = ((subrange_vec_dec v__708 (( 4 : int):ii) (( 4 : int):ii)  :  1 words$word)) in
      let (i43 : 2 bits) = ((subrange_vec_dec v__708 (( 3 : int):ii) (( 2 : int):ii)  :  2 words$word)) in
      let (i21 : 2 bits) = ((subrange_vec_dec v__708 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) in
      sail2_state_monad$returnS ((concat_vec (0b111w :  3 words$word)
                 ((concat_vec i8
                     ((concat_vec i43
                         ((concat_vec rs
                             ((concat_vec i76
                                 ((concat_vec i21 ((concat_vec i5 (0b01w :  2 words$word)  :  3 words$word))
                                    :  5 words$word))
                                :  7 words$word))
                            :  10 words$word))
                        :  12 words$word))
                    :  13 words$word))
                :  16 words$word))
   | C_SLLI ((v__709, rsd)) =>
      if (let (nzui5 : 1 bits) = ((subrange_vec_dec v__709 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (nzui5 : 1 bits) = ((subrange_vec_dec v__709 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (nzui40 : 5 bits) = ((subrange_vec_dec v__709 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
        ((((((concat_vec nzui5 nzui40  :  6 words$word)) <> (0b000000w :  6 words$word)))) /\ ((((((rsd <> zreg))) /\ (((((((( 32 : int):ii) = (( 64 : int):ii)))) \/ (((nzui5 = (0b0w :  1 words$word)))))))))))) then
        let (nzui5 : 1 bits) = ((subrange_vec_dec v__709 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (nzui5 : 1 bits) = ((subrange_vec_dec v__709 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (nzui40 : 5 bits) = ((subrange_vec_dec v__709 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
        sail2_state_monad$returnS ((concat_vec (0b000w :  3 words$word)
                   ((concat_vec nzui5
                       ((concat_vec rsd ((concat_vec nzui40 (0b10w :  2 words$word)  :  7 words$word))
                          :  12 words$word))
                      :  13 words$word))
                  :  16 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | C_LWSP ((v__710, rd)) =>
      if (((rd <> zreg))) then
        let (ui76 : 2 bits) = ((subrange_vec_dec v__710 (( 5 : int):ii) (( 4 : int):ii)  :  2 words$word)) in
        let (ui76 : 2 bits) = ((subrange_vec_dec v__710 (( 5 : int):ii) (( 4 : int):ii)  :  2 words$word)) in
        let (ui5 : 1 bits) = ((subrange_vec_dec v__710 (( 3 : int):ii) (( 3 : int):ii)  :  1 words$word)) in
        let (ui42 : 3 bits) = ((subrange_vec_dec v__710 (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) in
        sail2_state_monad$returnS ((concat_vec (0b010w :  3 words$word)
                   ((concat_vec ui5
                       ((concat_vec rd
                           ((concat_vec ui42 ((concat_vec ui76 (0b10w :  2 words$word)  :  4 words$word))
                              :  7 words$word))
                          :  12 words$word))
                      :  13 words$word))
                  :  16 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | C_LDSP ((v__711, rd)) =>
      if ((((((rd <> zreg))) /\ ((((( 32 : int):ii) = (( 64 : int):ii))))))) then
        let (ui86 : 3 bits) = ((subrange_vec_dec v__711 (( 5 : int):ii) (( 3 : int):ii)  :  3 words$word)) in
        let (ui86 : 3 bits) = ((subrange_vec_dec v__711 (( 5 : int):ii) (( 3 : int):ii)  :  3 words$word)) in
        let (ui5 : 1 bits) = ((subrange_vec_dec v__711 (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)) in
        let (ui43 : 2 bits) = ((subrange_vec_dec v__711 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) in
        sail2_state_monad$returnS ((concat_vec (0b011w :  3 words$word)
                   ((concat_vec ui5
                       ((concat_vec rd
                           ((concat_vec ui43 ((concat_vec ui86 (0b10w :  2 words$word)  :  5 words$word))
                              :  7 words$word))
                          :  12 words$word))
                      :  13 words$word))
                  :  16 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | C_SWSP ((v__712, rs2)) =>
      let (ui76 : 2 bits) = ((subrange_vec_dec v__712 (( 5 : int):ii) (( 4 : int):ii)  :  2 words$word)) in
      let (ui76 : 2 bits) = ((subrange_vec_dec v__712 (( 5 : int):ii) (( 4 : int):ii)  :  2 words$word)) in
      let (ui52 : 4 bits) = ((subrange_vec_dec v__712 (( 3 : int):ii) (( 0 : int):ii)  :  4 words$word)) in
      sail2_state_monad$returnS ((concat_vec (0b110w :  3 words$word)
                 ((concat_vec ui52
                     ((concat_vec ui76 ((concat_vec rs2 (0b10w :  2 words$word)  :  7 words$word))
                        :  9 words$word))
                    :  13 words$word))
                :  16 words$word))
   | C_SDSP ((v__713, rs2)) =>
      if ((((( 32 : int):ii) = (( 64 : int):ii)))) then
        let (ui86 : 3 bits) = ((subrange_vec_dec v__713 (( 5 : int):ii) (( 3 : int):ii)  :  3 words$word)) in
        let (ui86 : 3 bits) = ((subrange_vec_dec v__713 (( 5 : int):ii) (( 3 : int):ii)  :  3 words$word)) in
        let (ui53 : 3 bits) = ((subrange_vec_dec v__713 (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) in
        sail2_state_monad$returnS ((concat_vec (0b111w :  3 words$word)
                   ((concat_vec ui53
                       ((concat_vec ui86 ((concat_vec rs2 (0b10w :  2 words$word)  :  7 words$word))
                          :  10 words$word))
                      :  13 words$word))
                  :  16 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | C_JR (rs1) =>
      if (((rs1 <> zreg))) then
        sail2_state_monad$returnS ((concat_vec (0b100w :  3 words$word)
                   ((concat_vec (0b0w :  1 words$word)
                       ((concat_vec rs1
                           ((concat_vec (0b00000w :  5 words$word) (0b10w :  2 words$word)  :  7 words$word))
                          :  12 words$word))
                      :  13 words$word))
                  :  16 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | C_JALR (rs1) =>
      if (((rs1 <> zreg))) then
        sail2_state_monad$returnS ((concat_vec (0b100w :  3 words$word)
                   ((concat_vec (0b1w :  1 words$word)
                       ((concat_vec rs1
                           ((concat_vec (0b00000w :  5 words$word) (0b10w :  2 words$word)  :  7 words$word))
                          :  12 words$word))
                      :  13 words$word))
                  :  16 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | C_MV ((rd, rs2)) =>
      if ((((((rd <> zreg))) /\ (((rs2 <> zreg)))))) then
        sail2_state_monad$returnS ((concat_vec (0b100w :  3 words$word)
                   ((concat_vec (0b0w :  1 words$word)
                       ((concat_vec rd ((concat_vec rs2 (0b10w :  2 words$word)  :  7 words$word))
                          :  12 words$word))
                      :  13 words$word))
                  :  16 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | C_EBREAK (() ) =>
      sail2_state_monad$returnS ((concat_vec (0b100w :  3 words$word)
                 ((concat_vec (0b1w :  1 words$word)
                     ((concat_vec (0b00000w :  5 words$word)
                         ((concat_vec (0b00000w :  5 words$word) (0b10w :  2 words$word)  :  7 words$word))
                        :  12 words$word))
                    :  13 words$word))
                :  16 words$word))
   | C_ADD ((rsd, rs2)) =>
      if ((((((rsd <> zreg))) /\ (((rs2 <> zreg)))))) then
        sail2_state_monad$returnS ((concat_vec (0b100w :  3 words$word)
                   ((concat_vec (0b1w :  1 words$word)
                       ((concat_vec rsd ((concat_vec rs2 (0b10w :  2 words$word)  :  7 words$word))
                          :  12 words$word))
                      :  13 words$word))
                  :  16 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | C_NOP_HINT (v__714) =>
      if (let (im5 : 1 bits) = ((subrange_vec_dec v__714 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (im5 : 1 bits) = ((subrange_vec_dec v__714 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (im40 : 5 bits) = ((subrange_vec_dec v__714 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
        (((concat_vec im5 im40  :  6 words$word)) <> (0b000000w :  6 words$word))) then
        let (im5 : 1 bits) = ((subrange_vec_dec v__714 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (im5 : 1 bits) = ((subrange_vec_dec v__714 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (im40 : 5 bits) = ((subrange_vec_dec v__714 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
        sail2_state_monad$returnS ((concat_vec (0b000w :  3 words$word)
                   ((concat_vec im5
                       ((concat_vec (0b00000w :  5 words$word)
                           ((concat_vec im40 (0b01w :  2 words$word)  :  7 words$word))
                          :  12 words$word))
                      :  13 words$word))
                  :  16 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | C_ADDI_HINT (rsd) =>
      if (((rsd <> zreg))) then
        sail2_state_monad$returnS ((concat_vec (0b000w :  3 words$word)
                   ((concat_vec (0b0w :  1 words$word)
                       ((concat_vec rsd
                           ((concat_vec (0b00000w :  5 words$word) (0b01w :  2 words$word)  :  7 words$word))
                          :  12 words$word))
                      :  13 words$word))
                  :  16 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | C_LI_HINT (v__715) =>
      let (imm5 : 1 bits) = ((subrange_vec_dec v__715 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
      let (imm5 : 1 bits) = ((subrange_vec_dec v__715 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
      let (imm40 : 5 bits) = ((subrange_vec_dec v__715 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
      sail2_state_monad$returnS ((concat_vec (0b010w :  3 words$word)
                 ((concat_vec imm5
                     ((concat_vec (0b00000w :  5 words$word)
                         ((concat_vec imm40 (0b01w :  2 words$word)  :  7 words$word))
                        :  12 words$word))
                    :  13 words$word))
                :  16 words$word))
   | C_LUI_HINT (v__716) =>
      if (let (imm17 : 1 bits) = ((subrange_vec_dec v__716 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (imm17 : 1 bits) = ((subrange_vec_dec v__716 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (imm1612 : 5 bits) = ((subrange_vec_dec v__716 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
        (((concat_vec imm17 imm1612  :  6 words$word)) <> (0b000000w :  6 words$word))) then
        let (imm17 : 1 bits) = ((subrange_vec_dec v__716 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (imm17 : 1 bits) = ((subrange_vec_dec v__716 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (imm1612 : 5 bits) = ((subrange_vec_dec v__716 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
        sail2_state_monad$returnS ((concat_vec (0b011w :  3 words$word)
                   ((concat_vec imm17
                       ((concat_vec (0b00000w :  5 words$word)
                           ((concat_vec imm1612 (0b01w :  2 words$word)  :  7 words$word))
                          :  12 words$word))
                      :  13 words$word))
                  :  16 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | C_MV_HINT (rs2) =>
      if (((rs2 <> zreg))) then
        sail2_state_monad$returnS ((concat_vec (0b100w :  3 words$word)
                   ((concat_vec (0b0w :  1 words$word)
                       ((concat_vec (0b00000w :  5 words$word)
                           ((concat_vec rs2 (0b10w :  2 words$word)  :  7 words$word))
                          :  12 words$word))
                      :  13 words$word))
                  :  16 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | C_ADD_HINT (rs2) =>
      if (((rs2 <> zreg))) then
        sail2_state_monad$returnS ((concat_vec (0b100w :  3 words$word)
                   ((concat_vec (0b1w :  1 words$word)
                       ((concat_vec (0b00000w :  5 words$word)
                           ((concat_vec rs2 (0b10w :  2 words$word)  :  7 words$word))
                          :  12 words$word))
                      :  13 words$word))
                  :  16 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | C_SLLI_HINT ((v__717, rsd)) =>
      if (let (nzui5 : 1 bits) = ((subrange_vec_dec v__717 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (nzui5 : 1 bits) = ((subrange_vec_dec v__717 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (nzui40 : 5 bits) = ((subrange_vec_dec v__717 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
        (((((((((concat_vec nzui5 nzui40  :  6 words$word)) = (0b000000w :  6 words$word)))) \/ (((rsd = zreg)))))) /\ (((((((( 32 : int):ii) = (( 64 : int):ii)))) \/ (((nzui5 = (0b0w :  1 words$word))))))))) then
        let (nzui5 : 1 bits) = ((subrange_vec_dec v__717 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (nzui5 : 1 bits) = ((subrange_vec_dec v__717 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
        let (nzui40 : 5 bits) = ((subrange_vec_dec v__717 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
        sail2_state_monad$returnS ((concat_vec (0b000w :  3 words$word)
                   ((concat_vec nzui5
                       ((concat_vec rsd ((concat_vec nzui40 (0b10w :  2 words$word)  :  7 words$word))
                          :  12 words$word))
                      :  13 words$word))
                  :  16 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   | C_SRLI_HINT (rsd) =>
      sail2_state_monad$returnS ((concat_vec (0b100w :  3 words$word)
                 ((concat_vec (0b0w :  1 words$word)
                     ((concat_vec (0b00w :  2 words$word)
                         ((concat_vec rsd
                             ((concat_vec (0b00000w :  5 words$word) (0b01w :  2 words$word)  :  7 words$word))
                            :  10 words$word))
                        :  12 words$word))
                    :  13 words$word))
                :  16 words$word))
   | C_SRAI_HINT (rsd) =>
      sail2_state_monad$returnS ((concat_vec (0b100w :  3 words$word)
                 ((concat_vec (0b0w :  1 words$word)
                     ((concat_vec (0b01w :  2 words$word)
                         ((concat_vec rsd
                             ((concat_vec (0b00000w :  5 words$word) (0b01w :  2 words$word)  :  7 words$word))
                            :  10 words$word))
                        :  12 words$word))
                    :  13 words$word))
                :  16 words$word))
   | C_FLWSP ((v__718, rd)) => sail2_state_monad$bindS
      (sail2_state$and_boolS (sail2_state_monad$returnS ((((( 32 : int):ii) = (( 32 : int):ii))))) (sail2_state$and_boolS ((haveRVC () )) ((haveFExt () )))) (\ (w__57 :
        bool) . 
      if w__57 then
        let (ui76 : 2 bits) = ((subrange_vec_dec v__718 (( 5 : int):ii) (( 4 : int):ii)  :  2 words$word)) in
        let (ui76 : 2 bits) = ((subrange_vec_dec v__718 (( 5 : int):ii) (( 4 : int):ii)  :  2 words$word)) in
        let (ui5 : 1 bits) = ((subrange_vec_dec v__718 (( 3 : int):ii) (( 3 : int):ii)  :  1 words$word)) in
        let (ui42 : 3 bits) = ((subrange_vec_dec v__718 (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) in
        sail2_state_monad$returnS ((concat_vec (0b011w :  3 words$word)
                   ((concat_vec ui5
                       ((concat_vec rd
                           ((concat_vec ui42 ((concat_vec ui76 (0b10w :  2 words$word)  :  4 words$word))
                              :  7 words$word))
                          :  12 words$word))
                      :  13 words$word))
                  :  16 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | C_FSWSP ((v__719, rs2)) => sail2_state_monad$bindS
      (sail2_state$and_boolS (sail2_state_monad$returnS ((((( 32 : int):ii) = (( 32 : int):ii))))) (sail2_state$and_boolS ((haveRVC () )) ((haveFExt () )))) (\ (w__63 :
        bool) . 
      if w__63 then
        let (ui76 : 2 bits) = ((subrange_vec_dec v__719 (( 5 : int):ii) (( 4 : int):ii)  :  2 words$word)) in
        let (ui76 : 2 bits) = ((subrange_vec_dec v__719 (( 5 : int):ii) (( 4 : int):ii)  :  2 words$word)) in
        let (ui52 : 4 bits) = ((subrange_vec_dec v__719 (( 3 : int):ii) (( 0 : int):ii)  :  4 words$word)) in
        sail2_state_monad$returnS ((concat_vec (0b111w :  3 words$word)
                   ((concat_vec ui52
                       ((concat_vec ui76 ((concat_vec rs2 (0b10w :  2 words$word)  :  7 words$word))
                          :  9 words$word))
                      :  13 words$word))
                  :  16 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | C_FLW ((v__720, rs1, rd)) => sail2_state_monad$bindS
      (sail2_state$and_boolS (sail2_state_monad$returnS ((((( 32 : int):ii) = (( 32 : int):ii))))) (sail2_state$and_boolS ((haveRVC () )) ((haveFExt () )))) (\ (w__69 :
        bool) . 
      if w__69 then
        let (ui6 : 1 bits) = ((subrange_vec_dec v__720 (( 4 : int):ii) (( 4 : int):ii)  :  1 words$word)) in
        let (ui6 : 1 bits) = ((subrange_vec_dec v__720 (( 4 : int):ii) (( 4 : int):ii)  :  1 words$word)) in
        let (ui53 : 3 bits) = ((subrange_vec_dec v__720 (( 3 : int):ii) (( 1 : int):ii)  :  3 words$word)) in
        let (ui2 : 1 bits) = ((subrange_vec_dec v__720 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)) in
        sail2_state_monad$returnS ((concat_vec (0b011w :  3 words$word)
                   ((concat_vec ui53
                       ((concat_vec rs1
                           ((concat_vec ui2
                               ((concat_vec ui6 ((concat_vec rd (0b00w :  2 words$word)  :  5 words$word))
                                  :  6 words$word))
                              :  7 words$word))
                          :  10 words$word))
                      :  13 words$word))
                  :  16 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | C_FSW ((v__721, rs1, rs2)) => sail2_state_monad$bindS
      (sail2_state$and_boolS (sail2_state_monad$returnS ((((( 32 : int):ii) = (( 32 : int):ii))))) (sail2_state$and_boolS ((haveRVC () )) ((haveFExt () )))) (\ (w__75 :
        bool) . 
      if w__75 then
        let (ui6 : 1 bits) = ((subrange_vec_dec v__721 (( 4 : int):ii) (( 4 : int):ii)  :  1 words$word)) in
        let (ui6 : 1 bits) = ((subrange_vec_dec v__721 (( 4 : int):ii) (( 4 : int):ii)  :  1 words$word)) in
        let (ui53 : 3 bits) = ((subrange_vec_dec v__721 (( 3 : int):ii) (( 1 : int):ii)  :  3 words$word)) in
        let (ui2 : 1 bits) = ((subrange_vec_dec v__721 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)) in
        sail2_state_monad$returnS ((concat_vec (0b111w :  3 words$word)
                   ((concat_vec ui53
                       ((concat_vec rs1
                           ((concat_vec ui2
                               ((concat_vec ui6 ((concat_vec rs2 (0b00w :  2 words$word)  :  5 words$word))
                                  :  6 words$word))
                              :  7 words$word))
                          :  10 words$word))
                      :  13 words$word))
                  :  16 words$word))
      else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () ))
   | C_ILLEGAL (s) => sail2_state_monad$returnS s
   | _ => sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )
   )))`;


val _ = Define `
 ((encdec_compressed_backwards:(16)words$word ->(regstate)sail2_state_monad$sequential_state ->(((ast),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let v__722 = arg_ in
   if (((v__722 = (0x0001w :  16 words$word)))) then sail2_state_monad$returnS (C_NOP () )
   else if ((((let (nz96 : 4 bits) = ((subrange_vec_dec v__722 (( 10 : int):ii) (( 7 : int):ii)  :  4 words$word)) in
               let (nz54 : 2 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 11 : int):ii)  :  2 words$word)) in
               let (nz3 : 1 bits) = ((subrange_vec_dec v__722 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
               let (nz2 : 1 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 6 : int):ii)  :  1 words$word)) in
               (((concat_vec nz96
                     ((concat_vec nz54 ((concat_vec nz3 nz2  :  2 words$word))  :  4 words$word))
                    :  8 words$word)) <> (0x00w :  8 words$word))) /\ ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b00w :  2 words$word)))))))))) then
     let (rd : cregidx) = ((subrange_vec_dec v__722 (( 4 : int):ii) (( 2 : int):ii)  :  3 words$word)) in
     let (nz96 : 4 bits) = ((subrange_vec_dec v__722 (( 10 : int):ii) (( 7 : int):ii)  :  4 words$word)) in
     let (nz54 : 2 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 11 : int):ii)  :  2 words$word)) in
     let (nz3 : 1 bits) = ((subrange_vec_dec v__722 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
     let (nz2 : 1 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 6 : int):ii)  :  1 words$word)) in
     sail2_state_monad$returnS (C_ADDI4SPN (rd,
                         (concat_vec nz96
                            ((concat_vec nz54 ((concat_vec nz3 nz2  :  2 words$word))  :  4 words$word))
                           :  8 words$word)))
   else if ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b010w :  3 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b00w :  2 words$word)))))))
   then
     let (ui6 : 1 bits) = ((subrange_vec_dec v__722 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
     let (ui53 : 3 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 10 : int):ii)  :  3 words$word)) in
     let (ui2 : 1 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 6 : int):ii)  :  1 words$word)) in
     let (rs1 : cregidx) = ((subrange_vec_dec v__722 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     let (rd : cregidx) = ((subrange_vec_dec v__722 (( 4 : int):ii) (( 2 : int):ii)  :  3 words$word)) in
     sail2_state_monad$returnS (C_LW ((concat_vec ui6 ((concat_vec ui53 ui2  :  4 words$word))  :  5 words$word), rs1, rd))
   else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b011w :  3 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b00w :  2 words$word)))))))))) then
     let (ui76 : 2 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) in
     let (ui53 : 3 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 10 : int):ii)  :  3 words$word)) in
     let (rs1 : cregidx) = ((subrange_vec_dec v__722 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     let (rd : cregidx) = ((subrange_vec_dec v__722 (( 4 : int):ii) (( 2 : int):ii)  :  3 words$word)) in
     sail2_state_monad$returnS (C_LD ((concat_vec ui76 ui53  :  5 words$word), rs1, rd))
   else if ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b110w :  3 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b00w :  2 words$word)))))))
   then
     let (ui6 : 1 bits) = ((subrange_vec_dec v__722 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
     let (ui53 : 3 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 10 : int):ii)  :  3 words$word)) in
     let (ui2 : 1 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 6 : int):ii)  :  1 words$word)) in
     let (rs2 : cregidx) = ((subrange_vec_dec v__722 (( 4 : int):ii) (( 2 : int):ii)  :  3 words$word)) in
     let (rs1 : cregidx) = ((subrange_vec_dec v__722 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     sail2_state_monad$returnS (C_SW ((concat_vec ui6 ((concat_vec ui53 ui2  :  4 words$word))  :  5 words$word), rs1, rs2))
   else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b111w :  3 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b00w :  2 words$word)))))))))) then
     let (ui76 : 2 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) in
     let (ui53 : 3 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 10 : int):ii)  :  3 words$word)) in
     let (rs2 : 3 bits) = ((subrange_vec_dec v__722 (( 4 : int):ii) (( 2 : int):ii)  :  3 words$word)) in
     let (rs1 : 3 bits) = ((subrange_vec_dec v__722 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     sail2_state_monad$returnS (C_SD ((concat_vec ui76 ui53  :  5 words$word), rs1, rs2))
   else if ((((let (rsd : regidx) = ((subrange_vec_dec v__722 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
               let (nzi5 : 1 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
               let (nzi40 : 5 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
               ((((((concat_vec nzi5 nzi40  :  6 words$word)) <> (0b000000w :  6 words$word)))) /\ (((rsd <> zreg))))) /\ ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))))))))) then
     let (rsd : regidx) = ((subrange_vec_dec v__722 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let (nzi5 : 1 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (nzi40 : 5 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (C_ADDI ((concat_vec nzi5 nzi40  :  6 words$word), rsd))
   else if (((((((( 32 : int):ii) = (( 32 : int):ii)))) /\ ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b001w :  3 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))))))))) then
     let (i98 : 2 bits) = ((subrange_vec_dec v__722 (( 10 : int):ii) (( 9 : int):ii)  :  2 words$word)) in
     let (i7 : 1 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 6 : int):ii)  :  1 words$word)) in
     let (i6 : 1 bits) = ((subrange_vec_dec v__722 (( 7 : int):ii) (( 7 : int):ii)  :  1 words$word)) in
     let (i5 : 1 bits) = ((subrange_vec_dec v__722 (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)) in
     let (i4 : 1 bits) = ((subrange_vec_dec v__722 (( 11 : int):ii) (( 11 : int):ii)  :  1 words$word)) in
     let (i31 : 3 bits) = ((subrange_vec_dec v__722 (( 5 : int):ii) (( 3 : int):ii)  :  3 words$word)) in
     let (i11 : 1 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (i10 : 1 bits) = ((subrange_vec_dec v__722 (( 8 : int):ii) (( 8 : int):ii)  :  1 words$word)) in
     sail2_state_monad$returnS (C_JAL ((concat_vec i11
                       ((concat_vec i10
                           ((concat_vec i98
                               ((concat_vec i7
                                   ((concat_vec i6
                                       ((concat_vec i5 ((concat_vec i4 i31  :  4 words$word))
                                          :  5 words$word))
                                      :  6 words$word))
                                  :  7 words$word))
                              :  9 words$word))
                          :  10 words$word))
                      :  11 words$word)))
   else if ((((let (rsd : regidx) = ((subrange_vec_dec v__722 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
               ((((rsd <> zreg))) /\ ((((( 32 : int):ii) = (( 64 : int):ii)))))) /\ ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b001w :  3 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))))))))) then
     let (rsd : regidx) = ((subrange_vec_dec v__722 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let (imm5 : 1 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (imm40 : 5 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (C_ADDIW ((concat_vec imm5 imm40  :  6 words$word), rsd))
   else if ((((let (rd : regidx) = ((subrange_vec_dec v__722 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
               (rd <> zreg)) /\ ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b010w :  3 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))))))))) then
     let (rd : regidx) = ((subrange_vec_dec v__722 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let (imm5 : 1 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (imm40 : 5 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (C_LI ((concat_vec imm5 imm40  :  6 words$word), rd))
   else if ((((let (nzi9 : 1 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
               let (nzi87 : 2 bits) = ((subrange_vec_dec v__722 (( 4 : int):ii) (( 3 : int):ii)  :  2 words$word)) in
               let (nzi6 : 1 bits) = ((subrange_vec_dec v__722 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
               let (nzi5 : 1 bits) = ((subrange_vec_dec v__722 (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)) in
               let (nzi4 : 1 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 6 : int):ii)  :  1 words$word)) in
               (((concat_vec nzi9
                     ((concat_vec nzi87
                         ((concat_vec nzi6 ((concat_vec nzi5 nzi4  :  2 words$word))  :  3 words$word))
                        :  5 words$word))
                    :  6 words$word)) <> (0b000000w :  6 words$word))) /\ ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b011w :  3 words$word)))) /\ ((((((((subrange_vec_dec v__722 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) = (0b00010w :  5 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word))))))))))))) then
     let (nzi9 : 1 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (nzi87 : 2 bits) = ((subrange_vec_dec v__722 (( 4 : int):ii) (( 3 : int):ii)  :  2 words$word)) in
     let (nzi6 : 1 bits) = ((subrange_vec_dec v__722 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
     let (nzi5 : 1 bits) = ((subrange_vec_dec v__722 (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)) in
     let (nzi4 : 1 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 6 : int):ii)  :  1 words$word)) in
     sail2_state_monad$returnS (C_ADDI16SP ((concat_vec nzi9
                            ((concat_vec nzi87
                                ((concat_vec nzi6 ((concat_vec nzi5 nzi4  :  2 words$word))  :  3 words$word))
                               :  5 words$word))
                           :  6 words$word)))
   else if ((((let (rd : regidx) = ((subrange_vec_dec v__722 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
               let (imm17 : 1 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
               let (imm1612 : 5 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
               ((((rd <> zreg))) /\ ((((((rd <> sp))) /\ (((((concat_vec imm17 imm1612  :  6 words$word)) <> (0b000000w :  6 words$word))))))))) /\ ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b011w :  3 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))))))))) then
     let (rd : regidx) = ((subrange_vec_dec v__722 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let (imm17 : 1 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (imm1612 : 5 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (C_LUI ((concat_vec imm17 imm1612  :  6 words$word), rd))
   else if ((((let (nzui5 : 1 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
               let (nzui40 : 5 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
               (((concat_vec nzui5 nzui40  :  6 words$word)) <> (0b000000w :  6 words$word))) /\ ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b100w :  3 words$word)))) /\ ((((((((subrange_vec_dec v__722 (( 11 : int):ii) (( 10 : int):ii)  :  2 words$word)) = (0b00w :  2 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word))))))))))))) then
     let (rsd : cregidx) = ((subrange_vec_dec v__722 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     let (nzui5 : 1 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (nzui40 : 5 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (C_SRLI ((concat_vec nzui5 nzui40  :  6 words$word), rsd))
   else if ((((let (nzui5 : 1 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
               let (nzui40 : 5 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
               (((concat_vec nzui5 nzui40  :  6 words$word)) <> (0b000000w :  6 words$word))) /\ ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b100w :  3 words$word)))) /\ ((((((((subrange_vec_dec v__722 (( 11 : int):ii) (( 10 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word))))))))))))) then
     let (rsd : cregidx) = ((subrange_vec_dec v__722 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     let (nzui5 : 1 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (nzui40 : 5 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (C_SRAI ((concat_vec nzui5 nzui40  :  6 words$word), rsd))
   else if ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b100w :  3 words$word)))) /\ ((((((((subrange_vec_dec v__722 (( 11 : int):ii) (( 10 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))))))))) then
     let (rsd : cregidx) = ((subrange_vec_dec v__722 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     let (i5 : 1 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (i40 : 5 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (C_ANDI ((concat_vec i5 i40  :  6 words$word), rsd))
   else if ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 10 : int):ii)  :  6 words$word)) = (0b100011w :  6 words$word)))) /\ ((((((((subrange_vec_dec v__722 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) = (0b00w :  2 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))))))))) then
     let (rsd : cregidx) = ((subrange_vec_dec v__722 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     let (rs2 : cregidx) = ((subrange_vec_dec v__722 (( 4 : int):ii) (( 2 : int):ii)  :  3 words$word)) in
     sail2_state_monad$returnS (C_SUB (rsd, rs2))
   else if ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 10 : int):ii)  :  6 words$word)) = (0b100011w :  6 words$word)))) /\ ((((((((subrange_vec_dec v__722 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))))))))) then
     let (rsd : cregidx) = ((subrange_vec_dec v__722 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     let (rs2 : cregidx) = ((subrange_vec_dec v__722 (( 4 : int):ii) (( 2 : int):ii)  :  3 words$word)) in
     sail2_state_monad$returnS (C_XOR (rsd, rs2))
   else if ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 10 : int):ii)  :  6 words$word)) = (0b100011w :  6 words$word)))) /\ ((((((((subrange_vec_dec v__722 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))))))))) then
     let (rsd : cregidx) = ((subrange_vec_dec v__722 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     let (rs2 : cregidx) = ((subrange_vec_dec v__722 (( 4 : int):ii) (( 2 : int):ii)  :  3 words$word)) in
     sail2_state_monad$returnS (C_OR (rsd, rs2))
   else if ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 10 : int):ii)  :  6 words$word)) = (0b100011w :  6 words$word)))) /\ ((((((((subrange_vec_dec v__722 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) = (0b11w :  2 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))))))))) then
     let (rsd : cregidx) = ((subrange_vec_dec v__722 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     let (rs2 : cregidx) = ((subrange_vec_dec v__722 (( 4 : int):ii) (( 2 : int):ii)  :  3 words$word)) in
     sail2_state_monad$returnS (C_AND (rsd, rs2))
   else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 10 : int):ii)  :  6 words$word)) = (0b100111w :  6 words$word)))) /\ ((((((((subrange_vec_dec v__722 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) = (0b00w :  2 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word))))))))))))) then
     let (rsd : cregidx) = ((subrange_vec_dec v__722 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     let (rs2 : cregidx) = ((subrange_vec_dec v__722 (( 4 : int):ii) (( 2 : int):ii)  :  3 words$word)) in
     sail2_state_monad$returnS (C_SUBW (rsd, rs2))
   else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 10 : int):ii)  :  6 words$word)) = (0b100111w :  6 words$word)))) /\ ((((((((subrange_vec_dec v__722 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word))))))))))))) then
     let (rsd : cregidx) = ((subrange_vec_dec v__722 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     let (rs2 : cregidx) = ((subrange_vec_dec v__722 (( 4 : int):ii) (( 2 : int):ii)  :  3 words$word)) in
     sail2_state_monad$returnS (C_ADDW (rsd, rs2))
   else if ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b101w :  3 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))))))
   then
     let (i98 : 2 bits) = ((subrange_vec_dec v__722 (( 10 : int):ii) (( 9 : int):ii)  :  2 words$word)) in
     let (i7 : 1 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 6 : int):ii)  :  1 words$word)) in
     let (i6 : 1 bits) = ((subrange_vec_dec v__722 (( 7 : int):ii) (( 7 : int):ii)  :  1 words$word)) in
     let (i5 : 1 bits) = ((subrange_vec_dec v__722 (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)) in
     let (i4 : 1 bits) = ((subrange_vec_dec v__722 (( 11 : int):ii) (( 11 : int):ii)  :  1 words$word)) in
     let (i31 : 3 bits) = ((subrange_vec_dec v__722 (( 5 : int):ii) (( 3 : int):ii)  :  3 words$word)) in
     let (i11 : 1 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (i10 : 1 bits) = ((subrange_vec_dec v__722 (( 8 : int):ii) (( 8 : int):ii)  :  1 words$word)) in
     sail2_state_monad$returnS (C_J ((concat_vec i11
                     ((concat_vec i10
                         ((concat_vec i98
                             ((concat_vec i7
                                 ((concat_vec i6
                                     ((concat_vec i5 ((concat_vec i4 i31  :  4 words$word))  :  5 words$word))
                                    :  6 words$word))
                                :  7 words$word))
                            :  9 words$word))
                        :  10 words$word))
                    :  11 words$word)))
   else if ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b110w :  3 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))))))
   then
     let (rs : cregidx) = ((subrange_vec_dec v__722 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     let (i8 : 1 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (i76 : 2 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) in
     let (i5 : 1 bits) = ((subrange_vec_dec v__722 (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)) in
     let (i43 : 2 bits) = ((subrange_vec_dec v__722 (( 11 : int):ii) (( 10 : int):ii)  :  2 words$word)) in
     let (i21 : 2 bits) = ((subrange_vec_dec v__722 (( 4 : int):ii) (( 3 : int):ii)  :  2 words$word)) in
     sail2_state_monad$returnS (C_BEQZ ((concat_vec i8
                        ((concat_vec i76
                            ((concat_vec i5 ((concat_vec i43 i21  :  4 words$word))  :  5 words$word))
                           :  7 words$word))
                       :  8 words$word),
                     rs))
   else if ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b111w :  3 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))))))
   then
     let (rs : cregidx) = ((subrange_vec_dec v__722 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     let (i8 : 1 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (i76 : 2 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) in
     let (i5 : 1 bits) = ((subrange_vec_dec v__722 (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)) in
     let (i43 : 2 bits) = ((subrange_vec_dec v__722 (( 11 : int):ii) (( 10 : int):ii)  :  2 words$word)) in
     let (i21 : 2 bits) = ((subrange_vec_dec v__722 (( 4 : int):ii) (( 3 : int):ii)  :  2 words$word)) in
     sail2_state_monad$returnS (C_BNEZ ((concat_vec i8
                        ((concat_vec i76
                            ((concat_vec i5 ((concat_vec i43 i21  :  4 words$word))  :  5 words$word))
                           :  7 words$word))
                       :  8 words$word),
                     rs))
   else if ((((let (rsd : regidx) = ((subrange_vec_dec v__722 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
               let (nzui5 : 1 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
               let (nzui40 : 5 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
               ((((((concat_vec nzui5 nzui40  :  6 words$word)) <> (0b000000w :  6 words$word)))) /\ ((((((rsd <> zreg))) /\ (((((((( 32 : int):ii) = (( 64 : int):ii)))) \/ (((nzui5 = (0b0w :  1 words$word)))))))))))) /\ ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word)))))))))) then
     let (rsd : regidx) = ((subrange_vec_dec v__722 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let (nzui5 : 1 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (nzui40 : 5 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (C_SLLI ((concat_vec nzui5 nzui40  :  6 words$word), rsd))
   else if ((((let (rd : regidx) = ((subrange_vec_dec v__722 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
               (rd <> zreg)) /\ ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b010w :  3 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word)))))))))) then
     let (ui76 : 2 bits) = ((subrange_vec_dec v__722 (( 3 : int):ii) (( 2 : int):ii)  :  2 words$word)) in
     let (ui5 : 1 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (ui42 : 3 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 4 : int):ii)  :  3 words$word)) in
     let (rd : regidx) = ((subrange_vec_dec v__722 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (C_LWSP ((concat_vec ui76 ((concat_vec ui5 ui42  :  4 words$word))  :  6 words$word), rd))
   else if ((((let (rd : regidx) = ((subrange_vec_dec v__722 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
               ((((rd <> zreg))) /\ ((((( 32 : int):ii) = (( 64 : int):ii)))))) /\ ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b011w :  3 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word)))))))))) then
     let (ui86 : 3 bits) = ((subrange_vec_dec v__722 (( 4 : int):ii) (( 2 : int):ii)  :  3 words$word)) in
     let (ui5 : 1 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (ui43 : 2 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) in
     let (rd : regidx) = ((subrange_vec_dec v__722 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (C_LDSP ((concat_vec ui86 ((concat_vec ui5 ui43  :  3 words$word))  :  6 words$word), rd))
   else if ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b110w :  3 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word)))))))
   then
     let (ui76 : 2 bits) = ((subrange_vec_dec v__722 (( 8 : int):ii) (( 7 : int):ii)  :  2 words$word)) in
     let (ui52 : 4 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 9 : int):ii)  :  4 words$word)) in
     let (rs2 : regidx) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (C_SWSP ((concat_vec ui76 ui52  :  6 words$word), rs2))
   else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b111w :  3 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word)))))))))) then
     let (ui86 : 3 bits) = ((subrange_vec_dec v__722 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     let (ui53 : 3 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 10 : int):ii)  :  3 words$word)) in
     let (rs2 : regidx) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (C_SDSP ((concat_vec ui86 ui53  :  6 words$word), rs2))
   else if ((((let (rs1 : regidx) = ((subrange_vec_dec v__722 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
               (rs1 <> zreg)) /\ ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 12 : int):ii)  :  4 words$word)) = (0x8w :  4 words$word)))) /\ (((((subrange_vec_dec v__722 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0000010w :  7 words$word)))))))))) then
     let (rs1 : regidx) = ((subrange_vec_dec v__722 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (C_JR rs1)
   else if ((((let (rs1 : regidx) = ((subrange_vec_dec v__722 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
               (rs1 <> zreg)) /\ ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 12 : int):ii)  :  4 words$word)) = (0x9w :  4 words$word)))) /\ (((((subrange_vec_dec v__722 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0000010w :  7 words$word)))))))))) then
     let (rs1 : regidx) = ((subrange_vec_dec v__722 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (C_JALR rs1)
   else if ((((let (rs2 : regidx) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
               let (rd : regidx) = ((subrange_vec_dec v__722 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
               ((((rd <> zreg))) /\ (((rs2 <> zreg))))) /\ ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 12 : int):ii)  :  4 words$word)) = (0x8w :  4 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word)))))))))) then
     let (rs2 : regidx) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
     let (rd : regidx) = ((subrange_vec_dec v__722 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (C_MV (rd, rs2))
   else if (((v__722 = (0x9002w :  16 words$word)))) then sail2_state_monad$returnS (C_EBREAK () )
   else if ((((let (rsd : regidx) = ((subrange_vec_dec v__722 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
               let (rs2 : regidx) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
               ((((rsd <> zreg))) /\ (((rs2 <> zreg))))) /\ ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 12 : int):ii)  :  4 words$word)) = (0x9w :  4 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word)))))))))) then
     let (rsd : regidx) = ((subrange_vec_dec v__722 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let (rs2 : regidx) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (C_ADD (rsd, rs2))
   else if ((((let (im5 : 1 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
               let (im40 : 5 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
               (((concat_vec im5 im40  :  6 words$word)) <> (0b000000w :  6 words$word))) /\ ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b000w :  3 words$word)))) /\ ((((((((subrange_vec_dec v__722 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) = (0b00000w :  5 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word))))))))))))) then
     let (im5 : 1 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (im40 : 5 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (C_NOP_HINT ((concat_vec im5 im40  :  6 words$word)))
   else if ((((let (rsd : regidx) = ((subrange_vec_dec v__722 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
               (rsd <> zreg)) /\ ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 12 : int):ii)  :  4 words$word)) = (0x0w :  4 words$word)))) /\ (((((subrange_vec_dec v__722 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0000001w :  7 words$word)))))))))) then
     let (rsd : regidx) = ((subrange_vec_dec v__722 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (C_ADDI_HINT rsd)
   else if ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b010w :  3 words$word)))) /\ ((((((((subrange_vec_dec v__722 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) = (0b00000w :  5 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))))))))) then
     let (imm5 : 1 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (imm40 : 5 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (C_LI_HINT ((concat_vec imm5 imm40  :  6 words$word)))
   else if ((((let (imm17 : 1 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
               let (imm1612 : 5 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
               (((concat_vec imm17 imm1612  :  6 words$word)) <> (0b000000w :  6 words$word))) /\ ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b011w :  3 words$word)))) /\ ((((((((subrange_vec_dec v__722 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) = (0b00000w :  5 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word))))))))))))) then
     let (imm17 : 1 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (imm1612 : 5 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (C_LUI_HINT ((concat_vec imm17 imm1612  :  6 words$word)))
   else if ((((let (rs2 : regidx) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
               (rs2 <> zreg)) /\ ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 7 : int):ii)  :  9 words$word)) = (0b100000000w :  9 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word)))))))))) then
     let (rs2 : regidx) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (C_MV_HINT rs2)
   else if ((((let (rs2 : regidx) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
               (rs2 <> zreg)) /\ ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 7 : int):ii)  :  9 words$word)) = (0b100100000w :  9 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word)))))))))) then
     let (rs2 : regidx) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (C_ADD_HINT rs2)
   else if ((((let (rsd : regidx) = ((subrange_vec_dec v__722 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
               let (nzui5 : 1 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
               let (nzui40 : 5 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
               (((((((((concat_vec nzui5 nzui40  :  6 words$word)) = (0b000000w :  6 words$word)))) \/ (((rsd = zreg)))))) /\ (((((((( 32 : int):ii) = (( 64 : int):ii)))) \/ (((nzui5 = (0b0w :  1 words$word))))))))) /\ ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word)))))))))) then
     let (rsd : regidx) = ((subrange_vec_dec v__722 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
     let (nzui5 : 1 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
     let (nzui40 : 5 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
     sail2_state_monad$returnS (C_SLLI_HINT ((concat_vec nzui5 nzui40  :  6 words$word), rsd))
   else if ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 10 : int):ii)  :  6 words$word)) = (0b100000w :  6 words$word)))) /\ (((((subrange_vec_dec v__722 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0000001w :  7 words$word))))))) then
     let (rsd : cregidx) = ((subrange_vec_dec v__722 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     sail2_state_monad$returnS (C_SRLI_HINT rsd)
   else if ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 10 : int):ii)  :  6 words$word)) = (0b100001w :  6 words$word)))) /\ (((((subrange_vec_dec v__722 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0000001w :  7 words$word))))))) then
     let (rsd : cregidx) = ((subrange_vec_dec v__722 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
     sail2_state_monad$returnS (C_SRAI_HINT rsd)
   else sail2_state_monad$bindS
     (sail2_state$and_boolS
       (sail2_state$and_boolS (sail2_state_monad$returnS ((((( 32 : int):ii) = (( 32 : int):ii))))) (sail2_state$and_boolS ((haveRVC () )) ((haveFExt () ))))
       (sail2_state_monad$returnS ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b011w :  3 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word))))))))) (\ (w__4 : bool) . 
     if w__4 then
       let (ui76 : 2 bits) = ((subrange_vec_dec v__722 (( 3 : int):ii) (( 2 : int):ii)  :  2 words$word)) in
       let (ui5 : 1 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
       let (ui42 : 3 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 4 : int):ii)  :  3 words$word)) in
       let (rd : regidx) = ((subrange_vec_dec v__722 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
       sail2_state_monad$returnS (C_FLWSP ((concat_vec ui76 ((concat_vec ui5 ui42  :  4 words$word))  :  6 words$word), rd))
     else sail2_state_monad$bindS
       (sail2_state$and_boolS
         (sail2_state$and_boolS (sail2_state_monad$returnS ((((( 32 : int):ii) = (( 32 : int):ii))))) (sail2_state$and_boolS ((haveRVC () )) ((haveFExt () ))))
         (sail2_state_monad$returnS ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b111w :  3 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word))))))))) (\ (w__9 : bool) . 
       if w__9 then
         let (ui76 : 2 bits) = ((subrange_vec_dec v__722 (( 8 : int):ii) (( 7 : int):ii)  :  2 words$word)) in
         let (ui52 : 4 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 9 : int):ii)  :  4 words$word)) in
         let (rs2 : regidx) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
         sail2_state_monad$returnS (C_FSWSP ((concat_vec ui76 ui52  :  6 words$word), rs2))
       else sail2_state_monad$bindS
         (sail2_state$and_boolS
           (sail2_state$and_boolS (sail2_state_monad$returnS ((((( 32 : int):ii) = (( 32 : int):ii))))) (sail2_state$and_boolS ((haveRVC () )) ((haveFExt () ))))
           (sail2_state_monad$returnS ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b011w :  3 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b00w :  2 words$word))))))))) (\ (w__14 : bool) . 
         if w__14 then
           let (ui6 : 1 bits) = ((subrange_vec_dec v__722 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
           let (ui53 : 3 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 10 : int):ii)  :  3 words$word)) in
           let (ui2 : 1 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 6 : int):ii)  :  1 words$word)) in
           let (rs1 : cregidx) = ((subrange_vec_dec v__722 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
           let (rd : cregidx) = ((subrange_vec_dec v__722 (( 4 : int):ii) (( 2 : int):ii)  :  3 words$word)) in
           sail2_state_monad$returnS (C_FLW ((concat_vec ui6 ((concat_vec ui53 ui2  :  4 words$word))  :  5 words$word),
                          rs1,
                          rd))
         else sail2_state_monad$bindS
           (sail2_state$and_boolS
             (sail2_state$and_boolS (sail2_state_monad$returnS ((((( 32 : int):ii) = (( 32 : int):ii))))) (sail2_state$and_boolS ((haveRVC () )) ((haveFExt () ))))
             (sail2_state_monad$returnS ((((((((subrange_vec_dec v__722 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b111w :  3 words$word)))) /\ (((((subrange_vec_dec v__722 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b00w :  2 words$word))))))))) (\ (w__19 : bool) . 
           sail2_state_monad$returnS (if w__19 then
                     let (ui6 : 1 bits) = ((subrange_vec_dec v__722 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
                     let (ui53 : 3 bits) = ((subrange_vec_dec v__722 (( 12 : int):ii) (( 10 : int):ii)  :  3 words$word)) in
                     let (ui2 : 1 bits) = ((subrange_vec_dec v__722 (( 6 : int):ii) (( 6 : int):ii)  :  1 words$word)) in
                     let (rs2 : cregidx) = ((subrange_vec_dec v__722 (( 4 : int):ii) (( 2 : int):ii)  :  3 words$word)) in
                     let (rs1 : cregidx) = ((subrange_vec_dec v__722 (( 9 : int):ii) (( 7 : int):ii)  :  3 words$word)) in
                     C_FSW ((concat_vec ui6 ((concat_vec ui53 ui2  :  4 words$word))  :  5 words$word),
                            rs1,
                            rs2)
                   else C_ILLEGAL v__722)))))))`;


val _ = Define `
 ((encdec_compressed_forwards_matches:ast ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    ((case arg_ of
     C_NOP (() ) => sail2_state_monad$returnS T
   | C_ADDI4SPN ((rd, v__912)) =>
      sail2_state_monad$returnS (if (let (nz96 : 4 bits) = ((subrange_vec_dec v__912 (( 7 : int):ii) (( 4 : int):ii)  :  4 words$word)) in
                let (nz96 : 4 bits) = ((subrange_vec_dec v__912 (( 7 : int):ii) (( 4 : int):ii)  :  4 words$word)) in
                let (nz54 : 2 bits) = ((subrange_vec_dec v__912 (( 3 : int):ii) (( 2 : int):ii)  :  2 words$word)) in
                let (nz3 : 1 bits) = ((subrange_vec_dec v__912 (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)) in
                let (nz2 : 1 bits) = ((subrange_vec_dec v__912 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)) in
                (((concat_vec nz96
                      ((concat_vec nz54 ((concat_vec nz3 nz2  :  2 words$word))  :  4 words$word))
                     :  8 words$word)) <> (0x00w :  8 words$word))) then
                T
              else F)
   | C_LW ((v__913, rs1, rd)) => sail2_state_monad$returnS T
   | C_LD ((v__914, rs1, rd)) => sail2_state_monad$returnS (if ((((( 32 : int):ii) = (( 64 : int):ii)))) then T else F)
   | C_SW ((v__915, rs1, rs2)) => sail2_state_monad$returnS T
   | C_SD ((v__916, rs1, rs2)) => sail2_state_monad$returnS (if ((((( 32 : int):ii) = (( 64 : int):ii)))) then T else F)
   | C_ADDI ((v__917, rsd)) =>
      sail2_state_monad$returnS (if (let (nzi5 : 1 bits) = ((subrange_vec_dec v__917 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
                let (nzi5 : 1 bits) = ((subrange_vec_dec v__917 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
                let (nzi40 : 5 bits) = ((subrange_vec_dec v__917 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
                ((((((concat_vec nzi5 nzi40  :  6 words$word)) <> (0b000000w :  6 words$word)))) /\ (((rsd <> zreg))))) then
                T
              else F)
   | C_JAL (v__918) => sail2_state_monad$returnS (if ((((( 32 : int):ii) = (( 32 : int):ii)))) then T else F)
   | C_ADDIW ((v__919, rsd)) =>
      sail2_state_monad$returnS (if ((((((rsd <> zreg))) /\ ((((( 32 : int):ii) = (( 64 : int):ii))))))) then T else F)
   | C_LI ((v__920, rd)) => sail2_state_monad$returnS (if (((rd <> zreg))) then T else F)
   | C_ADDI16SP (v__921) =>
      sail2_state_monad$returnS (if (let (nzi9 : 1 bits) = ((subrange_vec_dec v__921 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
                let (nzi9 : 1 bits) = ((subrange_vec_dec v__921 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
                let (nzi87 : 2 bits) = ((subrange_vec_dec v__921 (( 4 : int):ii) (( 3 : int):ii)  :  2 words$word)) in
                let (nzi6 : 1 bits) = ((subrange_vec_dec v__921 (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)) in
                let (nzi5 : 1 bits) = ((subrange_vec_dec v__921 (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)) in
                let (nzi4 : 1 bits) = ((subrange_vec_dec v__921 (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)) in
                (((concat_vec nzi9
                      ((concat_vec nzi87
                          ((concat_vec nzi6 ((concat_vec nzi5 nzi4  :  2 words$word))  :  3 words$word))
                         :  5 words$word))
                     :  6 words$word)) <> (0b000000w :  6 words$word))) then
                T
              else F)
   | C_LUI ((v__922, rd)) =>
      sail2_state_monad$returnS (if (let (imm17 : 1 bits) = ((subrange_vec_dec v__922 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
                let (imm17 : 1 bits) = ((subrange_vec_dec v__922 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
                let (imm1612 : 5 bits) = ((subrange_vec_dec v__922 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
                ((((rd <> zreg))) /\ ((((((rd <> sp))) /\ (((((concat_vec imm17 imm1612  :  6 words$word)) <> (0b000000w :  6 words$word)))))))))
              then
                T
              else F)
   | C_SRLI ((v__923, rsd)) =>
      sail2_state_monad$returnS (if (let (nzui5 : 1 bits) = ((subrange_vec_dec v__923 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
                let (nzui5 : 1 bits) = ((subrange_vec_dec v__923 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
                let (nzui40 : 5 bits) = ((subrange_vec_dec v__923 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
                (((concat_vec nzui5 nzui40  :  6 words$word)) <> (0b000000w :  6 words$word))) then
                T
              else F)
   | C_SRAI ((v__924, rsd)) =>
      sail2_state_monad$returnS (if (let (nzui5 : 1 bits) = ((subrange_vec_dec v__924 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
                let (nzui5 : 1 bits) = ((subrange_vec_dec v__924 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
                let (nzui40 : 5 bits) = ((subrange_vec_dec v__924 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
                (((concat_vec nzui5 nzui40  :  6 words$word)) <> (0b000000w :  6 words$word))) then
                T
              else F)
   | C_ANDI ((v__925, rsd)) => sail2_state_monad$returnS T
   | C_SUB ((rsd, rs2)) => sail2_state_monad$returnS T
   | C_XOR ((rsd, rs2)) => sail2_state_monad$returnS T
   | C_OR ((rsd, rs2)) => sail2_state_monad$returnS T
   | C_AND ((rsd, rs2)) => sail2_state_monad$returnS T
   | C_SUBW ((rsd, rs2)) => sail2_state_monad$returnS (if ((((( 32 : int):ii) = (( 64 : int):ii)))) then T else F)
   | C_ADDW ((rsd, rs2)) => sail2_state_monad$returnS (if ((((( 32 : int):ii) = (( 64 : int):ii)))) then T else F)
   | C_J (v__926) => sail2_state_monad$returnS T
   | C_BEQZ ((v__927, rs)) => sail2_state_monad$returnS T
   | C_BNEZ ((v__928, rs)) => sail2_state_monad$returnS T
   | C_SLLI ((v__929, rsd)) =>
      sail2_state_monad$returnS (if (let (nzui5 : 1 bits) = ((subrange_vec_dec v__929 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
                let (nzui5 : 1 bits) = ((subrange_vec_dec v__929 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
                let (nzui40 : 5 bits) = ((subrange_vec_dec v__929 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
                ((((((concat_vec nzui5 nzui40  :  6 words$word)) <> (0b000000w :  6 words$word)))) /\ ((((((rsd <> zreg))) /\ (((((((( 32 : int):ii) = (( 64 : int):ii)))) \/ (((nzui5 = (0b0w :  1 words$word)))))))))))) then
                T
              else F)
   | C_LWSP ((v__930, rd)) => sail2_state_monad$returnS (if (((rd <> zreg))) then T else F)
   | C_LDSP ((v__931, rd)) =>
      sail2_state_monad$returnS (if ((((((rd <> zreg))) /\ ((((( 32 : int):ii) = (( 64 : int):ii))))))) then T else F)
   | C_SWSP ((v__932, rs2)) => sail2_state_monad$returnS T
   | C_SDSP ((v__933, rs2)) => sail2_state_monad$returnS (if ((((( 32 : int):ii) = (( 64 : int):ii)))) then T else F)
   | C_JR (rs1) => sail2_state_monad$returnS (if (((rs1 <> zreg))) then T else F)
   | C_JALR (rs1) => sail2_state_monad$returnS (if (((rs1 <> zreg))) then T else F)
   | C_MV ((rd, rs2)) =>
      sail2_state_monad$returnS (if ((((((rd <> zreg))) /\ (((rs2 <> zreg)))))) then T else F)
   | C_EBREAK (() ) => sail2_state_monad$returnS T
   | C_ADD ((rsd, rs2)) =>
      sail2_state_monad$returnS (if ((((((rsd <> zreg))) /\ (((rs2 <> zreg)))))) then T else F)
   | C_NOP_HINT (v__934) =>
      sail2_state_monad$returnS (if (let (im5 : 1 bits) = ((subrange_vec_dec v__934 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
                let (im5 : 1 bits) = ((subrange_vec_dec v__934 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
                let (im40 : 5 bits) = ((subrange_vec_dec v__934 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
                (((concat_vec im5 im40  :  6 words$word)) <> (0b000000w :  6 words$word))) then
                T
              else F)
   | C_ADDI_HINT (rsd) => sail2_state_monad$returnS (if (((rsd <> zreg))) then T else F)
   | C_LI_HINT (v__935) => sail2_state_monad$returnS T
   | C_LUI_HINT (v__936) =>
      sail2_state_monad$returnS (if (let (imm17 : 1 bits) = ((subrange_vec_dec v__936 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
                let (imm17 : 1 bits) = ((subrange_vec_dec v__936 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
                let (imm1612 : 5 bits) = ((subrange_vec_dec v__936 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
                (((concat_vec imm17 imm1612  :  6 words$word)) <> (0b000000w :  6 words$word))) then
                T
              else F)
   | C_MV_HINT (rs2) => sail2_state_monad$returnS (if (((rs2 <> zreg))) then T else F)
   | C_ADD_HINT (rs2) => sail2_state_monad$returnS (if (((rs2 <> zreg))) then T else F)
   | C_SLLI_HINT ((v__937, rsd)) =>
      sail2_state_monad$returnS (if (let (nzui5 : 1 bits) = ((subrange_vec_dec v__937 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
                let (nzui5 : 1 bits) = ((subrange_vec_dec v__937 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
                let (nzui40 : 5 bits) = ((subrange_vec_dec v__937 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
                (((((((((concat_vec nzui5 nzui40  :  6 words$word)) = (0b000000w :  6 words$word)))) \/ (((rsd = zreg)))))) /\ (((((((( 32 : int):ii) = (( 64 : int):ii)))) \/ (((nzui5 = (0b0w :  1 words$word))))))))) then
                T
              else F)
   | C_SRLI_HINT (rsd) => sail2_state_monad$returnS T
   | C_SRAI_HINT (rsd) => sail2_state_monad$returnS T
   | C_FLWSP ((v__938, rd)) => sail2_state_monad$bindS
      (sail2_state$and_boolS (sail2_state_monad$returnS ((((( 32 : int):ii) = (( 32 : int):ii))))) (sail2_state$and_boolS ((haveRVC () )) ((haveFExt () )))) (\ (w__3 :
        bool) . 
      sail2_state_monad$returnS (if w__3 then T
              else F))
   | C_FSWSP ((v__939, rs2)) => sail2_state_monad$bindS
      (sail2_state$and_boolS (sail2_state_monad$returnS ((((( 32 : int):ii) = (( 32 : int):ii))))) (sail2_state$and_boolS ((haveRVC () )) ((haveFExt () )))) (\ (w__7 :
        bool) . 
      sail2_state_monad$returnS (if w__7 then T
              else F))
   | C_FLW ((v__940, rs1, rd)) => sail2_state_monad$bindS
      (sail2_state$and_boolS (sail2_state_monad$returnS ((((( 32 : int):ii) = (( 32 : int):ii))))) (sail2_state$and_boolS ((haveRVC () )) ((haveFExt () )))) (\ (w__11 :
        bool) . 
      sail2_state_monad$returnS (if w__11 then T
              else F))
   | C_FSW ((v__941, rs1, rs2)) => sail2_state_monad$bindS
      (sail2_state$and_boolS (sail2_state_monad$returnS ((((( 32 : int):ii) = (( 32 : int):ii))))) (sail2_state$and_boolS ((haveRVC () )) ((haveFExt () )))) (\ (w__15 :
        bool) . 
      sail2_state_monad$returnS (if w__15 then T
              else F))
   | C_ILLEGAL (s) => sail2_state_monad$returnS T
   | _ => sail2_state_monad$returnS F
   )))`;


val _ = Define `
 ((encdec_compressed_backwards_matches:(16)words$word ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let v__942 = arg_ in
   if (((v__942 = (0x0001w :  16 words$word)))) then sail2_state_monad$returnS T
   else if ((((let (nz96 : 4 bits) = ((subrange_vec_dec v__942 (( 10 : int):ii) (( 7 : int):ii)  :  4 words$word)) in
               let (nz54 : 2 bits) = ((subrange_vec_dec v__942 (( 12 : int):ii) (( 11 : int):ii)  :  2 words$word)) in
               let (nz3 : 1 bits) = ((subrange_vec_dec v__942 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
               let (nz2 : 1 bits) = ((subrange_vec_dec v__942 (( 6 : int):ii) (( 6 : int):ii)  :  1 words$word)) in
               (((concat_vec nz96
                     ((concat_vec nz54 ((concat_vec nz3 nz2  :  2 words$word))  :  4 words$word))
                    :  8 words$word)) <> (0x00w :  8 words$word))) /\ ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b00w :  2 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b010w :  3 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b00w :  2 words$word)))))))
   then
     sail2_state_monad$returnS T
   else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b011w :  3 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b00w :  2 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b110w :  3 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b00w :  2 words$word)))))))
   then
     sail2_state_monad$returnS T
   else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b111w :  3 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b00w :  2 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if ((((let (rsd : regidx) = ((subrange_vec_dec v__942 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
               let (nzi5 : 1 bits) = ((subrange_vec_dec v__942 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
               let (nzi40 : 5 bits) = ((subrange_vec_dec v__942 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
               ((((((concat_vec nzi5 nzi40  :  6 words$word)) <> (0b000000w :  6 words$word)))) /\ (((rsd <> zreg))))) /\ ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if (((((((( 32 : int):ii) = (( 32 : int):ii)))) /\ ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b001w :  3 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if ((((let (rsd : regidx) = ((subrange_vec_dec v__942 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
               ((((rsd <> zreg))) /\ ((((( 32 : int):ii) = (( 64 : int):ii)))))) /\ ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b001w :  3 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if ((((let (rd : regidx) = ((subrange_vec_dec v__942 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
               (rd <> zreg)) /\ ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b010w :  3 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if ((((let (nzi9 : 1 bits) = ((subrange_vec_dec v__942 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
               let (nzi87 : 2 bits) = ((subrange_vec_dec v__942 (( 4 : int):ii) (( 3 : int):ii)  :  2 words$word)) in
               let (nzi6 : 1 bits) = ((subrange_vec_dec v__942 (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)) in
               let (nzi5 : 1 bits) = ((subrange_vec_dec v__942 (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)) in
               let (nzi4 : 1 bits) = ((subrange_vec_dec v__942 (( 6 : int):ii) (( 6 : int):ii)  :  1 words$word)) in
               (((concat_vec nzi9
                     ((concat_vec nzi87
                         ((concat_vec nzi6 ((concat_vec nzi5 nzi4  :  2 words$word))  :  3 words$word))
                        :  5 words$word))
                    :  6 words$word)) <> (0b000000w :  6 words$word))) /\ ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b011w :  3 words$word)))) /\ ((((((((subrange_vec_dec v__942 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) = (0b00010w :  5 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word))))))))))))) then
     sail2_state_monad$returnS T
   else if ((((let (rd : regidx) = ((subrange_vec_dec v__942 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
               let (imm17 : 1 bits) = ((subrange_vec_dec v__942 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
               let (imm1612 : 5 bits) = ((subrange_vec_dec v__942 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
               ((((rd <> zreg))) /\ ((((((rd <> sp))) /\ (((((concat_vec imm17 imm1612  :  6 words$word)) <> (0b000000w :  6 words$word))))))))) /\ ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b011w :  3 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if ((((let (nzui5 : 1 bits) = ((subrange_vec_dec v__942 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
               let (nzui40 : 5 bits) = ((subrange_vec_dec v__942 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
               (((concat_vec nzui5 nzui40  :  6 words$word)) <> (0b000000w :  6 words$word))) /\ ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b100w :  3 words$word)))) /\ ((((((((subrange_vec_dec v__942 (( 11 : int):ii) (( 10 : int):ii)  :  2 words$word)) = (0b00w :  2 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word))))))))))))) then
     sail2_state_monad$returnS T
   else if ((((let (nzui5 : 1 bits) = ((subrange_vec_dec v__942 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
               let (nzui40 : 5 bits) = ((subrange_vec_dec v__942 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
               (((concat_vec nzui5 nzui40  :  6 words$word)) <> (0b000000w :  6 words$word))) /\ ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b100w :  3 words$word)))) /\ ((((((((subrange_vec_dec v__942 (( 11 : int):ii) (( 10 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word))))))))))))) then
     sail2_state_monad$returnS T
   else if ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b100w :  3 words$word)))) /\ ((((((((subrange_vec_dec v__942 (( 11 : int):ii) (( 10 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 10 : int):ii)  :  6 words$word)) = (0b100011w :  6 words$word)))) /\ ((((((((subrange_vec_dec v__942 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) = (0b00w :  2 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 10 : int):ii)  :  6 words$word)) = (0b100011w :  6 words$word)))) /\ ((((((((subrange_vec_dec v__942 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 10 : int):ii)  :  6 words$word)) = (0b100011w :  6 words$word)))) /\ ((((((((subrange_vec_dec v__942 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 10 : int):ii)  :  6 words$word)) = (0b100011w :  6 words$word)))) /\ ((((((((subrange_vec_dec v__942 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) = (0b11w :  2 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 10 : int):ii)  :  6 words$word)) = (0b100111w :  6 words$word)))) /\ ((((((((subrange_vec_dec v__942 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) = (0b00w :  2 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word))))))))))))) then
     sail2_state_monad$returnS T
   else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 10 : int):ii)  :  6 words$word)) = (0b100111w :  6 words$word)))) /\ ((((((((subrange_vec_dec v__942 (( 6 : int):ii) (( 5 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word))))))))))))) then
     sail2_state_monad$returnS T
   else if ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b101w :  3 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))))))
   then
     sail2_state_monad$returnS T
   else if ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b110w :  3 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))))))
   then
     sail2_state_monad$returnS T
   else if ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b111w :  3 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))))))
   then
     sail2_state_monad$returnS T
   else if ((((let (rsd : regidx) = ((subrange_vec_dec v__942 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
               let (nzui5 : 1 bits) = ((subrange_vec_dec v__942 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
               let (nzui40 : 5 bits) = ((subrange_vec_dec v__942 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
               ((((((concat_vec nzui5 nzui40  :  6 words$word)) <> (0b000000w :  6 words$word)))) /\ ((((((rsd <> zreg))) /\ (((((((( 32 : int):ii) = (( 64 : int):ii)))) \/ (((nzui5 = (0b0w :  1 words$word)))))))))))) /\ ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if ((((let (rd : regidx) = ((subrange_vec_dec v__942 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
               (rd <> zreg)) /\ ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b010w :  3 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if ((((let (rd : regidx) = ((subrange_vec_dec v__942 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
               ((((rd <> zreg))) /\ ((((( 32 : int):ii) = (( 64 : int):ii)))))) /\ ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b011w :  3 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b110w :  3 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word)))))))
   then
     sail2_state_monad$returnS T
   else if (((((((( 32 : int):ii) = (( 64 : int):ii)))) /\ ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b111w :  3 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if ((((let (rs1 : regidx) = ((subrange_vec_dec v__942 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
               (rs1 <> zreg)) /\ ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 12 : int):ii)  :  4 words$word)) = (0x8w :  4 words$word)))) /\ (((((subrange_vec_dec v__942 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0000010w :  7 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if ((((let (rs1 : regidx) = ((subrange_vec_dec v__942 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
               (rs1 <> zreg)) /\ ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 12 : int):ii)  :  4 words$word)) = (0x9w :  4 words$word)))) /\ (((((subrange_vec_dec v__942 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0000010w :  7 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if ((((let (rs2 : regidx) = ((subrange_vec_dec v__942 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
               let (rd : regidx) = ((subrange_vec_dec v__942 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
               ((((rd <> zreg))) /\ (((rs2 <> zreg))))) /\ ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 12 : int):ii)  :  4 words$word)) = (0x8w :  4 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if (((v__942 = (0x9002w :  16 words$word)))) then sail2_state_monad$returnS T
   else if ((((let (rsd : regidx) = ((subrange_vec_dec v__942 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
               let (rs2 : regidx) = ((subrange_vec_dec v__942 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
               ((((rsd <> zreg))) /\ (((rs2 <> zreg))))) /\ ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 12 : int):ii)  :  4 words$word)) = (0x9w :  4 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if ((((let (im5 : 1 bits) = ((subrange_vec_dec v__942 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
               let (im40 : 5 bits) = ((subrange_vec_dec v__942 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
               (((concat_vec im5 im40  :  6 words$word)) <> (0b000000w :  6 words$word))) /\ ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b000w :  3 words$word)))) /\ ((((((((subrange_vec_dec v__942 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) = (0b00000w :  5 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word))))))))))))) then
     sail2_state_monad$returnS T
   else if ((((let (rsd : regidx) = ((subrange_vec_dec v__942 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
               (rsd <> zreg)) /\ ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 12 : int):ii)  :  4 words$word)) = (0x0w :  4 words$word)))) /\ (((((subrange_vec_dec v__942 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0000001w :  7 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b010w :  3 words$word)))) /\ ((((((((subrange_vec_dec v__942 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) = (0b00000w :  5 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if ((((let (imm17 : 1 bits) = ((subrange_vec_dec v__942 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
               let (imm1612 : 5 bits) = ((subrange_vec_dec v__942 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
               (((concat_vec imm17 imm1612  :  6 words$word)) <> (0b000000w :  6 words$word))) /\ ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b011w :  3 words$word)))) /\ ((((((((subrange_vec_dec v__942 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) = (0b00000w :  5 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word))))))))))))) then
     sail2_state_monad$returnS T
   else if ((((let (rs2 : regidx) = ((subrange_vec_dec v__942 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
               (rs2 <> zreg)) /\ ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 7 : int):ii)  :  9 words$word)) = (0b100000000w :  9 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if ((((let (rs2 : regidx) = ((subrange_vec_dec v__942 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
               (rs2 <> zreg)) /\ ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 7 : int):ii)  :  9 words$word)) = (0b100100000w :  9 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if ((((let (rsd : regidx) = ((subrange_vec_dec v__942 (( 11 : int):ii) (( 7 : int):ii)  :  5 words$word)) in
               let (nzui5 : 1 bits) = ((subrange_vec_dec v__942 (( 12 : int):ii) (( 12 : int):ii)  :  1 words$word)) in
               let (nzui40 : 5 bits) = ((subrange_vec_dec v__942 (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)) in
               (((((((((concat_vec nzui5 nzui40  :  6 words$word)) = (0b000000w :  6 words$word)))) \/ (((rsd = zreg)))))) /\ (((((((( 32 : int):ii) = (( 64 : int):ii)))) \/ (((nzui5 = (0b0w :  1 words$word))))))))) /\ ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b000w :  3 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word)))))))))) then
     sail2_state_monad$returnS T
   else if ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 10 : int):ii)  :  6 words$word)) = (0b100000w :  6 words$word)))) /\ (((((subrange_vec_dec v__942 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0000001w :  7 words$word))))))) then
     sail2_state_monad$returnS T
   else if ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 10 : int):ii)  :  6 words$word)) = (0b100001w :  6 words$word)))) /\ (((((subrange_vec_dec v__942 (( 6 : int):ii) (( 0 : int):ii)  :  7 words$word)) = (0b0000001w :  7 words$word))))))) then
     sail2_state_monad$returnS T
   else sail2_state_monad$bindS
     (sail2_state$and_boolS
       (sail2_state$and_boolS (sail2_state_monad$returnS ((((( 32 : int):ii) = (( 32 : int):ii))))) (sail2_state$and_boolS ((haveRVC () )) ((haveFExt () ))))
       (sail2_state_monad$returnS ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b011w :  3 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word))))))))) (\ (w__4 : bool) . 
     if w__4 then sail2_state_monad$returnS T
     else sail2_state_monad$bindS
       (sail2_state$and_boolS
         (sail2_state$and_boolS (sail2_state_monad$returnS ((((( 32 : int):ii) = (( 32 : int):ii))))) (sail2_state$and_boolS ((haveRVC () )) ((haveFExt () ))))
         (sail2_state_monad$returnS ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b111w :  3 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word))))))))) (\ (w__9 : bool) . 
       if w__9 then sail2_state_monad$returnS T
       else sail2_state_monad$bindS
         (sail2_state$and_boolS
           (sail2_state$and_boolS (sail2_state_monad$returnS ((((( 32 : int):ii) = (( 32 : int):ii))))) (sail2_state$and_boolS ((haveRVC () )) ((haveFExt () ))))
           (sail2_state_monad$returnS ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b011w :  3 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b00w :  2 words$word))))))))) (\ (w__14 : bool) . 
         if w__14 then sail2_state_monad$returnS T
         else sail2_state_monad$bindS
           (sail2_state$and_boolS
             (sail2_state$and_boolS (sail2_state_monad$returnS ((((( 32 : int):ii) = (( 32 : int):ii))))) (sail2_state$and_boolS ((haveRVC () )) ((haveFExt () ))))
             (sail2_state_monad$returnS ((((((((subrange_vec_dec v__942 (( 15 : int):ii) (( 13 : int):ii)  :  3 words$word)) = (0b111w :  3 words$word)))) /\ (((((subrange_vec_dec v__942 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b00w :  2 words$word))))))))) (\ (w__19 : bool) . 
           sail2_state_monad$returnS (if w__19 then T
                   else T)))))))`;


(*val execute_WFI : unit -> M Retired*)

val _ = Define `
 ((execute_WFI:unit ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__0 : Privilege) . 
   (case w__0 of
     Machine => sail2_state_monad$seqS (platform_wfi () ) (sail2_state_monad$returnS RETIRE_SUCCESS)
   | Supervisor => sail2_state_monad$bindS
      (sail2_state_monad$read_regS mstatus_ref) (\ (w__1 : Mstatus) . 
      if (((((get_Mstatus_TW w__1  :  1 words$word)) = (0b1w :  1 words$word)))) then sail2_state_monad$seqS
        (handle_illegal () ) (sail2_state_monad$returnS RETIRE_FAIL)
      else sail2_state_monad$seqS (platform_wfi () ) (sail2_state_monad$returnS RETIRE_SUCCESS))
   | User => sail2_state_monad$seqS (handle_illegal () ) (sail2_state_monad$returnS RETIRE_FAIL)
   ))))`;


(*val execute_UTYPE : mword ty20 -> mword ty5 -> uop -> M Retired*)

val _ = Define `
 ((execute_UTYPE:(20)words$word ->(5)words$word -> uop ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) imm rd op=
    (let (off : xlenbits) =
     ((EXTS (( 32 : int):ii) ((concat_vec imm (0x000w :  12 words$word)  :  32 words$word))  :  32 words$word)) in sail2_state_monad$bindS
   (case op of
     RISCV_LUI => sail2_state_monad$returnS off
   | RISCV_AUIPC => sail2_state_monad$bindS
      (get_arch_pc ()   : ( 32 words$word) M) (\ (w__0 :  32 words$word) . 
      sail2_state_monad$returnS ((add_vec w__0 off  :  32 words$word)))
   ) (\ (ret : xlenbits) .  sail2_state_monad$seqS
   (wX_bits rd ret) (sail2_state_monad$returnS RETIRE_SUCCESS))))`;


(*val execute_URET : unit -> M Retired*)

val _ = Define `
 ((execute_URET:unit ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state$or_boolS ( sail2_state_monad$bindS(haveUsrMode () ) (\ (w__0 : bool) .  sail2_state_monad$returnS ((~ w__0))))
     (sail2_state_monad$returnS ((~ ((sys_enable_next () )))))) (\ (w__1 : bool) .  sail2_state_monad$seqS
   (if w__1 then handle_illegal () 
    else if ((~ ((ext_check_xret_priv User)))) then sail2_state_monad$returnS ((ext_fail_xret_priv () ))
    else sail2_state_monad$bindS
      (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__2 : Privilege) .  sail2_state_monad$bindS
      (sail2_state_monad$read_regS PC_ref  : ( 32 words$word) M) (\ (w__3 :  32 words$word) .  sail2_state_monad$bindS
      (exception_handler w__2 (CTL_URET () ) w__3  : ( 32 words$word) M) (\ (w__4 :  32 words$word) . 
      set_next_pc w__4))))
   (sail2_state_monad$returnS RETIRE_FAIL))))`;


(*val execute_STORE_FP : mword ty12 -> mword ty5 -> mword ty5 -> word_width -> M Retired*)

val _ = Define `
 ((execute_STORE_FP:(12)words$word ->(5)words$word ->(5)words$word -> word_width ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) imm rs2 rs1 width=
    (let (offset : xlenbits) = ((EXTS (( 32 : int):ii) imm  :  32 words$word)) in
   let (aq, rl, con) = (F, F, F) in sail2_state_monad$bindS
   (ext_data_get_addr rs1 offset (Write Data) width) (\ (w__0 : unit Ext_DataAddr_Check) . 
   (case w__0 of
     Ext_DataAddr_Error (e) =>
      let (_ : unit) = (ext_handle_data_check_error e) in
      sail2_state_monad$returnS RETIRE_FAIL
   | Ext_DataAddr_OK (vaddr) =>
      if ((check_misaligned vaddr width)) then sail2_state_monad$seqS
        (handle_mem_exception vaddr (E_SAMO_Addr_Align () )) (sail2_state_monad$returnS RETIRE_FAIL)
      else sail2_state_monad$bindS
        (translateAddr vaddr (Write Data)  : ( (( 32 words$word), ExceptionType)TR_Result) M) (\ (w__1 : (( 32 words$word), ExceptionType)
          TR_Result) . 
        (case w__1 of
          TR_Failure ((e, _)) => sail2_state_monad$seqS (handle_mem_exception vaddr e) (sail2_state_monad$returnS RETIRE_FAIL)
        | TR_Address ((addr, _)) => sail2_state_monad$bindS
           (case width of
             BYTE => sail2_state_monad$returnS (MemValue () )
           | HALF => sail2_state_monad$returnS (MemValue () )
           | WORD => mem_write_ea addr (( 4 : int):ii) aq rl F
           | DOUBLE => mem_write_ea addr (( 8 : int):ii) aq rl F
           ) (\ (eares : unit MemoryOpResult) . 
           (case eares of
             MemException (e) => sail2_state_monad$seqS (handle_mem_exception addr e) (sail2_state_monad$returnS RETIRE_FAIL)
           | MemValue (_) => sail2_state_monad$bindS
              (rF_bits rs2  : ( 32 words$word) M) (\ rs2_val . 
              (case (width, (( 32 : int):ii)) of
                (BYTE, g__321) => sail2_state_monad$seqS (handle_illegal () ) (sail2_state_monad$returnS RETIRE_FAIL)
              | (HALF, g__322) => sail2_state_monad$seqS (handle_illegal () ) (sail2_state_monad$returnS RETIRE_FAIL)
              | (WORD, g__323) => sail2_state_monad$bindS
                 (mem_write_value addr (( 4 : int):ii)
                   ((subrange_vec_dec rs2_val (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) aq rl con) (\ (w__4 : bool
                   MemoryOpResult) . 
                 process_fstore vaddr w__4)
              | _ => sail2_state_monad$seqS
                 (sail2_state_monad$assert_expS F "Pattern match failure at model/riscv_insts_fext.sail 401:14 - 406:15")
                 (sail2_state_monad$exitS () )
              ))
           ))
        ))
   ))))`;


(*val execute_STORECON : bool -> bool -> mword ty5 -> mword ty5 -> word_width -> mword ty5 -> M Retired*)

val _ = Define `
 ((execute_STORECON:bool -> bool ->(5)words$word ->(5)words$word -> word_width ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) aq rl rs2 rs1 width rd=  (sail2_state_monad$bindS
   (speculate_conditional_success () ) (\ (w__0 : bool) . 
   if (((w__0 = F))) then sail2_state_monad$seqS
     (wX_bits rd ((EXTZ (( 32 : int):ii) (0b1w :  1 words$word)  :  32 words$word))) (sail2_state_monad$returnS RETIRE_SUCCESS)
   else sail2_state_monad$bindS
     (haveAtomics () ) (\ (w__1 : bool) . 
     if w__1 then sail2_state_monad$bindS
       (ext_data_get_addr rs1 ((zeros_implicit (( 32 : int):ii)  :  32 words$word)) (Write Data) width) (\ (w__2 : unit
         Ext_DataAddr_Check) . 
       (case w__2 of
         Ext_DataAddr_Error (e) =>
          let (_ : unit) = (ext_handle_data_check_error e) in
          sail2_state_monad$returnS RETIRE_FAIL
       | Ext_DataAddr_OK (vaddr) =>
          let (aligned : bool) =
            ((case width of
              BYTE => T
            | HALF => (((subrange_vec_dec vaddr (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)) = (0b0w :  1 words$word))
            | WORD =>
               (((subrange_vec_dec vaddr (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b00w :  2 words$word))
            | DOUBLE =>
               (((subrange_vec_dec vaddr (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) = (0b000w :  3 words$word))
            )) in
          if ((~ aligned)) then sail2_state_monad$seqS
            (handle_mem_exception vaddr (E_SAMO_Addr_Align () )) (sail2_state_monad$returnS RETIRE_FAIL)
          else if (((((match_reservation vaddr)) = F))) then sail2_state_monad$seqS
            (wX_bits rd ((EXTZ (( 32 : int):ii) (0b1w :  1 words$word)  :  32 words$word)))
            (let (_ : unit) = (cancel_reservation () ) in
            sail2_state_monad$returnS RETIRE_SUCCESS)
          else sail2_state_monad$bindS
            (translateAddr vaddr (Write Data)  : ( (( 32 words$word), ExceptionType)TR_Result) M) (\ (w__3 : (( 32 words$word), ExceptionType)
              TR_Result) . 
            (case w__3 of
              TR_Failure ((e, _)) => sail2_state_monad$seqS (handle_mem_exception vaddr e) (sail2_state_monad$returnS RETIRE_FAIL)
            | TR_Address ((addr, _)) => sail2_state_monad$bindS
               (case (width, (( 32 : int):ii)) of
                 (BYTE, _) => mem_write_ea addr (( 1 : int):ii) (((aq /\ rl))) rl T
               | (HALF, _) => mem_write_ea addr (( 2 : int):ii) (((aq /\ rl))) rl T
               | (WORD, _) => mem_write_ea addr (( 4 : int):ii) (((aq /\ rl))) rl T
               | _ => internal_error "STORECON expected word or double"
               ) (\ (eares : unit MemoryOpResult) . 
               (case eares of
                 MemException (e) => sail2_state_monad$seqS (handle_mem_exception addr e) (sail2_state_monad$returnS RETIRE_FAIL)
               | MemValue (_) => sail2_state_monad$bindS
                  (rX_bits rs2  : ( 32 words$word) M) (\ rs2_val .  sail2_state_monad$bindS
                  (case (width, (( 32 : int):ii)) of
                    (BYTE, _) =>
                     mem_write_value addr (( 1 : int):ii)
                       ((subrange_vec_dec rs2_val (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word)) (((aq /\ rl))) rl
                       T
                  | (HALF, _) =>
                     mem_write_value addr (( 2 : int):ii)
                       ((subrange_vec_dec rs2_val (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) (((aq /\ rl)))
                       rl T
                  | (WORD, _) =>
                     mem_write_value addr (( 4 : int):ii)
                       ((subrange_vec_dec rs2_val (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) (((aq /\ rl)))
                       rl T
                  | _ => internal_error "STORECON expected word or double"
                  ) (\ (res : bool MemoryOpResult) . 
                  (case res of
                    MemValue (T) => sail2_state_monad$seqS
                     (wX_bits rd ((EXTZ (( 32 : int):ii) (0b0w :  1 words$word)  :  32 words$word)))
                     (let (_ : unit) = (cancel_reservation () ) in
                     sail2_state_monad$returnS RETIRE_SUCCESS)
                  | MemValue (F) => sail2_state_monad$seqS
                     (wX_bits rd ((EXTZ (( 32 : int):ii) (0b1w :  1 words$word)  :  32 words$word)))
                     (let (_ : unit) = (cancel_reservation () ) in
                     sail2_state_monad$returnS RETIRE_SUCCESS)
                  | MemException (e) => sail2_state_monad$seqS (handle_mem_exception addr e) (sail2_state_monad$returnS RETIRE_FAIL)
                  )))
               ))
            ))
       ))
     else sail2_state_monad$seqS (handle_illegal () ) (sail2_state_monad$returnS RETIRE_FAIL)))))`;


(*val execute_STORE : mword ty12 -> mword ty5 -> mword ty5 -> word_width -> bool -> bool -> M Retired*)

val _ = Define `
 ((execute_STORE:(12)words$word ->(5)words$word ->(5)words$word -> word_width -> bool -> bool ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) imm rs2 rs1 width aq rl=
    (let (offset : xlenbits) = ((EXTS (( 32 : int):ii) imm  :  32 words$word)) in sail2_state_monad$bindS
   (ext_data_get_addr rs1 offset (Write Data) width) (\ (w__0 : unit Ext_DataAddr_Check) . 
   (case w__0 of
     Ext_DataAddr_Error (e) =>
      let (_ : unit) = (ext_handle_data_check_error e) in
      sail2_state_monad$returnS RETIRE_FAIL
   | Ext_DataAddr_OK (vaddr) =>
      if ((check_misaligned vaddr width)) then sail2_state_monad$seqS
        (handle_mem_exception vaddr (E_SAMO_Addr_Align () )) (sail2_state_monad$returnS RETIRE_FAIL)
      else sail2_state_monad$bindS
        (translateAddr vaddr (Write Data)  : ( (( 32 words$word), ExceptionType)TR_Result) M) (\ (w__1 : (( 32 words$word), ExceptionType)
          TR_Result) . 
        (case w__1 of
          TR_Failure ((e, _)) => sail2_state_monad$seqS (handle_mem_exception vaddr e) (sail2_state_monad$returnS RETIRE_FAIL)
        | TR_Address ((paddr, _)) => sail2_state_monad$bindS
           (case width of
             BYTE => mem_write_ea paddr (( 1 : int):ii) aq rl F
           | HALF => mem_write_ea paddr (( 2 : int):ii) aq rl F
           | WORD => mem_write_ea paddr (( 4 : int):ii) aq rl F
           | DOUBLE => mem_write_ea paddr (( 8 : int):ii) aq rl F
           ) (\ (eares : unit MemoryOpResult) . 
           (case eares of
             MemException (e) => sail2_state_monad$seqS (handle_mem_exception vaddr e) (sail2_state_monad$returnS RETIRE_FAIL)
           | MemValue (_) => sail2_state_monad$bindS
              (rX_bits rs2  : ( 32 words$word) M) (\ rs2_val .  sail2_state_monad$bindS
              (case (width, (( 32 : int):ii)) of
                (BYTE, g__313) =>
                 mem_write_value paddr (( 1 : int):ii)
                   ((subrange_vec_dec rs2_val (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word)) aq rl F
              | (HALF, g__314) =>
                 mem_write_value paddr (( 2 : int):ii)
                   ((subrange_vec_dec rs2_val (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) aq rl F
              | (WORD, g__315) =>
                 mem_write_value paddr (( 4 : int):ii)
                   ((subrange_vec_dec rs2_val (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) aq rl F
              | _ => sail2_state_monad$seqS
                 (sail2_state_monad$assert_expS F "Pattern match failure at model/riscv_insts_base.sail 394:47 - 399:15")
                 (sail2_state_monad$exitS () )
              ) (\ (res : bool MemoryOpResult) . 
              (case res of
                MemValue (T) => sail2_state_monad$returnS RETIRE_SUCCESS
              | MemValue (F) => internal_error "store got false from mem_write_value"
              | MemException (e) => sail2_state_monad$seqS (handle_mem_exception vaddr e) (sail2_state_monad$returnS RETIRE_FAIL)
              )))
           ))
        ))
   ))))`;


(*val execute_SRET : unit -> M Retired*)

val _ = Define `
 ((execute_SRET:unit ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__0 : Privilege) .  sail2_state_monad$bindS
   (case w__0 of
     User => sail2_state_monad$returnS T
   | Supervisor =>
      sail2_state$or_boolS ( sail2_state_monad$bindS(haveSupMode () ) (\ (w__1 : bool) .  sail2_state_monad$returnS ((~ w__1))))
        ( sail2_state_monad$bindS(sail2_state_monad$read_regS mstatus_ref) (\ (w__2 : Mstatus) . 
         sail2_state_monad$returnS (((((get_Mstatus_TSR w__2  :  1 words$word)) = (0b1w :  1 words$word))))))
   | Machine => sail2_state_monad$bindS (haveSupMode () ) (\ (w__4 : bool) .  sail2_state_monad$returnS ((~ w__4)))
   ) (\ (sret_illegal : bool) . 
   if sret_illegal then sail2_state_monad$seqS (handle_illegal () ) (sail2_state_monad$returnS RETIRE_FAIL)
   else if ((~ ((ext_check_xret_priv Supervisor)))) then
     let (_ : unit) = (ext_fail_xret_priv () ) in
     sail2_state_monad$returnS RETIRE_FAIL
   else sail2_state_monad$bindS
     (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__5 : Privilege) .  sail2_state_monad$bindS
     (sail2_state_monad$read_regS PC_ref  : ( 32 words$word) M) (\ (w__6 :  32 words$word) .  sail2_state_monad$bindS
     (exception_handler w__5 (CTL_SRET () ) w__6  : ( 32 words$word) M) (\ (w__7 :  32 words$word) .  sail2_state_monad$seqS
     (set_next_pc w__7) (sail2_state_monad$returnS RETIRE_SUCCESS))))))))`;


(*val execute_SHIFTW : mword ty5 -> mword ty5 -> mword ty5 -> sop -> M Retired*)

val _ = Define `
 ((execute_SHIFTW:(5)words$word ->(5)words$word ->(5)words$word -> sop ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) shamt rs1 rd op=  (sail2_state_monad$bindS
   (rX_bits rs1  : ( 32 words$word) M) (\ (w__0 :  32 words$word) . 
   let rs1_val = ((subrange_vec_dec w__0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in
   let (result : 32 bits) =
     ((case op of
       RISCV_SLLI => (shift_bits_left rs1_val shamt  :  32 words$word)
     | RISCV_SRLI => (shift_bits_right rs1_val shamt  :  32 words$word)
     | RISCV_SRAI => (shift_right_arith32 rs1_val shamt  :  32 words$word)
     )) in sail2_state_monad$seqS
   (wX_bits rd ((EXTS (( 32 : int):ii) result  :  32 words$word))) (sail2_state_monad$returnS RETIRE_SUCCESS))))`;


(*val execute_SHIFTIWOP : mword ty5 -> mword ty5 -> mword ty5 -> sopw -> M Retired*)

val _ = Define `
 ((execute_SHIFTIWOP:(5)words$word ->(5)words$word ->(5)words$word -> sopw ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) shamt rs1 rd op=  (sail2_state_monad$bindS
   (rX_bits rs1  : ( 32 words$word) M) (\ rs1_val . 
   let (result : 32 bits) =
     ((case op of
       RISCV_SLLIW =>
        (shift_bits_left ((subrange_vec_dec rs1_val (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) shamt
          :  32 words$word)
     | RISCV_SRLIW =>
        (shift_bits_right ((subrange_vec_dec rs1_val (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) shamt
          :  32 words$word)
     | RISCV_SRAIW =>
        (shift_right_arith32 ((subrange_vec_dec rs1_val (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) shamt
          :  32 words$word)
     )) in sail2_state_monad$seqS
   (wX_bits rd ((EXTS (( 32 : int):ii) result  :  32 words$word))) (sail2_state_monad$returnS RETIRE_SUCCESS))))`;


(*val execute_SHIFTIOP : mword ty6 -> mword ty5 -> mword ty5 -> sop -> M Retired*)

val _ = Define `
 ((execute_SHIFTIOP:(6)words$word ->(5)words$word ->(5)words$word -> sop ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) shamt rs1 rd op=  (sail2_state_monad$bindS
   (rX_bits rs1  : ( 32 words$word) M) (\ rs1_val . 
   let (result : xlenbits) =
     ((case op of
       RISCV_SLLI =>
        (shift_bits_left rs1_val ((subrange_vec_dec shamt (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word))  :  32 words$word)
     | RISCV_SRLI =>
        (shift_bits_right rs1_val ((subrange_vec_dec shamt (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word))
          :  32 words$word)
     | RISCV_SRAI =>
        (shift_right_arith32 rs1_val ((subrange_vec_dec shamt (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word))
          :  32 words$word)
     )) in sail2_state_monad$seqS
   (wX_bits rd result) (sail2_state_monad$returnS RETIRE_SUCCESS))))`;


(*val execute_SFENCE_VMA : mword ty5 -> mword ty5 -> M Retired*)

val _ = Define `
 ((execute_SFENCE_VMA:(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs1 rs2=  (sail2_state_monad$bindS
   (if (((rs1 = (0b00000w :  5 words$word)))) then sail2_state_monad$returnS NONE
    else sail2_state_monad$bindS (rX_bits rs1  : ( 32 words$word) M) (\ (w__0 :  32 words$word) .  sail2_state_monad$returnS (SOME w__0))) (\ (addr :
      xlenbits option) .  sail2_state_monad$bindS
   (if (((rs2 = (0b00000w :  5 words$word)))) then sail2_state_monad$returnS NONE
    else sail2_state_monad$bindS (rX_bits rs2  : ( 32 words$word) M) (\ (w__1 :  32 words$word) .  sail2_state_monad$returnS (SOME w__1))) (\ (asid :
      xlenbits option) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__2 : Privilege) . 
   (case w__2 of
     User => sail2_state_monad$seqS (handle_illegal () ) (sail2_state_monad$returnS RETIRE_FAIL)
   | Supervisor => sail2_state_monad$bindS
      (sail2_state_monad$read_regS mstatus_ref) (\ (w__3 : Mstatus) .  sail2_state_monad$bindS
      (sail2_state_monad$read_regS mstatus_ref) (\ (w__4 : Mstatus) . 
      let p__317 =
        (architecture ((get_mstatus_SXL w__3  :  2 words$word)), (get_Mstatus_TVM w__4  :  1 words$word)) in
      (case p__317 of
        (SOME (g__316), b__0) =>
         if (((b__0 = (0b1w :  1 words$word)))) then sail2_state_monad$seqS (handle_illegal () ) (sail2_state_monad$returnS RETIRE_FAIL)
         else if (((b__0 = (0b0w :  1 words$word)))) then sail2_state_monad$seqS (flush_TLB asid addr) (sail2_state_monad$returnS RETIRE_SUCCESS)
         else
           (case (SOME g__316, b__0) of
             (_, _) => internal_error "unimplemented sfence architecture"
           )
      | (_, _) => internal_error "unimplemented sfence architecture"
      )))
   | Machine => sail2_state_monad$seqS (flush_TLB asid addr) (sail2_state_monad$returnS RETIRE_SUCCESS)
   ))))))`;


(*val execute_RTYPEW : mword ty5 -> mword ty5 -> mword ty5 -> ropw -> M Retired*)

val _ = Define `
 ((execute_RTYPEW:(5)words$word ->(5)words$word ->(5)words$word -> ropw ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs2 rs1 rd op=  (sail2_state_monad$bindS
   (rX_bits rs1  : ( 32 words$word) M) (\ (w__0 :  32 words$word) . 
   let rs1_val = ((subrange_vec_dec w__0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in sail2_state_monad$bindS
   (rX_bits rs2  : ( 32 words$word) M) (\ (w__1 :  32 words$word) . 
   let rs2_val = ((subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in
   let (result : 32 bits) =
     ((case op of
       RISCV_ADDW => (add_vec rs1_val rs2_val  :  32 words$word)
     | RISCV_SUBW => (sub_vec rs1_val rs2_val  :  32 words$word)
     | RISCV_SLLW =>
        (shift_bits_left rs1_val ((subrange_vec_dec rs2_val (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word))
          :  32 words$word)
     | RISCV_SRLW =>
        (shift_bits_right rs1_val ((subrange_vec_dec rs2_val (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word))
          :  32 words$word)
     | RISCV_SRAW =>
        (shift_right_arith32 rs1_val ((subrange_vec_dec rs2_val (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word))
          :  32 words$word)
     )) in sail2_state_monad$seqS
   (wX_bits rd ((EXTS (( 32 : int):ii) result  :  32 words$word))) (sail2_state_monad$returnS RETIRE_SUCCESS)))))`;


(*val execute_RTYPE : mword ty5 -> mword ty5 -> mword ty5 -> rop -> M Retired*)

val _ = Define `
 ((execute_RTYPE:(5)words$word ->(5)words$word ->(5)words$word -> rop ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs2 rs1 rd op=  (sail2_state_monad$bindS
   (rX_bits rs1  : ( 32 words$word) M) (\ rs1_val .  sail2_state_monad$bindS
   (rX_bits rs2  : ( 32 words$word) M) (\ rs2_val . 
   let (result : xlenbits) =
     ((case op of
       RISCV_ADD => (add_vec rs1_val rs2_val  :  32 words$word)
     | RISCV_SLT =>
        (EXTZ (( 32 : int):ii) ((bool_to_bits ((zopz0zI_s rs1_val rs2_val))  :  1 words$word))  :  32 words$word)
     | RISCV_SLTU =>
        (EXTZ (( 32 : int):ii) ((bool_to_bits ((zopz0zI_u rs1_val rs2_val))  :  1 words$word))  :  32 words$word)
     | RISCV_AND => (and_vec rs1_val rs2_val  :  32 words$word)
     | RISCV_OR => (or_vec rs1_val rs2_val  :  32 words$word)
     | RISCV_XOR => (xor_vec rs1_val rs2_val  :  32 words$word)
     | RISCV_SLL =>
        (shift_bits_left rs1_val ((subrange_vec_dec rs2_val (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word))
          :  32 words$word)
     | RISCV_SRL =>
        (shift_bits_right rs1_val ((subrange_vec_dec rs2_val (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word))
          :  32 words$word)
     | RISCV_SUB => (sub_vec rs1_val rs2_val  :  32 words$word)
     | RISCV_SRA =>
        (shift_right_arith32 rs1_val ((subrange_vec_dec rs2_val (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word))
          :  32 words$word)
     )) in sail2_state_monad$seqS
   (wX_bits rd result) (sail2_state_monad$returnS RETIRE_SUCCESS)))))`;


(*val execute_RISCV_JALR : mword ty12 -> mword ty5 -> mword ty5 -> M Retired*)

val _ = Define `
 ((execute_RISCV_JALR:(12)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) imm rs1 rd=  (sail2_state_monad$bindS
   (rX_bits rs1  : ( 32 words$word) M) (\ (w__0 :  32 words$word) . 
   let (t : xlenbits) = ((add_vec w__0 ((EXTS (( 32 : int):ii) imm  :  32 words$word))  :  32 words$word)) in
   (case ((ext_control_check_addr t)) of
     Ext_ControlAddr_Error (e) =>
      let (_ : unit) = (ext_handle_control_check_error e) in
      sail2_state_monad$returnS RETIRE_FAIL
   | Ext_ControlAddr_OK (addr) =>
      let target = ((update_vec_dec addr (( 0 : int):ii) B0  :  32 words$word)) in sail2_state_monad$bindS
      (sail2_state$and_boolS (sail2_state_monad$returnS ((bit_to_bool ((access_vec_dec target (( 1 : int):ii))))))
        ( sail2_state_monad$bindS(haveRVC () ) (\ (w__1 : bool) .  sail2_state_monad$returnS ((~ w__1))))) (\ (w__2 : bool) . 
      if w__2 then sail2_state_monad$seqS (handle_mem_exception target (E_Fetch_Addr_Align () )) (sail2_state_monad$returnS RETIRE_FAIL)
      else sail2_state_monad$bindS
        (get_next_pc ()   : ( 32 words$word) M) (\ (w__3 :  32 words$word) .  sail2_state_monad$seqS (sail2_state_monad$seqS
        (wX_bits rd w__3) (set_next_pc target)) (sail2_state_monad$returnS RETIRE_SUCCESS)))
   ))))`;


(*val execute_RISCV_JAL : mword ty21 -> mword ty5 -> M Retired*)

val _ = Define `
 ((execute_RISCV_JAL:(21)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) imm rd=  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS PC_ref  : ( 32 words$word) M) (\ (w__0 :  32 words$word) . 
   let (t : xlenbits) = ((add_vec w__0 ((EXTS (( 32 : int):ii) imm  :  32 words$word))  :  32 words$word)) in
   (case ((ext_control_check_pc t)) of
     Ext_ControlAddr_Error (e) =>
      let (_ : unit) = (ext_handle_control_check_error e) in
      sail2_state_monad$returnS RETIRE_FAIL
   | Ext_ControlAddr_OK (target) => sail2_state_monad$bindS
      (sail2_state$and_boolS (sail2_state_monad$returnS ((bit_to_bool ((access_vec_dec target (( 1 : int):ii))))))
        ( sail2_state_monad$bindS(haveRVC () ) (\ (w__1 : bool) .  sail2_state_monad$returnS ((~ w__1))))) (\ (w__2 : bool) . 
      if w__2 then sail2_state_monad$seqS (handle_mem_exception target (E_Fetch_Addr_Align () )) (sail2_state_monad$returnS RETIRE_FAIL)
      else sail2_state_monad$bindS
        (get_next_pc ()   : ( 32 words$word) M) (\ (w__3 :  32 words$word) .  sail2_state_monad$seqS (sail2_state_monad$seqS
        (wX_bits rd w__3) (set_next_pc target)) (sail2_state_monad$returnS RETIRE_SUCCESS)))
   ))))`;


(*val execute_REMW : mword ty5 -> mword ty5 -> mword ty5 -> bool -> M Retired*)

val _ = Define `
 ((execute_REMW:(5)words$word ->(5)words$word ->(5)words$word -> bool ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs2 rs1 rd s=  (sail2_state_monad$bindS
   (haveMulDiv () ) (\ (w__0 : bool) . 
   if w__0 then sail2_state_monad$bindS
     (rX_bits rs1  : ( 32 words$word) M) (\ (w__1 :  32 words$word) . 
     let rs1_val = ((subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in sail2_state_monad$bindS
     (rX_bits rs2  : ( 32 words$word) M) (\ (w__2 :  32 words$word) . 
     let rs2_val = ((subrange_vec_dec w__2 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in
     let (rs1_int : ii) = (if s then integer_word$w2i rs1_val else lem$w2ui rs1_val) in
     let (rs2_int : ii) = (if s then integer_word$w2i rs2_val else lem$w2ui rs2_val) in
     let (r : ii) = (if (((rs2_int = (( 0 : int):ii)))) then rs1_int else hardware_mod rs1_int rs2_int) in sail2_state_monad$seqS
     (wX_bits rd ((EXTS (( 32 : int):ii) ((to_bits (( 32 : int):ii) r  :  32 words$word))  :  32 words$word)))
     (sail2_state_monad$returnS RETIRE_SUCCESS)))
   else sail2_state_monad$seqS (handle_illegal () ) (sail2_state_monad$returnS RETIRE_FAIL))))`;


(*val execute_REM : mword ty5 -> mword ty5 -> mword ty5 -> bool -> M Retired*)

val _ = Define `
 ((execute_REM:(5)words$word ->(5)words$word ->(5)words$word -> bool ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs2 rs1 rd s=  (sail2_state_monad$bindS
   (haveMulDiv () ) (\ (w__0 : bool) . 
   if w__0 then sail2_state_monad$bindS
     (rX_bits rs1  : ( 32 words$word) M) (\ rs1_val .  sail2_state_monad$bindS
     (rX_bits rs2  : ( 32 words$word) M) (\ rs2_val . 
     let (rs1_int : ii) = (if s then integer_word$w2i rs1_val else lem$w2ui rs1_val) in
     let (rs2_int : ii) = (if s then integer_word$w2i rs2_val else lem$w2ui rs2_val) in
     let (r : ii) = (if (((rs2_int = (( 0 : int):ii)))) then rs1_int else hardware_mod rs1_int rs2_int) in sail2_state_monad$seqS
     (wX_bits rd ((to_bits (( 32 : int):ii) r  :  32 words$word))) (sail2_state_monad$returnS RETIRE_SUCCESS)))
   else sail2_state_monad$seqS (handle_illegal () ) (sail2_state_monad$returnS RETIRE_FAIL))))`;


(*val execute_MULW : mword ty5 -> mword ty5 -> mword ty5 -> M Retired*)

val _ = Define `
 ((execute_MULW:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs2 rs1 rd=  (sail2_state_monad$bindS
   (haveMulDiv () ) (\ (w__0 : bool) . 
   if w__0 then sail2_state_monad$bindS
     (rX_bits rs1  : ( 32 words$word) M) (\ (w__1 :  32 words$word) . 
     let rs1_val = ((subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in sail2_state_monad$bindS
     (rX_bits rs2  : ( 32 words$word) M) (\ (w__2 :  32 words$word) . 
     let rs2_val = ((subrange_vec_dec w__2 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in
     let (rs1_int : ii) = (integer_word$w2i rs1_val) in
     let (rs2_int : ii) = (integer_word$w2i rs2_val) in
     let result32 =
       ((subrange_vec_dec ((to_bits (( 64 : int):ii) ((rs1_int * rs2_int))  :  64 words$word)) (( 31 : int):ii)
          (( 0 : int):ii)
         :  32 words$word)) in
     let (result : xlenbits) = ((EXTS (( 32 : int):ii) result32  :  32 words$word)) in sail2_state_monad$seqS
     (wX_bits rd result) (sail2_state_monad$returnS RETIRE_SUCCESS)))
   else sail2_state_monad$seqS (handle_illegal () ) (sail2_state_monad$returnS RETIRE_FAIL))))`;


(*val execute_MUL : mword ty5 -> mword ty5 -> mword ty5 -> bool -> bool -> bool -> M Retired*)

val _ = Define `
 ((execute_MUL:(5)words$word ->(5)words$word ->(5)words$word -> bool -> bool -> bool ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs2 rs1 rd high signed1 signed2=  (sail2_state_monad$bindS
   (haveMulDiv () ) (\ (w__0 : bool) . 
   if w__0 then sail2_state_monad$bindS
     (rX_bits rs1  : ( 32 words$word) M) (\ rs1_val .  sail2_state_monad$bindS
     (rX_bits rs2  : ( 32 words$word) M) (\ rs2_val . 
     let (rs1_int : ii) = (if signed1 then integer_word$w2i rs1_val else lem$w2ui rs1_val) in
     let (rs2_int : ii) = (if signed2 then integer_word$w2i rs2_val else lem$w2ui rs2_val) in
     let result_wide =
       ((to_bits (((( 2 : int):ii) * (( 32 : int):ii))) ((rs1_int * rs2_int))  :  64 words$word)) in
     let result =
       (if high then
         (subrange_vec_dec result_wide (((((( 2 : int):ii) * (( 32 : int):ii))) - (( 1 : int):ii)))
            (( 32 : int):ii)
           :  32 words$word)
       else (subrange_vec_dec result_wide (((( 32 : int):ii) - (( 1 : int):ii))) (( 0 : int):ii)  :  32 words$word)) in sail2_state_monad$seqS
     (wX_bits rd result) (sail2_state_monad$returnS RETIRE_SUCCESS)))
   else sail2_state_monad$seqS (handle_illegal () ) (sail2_state_monad$returnS RETIRE_FAIL))))`;


(*val execute_MRET : unit -> M Retired*)

val _ = Define `
 ((execute_MRET:unit ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__0 : Privilege) . 
   if (((w__0 <> Machine))) then sail2_state_monad$seqS (handle_illegal () ) (sail2_state_monad$returnS RETIRE_FAIL)
   else if ((~ ((ext_check_xret_priv Machine)))) then
     let (_ : unit) = (ext_fail_xret_priv () ) in
     sail2_state_monad$returnS RETIRE_FAIL
   else sail2_state_monad$bindS
     (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__1 : Privilege) .  sail2_state_monad$bindS
     (sail2_state_monad$read_regS PC_ref  : ( 32 words$word) M) (\ (w__2 :  32 words$word) .  sail2_state_monad$bindS
     (exception_handler w__1 (CTL_MRET () ) w__2  : ( 32 words$word) M) (\ (w__3 :  32 words$word) .  sail2_state_monad$seqS
     (set_next_pc w__3) (sail2_state_monad$returnS RETIRE_SUCCESS)))))))`;


(*val execute_LOAD_FP : mword ty12 -> mword ty5 -> mword ty5 -> word_width -> M Retired*)

val _ = Define `
 ((execute_LOAD_FP:(12)words$word ->(5)words$word ->(5)words$word -> word_width ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) imm rs1 rd width=
    (let (offset : xlenbits) = ((EXTS (( 32 : int):ii) imm  :  32 words$word)) in sail2_state_monad$bindS
   (ext_data_get_addr rs1 offset (Read Data) width) (\ (w__0 : unit Ext_DataAddr_Check) . 
   (case w__0 of
     Ext_DataAddr_Error (e) =>
      let (_ : unit) = (ext_handle_data_check_error e) in
      sail2_state_monad$returnS RETIRE_FAIL
   | Ext_DataAddr_OK (vaddr) =>
      if ((check_misaligned vaddr width)) then sail2_state_monad$seqS
        (handle_mem_exception vaddr (E_Load_Addr_Align () )) (sail2_state_monad$returnS RETIRE_FAIL)
      else sail2_state_monad$bindS
        (translateAddr vaddr (Read Data)  : ( (( 32 words$word), ExceptionType)TR_Result) M) (\ (w__1 : (( 32 words$word), ExceptionType)
          TR_Result) . 
        (case w__1 of
          TR_Failure ((e, _)) => sail2_state_monad$seqS (handle_mem_exception vaddr e) (sail2_state_monad$returnS RETIRE_FAIL)
        | TR_Address ((addr, _)) =>
           let (aq, rl, res) = (F, F, F) in
           (case (width, (( 32 : int):ii)) of
             (BYTE, g__318) => sail2_state_monad$seqS (handle_illegal () ) (sail2_state_monad$returnS RETIRE_FAIL)
           | (HALF, g__319) => sail2_state_monad$seqS (handle_illegal () ) (sail2_state_monad$returnS RETIRE_FAIL)
           | (WORD, g__320) => sail2_state_monad$bindS
              (mem_read (Read Data) addr (( 4 : int):ii) aq rl res  : ( ( 32 words$word)MemoryOpResult) M) (\ (w__2 : ( 32 words$word)
                MemoryOpResult) . 
              process_fload32 rd vaddr w__2)
           | _ => sail2_state_monad$seqS
              (sail2_state_monad$assert_expS F "Pattern match failure at model/riscv_insts_fext.sail 331:10 - 338:11")
              (sail2_state_monad$exitS () )
           )
        ))
   ))))`;


(*val execute_LOADRES : bool -> bool -> mword ty5 -> word_width -> mword ty5 -> M Retired*)

val _ = Define `
 ((execute_LOADRES:bool -> bool ->(5)words$word -> word_width ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) aq rl rs1 width rd=  (sail2_state_monad$bindS
   (haveAtomics () ) (\ (w__0 : bool) . 
   if w__0 then sail2_state_monad$bindS
     (ext_data_get_addr rs1 ((zeros_implicit (( 32 : int):ii)  :  32 words$word)) (Read Data) width) (\ (w__1 : unit
       Ext_DataAddr_Check) . 
     (case w__1 of
       Ext_DataAddr_Error (e) =>
        let (_ : unit) = (ext_handle_data_check_error e) in
        sail2_state_monad$returnS RETIRE_FAIL
     | Ext_DataAddr_OK (vaddr) =>
        let (aligned : bool) =
          ((case width of
            BYTE => T
          | HALF => (((subrange_vec_dec vaddr (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)) = (0b0w :  1 words$word))
          | WORD => (((subrange_vec_dec vaddr (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b00w :  2 words$word))
          | DOUBLE =>
             (((subrange_vec_dec vaddr (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) = (0b000w :  3 words$word))
          )) in
        if ((~ aligned)) then sail2_state_monad$seqS
          (handle_mem_exception vaddr (E_Load_Addr_Align () )) (sail2_state_monad$returnS RETIRE_FAIL)
        else sail2_state_monad$bindS
          (translateAddr vaddr (Read Data)  : ( (( 32 words$word), ExceptionType)TR_Result) M) (\ (w__2 : (( 32 words$word), ExceptionType)
            TR_Result) . 
          (case w__2 of
            TR_Failure ((e, _)) => sail2_state_monad$seqS (handle_mem_exception vaddr e) (sail2_state_monad$returnS RETIRE_FAIL)
          | TR_Address ((addr, _)) =>
             (case (width, (( 32 : int):ii)) of
               (BYTE, _) => sail2_state_monad$bindS
                (mem_read (Read Data) addr (( 1 : int):ii) aq (((aq /\ rl))) T
                  : ( ( 8 words$word)MemoryOpResult) M) (\ (w__3 : ( 8 words$word) MemoryOpResult) . 
                process_loadres rd vaddr w__3 F)
             | (HALF, _) => sail2_state_monad$bindS
                (mem_read (Read Data) addr (( 2 : int):ii) aq (((aq /\ rl))) T
                  : ( ( 16 words$word)MemoryOpResult) M) (\ (w__5 : ( 16 words$word) MemoryOpResult) . 
                process_loadres rd vaddr w__5 F)
             | (WORD, _) => sail2_state_monad$bindS
                (mem_read (Read Data) addr (( 4 : int):ii) aq (((aq /\ rl))) T
                  : ( ( 32 words$word)MemoryOpResult) M) (\ (w__7 : ( 32 words$word) MemoryOpResult) . 
                process_loadres rd vaddr w__7 F)
             | _ => internal_error "Unexpected AMO width"
             )
          ))
     ))
   else sail2_state_monad$seqS (handle_illegal () ) (sail2_state_monad$returnS RETIRE_FAIL))))`;


(*val execute_LOAD : mword ty12 -> mword ty5 -> mword ty5 -> bool -> word_width -> bool -> bool -> M Retired*)

val _ = Define `
 ((execute_LOAD:(12)words$word ->(5)words$word ->(5)words$word -> bool -> word_width -> bool -> bool ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) imm rs1 rd is_unsigned width aq rl=
    (let (offset : xlenbits) = ((EXTS (( 32 : int):ii) imm  :  32 words$word)) in sail2_state_monad$bindS
   (ext_data_get_addr rs1 offset (Read Data) width) (\ (w__0 : unit Ext_DataAddr_Check) . 
   (case w__0 of
     Ext_DataAddr_Error (e) =>
      let (_ : unit) = (ext_handle_data_check_error e) in
      sail2_state_monad$returnS RETIRE_FAIL
   | Ext_DataAddr_OK (vaddr) =>
      if ((check_misaligned vaddr width)) then sail2_state_monad$seqS
        (handle_mem_exception vaddr (E_Load_Addr_Align () )) (sail2_state_monad$returnS RETIRE_FAIL)
      else sail2_state_monad$bindS
        (translateAddr vaddr (Read Data)  : ( (( 32 words$word), ExceptionType)TR_Result) M) (\ (w__1 : (( 32 words$word), ExceptionType)
          TR_Result) . 
        (case w__1 of
          TR_Failure ((e, _)) => sail2_state_monad$seqS (handle_mem_exception vaddr e) (sail2_state_monad$returnS RETIRE_FAIL)
        | TR_Address ((paddr, _)) =>
           (case (width, (( 32 : int):ii)) of
             (BYTE, g__310) => sail2_state_monad$bindS
              (mem_read (Read Data) paddr (( 1 : int):ii) aq rl F  : ( ( 8 words$word)MemoryOpResult) M) (\ (w__2 : ( 8 words$word)
                MemoryOpResult) . 
              process_load rd vaddr w__2 is_unsigned)
           | (HALF, g__311) => sail2_state_monad$bindS
              (mem_read (Read Data) paddr (( 2 : int):ii) aq rl F  : ( ( 16 words$word)MemoryOpResult) M) (\ (w__4 : ( 16 words$word)
                MemoryOpResult) . 
              process_load rd vaddr w__4 is_unsigned)
           | (WORD, g__312) => sail2_state_monad$bindS
              (mem_read (Read Data) paddr (( 4 : int):ii) aq rl F  : ( ( 32 words$word)MemoryOpResult) M) (\ (w__6 : ( 32 words$word)
                MemoryOpResult) . 
              process_load rd vaddr w__6 is_unsigned)
           | _ => sail2_state_monad$seqS
              (sail2_state_monad$assert_expS F "Pattern match failure at model/riscv_insts_base.sail 329:10 - 338:11")
              (sail2_state_monad$exitS () )
           )
        ))
   ))))`;


(*val execute_ITYPE : mword ty12 -> mword ty5 -> mword ty5 -> iop -> M Retired*)

val _ = Define `
 ((execute_ITYPE:(12)words$word ->(5)words$word ->(5)words$word -> iop ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) imm rs1 rd op=  (sail2_state_monad$bindS
   (rX_bits rs1  : ( 32 words$word) M) (\ rs1_val . 
   let (immext : xlenbits) = ((EXTS (( 32 : int):ii) imm  :  32 words$word)) in
   let (result : xlenbits) =
     ((case op of
       RISCV_ADDI => (add_vec rs1_val immext  :  32 words$word)
     | RISCV_SLTI =>
        (EXTZ (( 32 : int):ii) ((bool_to_bits ((zopz0zI_s rs1_val immext))  :  1 words$word))  :  32 words$word)
     | RISCV_SLTIU =>
        (EXTZ (( 32 : int):ii) ((bool_to_bits ((zopz0zI_u rs1_val immext))  :  1 words$word))  :  32 words$word)
     | RISCV_ANDI => (and_vec rs1_val immext  :  32 words$word)
     | RISCV_ORI => (or_vec rs1_val immext  :  32 words$word)
     | RISCV_XORI => (xor_vec rs1_val immext  :  32 words$word)
     )) in sail2_state_monad$seqS
   (wX_bits rd result) (sail2_state_monad$returnS RETIRE_SUCCESS))))`;


(*val execute_ILLEGAL : mword ty32 -> M Retired*)

val _ = Define `
 ((execute_ILLEGAL:(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=  (sail2_state_monad$seqS (handle_illegal () ) (sail2_state_monad$returnS RETIRE_FAIL)))`;


(*val execute_F_UN_TYPE_S : mword ty5 -> mword ty5 -> f_un_op_S -> M Retired*)

val _ = Define `
 ((execute_F_UN_TYPE_S:(5)words$word ->(5)words$word -> f_un_op_S ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg0 arg1 arg2=
    (let merge_var = (arg0, arg1, arg2) in
   (case merge_var of
     (rs1, rd, FCLASS_S) => sail2_state_monad$bindS
      (rF_bits rs1  : ( 32 words$word) M) (\ (w__0 :  32 words$word) . 
      let rs1_val_S = ((nan_unbox w__0  :  32 words$word)) in
      let (rd_val_10b : 10 bits) =
        (if ((f_is_neg_inf_S rs1_val_S)) then (0b0000000001w :  10 words$word)
        else if ((f_is_neg_norm_S rs1_val_S)) then (0b0000000010w :  10 words$word)
        else if ((f_is_neg_subnorm_S rs1_val_S)) then (0b0000000100w :  10 words$word)
        else if ((f_is_neg_zero_S rs1_val_S)) then (0b0000001000w :  10 words$word)
        else if ((f_is_pos_zero_S rs1_val_S)) then (0b0000010000w :  10 words$word)
        else if ((f_is_pos_subnorm_S rs1_val_S)) then (0b0000100000w :  10 words$word)
        else if ((f_is_pos_norm_S rs1_val_S)) then (0b0001000000w :  10 words$word)
        else if ((f_is_pos_inf_S rs1_val_S)) then (0b0010000000w :  10 words$word)
        else if ((f_is_SNaN_S rs1_val_S)) then (0b0100000000w :  10 words$word)
        else if ((f_is_QNaN_S rs1_val_S)) then (0b1000000000w :  10 words$word)
        else (zeros_implicit (( 10 : int):ii)  :  10 words$word)) in sail2_state_monad$seqS
      (wX_bits rd ((EXTZ (( 32 : int):ii) rd_val_10b  :  32 words$word))) (sail2_state_monad$returnS RETIRE_SUCCESS))
   | (rs1, rd, FMV_X_W) => sail2_state_monad$bindS
      (rF_bits rs1  : ( 32 words$word) M) (\ (w__0 :  32 words$word) . 
      let rs1_val_S = ((subrange_vec_dec w__0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in
      let (rd_val_X : xlenbits) = ((EXTS (( 32 : int):ii) rs1_val_S  :  32 words$word)) in sail2_state_monad$seqS
      (wX_bits rd rd_val_X) (sail2_state_monad$returnS RETIRE_SUCCESS))
   | (rs1, rd, FMV_W_X) => sail2_state_monad$bindS
      (rX_bits rs1  : ( 32 words$word) M) (\ rs1_val_X . 
      let rd_val_S = ((subrange_vec_dec rs1_val_X (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in sail2_state_monad$seqS
      (wF_bits rd ((nan_box rd_val_S  :  32 words$word))) (sail2_state_monad$returnS RETIRE_SUCCESS))
   )))`;


(*val execute_F_UN_RM_TYPE_S : mword ty5 -> rounding_mode -> mword ty5 -> f_un_rm_op_S -> M Retired*)

val _ = Define `
 ((execute_F_UN_RM_TYPE_S:(5)words$word -> rounding_mode ->(5)words$word -> f_un_rm_op_S ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg0 arg1 arg2 arg3=
    (let merge_var = (arg0, arg1, arg2, arg3) in
   (case merge_var of
     (rs1, rm, rd, FSQRT_S) => sail2_state_monad$bindS
      (rF_bits rs1  : ( 32 words$word) M) (\ (w__0 :  32 words$word) . 
      let rs1_val_S = ((nan_unbox w__0  :  32 words$word)) in sail2_state_monad$bindS
      (select_instr_or_fcsr_rm rm) (\ (w__1 : rounding_mode) . 
      let rm_3b = ((encdec_rounding_mode_forwards w__1  :  3 words$word)) in sail2_state_monad$bindS
      (riscv_f32Sqrt rm_3b rs1_val_S  : (( 5 words$word #  32 words$word)) M) (\ varstup .  let (fflags, rd_val_S) = varstup in sail2_state_monad$seqS (sail2_state_monad$seqS
      (write_fflags fflags) (wF_bits rd ((nan_box rd_val_S  :  32 words$word)))) (sail2_state_monad$returnS RETIRE_SUCCESS))))
   | (rs1, rm, rd, FCVT_W_S) => sail2_state_monad$bindS
      (rF_bits rs1  : ( 32 words$word) M) (\ (w__0 :  32 words$word) . 
      let rs1_val_S = ((nan_unbox w__0  :  32 words$word)) in sail2_state_monad$bindS
      (select_instr_or_fcsr_rm rm) (\ (w__1 : rounding_mode) . 
      let rm_3b = ((encdec_rounding_mode_forwards w__1  :  3 words$word)) in sail2_state_monad$bindS
      (riscv_f32ToI32 rm_3b rs1_val_S  : (( 5 words$word #  32 words$word)) M) (\ varstup .  let (fflags, rd_val_W) = varstup in sail2_state_monad$seqS (sail2_state_monad$seqS
      (write_fflags fflags)
      (wX_bits rd ((EXTS (( 32 : int):ii) rd_val_W  :  32 words$word)))) (sail2_state_monad$returnS RETIRE_SUCCESS))))
   | (rs1, rm, rd, FCVT_WU_S) => sail2_state_monad$bindS
      (rF_bits rs1  : ( 32 words$word) M) (\ (w__0 :  32 words$word) . 
      let rs1_val_S = ((nan_unbox w__0  :  32 words$word)) in sail2_state_monad$bindS
      (select_instr_or_fcsr_rm rm) (\ (w__1 : rounding_mode) . 
      let rm_3b = ((encdec_rounding_mode_forwards w__1  :  3 words$word)) in sail2_state_monad$bindS
      (riscv_f32ToUi32 rm_3b rs1_val_S  : (( 5 words$word #  32 words$word)) M) (\ varstup .  let (fflags, rd_val_WU) = varstup in sail2_state_monad$seqS (sail2_state_monad$seqS
      (write_fflags fflags)
      (wX_bits rd ((EXTS (( 32 : int):ii) rd_val_WU  :  32 words$word)))) (sail2_state_monad$returnS RETIRE_SUCCESS))))
   | (rs1, rm, rd, FCVT_S_W) => sail2_state_monad$bindS
      (rX_bits rs1  : ( 32 words$word) M) (\ (w__0 :  32 words$word) . 
      let rs1_val_W = ((subrange_vec_dec w__0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in sail2_state_monad$bindS
      (select_instr_or_fcsr_rm rm) (\ (w__1 : rounding_mode) . 
      let rm_3b = ((encdec_rounding_mode_forwards w__1  :  3 words$word)) in sail2_state_monad$bindS
      (riscv_i32ToF32 rm_3b rs1_val_W  : (( 5 words$word #  32 words$word)) M) (\ varstup .  let (fflags, rd_val_S) = varstup in sail2_state_monad$seqS (sail2_state_monad$seqS
      (write_fflags fflags) (wF_bits rd ((nan_box rd_val_S  :  32 words$word)))) (sail2_state_monad$returnS RETIRE_SUCCESS))))
   | (rs1, rm, rd, FCVT_S_WU) => sail2_state_monad$bindS
      (rX_bits rs1  : ( 32 words$word) M) (\ (w__0 :  32 words$word) . 
      let rs1_val_WU = ((subrange_vec_dec w__0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in sail2_state_monad$bindS
      (select_instr_or_fcsr_rm rm) (\ (w__1 : rounding_mode) . 
      let rm_3b = ((encdec_rounding_mode_forwards w__1  :  3 words$word)) in sail2_state_monad$bindS
      (riscv_ui32ToF32 rm_3b rs1_val_WU  : (( 5 words$word #  32 words$word)) M) (\ varstup .  let (fflags, rd_val_S) = varstup in sail2_state_monad$seqS (sail2_state_monad$seqS
      (write_fflags fflags) (wF_bits rd ((nan_box rd_val_S  :  32 words$word)))) (sail2_state_monad$returnS RETIRE_SUCCESS))))
   | (rs1, rm, rd, FCVT_L_S) => sail2_state_monad$returnS RETIRE_FAIL
   | (rs1, rm, rd, FCVT_LU_S) => sail2_state_monad$returnS RETIRE_FAIL
   | (rs1, rm, rd, FCVT_S_L) => sail2_state_monad$returnS RETIRE_FAIL
   | (rs1, rm, rd, FCVT_S_LU) => sail2_state_monad$returnS RETIRE_FAIL
   )))`;


(*val execute_F_MADD_TYPE_S : mword ty5 -> mword ty5 -> mword ty5 -> rounding_mode -> mword ty5 -> f_madd_op_S -> M Retired*)

val _ = Define `
 ((execute_F_MADD_TYPE_S:(5)words$word ->(5)words$word ->(5)words$word -> rounding_mode ->(5)words$word -> f_madd_op_S ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs3 rs2 rs1 rm rd op=  (sail2_state_monad$bindS
   (rF_bits rs1  : ( 32 words$word) M) (\ (w__0 :  32 words$word) . 
   let rs1_val_32b = ((nan_unbox w__0  :  32 words$word)) in sail2_state_monad$bindS
   (rF_bits rs2  : ( 32 words$word) M) (\ (w__1 :  32 words$word) . 
   let rs2_val_32b = ((nan_unbox w__1  :  32 words$word)) in sail2_state_monad$bindS
   (rF_bits rs3  : ( 32 words$word) M) (\ (w__2 :  32 words$word) . 
   let rs3_val_32b = ((nan_unbox w__2  :  32 words$word)) in sail2_state_monad$bindS
   (select_instr_or_fcsr_rm rm) (\ (w__3 : rounding_mode) . 
   let rm_3b = ((encdec_rounding_mode_forwards w__3  :  3 words$word)) in sail2_state_monad$bindS
   (case op of
     FMADD_S =>
      (riscv_f32MulAdd rm_3b rs1_val_32b rs2_val_32b rs3_val_32b  : (( 5 words$word #  32 words$word)) M)
   | FMSUB_S =>
      (riscv_f32MulAdd rm_3b rs1_val_32b rs2_val_32b ((negate_S rs3_val_32b  :  32 words$word))
        : (( 5 words$word #  32 words$word)) M)
   | FNMSUB_S =>
      (riscv_f32MulAdd rm_3b ((negate_S rs1_val_32b  :  32 words$word)) rs2_val_32b rs3_val_32b
        : (( 5 words$word #  32 words$word)) M)
   | FNMADD_S =>
      (riscv_f32MulAdd rm_3b ((negate_S rs1_val_32b  :  32 words$word)) rs2_val_32b
         ((negate_S rs3_val_32b  :  32 words$word))
        : (( 5 words$word #  32 words$word)) M)
   ) (\ varstup .  let ((fflags : 5 bits), (rd_val_32b : 32 bits)) = varstup in sail2_state_monad$seqS (sail2_state_monad$seqS
   (write_fflags fflags) (wF_bits rd ((nan_box rd_val_32b  :  32 words$word)))) (sail2_state_monad$returnS RETIRE_SUCCESS))))))))`;


(*val execute_F_BIN_TYPE_S : mword ty5 -> mword ty5 -> mword ty5 -> f_bin_op_S -> M Retired*)

val _ = Define `
 ((execute_F_BIN_TYPE_S:(5)words$word ->(5)words$word ->(5)words$word -> f_bin_op_S ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg0 arg1 arg2 arg3=
    (let merge_var = (arg0, arg1, arg2, arg3) in
   (case merge_var of
     (rs2, rs1, rd, FSGNJ_S) => sail2_state_monad$bindS
      (rF_bits rs1  : ( 32 words$word) M) (\ (w__0 :  32 words$word) . 
      let rs1_val_S = ((nan_unbox w__0  :  32 words$word)) in sail2_state_monad$bindS
      (rF_bits rs2  : ( 32 words$word) M) (\ (w__1 :  32 words$word) . 
      let rs2_val_S = ((nan_unbox w__1  :  32 words$word)) in
      let (s1, e1, m1) = ((fsplit_S rs1_val_S  : ( 1 words$word #  8 words$word #  23 words$word))) in
      let (s2, e2, m2) = ((fsplit_S rs2_val_S  : ( 1 words$word #  8 words$word #  23 words$word))) in
      let rd_val_S = ((fmake_S s2 e1 m1  :  32 words$word)) in sail2_state_monad$seqS
      (wF_bits rd ((nan_box rd_val_S  :  32 words$word))) (sail2_state_monad$returnS RETIRE_SUCCESS)))
   | (rs2, rs1, rd, FSGNJN_S) => sail2_state_monad$bindS
      (rF_bits rs1  : ( 32 words$word) M) (\ (w__0 :  32 words$word) . 
      let rs1_val_S = ((nan_unbox w__0  :  32 words$word)) in sail2_state_monad$bindS
      (rF_bits rs2  : ( 32 words$word) M) (\ (w__1 :  32 words$word) . 
      let rs2_val_S = ((nan_unbox w__1  :  32 words$word)) in
      let (s1, e1, m1) = ((fsplit_S rs1_val_S  : ( 1 words$word #  8 words$word #  23 words$word))) in
      let (s2, e2, m2) = ((fsplit_S rs2_val_S  : ( 1 words$word #  8 words$word #  23 words$word))) in
      let rd_val_S = ((fmake_S ((xor_vec (0b1w :  1 words$word) s2  :  1 words$word)) e1 m1  :  32 words$word)) in sail2_state_monad$seqS
      (wF_bits rd ((nan_box rd_val_S  :  32 words$word))) (sail2_state_monad$returnS RETIRE_SUCCESS)))
   | (rs2, rs1, rd, FSGNJX_S) => sail2_state_monad$bindS
      (rF_bits rs1  : ( 32 words$word) M) (\ (w__0 :  32 words$word) . 
      let rs1_val_S = ((nan_unbox w__0  :  32 words$word)) in sail2_state_monad$bindS
      (rF_bits rs2  : ( 32 words$word) M) (\ (w__1 :  32 words$word) . 
      let rs2_val_S = ((nan_unbox w__1  :  32 words$word)) in
      let (s1, e1, m1) = ((fsplit_S rs1_val_S  : ( 1 words$word #  8 words$word #  23 words$word))) in
      let (s2, e2, m2) = ((fsplit_S rs2_val_S  : ( 1 words$word #  8 words$word #  23 words$word))) in
      let rd_val_S = ((fmake_S ((xor_vec s1 s2  :  1 words$word)) e1 m1  :  32 words$word)) in sail2_state_monad$seqS
      (wF_bits rd ((nan_box rd_val_S  :  32 words$word))) (sail2_state_monad$returnS RETIRE_SUCCESS)))
   | (rs2, rs1, rd, FMIN_S) => sail2_state_monad$bindS
      (rF_bits rs1  : ( 32 words$word) M) (\ (w__0 :  32 words$word) . 
      let rs1_val_S = ((nan_unbox w__0  :  32 words$word)) in sail2_state_monad$bindS
      (rF_bits rs2  : ( 32 words$word) M) (\ (w__1 :  32 words$word) . 
      let rs2_val_S = ((nan_unbox w__1  :  32 words$word)) in
      let is_quiet = T in
      let (rs1_lt_rs2, fflags) = ((fle_S rs1_val_S rs2_val_S is_quiet  : (bool #  5 words$word))) in
      let rd_val_S =
        (if (((((f_is_NaN_S rs1_val_S)) /\ ((f_is_NaN_S rs2_val_S))))) then
          (canonical_NaN_S ()   :  32 words$word)
        else if ((f_is_NaN_S rs1_val_S)) then rs2_val_S
        else if ((f_is_NaN_S rs2_val_S)) then rs1_val_S
        else if (((((f_is_neg_zero_S rs1_val_S)) /\ ((f_is_pos_zero_S rs2_val_S))))) then
          rs1_val_S
        else if (((((f_is_neg_zero_S rs2_val_S)) /\ ((f_is_pos_zero_S rs1_val_S))))) then
          rs2_val_S
        else if rs1_lt_rs2 then rs1_val_S
        else rs2_val_S) in sail2_state_monad$seqS (sail2_state_monad$seqS
      (accrue_fflags fflags) (wF_bits rd ((nan_box rd_val_S  :  32 words$word)))) (sail2_state_monad$returnS RETIRE_SUCCESS)))
   | (rs2, rs1, rd, FMAX_S) => sail2_state_monad$bindS
      (rF_bits rs1  : ( 32 words$word) M) (\ (w__0 :  32 words$word) . 
      let rs1_val_S = ((nan_unbox w__0  :  32 words$word)) in sail2_state_monad$bindS
      (rF_bits rs2  : ( 32 words$word) M) (\ (w__1 :  32 words$word) . 
      let rs2_val_S = ((nan_unbox w__1  :  32 words$word)) in
      let is_quiet = T in
      let (rs2_lt_rs1, fflags) = ((fle_S rs2_val_S rs1_val_S is_quiet  : (bool #  5 words$word))) in
      let rd_val_S =
        (if (((((f_is_NaN_S rs1_val_S)) /\ ((f_is_NaN_S rs2_val_S))))) then
          (canonical_NaN_S ()   :  32 words$word)
        else if ((f_is_NaN_S rs1_val_S)) then rs2_val_S
        else if ((f_is_NaN_S rs2_val_S)) then rs1_val_S
        else if (((((f_is_neg_zero_S rs1_val_S)) /\ ((f_is_pos_zero_S rs2_val_S))))) then
          rs2_val_S
        else if (((((f_is_neg_zero_S rs2_val_S)) /\ ((f_is_pos_zero_S rs1_val_S))))) then
          rs1_val_S
        else if rs2_lt_rs1 then rs1_val_S
        else rs2_val_S) in sail2_state_monad$seqS (sail2_state_monad$seqS
      (accrue_fflags fflags) (wF_bits rd ((nan_box rd_val_S  :  32 words$word)))) (sail2_state_monad$returnS RETIRE_SUCCESS)))
   | (rs2, rs1, rd, FEQ_S) => sail2_state_monad$bindS
      (rF_bits rs1  : ( 32 words$word) M) (\ (w__0 :  32 words$word) . 
      let rs1_val_S = ((nan_unbox w__0  :  32 words$word)) in sail2_state_monad$bindS
      (rF_bits rs2  : ( 32 words$word) M) (\ (w__1 :  32 words$word) . 
      let rs2_val_S = ((nan_unbox w__1  :  32 words$word)) in sail2_state_monad$bindS
      (riscv_f32Eq rs1_val_S rs2_val_S  : (( 5 words$word #  32 words$word)) M) (\ varstup .  let ((fflags :
        bits_fflags), (rd_val : bits_WU)) = varstup in sail2_state_monad$seqS (sail2_state_monad$seqS
      (write_fflags fflags)
      (wX_bits rd ((EXTZ (( 32 : int):ii) rd_val  :  32 words$word)))) (sail2_state_monad$returnS RETIRE_SUCCESS))))
   | (rs2, rs1, rd, FLT_S) => sail2_state_monad$bindS
      (rF_bits rs1  : ( 32 words$word) M) (\ (w__0 :  32 words$word) . 
      let rs1_val_S = ((nan_unbox w__0  :  32 words$word)) in sail2_state_monad$bindS
      (rF_bits rs2  : ( 32 words$word) M) (\ (w__1 :  32 words$word) . 
      let rs2_val_S = ((nan_unbox w__1  :  32 words$word)) in sail2_state_monad$bindS
      (riscv_f32Lt rs1_val_S rs2_val_S  : (( 5 words$word #  32 words$word)) M) (\ varstup .  let ((fflags :
        bits_fflags), (rd_val : bits_WU)) = varstup in sail2_state_monad$seqS (sail2_state_monad$seqS
      (write_fflags fflags)
      (wX_bits rd ((EXTZ (( 32 : int):ii) rd_val  :  32 words$word)))) (sail2_state_monad$returnS RETIRE_SUCCESS))))
   | (rs2, rs1, rd, FLE_S) => sail2_state_monad$bindS
      (rF_bits rs1  : ( 32 words$word) M) (\ (w__0 :  32 words$word) . 
      let rs1_val_S = ((nan_unbox w__0  :  32 words$word)) in sail2_state_monad$bindS
      (rF_bits rs2  : ( 32 words$word) M) (\ (w__1 :  32 words$word) . 
      let rs2_val_S = ((nan_unbox w__1  :  32 words$word)) in sail2_state_monad$bindS
      (riscv_f32Le rs1_val_S rs2_val_S  : (( 5 words$word #  32 words$word)) M) (\ varstup .  let ((fflags :
        bits_fflags), (rd_val : bits_WU)) = varstup in sail2_state_monad$seqS (sail2_state_monad$seqS
      (write_fflags fflags)
      (wX_bits rd ((EXTZ (( 32 : int):ii) rd_val  :  32 words$word)))) (sail2_state_monad$returnS RETIRE_SUCCESS))))
   )))`;


(*val execute_F_BIN_RM_TYPE_S : mword ty5 -> mword ty5 -> rounding_mode -> mword ty5 -> f_bin_rm_op_S -> M Retired*)

val _ = Define `
 ((execute_F_BIN_RM_TYPE_S:(5)words$word ->(5)words$word -> rounding_mode ->(5)words$word -> f_bin_rm_op_S ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs2 rs1 rm rd op=  (sail2_state_monad$bindS
   (rF_bits rs1  : ( 32 words$word) M) (\ (w__0 :  32 words$word) . 
   let rs1_val_32b = ((nan_unbox w__0  :  32 words$word)) in sail2_state_monad$bindS
   (rF_bits rs2  : ( 32 words$word) M) (\ (w__1 :  32 words$word) . 
   let rs2_val_32b = ((nan_unbox w__1  :  32 words$word)) in sail2_state_monad$bindS
   (select_instr_or_fcsr_rm rm) (\ (w__2 : rounding_mode) . 
   let rm_3b = ((encdec_rounding_mode_forwards w__2  :  3 words$word)) in sail2_state_monad$bindS
   (case op of
     FADD_S => (riscv_f32Add rm_3b rs1_val_32b rs2_val_32b  : (( 5 words$word #  32 words$word)) M)
   | FSUB_S => (riscv_f32Sub rm_3b rs1_val_32b rs2_val_32b  : (( 5 words$word #  32 words$word)) M)
   | FMUL_S => (riscv_f32Mul rm_3b rs1_val_32b rs2_val_32b  : (( 5 words$word #  32 words$word)) M)
   | FDIV_S => (riscv_f32Div rm_3b rs1_val_32b rs2_val_32b  : (( 5 words$word #  32 words$word)) M)
   ) (\ varstup .  let ((fflags : 5 bits), (rd_val_32b : 32 bits)) = varstup in sail2_state_monad$seqS (sail2_state_monad$seqS
   (write_fflags fflags) (wF_bits rd ((nan_box rd_val_32b  :  32 words$word)))) (sail2_state_monad$returnS RETIRE_SUCCESS)))))))`;


(*val execute_FENCE_TSO : mword ty4 -> mword ty4 -> M Retired*)

val _ = Define `
 ((execute_FENCE_TSO:(4)words$word ->(4)words$word ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) pred succ=  (sail2_state_monad$seqS
   (case (pred, succ) of
     (v__1172, v__1173) =>
      if ((((((((subrange_vec_dec v__1172 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b11w :  2 words$word)))) /\ (((((subrange_vec_dec v__1173 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b11w :  2 words$word)))))))
      then
        barrier (Barrier_RISCV_tso () )
      else
        sail2_state_monad$returnS (if ((((((((subrange_vec_dec v__1172 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b00w :  2 words$word)))) /\ (((((subrange_vec_dec v__1173 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b00w :  2 words$word))))))) then
                  () 
                else
                  let (_ : unit) = (print_endline "FIXME: unsupported fence") in
                  () )
   )
   (sail2_state_monad$returnS RETIRE_SUCCESS)))`;


(*val execute_FENCE_RESERVED : mword ty4 -> mword ty4 -> mword ty4 -> mword ty5 -> mword ty5 -> Retired*)

val _ = Define `
 ((execute_FENCE_RESERVED:(4)words$word ->(4)words$word ->(4)words$word ->(5)words$word ->(5)words$word -> Retired) fm pred succ rs rd=  RETIRE_SUCCESS)`;


(*val execute_FENCEI_RESERVED : mword ty12 -> mword ty5 -> mword ty5 -> Retired*)

val _ = Define `
 ((execute_FENCEI_RESERVED:(12)words$word ->(5)words$word ->(5)words$word -> Retired) imm rs rd=  RETIRE_SUCCESS)`;


(*val execute_FENCEI : unit -> Retired*)

val _ = Define `
 ((execute_FENCEI:unit -> Retired) () =  RETIRE_SUCCESS)`;


(*val execute_FENCE : mword ty4 -> mword ty4 -> M Retired*)

val _ = Define `
 ((execute_FENCE:(4)words$word ->(4)words$word ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) pred succ=  (sail2_state_monad$seqS
   (case (pred, succ) of
     (v__1132, v__1133) =>
      if ((((((((subrange_vec_dec v__1132 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b11w :  2 words$word)))) /\ (((((subrange_vec_dec v__1133 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b11w :  2 words$word)))))))
      then
        barrier (Barrier_RISCV_rw_rw () )
      else if ((((((((subrange_vec_dec v__1132 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word)))) /\ (((((subrange_vec_dec v__1133 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b11w :  2 words$word))))))) then
        barrier (Barrier_RISCV_r_rw () )
      else if ((((((((subrange_vec_dec v__1132 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word)))) /\ (((((subrange_vec_dec v__1133 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word))))))) then
        barrier (Barrier_RISCV_r_r () )
      else if ((((((((subrange_vec_dec v__1132 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b11w :  2 words$word)))) /\ (((((subrange_vec_dec v__1133 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word))))))) then
        barrier (Barrier_RISCV_rw_w () )
      else if ((((((((subrange_vec_dec v__1132 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))) /\ (((((subrange_vec_dec v__1133 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word))))))) then
        barrier (Barrier_RISCV_w_w () )
      else if ((((((((subrange_vec_dec v__1132 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))) /\ (((((subrange_vec_dec v__1133 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b11w :  2 words$word))))))) then
        barrier (Barrier_RISCV_w_rw () )
      else if ((((((((subrange_vec_dec v__1132 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b11w :  2 words$word)))) /\ (((((subrange_vec_dec v__1133 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word))))))) then
        barrier (Barrier_RISCV_rw_r () )
      else if ((((((((subrange_vec_dec v__1132 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word)))) /\ (((((subrange_vec_dec v__1133 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word))))))) then
        barrier (Barrier_RISCV_r_w () )
      else if ((((((((subrange_vec_dec v__1132 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b01w :  2 words$word)))) /\ (((((subrange_vec_dec v__1133 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b10w :  2 words$word))))))) then
        barrier (Barrier_RISCV_w_r () )
      else
        sail2_state_monad$returnS (if (((((subrange_vec_dec v__1133 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b00w :  2 words$word)))) then
                  () 
                else if (((((subrange_vec_dec v__1132 (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b00w :  2 words$word)))) then
                  () 
                else
                  let (_ : unit) = (print_endline "FIXME: unsupported fence") in
                  () )
   )
   (sail2_state_monad$returnS RETIRE_SUCCESS)))`;


(*val execute_ECALL : unit -> M Retired*)

val _ = Define `
 ((execute_ECALL:unit ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__0 : Privilege) . 
   let (t : sync_exception) =
     (<| sync_exception_trap :=
          ((case w__0 of
            User => E_U_EnvCall () 
          | Supervisor => E_S_EnvCall () 
          | Machine => E_M_EnvCall () 
          )); 
        sync_exception_excinfo := NONE; 
        sync_exception_ext := NONE |>) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__1 : Privilege) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS PC_ref  : ( 32 words$word) M) (\ (w__2 :  32 words$word) .  sail2_state_monad$bindS
   (exception_handler w__1 (CTL_TRAP t) w__2  : ( 32 words$word) M) (\ (w__3 :  32 words$word) .  sail2_state_monad$seqS
   (set_next_pc w__3) (sail2_state_monad$returnS RETIRE_FAIL)))))))`;


(*val execute_EBREAK : unit -> M Retired*)

val _ = Define `
 ((execute_EBREAK:unit ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS PC_ref  : ( 32 words$word) M) (\ (w__0 :  32 words$word) .  sail2_state_monad$seqS
   (handle_mem_exception w__0 (E_Breakpoint () )) (sail2_state_monad$returnS RETIRE_FAIL))))`;


(*val execute_DIVW : mword ty5 -> mword ty5 -> mword ty5 -> bool -> M Retired*)

val _ = Define `
 ((execute_DIVW:(5)words$word ->(5)words$word ->(5)words$word -> bool ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs2 rs1 rd s=  (sail2_state_monad$bindS
   (haveMulDiv () ) (\ (w__0 : bool) . 
   if w__0 then sail2_state_monad$bindS
     (rX_bits rs1  : ( 32 words$word) M) (\ (w__1 :  32 words$word) . 
     let rs1_val = ((subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in sail2_state_monad$bindS
     (rX_bits rs2  : ( 32 words$word) M) (\ (w__2 :  32 words$word) . 
     let rs2_val = ((subrange_vec_dec w__2 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in
     let (rs1_int : ii) = (if s then integer_word$w2i rs1_val else lem$w2ui rs1_val) in
     let (rs2_int : ii) = (if s then integer_word$w2i rs2_val else lem$w2ui rs2_val) in
     let (q : ii) = (if (((rs2_int = (( 0 : int):ii)))) then ((( 0 : int)-( 1 : int)):ii) else hardware_quot rs1_int rs2_int) in
     let (q' : ii) =
       (if (((s /\ ((q > ((((pow2 (( 31 : int):ii))) - (( 1 : int):ii)))))))) then
         (( 0 : int):ii) - ((pow0 (( 2 : int):ii) (( 31 : int):ii)))
       else q) in sail2_state_monad$seqS
     (wX_bits rd ((EXTS (( 32 : int):ii) ((to_bits (( 32 : int):ii) q'  :  32 words$word))  :  32 words$word)))
     (sail2_state_monad$returnS RETIRE_SUCCESS)))
   else sail2_state_monad$seqS (handle_illegal () ) (sail2_state_monad$returnS RETIRE_FAIL))))`;


(*val execute_DIV : mword ty5 -> mword ty5 -> mword ty5 -> bool -> M Retired*)

val _ = Define `
 ((execute_DIV:(5)words$word ->(5)words$word ->(5)words$word -> bool ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) rs2 rs1 rd s=  (sail2_state_monad$bindS
   (haveMulDiv () ) (\ (w__0 : bool) . 
   if w__0 then sail2_state_monad$bindS
     (rX_bits rs1  : ( 32 words$word) M) (\ rs1_val .  sail2_state_monad$bindS
     (rX_bits rs2  : ( 32 words$word) M) (\ rs2_val . 
     let (rs1_int : ii) = (if s then integer_word$w2i rs1_val else lem$w2ui rs1_val) in
     let (rs2_int : ii) = (if s then integer_word$w2i rs2_val else lem$w2ui rs2_val) in
     let (q : ii) = (if (((rs2_int = (( 0 : int):ii)))) then ((( 0 : int)-( 1 : int)):ii) else hardware_quot rs1_int rs2_int) in
     let (q' : ii) = (if (((s /\ ((q > xlen_max_signed))))) then xlen_min_signed else q) in sail2_state_monad$seqS
     (wX_bits rd ((to_bits (( 32 : int):ii) q'  :  32 words$word))) (sail2_state_monad$returnS RETIRE_SUCCESS)))
   else sail2_state_monad$seqS (handle_illegal () ) (sail2_state_monad$returnS RETIRE_FAIL))))`;


(*val execute_C_SRLI_HINT : mword ty3 -> Retired*)

val _ = Define `
 ((execute_C_SRLI_HINT:(3)words$word -> Retired) rsd=  RETIRE_SUCCESS)`;


(*val execute_C_SRAI_HINT : mword ty3 -> Retired*)

val _ = Define `
 ((execute_C_SRAI_HINT:(3)words$word -> Retired) rsd=  RETIRE_SUCCESS)`;


(*val execute_C_SLLI_HINT : mword ty6 -> mword ty5 -> Retired*)

val _ = Define `
 ((execute_C_SLLI_HINT:(6)words$word ->(5)words$word -> Retired) shamt rsd=  RETIRE_SUCCESS)`;


(*val execute_C_NOP_HINT : mword ty6 -> Retired*)

val _ = Define `
 ((execute_C_NOP_HINT:(6)words$word -> Retired) imm=  RETIRE_SUCCESS)`;


(*val execute_C_NOP : unit -> Retired*)

val _ = Define `
 ((execute_C_NOP:unit -> Retired) () =  RETIRE_SUCCESS)`;


(*val execute_C_MV_HINT : mword ty5 -> Retired*)

val _ = Define `
 ((execute_C_MV_HINT:(5)words$word -> Retired) rs2=  RETIRE_SUCCESS)`;


(*val execute_C_LUI_HINT : mword ty6 -> Retired*)

val _ = Define `
 ((execute_C_LUI_HINT:(6)words$word -> Retired) imm=  RETIRE_SUCCESS)`;


(*val execute_C_LI_HINT : mword ty6 -> Retired*)

val _ = Define `
 ((execute_C_LI_HINT:(6)words$word -> Retired) imm=  RETIRE_SUCCESS)`;


(*val execute_C_ILLEGAL : mword ty16 -> M Retired*)

val _ = Define `
 ((execute_C_ILLEGAL:(16)words$word ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) s=  (sail2_state_monad$seqS (handle_illegal () ) (sail2_state_monad$returnS RETIRE_FAIL)))`;


(*val execute_C_ADD_HINT : mword ty5 -> Retired*)

val _ = Define `
 ((execute_C_ADD_HINT:(5)words$word -> Retired) rs2=  RETIRE_SUCCESS)`;


(*val execute_C_ADDI_HINT : mword ty5 -> Retired*)

val _ = Define `
 ((execute_C_ADDI_HINT:(5)words$word -> Retired) rsd=  RETIRE_SUCCESS)`;


(*val execute_CSR : mword ty12 -> mword ty5 -> mword ty5 -> bool -> csrop -> M Retired*)

val _ = Define `
 ((execute_CSR:(12)words$word ->(5)words$word ->(5)words$word -> bool -> csrop ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) csr rs1 rd is_imm op=  (sail2_state_monad$bindS
   (if is_imm then sail2_state_monad$returnS ((EXTZ (( 32 : int):ii) rs1  :  32 words$word))
    else (rX_bits rs1  : ( 32 words$word) M)) (\ (rs1_val : xlenbits) . 
   let (isWrite : bool) =
     ((case op of
       CSRRW => T
     | _ => if is_imm then (((lem$w2ui rs1_val)) <> (( 0 : int):ii)) else (((lem$w2ui rs1)) <> (( 0 : int):ii))
     )) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__1 : Privilege) .  sail2_state_monad$bindS
   (check_CSR csr w__1 isWrite) (\ (w__2 : bool) . 
   if ((~ w__2)) then sail2_state_monad$seqS (handle_illegal () ) (sail2_state_monad$returnS RETIRE_FAIL)
   else sail2_state_monad$bindS
     (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__3 : Privilege) . 
     if ((~ ((ext_check_CSR csr w__3 isWrite)))) then
       let (_ : unit) = (ext_check_CSR_fail () ) in
       sail2_state_monad$returnS RETIRE_FAIL
     else sail2_state_monad$bindS
       (readCSR csr  : ( 32 words$word) M) (\ csr_val .  sail2_state_monad$seqS (sail2_state_monad$seqS
       (if isWrite then
          let (new_val : xlenbits) =
            ((case op of
              CSRRW => rs1_val
            | CSRRS => (or_vec csr_val rs1_val  :  32 words$word)
            | CSRRC => (and_vec csr_val ((not_vec rs1_val  :  32 words$word))  :  32 words$word)
            )) in
          writeCSR csr new_val
        else sail2_state_monad$returnS () )
       (wX_bits rd csr_val)) (sail2_state_monad$returnS RETIRE_SUCCESS))))))))`;


(*val execute_BTYPE : mword ty13 -> mword ty5 -> mword ty5 -> bop -> M Retired*)

val _ = Define `
 ((execute_BTYPE:(13)words$word ->(5)words$word ->(5)words$word -> bop ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) imm rs2 rs1 op=  (sail2_state_monad$bindS
   (rX_bits rs1  : ( 32 words$word) M) (\ rs1_val .  sail2_state_monad$bindS
   (rX_bits rs2  : ( 32 words$word) M) (\ rs2_val . 
   let (taken : bool) =
     ((case op of
       RISCV_BEQ => (rs1_val = rs2_val)
     | RISCV_BNE => (rs1_val <> rs2_val)
     | RISCV_BLT => zopz0zI_s rs1_val rs2_val
     | RISCV_BGE => zopz0zKzJ_s rs1_val rs2_val
     | RISCV_BLTU => zopz0zI_u rs1_val rs2_val
     | RISCV_BGEU => zopz0zKzJ_u rs1_val rs2_val
     )) in sail2_state_monad$bindS
   (sail2_state_monad$read_regS PC_ref  : ( 32 words$word) M) (\ (w__0 :  32 words$word) . 
   let (t : xlenbits) = ((add_vec w__0 ((EXTS (( 32 : int):ii) imm  :  32 words$word))  :  32 words$word)) in
   if taken then
     (case ((ext_control_check_pc t)) of
       Ext_ControlAddr_Error (e) =>
        let (_ : unit) = (ext_handle_control_check_error e) in
        sail2_state_monad$returnS RETIRE_FAIL
     | Ext_ControlAddr_OK (target) => sail2_state_monad$bindS
        (sail2_state$and_boolS (sail2_state_monad$returnS ((bit_to_bool ((access_vec_dec target (( 1 : int):ii))))))
          ( sail2_state_monad$bindS(haveRVC () ) (\ (w__1 : bool) .  sail2_state_monad$returnS ((~ w__1))))) (\ (w__2 : bool) . 
        if w__2 then sail2_state_monad$seqS (handle_mem_exception target (E_Fetch_Addr_Align () )) (sail2_state_monad$returnS RETIRE_FAIL)
        else sail2_state_monad$seqS (set_next_pc target) (sail2_state_monad$returnS RETIRE_SUCCESS))
     )
   else sail2_state_monad$returnS RETIRE_SUCCESS)))))`;


(*val execute_AMO : amoop -> bool -> bool -> mword ty5 -> mword ty5 -> word_width -> mword ty5 -> M Retired*)

val _ = Define `
 ((execute_AMO:amoop -> bool -> bool ->(5)words$word ->(5)words$word -> word_width ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) op aq rl rs2 rs1 width rd=  (sail2_state_monad$bindS
   (haveAtomics () ) (\ (w__0 : bool) . 
   if w__0 then sail2_state_monad$bindS
     (ext_data_get_addr rs1 ((zeros_implicit (( 32 : int):ii)  :  32 words$word)) (ReadWrite (Data, Data)) width) (\ (w__1 : unit
       Ext_DataAddr_Check) . 
     (case w__1 of
       Ext_DataAddr_Error (e) =>
        let (_ : unit) = (ext_handle_data_check_error e) in
        sail2_state_monad$returnS RETIRE_FAIL
     | Ext_DataAddr_OK (vaddr) => sail2_state_monad$bindS
        (translateAddr vaddr (ReadWrite (Data, Data))  : ( (( 32 words$word), ExceptionType)TR_Result) M) (\ (w__2 : (( 32 words$word), ExceptionType)
          TR_Result) . 
        (case w__2 of
          TR_Failure ((e, _)) => sail2_state_monad$seqS (handle_mem_exception vaddr e) (sail2_state_monad$returnS RETIRE_FAIL)
        | TR_Address ((addr, _)) => sail2_state_monad$bindS
           (case (width, (( 32 : int):ii)) of
             (BYTE, _) => mem_write_ea addr (( 1 : int):ii) (((aq /\ rl))) rl T
           | (HALF, _) => mem_write_ea addr (( 2 : int):ii) (((aq /\ rl))) rl T
           | (WORD, _) => mem_write_ea addr (( 4 : int):ii) (((aq /\ rl))) rl T
           | _ => internal_error "Unexpected AMO width"
           ) (\ (eares : unit MemoryOpResult) . 
           let (is_unsigned : bool) =
             ((case op of   AMOMINU => T | AMOMAXU => T | _ => F )) in sail2_state_monad$bindS
           (case width of
             BYTE =>
              if is_unsigned then sail2_state_monad$bindS
                (rX_bits rs2  : ( 32 words$word) M) (\ (w__7 :  32 words$word) . 
                sail2_state_monad$returnS ((EXTZ (( 32 : int):ii) ((subrange_vec_dec w__7 (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
                          :  32 words$word)))
              else sail2_state_monad$bindS
                (rX_bits rs2  : ( 32 words$word) M) (\ (w__8 :  32 words$word) . 
                sail2_state_monad$returnS ((EXTS (( 32 : int):ii) ((subrange_vec_dec w__8 (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
                          :  32 words$word)))
           | HALF =>
              if is_unsigned then sail2_state_monad$bindS
                (rX_bits rs2  : ( 32 words$word) M) (\ (w__10 :  32 words$word) . 
                sail2_state_monad$returnS ((EXTZ (( 32 : int):ii) ((subrange_vec_dec w__10 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))
                          :  32 words$word)))
              else sail2_state_monad$bindS
                (rX_bits rs2  : ( 32 words$word) M) (\ (w__11 :  32 words$word) . 
                sail2_state_monad$returnS ((EXTS (( 32 : int):ii) ((subrange_vec_dec w__11 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))
                          :  32 words$word)))
           | WORD =>
              if is_unsigned then sail2_state_monad$bindS
                (rX_bits rs2  : ( 32 words$word) M) (\ (w__13 :  32 words$word) . 
                sail2_state_monad$returnS ((EXTZ (( 32 : int):ii) ((subrange_vec_dec w__13 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                          :  32 words$word)))
              else sail2_state_monad$bindS
                (rX_bits rs2  : ( 32 words$word) M) (\ (w__14 :  32 words$word) . 
                sail2_state_monad$returnS ((EXTS (( 32 : int):ii) ((subrange_vec_dec w__14 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                          :  32 words$word)))
           | DOUBLE => (rX_bits rs2  : ( 32 words$word) M)
           ) (\ (rs2_val : xlenbits) . 
           (case eares of
             MemException (e) => sail2_state_monad$seqS (handle_mem_exception addr e) (sail2_state_monad$returnS RETIRE_FAIL)
           | MemValue (_) => sail2_state_monad$bindS
              (case (width, (( 32 : int):ii)) of
                (BYTE, _) => sail2_state_monad$bindS
                 (mem_read (ReadWrite (Data, Data)) addr (( 1 : int):ii) aq (((aq /\ rl))) T
                   : ( ( 8 words$word)MemoryOpResult) M) (\ (w__17 : ( 8 words$word) MemoryOpResult) . 
                 sail2_state_monad$returnS ((extend_value is_unsigned w__17  : ( 32 words$word) MemoryOpResult)))
              | (HALF, _) => sail2_state_monad$bindS
                 (mem_read (ReadWrite (Data, Data)) addr (( 2 : int):ii) aq (((aq /\ rl))) T
                   : ( ( 16 words$word)MemoryOpResult) M) (\ (w__18 : ( 16 words$word) MemoryOpResult) . 
                 sail2_state_monad$returnS ((extend_value is_unsigned w__18  : ( 32 words$word) MemoryOpResult)))
              | (WORD, _) => sail2_state_monad$bindS
                 (mem_read (ReadWrite (Data, Data)) addr (( 4 : int):ii) aq (((aq /\ rl))) T
                   : ( ( 32 words$word)MemoryOpResult) M) (\ (w__19 : ( 32 words$word) MemoryOpResult) . 
                 sail2_state_monad$returnS ((extend_value is_unsigned w__19  : ( 32 words$word) MemoryOpResult)))
              | _ => (internal_error "Unexpected AMO width"  : ( ( 32 words$word)MemoryOpResult) M)
              ) (\ (mval : xlenbits MemoryOpResult) . 
              (case mval of
                MemException (e) => sail2_state_monad$seqS (handle_mem_exception addr e) (sail2_state_monad$returnS RETIRE_FAIL)
              | MemValue (loaded) =>
                 let (result : xlenbits) =
                   ((case op of
                     AMOSWAP => rs2_val
                   | AMOADD => (add_vec rs2_val loaded  :  32 words$word)
                   | AMOXOR => (xor_vec rs2_val loaded  :  32 words$word)
                   | AMOAND => (and_vec rs2_val loaded  :  32 words$word)
                   | AMOOR => (or_vec rs2_val loaded  :  32 words$word)
                   | AMOMIN =>
                      (to_bits (( 32 : int):ii) ((int_min ((integer_word$w2i rs2_val)) ((integer_word$w2i loaded))))  :  32 words$word)
                   | AMOMAX =>
                      (to_bits (( 32 : int):ii) ((int_max ((integer_word$w2i rs2_val)) ((integer_word$w2i loaded))))  :  32 words$word)
                   | AMOMINU =>
                      (to_bits (( 32 : int):ii) ((int_min ((lem$w2ui rs2_val)) ((lem$w2ui loaded))))  :  32 words$word)
                   | AMOMAXU =>
                      (to_bits (( 32 : int):ii) ((int_max ((lem$w2ui rs2_val)) ((lem$w2ui loaded))))  :  32 words$word)
                   )) in
                 let (rval : xlenbits) =
                   ((case width of
                     BYTE =>
                      (EXTS (( 32 : int):ii) ((subrange_vec_dec loaded (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
                        :  32 words$word)
                   | HALF =>
                      (EXTS (( 32 : int):ii) ((subrange_vec_dec loaded (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))
                        :  32 words$word)
                   | WORD =>
                      (EXTS (( 32 : int):ii) ((subrange_vec_dec loaded (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                        :  32 words$word)
                   | DOUBLE => loaded
                   )) in sail2_state_monad$bindS
                 (case (width, (( 32 : int):ii)) of
                   (BYTE, _) =>
                    mem_write_value addr (( 1 : int):ii)
                      ((subrange_vec_dec result (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word)) (((aq /\ rl))) rl
                      T
                 | (HALF, _) =>
                    mem_write_value addr (( 2 : int):ii)
                      ((subrange_vec_dec result (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) (((aq /\ rl))) rl
                      T
                 | (WORD, _) =>
                    mem_write_value addr (( 4 : int):ii)
                      ((subrange_vec_dec result (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) (((aq /\ rl))) rl
                      T
                 | _ => internal_error "Unexpected AMO width"
                 ) (\ (wval : bool MemoryOpResult) . 
                 (case wval of
                   MemValue (T) => sail2_state_monad$seqS (wX_bits rd rval) (sail2_state_monad$returnS RETIRE_SUCCESS)
                 | MemValue (F) => internal_error "AMO got false from mem_write_value"
                 | MemException (e) => sail2_state_monad$seqS (handle_mem_exception addr e) (sail2_state_monad$returnS RETIRE_FAIL)
                 ))
              ))
           )))
        ))
     ))
   else sail2_state_monad$seqS (handle_illegal () ) (sail2_state_monad$returnS RETIRE_FAIL))))`;


(*val execute_ADDIW : mword ty12 -> mword ty5 -> mword ty5 -> M Retired*)

val _ = Define `
 ((execute_ADDIW:(12)words$word ->(5)words$word ->(5)words$word ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) imm rs1 rd=  (sail2_state_monad$bindS
   (rX_bits rs1  : ( 32 words$word) M) (\ (w__0 :  32 words$word) . 
   let (result : xlenbits) = ((add_vec ((EXTS (( 32 : int):ii) imm  :  32 words$word)) w__0  :  32 words$word)) in sail2_state_monad$seqS
   (wX_bits rd
     ((EXTS (( 32 : int):ii) ((subrange_vec_dec result (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))  :  32 words$word)))
   (sail2_state_monad$returnS RETIRE_SUCCESS))))`;


 val execute_defn = Hol_defn "execute" `
 ((execute:ast ->(regstate)sail2_state_monad$sequential_state ->(((Retired),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) merge_var=
    ((case merge_var of
     C_ADDI4SPN ((rdc, nzimm)) =>
      let (imm : 12 bits) =
        ((concat_vec (0b00w :  2 words$word) ((concat_vec nzimm (0b00w :  2 words$word)  :  10 words$word))
          :  12 words$word)) in
      let rd = ((creg2reg_idx rdc  :  5 words$word)) in
      execute (ITYPE (imm, sp, rd, RISCV_ADDI))
   | C_LW ((uimm, rsc, rdc)) =>
      let (imm : 12 bits) =
        ((EXTZ (( 12 : int):ii) ((concat_vec uimm (0b00w :  2 words$word)  :  7 words$word))  :  12 words$word)) in
      let rd = ((creg2reg_idx rdc  :  5 words$word)) in
      let rs = ((creg2reg_idx rsc  :  5 words$word)) in
      execute (LOAD (imm, rs, rd, F, WORD, F, F))
   | C_LD ((uimm, rsc, rdc)) =>
      let (imm : 12 bits) =
        ((EXTZ (( 12 : int):ii) ((concat_vec uimm (0b000w :  3 words$word)  :  8 words$word))  :  12 words$word)) in
      let rd = ((creg2reg_idx rdc  :  5 words$word)) in
      let rs = ((creg2reg_idx rsc  :  5 words$word)) in
      execute (LOAD (imm, rs, rd, F, DOUBLE, F, F))
   | C_SW ((uimm, rsc1, rsc2)) =>
      let (imm : 12 bits) =
        ((EXTZ (( 12 : int):ii) ((concat_vec uimm (0b00w :  2 words$word)  :  7 words$word))  :  12 words$word)) in
      let rs1 = ((creg2reg_idx rsc1  :  5 words$word)) in
      let rs2 = ((creg2reg_idx rsc2  :  5 words$word)) in
      execute (STORE (imm, rs2, rs1, WORD, F, F))
   | C_SD ((uimm, rsc1, rsc2)) =>
      let (imm : 12 bits) =
        ((EXTZ (( 12 : int):ii) ((concat_vec uimm (0b000w :  3 words$word)  :  8 words$word))  :  12 words$word)) in
      let rs1 = ((creg2reg_idx rsc1  :  5 words$word)) in
      let rs2 = ((creg2reg_idx rsc2  :  5 words$word)) in
      execute (STORE (imm, rs2, rs1, DOUBLE, F, F))
   | C_ADDI ((nzi, rsd)) =>
      let (imm : 12 bits) = ((EXTS (( 12 : int):ii) nzi  :  12 words$word)) in
      execute (ITYPE (imm, rsd, rsd, RISCV_ADDI))
   | C_JAL (imm) =>
      execute
        (RISCV_JAL ((EXTS (( 21 : int):ii) ((concat_vec imm (0b0w :  1 words$word)  :  12 words$word))  :  21 words$word),
                    ra))
   | C_ADDIW ((imm, rsd)) => execute (ADDIW ((EXTS (( 12 : int):ii) imm  :  12 words$word), rsd, rsd))
   | C_LI ((imm, rd)) =>
      let (imm : 12 bits) = ((EXTS (( 12 : int):ii) imm  :  12 words$word)) in
      execute (ITYPE (imm, zreg, rd, RISCV_ADDI))
   | C_ADDI16SP (imm) =>
      let (imm : 12 bits) =
        ((EXTS (( 12 : int):ii) ((concat_vec imm (0x0w :  4 words$word)  :  10 words$word))  :  12 words$word)) in
      execute (ITYPE (imm, sp, sp, RISCV_ADDI))
   | C_LUI ((imm, rd)) =>
      let (res : 20 bits) = ((EXTS (( 20 : int):ii) imm  :  20 words$word)) in
      execute (UTYPE (res, rd, RISCV_LUI))
   | C_SRLI ((shamt, rsd)) =>
      let rsd = ((creg2reg_idx rsd  :  5 words$word)) in
      execute (SHIFTIOP (shamt, rsd, rsd, RISCV_SRLI))
   | C_SRAI ((shamt, rsd)) =>
      let rsd = ((creg2reg_idx rsd  :  5 words$word)) in
      execute (SHIFTIOP (shamt, rsd, rsd, RISCV_SRAI))
   | C_ANDI ((imm, rsd)) =>
      let rsd = ((creg2reg_idx rsd  :  5 words$word)) in
      execute (ITYPE ((EXTS (( 12 : int):ii) imm  :  12 words$word), rsd, rsd, RISCV_ANDI))
   | C_SUB ((rsd, rs2)) =>
      let rsd = ((creg2reg_idx rsd  :  5 words$word)) in
      let rs2 = ((creg2reg_idx rs2  :  5 words$word)) in
      execute (RTYPE (rs2, rsd, rsd, RISCV_SUB))
   | C_XOR ((rsd, rs2)) =>
      let rsd = ((creg2reg_idx rsd  :  5 words$word)) in
      let rs2 = ((creg2reg_idx rs2  :  5 words$word)) in
      execute (RTYPE (rs2, rsd, rsd, RISCV_XOR))
   | C_OR ((rsd, rs2)) =>
      let rsd = ((creg2reg_idx rsd  :  5 words$word)) in
      let rs2 = ((creg2reg_idx rs2  :  5 words$word)) in
      execute (RTYPE (rs2, rsd, rsd, RISCV_OR))
   | C_AND ((rsd, rs2)) =>
      let rsd = ((creg2reg_idx rsd  :  5 words$word)) in
      let rs2 = ((creg2reg_idx rs2  :  5 words$word)) in
      execute (RTYPE (rs2, rsd, rsd, RISCV_AND))
   | C_SUBW ((rsd, rs2)) =>
      let rsd = ((creg2reg_idx rsd  :  5 words$word)) in
      let rs2 = ((creg2reg_idx rs2  :  5 words$word)) in
      execute (RTYPEW (rs2, rsd, rsd, RISCV_SUBW))
   | C_ADDW ((rsd, rs2)) =>
      let rsd = ((creg2reg_idx rsd  :  5 words$word)) in
      let rs2 = ((creg2reg_idx rs2  :  5 words$word)) in
      execute (RTYPEW (rs2, rsd, rsd, RISCV_ADDW))
   | C_J (imm) =>
      execute
        (RISCV_JAL ((EXTS (( 21 : int):ii) ((concat_vec imm (0b0w :  1 words$word)  :  12 words$word))  :  21 words$word),
                    zreg))
   | C_BEQZ ((imm, rs)) =>
      execute
        (BTYPE ((EXTS (( 13 : int):ii) ((concat_vec imm (0b0w :  1 words$word)  :  9 words$word))  :  13 words$word),
                zreg,
                (creg2reg_idx rs  :  5 words$word),
                RISCV_BEQ))
   | C_BNEZ ((imm, rs)) =>
      execute
        (BTYPE ((EXTS (( 13 : int):ii) ((concat_vec imm (0b0w :  1 words$word)  :  9 words$word))  :  13 words$word),
                zreg,
                (creg2reg_idx rs  :  5 words$word),
                RISCV_BNE))
   | C_SLLI ((shamt, rsd)) => execute (SHIFTIOP (shamt, rsd, rsd, RISCV_SLLI))
   | C_LWSP ((uimm, rd)) =>
      let (imm : 12 bits) =
        ((EXTZ (( 12 : int):ii) ((concat_vec uimm (0b00w :  2 words$word)  :  8 words$word))  :  12 words$word)) in
      execute (LOAD (imm, sp, rd, F, WORD, F, F))
   | C_LDSP ((uimm, rd)) =>
      let (imm : 12 bits) =
        ((EXTZ (( 12 : int):ii) ((concat_vec uimm (0b000w :  3 words$word)  :  9 words$word))  :  12 words$word)) in
      execute (LOAD (imm, sp, rd, F, DOUBLE, F, F))
   | C_SWSP ((uimm, rs2)) =>
      let (imm : 12 bits) =
        ((EXTZ (( 12 : int):ii) ((concat_vec uimm (0b00w :  2 words$word)  :  8 words$word))  :  12 words$word)) in
      execute (STORE (imm, rs2, sp, WORD, F, F))
   | C_SDSP ((uimm, rs2)) =>
      let (imm : 12 bits) =
        ((EXTZ (( 12 : int):ii) ((concat_vec uimm (0b000w :  3 words$word)  :  9 words$word))  :  12 words$word)) in
      execute (STORE (imm, rs2, sp, DOUBLE, F, F))
   | C_JR (rs1) => execute (RISCV_JALR ((EXTZ (( 12 : int):ii) (0b0w :  1 words$word)  :  12 words$word), rs1, zreg))
   | C_JALR (rs1) => execute (RISCV_JALR ((EXTZ (( 12 : int):ii) (0b0w :  1 words$word)  :  12 words$word), rs1, ra))
   | C_MV ((rd, rs2)) => execute (RTYPE (rs2, zreg, rd, RISCV_ADD))
   | C_EBREAK (() ) => execute (EBREAK () )
   | C_ADD ((rsd, rs2)) => execute (RTYPE (rs2, rsd, rsd, RISCV_ADD))
   | C_FLWSP ((imm, rd)) =>
      let (imm : 12 bits) =
        ((EXTZ (( 12 : int):ii) ((concat_vec imm (0b00w :  2 words$word)  :  8 words$word))  :  12 words$word)) in
      execute (LOAD_FP (imm, sp, rd, WORD))
   | C_FSWSP ((uimm, rs2)) =>
      let (imm : 12 bits) =
        ((EXTZ (( 12 : int):ii) ((concat_vec uimm (0b00w :  2 words$word)  :  8 words$word))  :  12 words$word)) in
      execute (STORE_FP (imm, rs2, sp, WORD))
   | C_FLW ((uimm, rsc, rdc)) =>
      let (imm : 12 bits) =
        ((EXTZ (( 12 : int):ii) ((concat_vec uimm (0b00w :  2 words$word)  :  7 words$word))  :  12 words$word)) in
      let rd = ((creg2reg_idx rdc  :  5 words$word)) in
      let rs = ((creg2reg_idx rsc  :  5 words$word)) in
      execute (LOAD_FP (imm, rs, rd, WORD))
   | C_FSW ((uimm, rsc1, rsc2)) =>
      let (imm : 12 bits) =
        ((EXTZ (( 12 : int):ii) ((concat_vec uimm (0b00w :  2 words$word)  :  7 words$word))  :  12 words$word)) in
      let rs1 = ((creg2reg_idx rsc1  :  5 words$word)) in
      let rs2 = ((creg2reg_idx rsc2  :  5 words$word)) in
      execute (STORE_FP (imm, rs2, rs1, WORD))
   | UTYPE ((imm, rd, op)) => execute_UTYPE imm rd op
   | RISCV_JAL ((imm, rd)) => execute_RISCV_JAL imm rd
   | BTYPE ((imm, rs2, rs1, op)) => execute_BTYPE imm rs2 rs1 op
   | ITYPE ((imm, rs1, rd, op)) => execute_ITYPE imm rs1 rd op
   | SHIFTIOP ((shamt, rs1, rd, op)) => execute_SHIFTIOP shamt rs1 rd op
   | RTYPE ((rs2, rs1, rd, op)) => execute_RTYPE rs2 rs1 rd op
   | LOAD ((imm, rs1, rd, is_unsigned, width, aq, rl)) =>
      execute_LOAD imm rs1 rd is_unsigned width aq rl
   | STORE ((imm, rs2, rs1, width, aq, rl)) => execute_STORE imm rs2 rs1 width aq rl
   | ADDIW ((imm, rs1, rd)) => execute_ADDIW imm rs1 rd
   | SHIFTW ((shamt, rs1, rd, op)) => execute_SHIFTW shamt rs1 rd op
   | RTYPEW ((rs2, rs1, rd, op)) => execute_RTYPEW rs2 rs1 rd op
   | SHIFTIWOP ((shamt, rs1, rd, op)) => execute_SHIFTIWOP shamt rs1 rd op
   | FENCE ((pred, succ)) => execute_FENCE pred succ
   | FENCE_TSO ((pred, succ)) => execute_FENCE_TSO pred succ
   | FENCEI (arg0) => sail2_state_monad$returnS ((execute_FENCEI arg0))
   | ECALL (arg0) => execute_ECALL arg0
   | MRET (arg0) => execute_MRET arg0
   | SRET (arg0) => execute_SRET arg0
   | EBREAK (arg0) => execute_EBREAK arg0
   | WFI (arg0) => execute_WFI arg0
   | SFENCE_VMA ((rs1, rs2)) => execute_SFENCE_VMA rs1 rs2
   | LOADRES ((aq, rl, rs1, width, rd)) => execute_LOADRES aq rl rs1 width rd
   | STORECON ((aq, rl, rs2, rs1, width, rd)) => execute_STORECON aq rl rs2 rs1 width rd
   | AMO ((op, aq, rl, rs2, rs1, width, rd)) => execute_AMO op aq rl rs2 rs1 width rd
   | C_NOP (arg0) => sail2_state_monad$returnS ((execute_C_NOP arg0))
   | MUL ((rs2, rs1, rd, high, signed1, signed2)) => execute_MUL rs2 rs1 rd high signed1 signed2
   | DIV0 ((rs2, rs1, rd, s)) => execute_DIV rs2 rs1 rd s
   | REM ((rs2, rs1, rd, s)) => execute_REM rs2 rs1 rd s
   | MULW ((rs2, rs1, rd)) => execute_MULW rs2 rs1 rd
   | DIVW ((rs2, rs1, rd, s)) => execute_DIVW rs2 rs1 rd s
   | REMW ((rs2, rs1, rd, s)) => execute_REMW rs2 rs1 rd s
   | CSR ((csr, rs1, rd, is_imm, op)) => execute_CSR csr rs1 rd is_imm op
   | URET (arg0) => execute_URET arg0
   | C_NOP_HINT (imm) => sail2_state_monad$returnS ((execute_C_NOP_HINT imm))
   | C_ADDI_HINT (rsd) => sail2_state_monad$returnS ((execute_C_ADDI_HINT rsd))
   | C_LI_HINT (imm) => sail2_state_monad$returnS ((execute_C_LI_HINT imm))
   | C_LUI_HINT (imm) => sail2_state_monad$returnS ((execute_C_LUI_HINT imm))
   | C_MV_HINT (rs2) => sail2_state_monad$returnS ((execute_C_MV_HINT rs2))
   | C_ADD_HINT (rs2) => sail2_state_monad$returnS ((execute_C_ADD_HINT rs2))
   | C_SLLI_HINT ((shamt, rsd)) => sail2_state_monad$returnS ((execute_C_SLLI_HINT shamt rsd))
   | C_SRLI_HINT (rsd) => sail2_state_monad$returnS ((execute_C_SRLI_HINT rsd))
   | C_SRAI_HINT (rsd) => sail2_state_monad$returnS ((execute_C_SRAI_HINT rsd))
   | FENCE_RESERVED ((fm, pred, succ, rs, rd)) =>
      sail2_state_monad$returnS ((execute_FENCE_RESERVED fm pred succ rs rd))
   | FENCEI_RESERVED ((imm, rs, rd)) => sail2_state_monad$returnS ((execute_FENCEI_RESERVED imm rs rd))
   | LOAD_FP ((imm, rs1, rd, width)) => execute_LOAD_FP imm rs1 rd width
   | STORE_FP ((imm, rs2, rs1, width)) => execute_STORE_FP imm rs2 rs1 width
   | F_MADD_TYPE_S ((rs3, rs2, rs1, rm, rd, op)) => execute_F_MADD_TYPE_S rs3 rs2 rs1 rm rd op
   | F_BIN_RM_TYPE_S ((rs2, rs1, rm, rd, op)) => execute_F_BIN_RM_TYPE_S rs2 rs1 rm rd op
   | F_UN_RM_TYPE_S ((rs1, rm, rd, arg3)) => execute_F_UN_RM_TYPE_S rs1 rm rd arg3
   | F_BIN_TYPE_S ((rs2, rs1, rd, arg3)) => execute_F_BIN_TYPE_S rs2 rs1 rd arg3
   | F_UN_TYPE_S ((rs1, rd, arg2)) => execute_F_UN_TYPE_S rs1 rd arg2
   | RISCV_JALR ((imm, rs1, rd)) => execute_RISCV_JALR imm rs1 rd
   | ILLEGAL (s) => execute_ILLEGAL s
   | C_ILLEGAL (s) => execute_C_ILLEGAL s
   )))`;

val _ = Lib.with_flag (computeLib.auto_import_definitions, false) Defn.save_defn execute_defn;

val _ = Define `
 ((assembly_forwards:ast ->(regstate)sail2_state_monad$sequential_state ->(((string),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_= 
  ((case arg_ of
         UTYPE ((imm, rd, op)) => sail2_state_monad$bindS
                                    (reg_name_forwards rd)
                                    (\ (w__0 : string) . 
                                     sail2_state_monad$returnS
                                       ((string_append
                                           ((utype_mnemonic_forwards op))
                                           ((string_append
                                               ((spc_forwards () ))
                                               ((string_append w__0
                                                   ((string_append
                                                       ((sep_forwards () ))
                                                       ((string_append
                                                           ((decimal_string_of_bits
                                                               imm)) 
                                                         "")))))))))))
     | RISCV_JAL ((imm, rd)) => sail2_state_monad$bindS
                                  (reg_name_forwards rd)
                                  (\ (w__1 : string) . 
                                   sail2_state_monad$returnS
                                     ((string_append "jal"
                                         ((string_append ((spc_forwards () ))
                                             ((string_append w__1
                                                 ((string_append
                                                     ((sep_forwards () ))
                                                     ((string_append
                                                         ((decimal_string_of_bits
                                                             imm)) "")))))))))))
     | RISCV_JALR ((imm, rs1, rd)) => sail2_state_monad$bindS
                                        (reg_name_forwards rd)
                                        (\ (w__2 : string) .  sail2_state_monad$bindS
                                                                (reg_name_forwards
                                                                   rs1)
                                                                (\ (w__3 : string) . 
                                                                 sail2_state_monad$returnS
                                                                   ((
                                                                    string_append
                                                                    "jalr"
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__2
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__3
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    decimal_string_of_bits
                                                                    imm)) 
                                                                    ""))))))))))))))))
     | BTYPE ((imm, rs2, rs1, op)) => sail2_state_monad$bindS
                                        (reg_name_forwards rs1)
                                        (\ (w__4 : string) .  sail2_state_monad$bindS
                                                                (reg_name_forwards
                                                                   rs2)
                                                                (\ (w__5 : string) . 
                                                                 sail2_state_monad$returnS
                                                                   ((
                                                                    string_append
                                                                    (
                                                                    (
                                                                    btype_mnemonic_forwards
                                                                    op))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__4
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__5
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    decimal_string_of_bits
                                                                    imm)) 
                                                                    ""))))))))))))))))
     | ITYPE ((imm, rs1, rd, op)) => sail2_state_monad$bindS
                                       (reg_name_forwards rd)
                                       (\ (w__6 : string) .  sail2_state_monad$bindS
                                                               (reg_name_forwards
                                                                  rs1)
                                                               (\ (w__7 : string) . 
                                                                sail2_state_monad$returnS
                                                                  ((string_append
                                                                    (
                                                                    (
                                                                    itype_mnemonic_forwards
                                                                    op))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__6
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__7
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    decimal_string_of_bits
                                                                    imm)) 
                                                                    ""))))))))))))))))
     | SHIFTIOP ((shamt, rs1, rd, op)) => sail2_state_monad$bindS
                                            (reg_name_forwards rd)
                                            (\ (w__8 : string) .  sail2_state_monad$bindS
                                                                    (
                                                                    reg_name_forwards
                                                                    rs1)
                                                                    (
                                                                    \ (w__9 : string) . 
                                                                    sail2_state_monad$returnS
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    shiftiop_mnemonic_forwards
                                                                    op))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__8
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__9
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    decimal_string_of_bits
                                                                    shamt))
                                                                    ""))))))))))))))))
     | RTYPE ((rs2, rs1, rd, op)) => sail2_state_monad$bindS
                                       (reg_name_forwards rd)
                                       (\ (w__10 : string) .  sail2_state_monad$bindS
                                                                (reg_name_forwards
                                                                   rs1)
                                                                (\ (w__11 : string) .  
                                                                 sail2_state_monad$bindS
                                                                   (reg_name_forwards
                                                                    rs2)
                                                                   (\ (w__12 : string) . 
                                                                    sail2_state_monad$returnS
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    rtype_mnemonic_forwards
                                                                    op))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__10
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__11
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__12 
                                                                    "")))))))))))))))))
     | LOAD ((imm, rs1, rd, is_unsigned, size1, aq, rl)) => sail2_state_monad$bindS
                                                              (reg_name_forwards
                                                                 rd)
                                                              (\ (w__13 : string) .  
                                                               sail2_state_monad$bindS
                                                                 (reg_name_forwards
                                                                    rs1)
                                                                 (\ (w__14 : string) . 
                                                                  sail2_state_monad$returnS
                                                                    (
                                                                    (
                                                                    string_append
                                                                    "l"
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    size_mnemonic_forwards
                                                                    size1))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    maybe_u_forwards
                                                                    is_unsigned))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    maybe_aq_forwards
                                                                    aq))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    maybe_rl_forwards
                                                                    rl))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__13
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    decimal_string_of_bits
                                                                    imm))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    opt_spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    "("
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    opt_spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__14
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    opt_spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    ")" 
                                                                    ""))))))))))))))))))))))))))))))))
     | STORE ((imm, rs2, rs1, size1, aq, rl)) => sail2_state_monad$bindS
                                                   (reg_name_forwards rs2)
                                                   (\ (w__15 : string) .  
                                                    sail2_state_monad$bindS
                                                      (reg_name_forwards rs1)
                                                      (\ (w__16 : string) . 
                                                       sail2_state_monad$returnS
                                                         ((string_append 
                                                           "s"
                                                             ((string_append
                                                                 ((size_mnemonic_forwards
                                                                    size1))
                                                                 ((string_append
                                                                    (
                                                                    (
                                                                    maybe_aq_forwards
                                                                    aq))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    maybe_rl_forwards
                                                                    rl))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__15
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    decimal_string_of_bits
                                                                    imm))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    opt_spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    "("
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    opt_spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__16
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    opt_spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    ")" 
                                                                    ""))))))))))))))))))))))))))))))
     | ADDIW ((imm, rs1, rd)) =>
   if ((((( 32 : int): ii) = (( 64 : int): ii)))) then
     sail2_state_monad$bindS (reg_name_forwards rd)
       (\ (w__17 : string) .  sail2_state_monad$bindS (reg_name_forwards rs1)
                                (\ (w__18 : string) . 
                                 sail2_state_monad$returnS
                                   ((string_append "addiw"
                                       ((string_append ((spc_forwards () ))
                                           ((string_append w__17
                                               ((string_append
                                                   ((sep_forwards () ))
                                                   ((string_append w__18
                                                       ((string_append
                                                           ((sep_forwards () ))
                                                           ((string_append
                                                               ((decimal_string_of_bits
                                                                   imm)) 
                                                             ""))))))))))))))))
   else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | SHIFTW ((shamt, rs1, rd, op)) =>
   if ((((( 32 : int): ii) = (( 64 : int): ii)))) then
     sail2_state_monad$bindS (reg_name_forwards rd)
       (\ (w__21 : string) .  sail2_state_monad$bindS (reg_name_forwards rs1)
                                (\ (w__22 : string) . 
                                 sail2_state_monad$returnS
                                   ((string_append
                                       ((shiftw_mnemonic_forwards op))
                                       ((string_append ((spc_forwards () ))
                                           ((string_append w__21
                                               ((string_append
                                                   ((sep_forwards () ))
                                                   ((string_append w__22
                                                       ((string_append
                                                           ((sep_forwards () ))
                                                           ((string_append
                                                               ((decimal_string_of_bits
                                                                   shamt)) 
                                                             ""))))))))))))))))
   else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | RTYPEW ((rs2, rs1, rd, op)) =>
   if ((((( 32 : int): ii) = (( 64 : int): ii)))) then
     sail2_state_monad$bindS (reg_name_forwards rd)
       (\ (w__25 : string) .  sail2_state_monad$bindS (reg_name_forwards rs1)
                                (\ (w__26 : string) .  sail2_state_monad$bindS
                                                         (reg_name_forwards
                                                            rs2)
                                                         (\ (w__27 : string) . 
                                                          sail2_state_monad$returnS
                                                            ((string_append
                                                                ((rtypew_mnemonic_forwards
                                                                    op))
                                                                ((string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__25
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__26
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__27 
                                                                    "")))))))))))))))))
   else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | SHIFTIWOP ((shamt, rs1, rd, op)) =>
   if ((((( 32 : int): ii) = (( 64 : int): ii)))) then
     sail2_state_monad$bindS (reg_name_forwards rd)
       (\ (w__30 : string) .  sail2_state_monad$bindS (reg_name_forwards rs1)
                                (\ (w__31 : string) . 
                                 sail2_state_monad$returnS
                                   ((string_append
                                       ((shiftiwop_mnemonic_forwards op))
                                       ((string_append ((spc_forwards () ))
                                           ((string_append w__30
                                               ((string_append
                                                   ((sep_forwards () ))
                                                   ((string_append w__31
                                                       ((string_append
                                                           ((sep_forwards () ))
                                                           ((string_append
                                                               ((decimal_string_of_bits
                                                                   shamt)) 
                                                             ""))))))))))))))))
   else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | FENCE ((pred, succ)) => sail2_state_monad$bindS
                                 (fence_bits_forwards pred)
                                 (\ (w__34 : string) .  sail2_state_monad$bindS
                                                          (fence_bits_forwards
                                                             succ)
                                                          (\ (w__35 : string) . 
                                                           sail2_state_monad$returnS
                                                             ((string_append
                                                                 "fence"
                                                                 ((string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__34
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__35 
                                                                    ""))))))))))))
     | FENCE_TSO ((pred, succ)) => sail2_state_monad$bindS
                                     (fence_bits_forwards pred)
                                     (\ (w__36 : string) .  sail2_state_monad$bindS
                                                              (fence_bits_forwards
                                                                 succ)
                                                              (\ (w__37 : string) . 
                                                               sail2_state_monad$returnS
                                                                 ((string_append
                                                                    "fence.tso"
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__36
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__37 
                                                                    ""))))))))))))
     | FENCEI (() ) => sail2_state_monad$returnS "fence.i"
     | ECALL (() ) => sail2_state_monad$returnS "ecall"
     | MRET (() ) => sail2_state_monad$returnS "mret"
     | SRET (() ) => sail2_state_monad$returnS "sret"
     | EBREAK (() ) => sail2_state_monad$returnS "ebreak"
     | WFI (() ) => sail2_state_monad$returnS "wfi"
     | SFENCE_VMA ((rs1, rs2)) => sail2_state_monad$bindS
                                    (reg_name_forwards rs1)
                                    (\ (w__38 : string) .  sail2_state_monad$bindS
                                                             (reg_name_forwards
                                                                rs2)
                                                             (\ (w__39 : string) . 
                                                              sail2_state_monad$returnS
                                                                ((string_append
                                                                    "sfence.vma"
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__38
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__39 
                                                                    ""))))))))))))
     | LOADRES ((aq, rl, rs1, size1, rd)) => sail2_state_monad$bindS
                                               (reg_name_forwards rd)
                                               (\ (w__40 : string) .  
                                                sail2_state_monad$bindS
                                                  (reg_name_forwards rs1)
                                                  (\ (w__41 : string) . 
                                                   sail2_state_monad$returnS
                                                     ((string_append 
                                                       "lr."
                                                         ((string_append
                                                             ((size_mnemonic_forwards
                                                                 size1))
                                                             ((string_append
                                                                 ((maybe_aq_forwards
                                                                    aq))
                                                                 ((string_append
                                                                    (
                                                                    (
                                                                    maybe_rl_forwards
                                                                    rl))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__40
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__41 
                                                                    ""))))))))))))))))))
     | STORECON ((aq, rl, rs2, rs1, size1, rd)) => sail2_state_monad$bindS
                                                     (reg_name_forwards rd)
                                                     (\ (w__42 : string) .  
                                                      sail2_state_monad$bindS
                                                        (reg_name_forwards
                                                           rs1)
                                                        (\ (w__43 : string) .  
                                                         sail2_state_monad$bindS
                                                           (reg_name_forwards
                                                              rs2)
                                                           (\ (w__44 : string) . 
                                                            sail2_state_monad$returnS
                                                              ((string_append
                                                                  "sc."
                                                                  ((string_append
                                                                    (
                                                                    (
                                                                    size_mnemonic_forwards
                                                                    size1))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    maybe_aq_forwards
                                                                    aq))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    maybe_rl_forwards
                                                                    rl))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__42
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__43
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__44 
                                                                    "")))))))))))))))))))))))
     | AMO ((op, aq, rl, rs2, rs1, width, rd)) => sail2_state_monad$bindS
                                                    (reg_name_forwards rd)
                                                    (\ (w__45 : string) .  
                                                     sail2_state_monad$bindS
                                                       (reg_name_forwards rs2)
                                                       (\ (w__46 : string) .  
                                                        sail2_state_monad$bindS
                                                          (reg_name_forwards
                                                             rs1)
                                                          (\ (w__47 : string) . 
                                                           sail2_state_monad$returnS
                                                             ((string_append
                                                                 ((amo_mnemonic_forwards
                                                                    op))
                                                                 ((string_append
                                                                    "."
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    size_mnemonic_forwards
                                                                    width))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    maybe_aq_forwards
                                                                    aq))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    maybe_rl_forwards
                                                                    rl))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__45
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__46
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    "("
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__47
                                                                    (
                                                                    (
                                                                    string_append
                                                                    ")" 
                                                                    "")))))))))))))))))))))))))))))
     | C_NOP (() ) => sail2_state_monad$returnS "c.nop"
     | C_ADDI4SPN ((rdc, nzimm)) =>
   if (((nzimm <> (0x00w : 8 words$word)))) then
     sail2_state_monad$bindS (creg_name_forwards rdc)
       (\ (w__48 : string) . 
        sail2_state_monad$returnS
          ((string_append "c.addi4spn"
              ((string_append ((spc_forwards () ))
                  ((string_append w__48
                      ((string_append ((sep_forwards () ))
                          ((string_append
                              ((decimal_string_of_bits
                                  ((concat_vec nzimm (0b00w : 2 words$word) : 10 words$word))))
                              ""))))))))))) else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | C_LW ((uimm, rsc, rdc)) => sail2_state_monad$bindS
                                    (creg_name_forwards rdc)
                                    (\ (w__51 : string) .  sail2_state_monad$bindS
                                                             (creg_name_forwards
                                                                rsc)
                                                             (\ (w__52 : string) . 
                                                              sail2_state_monad$returnS
                                                                ((string_append
                                                                    "c.lw"
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__51
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__52
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    decimal_string_of_bits
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    uimm
                                                                    (
                                                                    0b00w : 2 words$word) : 7 words$word))))
                                                                    ""))))))))))))))))
     | C_LD ((uimm, rsc, rdc)) =>
   if ((((( 32 : int): ii) = (( 64 : int): ii)))) then
     sail2_state_monad$bindS (creg_name_forwards rdc)
       (\ (w__53 : string) .  sail2_state_monad$bindS
                                (creg_name_forwards rsc)
                                (\ (w__54 : string) . 
                                 sail2_state_monad$returnS
                                   ((string_append "c.ld"
                                       ((string_append ((spc_forwards () ))
                                           ((string_append w__53
                                               ((string_append
                                                   ((sep_forwards () ))
                                                   ((string_append w__54
                                                       ((string_append
                                                           ((sep_forwards () ))
                                                           ((string_append
                                                               ((decimal_string_of_bits
                                                                   ((
                                                                    concat_vec
                                                                    uimm
                                                                    (
                                                                    0b000w : 3 words$word) : 8 words$word))))
                                                               ""))))))))))))))))
   else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | C_SW ((uimm, rsc1, rsc2)) => sail2_state_monad$bindS
                                      (creg_name_forwards rsc1)
                                      (\ (w__57 : string) .  sail2_state_monad$bindS
                                                               (creg_name_forwards
                                                                  rsc2)
                                                               (\ (w__58 : string) . 
                                                                sail2_state_monad$returnS
                                                                  ((string_append
                                                                    "c.sw"
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__57
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__58
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    decimal_string_of_bits
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    uimm
                                                                    (
                                                                    0b00w : 2 words$word) : 7 words$word))))
                                                                    ""))))))))))))))))
     | C_SD ((uimm, rsc1, rsc2)) =>
   if ((((( 32 : int): ii) = (( 64 : int): ii)))) then
     sail2_state_monad$bindS (creg_name_forwards rsc1)
       (\ (w__59 : string) .  sail2_state_monad$bindS
                                (creg_name_forwards rsc2)
                                (\ (w__60 : string) . 
                                 sail2_state_monad$returnS
                                   ((string_append "c.sd"
                                       ((string_append ((spc_forwards () ))
                                           ((string_append w__59
                                               ((string_append
                                                   ((sep_forwards () ))
                                                   ((string_append w__60
                                                       ((string_append
                                                           ((sep_forwards () ))
                                                           ((string_append
                                                               ((decimal_string_of_bits
                                                                   ((
                                                                    concat_vec
                                                                    uimm
                                                                    (
                                                                    0b000w : 3 words$word) : 8 words$word))))
                                                               ""))))))))))))))))
   else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | C_ADDI ((nzi, rsd)) =>
   if ((((((nzi <> (0b000000w : 6 words$word)))) /\ (((rsd <> zreg)))))) then
     sail2_state_monad$bindS (reg_name_forwards rsd)
       (\ (w__63 : string) . 
        sail2_state_monad$returnS
          ((string_append "c.addi"
              ((string_append ((spc_forwards () ))
                  ((string_append w__63
                      ((string_append ((sep_forwards () ))
                          ((string_append ((decimal_string_of_bits nzi)) "")))))))))))
   else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | C_JAL (imm) =>
   if ((((( 32 : int): ii) = (( 32 : int): ii)))) then
     sail2_state_monad$returnS
       ((string_append "c.jal"
           ((string_append ((spc_forwards () ))
               ((string_append
                   ((decimal_string_of_bits
                       ((concat_vec imm (0b0w : 1 words$word) : 12 words$word))))
                   "")))))) else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | C_ADDIW ((imm, rsd)) =>
   if ((((( 32 : int): ii) = (( 64 : int): ii)))) then
     sail2_state_monad$bindS (reg_name_forwards rsd)
       (\ (w__68 : string) . 
        sail2_state_monad$returnS
          ((string_append "c.addiw"
              ((string_append ((spc_forwards () ))
                  ((string_append w__68
                      ((string_append ((sep_forwards () ))
                          ((string_append ((decimal_string_of_bits imm)) "")))))))))))
   else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | C_LI ((imm, rd)) =>
   if (((rd <> zreg))) then
     sail2_state_monad$bindS (reg_name_forwards rd)
       (\ (w__71 : string) . 
        sail2_state_monad$returnS
          ((string_append "c.li"
              ((string_append ((spc_forwards () ))
                  ((string_append w__71
                      ((string_append ((sep_forwards () ))
                          ((string_append ((decimal_string_of_bits imm)) "")))))))))))
   else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | C_ADDI16SP (imm) =>
   if (((imm <> (0b000000w : 6 words$word)))) then
     sail2_state_monad$returnS
       ((string_append "c.addi16sp"
           ((string_append ((spc_forwards () ))
               ((string_append ((decimal_string_of_bits imm)) "")))))) else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | C_LUI ((imm, rd)) =>
   if ((((((rd <> zreg))) /\
           ((((((rd <> sp))) /\ (((imm <> (0b000000w : 6 words$word)))))))))) then
     sail2_state_monad$bindS (reg_name_forwards rd)
       (\ (w__76 : string) . 
        sail2_state_monad$returnS
          ((string_append "c.lui"
              ((string_append ((spc_forwards () ))
                  ((string_append w__76
                      ((string_append ((sep_forwards () ))
                          ((string_append ((decimal_string_of_bits imm)) "")))))))))))
   else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | C_SRLI ((shamt, rsd)) =>
   if (((shamt <> (0b000000w : 6 words$word)))) then
     sail2_state_monad$bindS (creg_name_forwards rsd)
       (\ (w__79 : string) . 
        sail2_state_monad$returnS
          ((string_append "c.srli"
              ((string_append ((spc_forwards () ))
                  ((string_append w__79
                      ((string_append ((sep_forwards () ))
                          ((string_append ((decimal_string_of_bits shamt)) "")))))))))))
   else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | C_SRAI ((shamt, rsd)) =>
   if (((shamt <> (0b000000w : 6 words$word)))) then
     sail2_state_monad$bindS (creg_name_forwards rsd)
       (\ (w__82 : string) . 
        sail2_state_monad$returnS
          ((string_append "c.srai"
              ((string_append ((spc_forwards () ))
                  ((string_append w__82
                      ((string_append ((sep_forwards () ))
                          ((string_append ((decimal_string_of_bits shamt)) "")))))))))))
   else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | C_ANDI ((imm, rsd)) => sail2_state_monad$bindS
                                (creg_name_forwards rsd)
                                (\ (w__85 : string) . 
                                 sail2_state_monad$returnS
                                   ((string_append "c.andi"
                                       ((string_append ((spc_forwards () ))
                                           ((string_append w__85
                                               ((string_append
                                                   ((sep_forwards () ))
                                                   ((string_append
                                                       ((decimal_string_of_bits
                                                           imm)) "")))))))))))
     | C_SUB ((rsd, rs2)) => sail2_state_monad$bindS (creg_name_forwards rsd)
                               (\ (w__86 : string) .  sail2_state_monad$bindS
                                                        (creg_name_forwards
                                                           rs2)
                                                        (\ (w__87 : string) . 
                                                         sail2_state_monad$returnS
                                                           ((string_append
                                                               "c.sub"
                                                               ((string_append
                                                                   ((
                                                                    spc_forwards
                                                                    () ))
                                                                   ((
                                                                    string_append
                                                                    w__86
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__87 
                                                                    ""))))))))))))
     | C_XOR ((rsd, rs2)) => sail2_state_monad$bindS (creg_name_forwards rsd)
                               (\ (w__88 : string) .  sail2_state_monad$bindS
                                                        (creg_name_forwards
                                                           rs2)
                                                        (\ (w__89 : string) . 
                                                         sail2_state_monad$returnS
                                                           ((string_append
                                                               "c.xor"
                                                               ((string_append
                                                                   ((
                                                                    spc_forwards
                                                                    () ))
                                                                   ((
                                                                    string_append
                                                                    w__88
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__89 
                                                                    ""))))))))))))
     | C_OR ((rsd, rs2)) => sail2_state_monad$bindS (creg_name_forwards rsd)
                              (\ (w__90 : string) .  sail2_state_monad$bindS
                                                       (creg_name_forwards
                                                          rs2)
                                                       (\ (w__91 : string) . 
                                                        sail2_state_monad$returnS
                                                          ((string_append
                                                              "c.or"
                                                              ((string_append
                                                                  ((spc_forwards
                                                                    () ))
                                                                  ((string_append
                                                                    w__90
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__91 
                                                                    ""))))))))))))
     | C_AND ((rsd, rs2)) => sail2_state_monad$bindS (creg_name_forwards rsd)
                               (\ (w__92 : string) .  sail2_state_monad$bindS
                                                        (creg_name_forwards
                                                           rs2)
                                                        (\ (w__93 : string) . 
                                                         sail2_state_monad$returnS
                                                           ((string_append
                                                               "c.and"
                                                               ((string_append
                                                                   ((
                                                                    spc_forwards
                                                                    () ))
                                                                   ((
                                                                    string_append
                                                                    w__92
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__93 
                                                                    ""))))))))))))
     | C_SUBW ((rsd, rs2)) =>
   if ((((( 32 : int): ii) = (( 64 : int): ii)))) then
     sail2_state_monad$bindS (creg_name_forwards rsd)
       (\ (w__94 : string) .  sail2_state_monad$bindS
                                (creg_name_forwards rs2)
                                (\ (w__95 : string) . 
                                 sail2_state_monad$returnS
                                   ((string_append "c.subw"
                                       ((string_append ((spc_forwards () ))
                                           ((string_append w__94
                                               ((string_append
                                                   ((sep_forwards () ))
                                                   ((string_append w__95 ""))))))))))))
   else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | C_ADDW ((rsd, rs2)) =>
   if ((((( 32 : int): ii) = (( 64 : int): ii)))) then
     sail2_state_monad$bindS (creg_name_forwards rsd)
       (\ (w__98 : string) .  sail2_state_monad$bindS
                                (creg_name_forwards rs2)
                                (\ (w__99 : string) . 
                                 sail2_state_monad$returnS
                                   ((string_append "c.addw"
                                       ((string_append ((spc_forwards () ))
                                           ((string_append w__98
                                               ((string_append
                                                   ((sep_forwards () ))
                                                   ((string_append w__99 ""))))))))))))
   else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | C_J (imm) =>
   sail2_state_monad$returnS
     ((string_append "c.j"
         ((string_append ((spc_forwards () ))
             ((string_append ((decimal_string_of_bits imm)) ""))))))
     | C_BEQZ ((imm, rs)) => sail2_state_monad$bindS (creg_name_forwards rs)
                               (\ (w__102 : string) . 
                                sail2_state_monad$returnS
                                  ((string_append "c.beqz"
                                      ((string_append ((spc_forwards () ))
                                          ((string_append w__102
                                              ((string_append
                                                  ((sep_forwards () ))
                                                  ((string_append
                                                      ((decimal_string_of_bits
                                                          imm)) "")))))))))))
     | C_BNEZ ((imm, rs)) => sail2_state_monad$bindS (creg_name_forwards rs)
                               (\ (w__103 : string) . 
                                sail2_state_monad$returnS
                                  ((string_append "c.bnez"
                                      ((string_append ((spc_forwards () ))
                                          ((string_append w__103
                                              ((string_append
                                                  ((sep_forwards () ))
                                                  ((string_append
                                                      ((decimal_string_of_bits
                                                          imm)) "")))))))))))
     | C_SLLI ((shamt, rsd)) =>
   if ((((((shamt <> (0b000000w : 6 words$word)))) /\ (((rsd <> zreg)))))) then
     sail2_state_monad$bindS (reg_name_forwards rsd)
       (\ (w__104 : string) . 
        sail2_state_monad$returnS
          ((string_append "c.slli"
              ((string_append ((spc_forwards () ))
                  ((string_append w__104
                      ((string_append ((sep_forwards () ))
                          ((string_append ((decimal_string_of_bits shamt)) "")))))))))))
   else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | C_LWSP ((uimm, rd)) =>
   if (((rd <> zreg))) then
     sail2_state_monad$bindS (reg_name_forwards rd)
       (\ (w__107 : string) . 
        sail2_state_monad$returnS
          ((string_append "c.lwsp"
              ((string_append ((spc_forwards () ))
                  ((string_append w__107
                      ((string_append ((sep_forwards () ))
                          ((string_append ((decimal_string_of_bits uimm)) "")))))))))))
   else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | C_LDSP ((uimm, rd)) =>
   if ((((((rd <> zreg))) /\ ((((( 32 : int): ii) = (( 64 : int): ii))))))) then
     sail2_state_monad$bindS (reg_name_forwards rd)
       (\ (w__110 : string) . 
        sail2_state_monad$returnS
          ((string_append "c.ldsp"
              ((string_append ((spc_forwards () ))
                  ((string_append w__110
                      ((string_append ((sep_forwards () ))
                          ((string_append ((decimal_string_of_bits uimm)) "")))))))))))
   else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | C_SWSP ((uimm, rd)) => sail2_state_monad$bindS (reg_name_forwards rd)
                                (\ (w__113 : string) . 
                                 sail2_state_monad$returnS
                                   ((string_append "c.swsp"
                                       ((string_append ((spc_forwards () ))
                                           ((string_append w__113
                                               ((string_append
                                                   ((sep_forwards () ))
                                                   ((string_append
                                                       ((decimal_string_of_bits
                                                           uimm)) "")))))))))))
     | C_SDSP ((uimm, rs2)) =>
   if ((((( 32 : int): ii) = (( 64 : int): ii)))) then
     sail2_state_monad$bindS (reg_name_forwards rs2)
       (\ (w__114 : string) . 
        sail2_state_monad$returnS
          ((string_append "c.sdsp"
              ((string_append ((spc_forwards () ))
                  ((string_append w__114
                      ((string_append ((sep_forwards () ))
                          ((string_append ((decimal_string_of_bits uimm)) "")))))))))))
   else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | C_JR (rs1) =>
   if (((rs1 <> zreg))) then
     sail2_state_monad$bindS (reg_name_forwards rs1)
       (\ (w__117 : string) . 
        sail2_state_monad$returnS
          ((string_append "c.jr"
              ((string_append ((spc_forwards () ))
                  ((string_append w__117 ""))))))) else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | C_JALR (rs1) =>
   if (((rs1 <> zreg))) then
     sail2_state_monad$bindS (reg_name_forwards rs1)
       (\ (w__120 : string) . 
        sail2_state_monad$returnS
          ((string_append "c.jalr"
              ((string_append ((spc_forwards () ))
                  ((string_append w__120 ""))))))) else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | C_MV ((rd, rs2)) =>
   if ((((((rd <> zreg))) /\ (((rs2 <> zreg)))))) then
     sail2_state_monad$bindS (reg_name_forwards rd)
       (\ (w__123 : string) .  sail2_state_monad$bindS
                                 (reg_name_forwards rs2)
                                 (\ (w__124 : string) . 
                                  sail2_state_monad$returnS
                                    ((string_append "c.mv"
                                        ((string_append ((spc_forwards () ))
                                            ((string_append w__123
                                                ((string_append
                                                    ((sep_forwards () ))
                                                    ((string_append w__124 ""))))))))))))
   else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | C_EBREAK (() ) => sail2_state_monad$returnS "c.ebreak"
     | C_ADD ((rsd, rs2)) =>
   if ((((((rsd <> zreg))) /\ (((rs2 <> zreg)))))) then
     sail2_state_monad$bindS (reg_name_forwards rsd)
       (\ (w__127 : string) .  sail2_state_monad$bindS
                                 (reg_name_forwards rs2)
                                 (\ (w__128 : string) . 
                                  sail2_state_monad$returnS
                                    ((string_append "c.add"
                                        ((string_append ((spc_forwards () ))
                                            ((string_append w__127
                                                ((string_append
                                                    ((sep_forwards () ))
                                                    ((string_append w__128 ""))))))))))))
   else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | MUL ((rs2, rs1, rd, high, signed1, signed2)) => sail2_state_monad$bindS
                                                         (reg_name_forwards
                                                            rd)
                                                         (\ (w__131 : string) .  
                                                          sail2_state_monad$bindS
                                                            (reg_name_forwards
                                                               rs1)
                                                            (\ (w__132 : string) .  
                                                             sail2_state_monad$bindS
                                                               (reg_name_forwards
                                                                  rs2)
                                                               (\ (w__133 : string) . 
                                                                sail2_state_monad$returnS
                                                                  ((string_append
                                                                    (
                                                                    (
                                                                    mul_mnemonic_forwards
                                                                    (high, signed1, signed2)))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__131
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__132
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__133 
                                                                    "")))))))))))))))))
     | DIV0 ((rs2, rs1, rd, s)) => sail2_state_monad$bindS
                                     (reg_name_forwards rd)
                                     (\ (w__134 : string) .  sail2_state_monad$bindS
                                                               (reg_name_forwards
                                                                  rs1)
                                                               (\ (w__135 : string) .  
                                                                sail2_state_monad$bindS
                                                                  (reg_name_forwards
                                                                    rs2)
                                                                  (\ (w__136 : string) . 
                                                                   sail2_state_monad$returnS
                                                                    (
                                                                    (
                                                                    string_append
                                                                    "div"
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    maybe_not_u_forwards
                                                                    s))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__134
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__135
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__136 
                                                                    "")))))))))))))))))))
     | REM ((rs2, rs1, rd, s)) => sail2_state_monad$bindS
                                    (reg_name_forwards rd)
                                    (\ (w__137 : string) .  sail2_state_monad$bindS
                                                              (reg_name_forwards
                                                                 rs1)
                                                              (\ (w__138 : string) .  
                                                               sail2_state_monad$bindS
                                                                 (reg_name_forwards
                                                                    rs2)
                                                                 (\ (w__139 : string) . 
                                                                  sail2_state_monad$returnS
                                                                    (
                                                                    (
                                                                    string_append
                                                                    "rem"
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    maybe_not_u_forwards
                                                                    s))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__137
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__138
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__139 
                                                                    "")))))))))))))))))))
     | MULW ((rs2, rs1, rd)) =>
   if ((((( 32 : int): ii) = (( 64 : int): ii)))) then
     sail2_state_monad$bindS (reg_name_forwards rd)
       (\ (w__140 : string) .  sail2_state_monad$bindS
                                 (reg_name_forwards rs1)
                                 (\ (w__141 : string) .  sail2_state_monad$bindS
                                                           (reg_name_forwards
                                                              rs2)
                                                           (\ (w__142 : string) . 
                                                            sail2_state_monad$returnS
                                                              ((string_append
                                                                  "mulw"
                                                                  ((string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__140
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__141
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__142 
                                                                    "")))))))))))))))))
   else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | DIVW ((rs2, rs1, rd, s)) =>
   if ((((( 32 : int): ii) = (( 64 : int): ii)))) then
     sail2_state_monad$bindS (reg_name_forwards rd)
       (\ (w__145 : string) .  sail2_state_monad$bindS
                                 (reg_name_forwards rs1)
                                 (\ (w__146 : string) .  sail2_state_monad$bindS
                                                           (reg_name_forwards
                                                              rs2)
                                                           (\ (w__147 : string) . 
                                                            sail2_state_monad$returnS
                                                              ((string_append
                                                                  "div"
                                                                  ((string_append
                                                                    (
                                                                    (
                                                                    maybe_not_u_forwards
                                                                    s))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    "w"
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__145
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__146
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__147 
                                                                    "")))))))))))))))))))))
   else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | REMW ((rs2, rs1, rd, s)) =>
   if ((((( 32 : int): ii) = (( 64 : int): ii)))) then
     sail2_state_monad$bindS (reg_name_forwards rd)
       (\ (w__150 : string) .  sail2_state_monad$bindS
                                 (reg_name_forwards rs1)
                                 (\ (w__151 : string) .  sail2_state_monad$bindS
                                                           (reg_name_forwards
                                                              rs2)
                                                           (\ (w__152 : string) . 
                                                            sail2_state_monad$returnS
                                                              ((string_append
                                                                  "rem"
                                                                  ((string_append
                                                                    (
                                                                    (
                                                                    maybe_not_u_forwards
                                                                    s))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    "w"
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__150
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__151
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__152 
                                                                    "")))))))))))))))))))))
   else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | CSR ((csr, rs1, rd, T, op)) => sail2_state_monad$bindS
                                        (reg_name_forwards rd)
                                        (\ (w__155 : string) . 
                                         sail2_state_monad$returnS
                                           ((string_append
                                               ((csr_mnemonic_forwards op))
                                               ((string_append "i"
                                                   ((string_append
                                                       ((spc_forwards () ))
                                                       ((string_append 
                                                         w__155
                                                           ((string_append
                                                               ((sep_forwards
                                                                   () ))
                                                               ((string_append
                                                                   ((
                                                                    csr_name_map_forwards
                                                                    csr))
                                                                   ((
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    decimal_string_of_bits
                                                                    rs1)) 
                                                                    "")))))))))))))))))
     | CSR ((csr, rs1, rd, F, op)) => sail2_state_monad$bindS
                                        (reg_name_forwards rd)
                                        (\ (w__156 : string) .  sail2_state_monad$bindS
                                                                  (reg_name_forwards
                                                                    rs1)
                                                                  (\ (w__157 : string) . 
                                                                   sail2_state_monad$returnS
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    csr_mnemonic_forwards
                                                                    op))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__156
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    csr_name_map_forwards
                                                                    csr))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__157 
                                                                    ""))))))))))))))))
     | URET (() ) => sail2_state_monad$returnS "uret"
     | C_NOP_HINT (imm) =>
   sail2_state_monad$returnS
     ((string_append "c.nop.hint."
         ((string_append ((decimal_string_of_bits imm)) ""))))
     | C_ADDI_HINT (rsd) =>
   if (((rsd <> zreg))) then
     sail2_state_monad$bindS (reg_name_forwards rsd)
       (\ (w__158 : string) . 
        sail2_state_monad$returnS
          ((string_append "c.addi.hint." ((string_append w__158 ""))))) else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | C_LI_HINT (imm) =>
   sail2_state_monad$returnS
     ((string_append "c.li.hint."
         ((string_append ((decimal_string_of_bits imm)) ""))))
     | C_LUI_HINT (imm) =>
   if (((imm <> (0b000000w : 6 words$word)))) then
     sail2_state_monad$returnS
       ((string_append "c.lui.hint."
           ((string_append ((decimal_string_of_bits imm)) "")))) else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | C_MV_HINT (rs2) =>
   if (((rs2 <> zreg))) then
     sail2_state_monad$bindS (reg_name_forwards rs2)
       (\ (w__163 : string) . 
        sail2_state_monad$returnS
          ((string_append "c.mv.hint." ((string_append w__163 ""))))) else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | C_ADD_HINT (rs2) =>
   if (((rs2 <> zreg))) then
     sail2_state_monad$bindS (reg_name_forwards rs2)
       (\ (w__166 : string) . 
        sail2_state_monad$returnS
          ((string_append "c.add.hint." ((string_append w__166 ""))))) else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | C_SLLI_HINT ((shamt, rsd)) =>
   if ((((((shamt = (0b000000w : 6 words$word)))) \/ (((rsd = zreg)))))) then
     sail2_state_monad$bindS (reg_name_forwards rsd)
       (\ (w__169 : string) . 
        sail2_state_monad$returnS
          ((string_append "c.slli.hint."
              ((string_append w__169
                  ((string_append "."
                      ((string_append ((decimal_string_of_bits shamt)) "")))))))))
   else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | C_SRLI_HINT (rsd) => sail2_state_monad$bindS (creg_name_forwards rsd)
                              (\ (w__172 : string) . 
                               sail2_state_monad$returnS
                                 ((string_append "c.srli.hint."
                                     ((string_append w__172 "")))))
     | C_SRAI_HINT (rsd) => sail2_state_monad$bindS (creg_name_forwards rsd)
                              (\ (w__173 : string) . 
                               sail2_state_monad$returnS
                                 ((string_append "c.srai.hint."
                                     ((string_append w__173 "")))))
     | FENCE_RESERVED ((fm, pred, succ, rs, rd)) =>
   if (((((((((fm <> (0x0w : 4 words$word)))) /\
              (((fm <> (0x8w : 4 words$word))))))) \/
           ((((((rs <> (0b00000w : 5 words$word)))) \/
                (((rd <> (0b00000w : 5 words$word)))))))))) then
     sail2_state_monad$bindS (fence_bits_forwards pred)
       (\ (w__174 : string) .  sail2_state_monad$bindS
                                 (fence_bits_forwards succ)
                                 (\ (w__175 : string) .  sail2_state_monad$bindS
                                                           (reg_name_forwards
                                                              rs)
                                                           (\ (w__176 : string) .  
                                                            sail2_state_monad$bindS
                                                              (reg_name_forwards
                                                                 rd)
                                                              (\ (w__177 : string) . 
                                                               sail2_state_monad$returnS
                                                                 ((string_append
                                                                    "fence.reserved."
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__174
                                                                    (
                                                                    (
                                                                    string_append
                                                                    "."
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__175
                                                                    (
                                                                    (
                                                                    string_append
                                                                    "."
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__176
                                                                    (
                                                                    (
                                                                    string_append
                                                                    "."
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__177
                                                                    (
                                                                    (
                                                                    string_append
                                                                    "."
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    decimal_string_of_bits
                                                                    fm)) 
                                                                    ""))))))))))))))))))))))))
   else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | FENCEI_RESERVED ((imm, rs, rd)) =>
   if ((((((imm <> (0x000w : 12 words$word)))) \/
           ((((((rs <> zreg))) \/ (((rd <> zreg))))))))) then
     sail2_state_monad$bindS (reg_name_forwards rd)
       (\ (w__180 : string) .  sail2_state_monad$bindS (reg_name_forwards rs)
                                 (\ (w__181 : string) . 
                                  sail2_state_monad$returnS
                                    ((string_append "fence.i.reserved."
                                        ((string_append w__180
                                            ((string_append "."
                                                ((string_append w__181
                                                    ((string_append "."
                                                        ((string_append
                                                            ((decimal_string_of_bits
                                                                imm)) 
                                                          ""))))))))))))))
   else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | LOAD_FP ((imm, rs1, rd, width)) => sail2_state_monad$bindS
                                            (freg_name_forwards rd)
                                            (\ (w__184 : string) .  sail2_state_monad$bindS
                                                                    (
                                                                    reg_name_forwards
                                                                    rs1)
                                                                    (
                                                                    \ (w__185 : string) . 
                                                                    sail2_state_monad$returnS
                                                                    (
                                                                    (
                                                                    string_append
                                                                    "fl"
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    size_mnemonic_forwards
                                                                    width))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__184
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    decimal_string_of_bits
                                                                    imm))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    opt_spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    "("
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    opt_spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__185
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    opt_spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    ")" 
                                                                    ""))))))))))))))))))))))))))
     | STORE_FP ((imm, rs2, rs1, width)) => sail2_state_monad$bindS
                                              (freg_name_forwards rs2)
                                              (\ (w__186 : string) .  
                                               sail2_state_monad$bindS
                                                 (reg_name_forwards rs1)
                                                 (\ (w__187 : string) . 
                                                  sail2_state_monad$returnS
                                                    ((string_append "fs"
                                                        ((string_append
                                                            ((size_mnemonic_forwards
                                                                width))
                                                            ((string_append
                                                                ((spc_forwards
                                                                    () ))
                                                                ((string_append
                                                                    w__186
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    decimal_string_of_bits
                                                                    imm))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    opt_spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    "("
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    opt_spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__187
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    opt_spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    ")" 
                                                                    ""))))))))))))))))))))))))))
     | F_MADD_TYPE_S ((rs3, rs2, rs1, rm, rd, op)) => sail2_state_monad$bindS
                                                        (freg_name_forwards
                                                           rd)
                                                        (\ (w__188 : string) .  
                                                         sail2_state_monad$bindS
                                                           (freg_name_forwards
                                                              rs1)
                                                           (\ (w__189 : string) .  
                                                            sail2_state_monad$bindS
                                                              (freg_name_forwards
                                                                 rs2)
                                                              (\ (w__190 : string) .  
                                                               sail2_state_monad$bindS
                                                                 (freg_name_forwards
                                                                    rs3)
                                                                 (\ (w__191 : string) . 
                                                                  sail2_state_monad$returnS
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    f_madd_type_mnemonic_S_forwards
                                                                    op))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__188
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__189
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__190
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__191
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    frm_mnemonic_forwards
                                                                    rm)) 
                                                                    ""))))))))))))))))))))))))))
     | F_BIN_RM_TYPE_S ((rs2, rs1, rm, rd, op)) => sail2_state_monad$bindS
                                                     (freg_name_forwards rd)
                                                     (\ (w__192 : string) .  
                                                      sail2_state_monad$bindS
                                                        (freg_name_forwards
                                                           rs1)
                                                        (\ (w__193 : string) .  
                                                         sail2_state_monad$bindS
                                                           (freg_name_forwards
                                                              rs2)
                                                           (\ (w__194 : string) . 
                                                            sail2_state_monad$returnS
                                                              ((string_append
                                                                  ((f_bin_rm_type_mnemonic_S_forwards
                                                                    op))
                                                                  ((string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__192
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__193
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__194
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    frm_mnemonic_forwards
                                                                    rm)) 
                                                                    "")))))))))))))))))))))
     | F_UN_RM_TYPE_S ((rs1, rm, rd, FSQRT_S)) => sail2_state_monad$bindS
                                                    (freg_name_forwards rd)
                                                    (\ (w__195 : string) .  
                                                     sail2_state_monad$bindS
                                                       (freg_name_forwards
                                                          rs1)
                                                       (\ (w__196 : string) . 
                                                        sail2_state_monad$returnS
                                                          ((string_append
                                                              ((f_un_rm_type_mnemonic_S_forwards
                                                                  FSQRT_S))
                                                              ((string_append
                                                                  ((spc_forwards
                                                                    () ))
                                                                  ((string_append
                                                                    w__195
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__196
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    frm_mnemonic_forwards
                                                                    rm)) 
                                                                    ""))))))))))))))))
     | F_UN_RM_TYPE_S ((rs1, rm, rd, FCVT_W_S)) => sail2_state_monad$bindS
                                                     (reg_name_forwards rd)
                                                     (\ (w__197 : string) .  
                                                      sail2_state_monad$bindS
                                                        (freg_name_forwards
                                                           rs1)
                                                        (\ (w__198 : string) . 
                                                         sail2_state_monad$returnS
                                                           ((string_append
                                                               ((f_un_rm_type_mnemonic_S_forwards
                                                                   FCVT_W_S))
                                                               ((string_append
                                                                   ((
                                                                    spc_forwards
                                                                    () ))
                                                                   ((
                                                                    string_append
                                                                    w__197
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__198
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    frm_mnemonic_forwards
                                                                    rm)) 
                                                                    ""))))))))))))))))
     | F_UN_RM_TYPE_S ((rs1, rm, rd, FCVT_WU_S)) => sail2_state_monad$bindS
                                                      (reg_name_forwards rd)
                                                      (\ (w__199 : string) .  
                                                       sail2_state_monad$bindS
                                                         (freg_name_forwards
                                                            rs1)
                                                         (\ (w__200 : string) . 
                                                          sail2_state_monad$returnS
                                                            ((string_append
                                                                ((f_un_rm_type_mnemonic_S_forwards
                                                                    FCVT_WU_S))
                                                                ((string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__199
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__200
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    frm_mnemonic_forwards
                                                                    rm)) 
                                                                    ""))))))))))))))))
     | F_UN_RM_TYPE_S ((rs1, rm, rd, FCVT_S_W)) => sail2_state_monad$bindS
                                                     (freg_name_forwards rd)
                                                     (\ (w__201 : string) .  
                                                      sail2_state_monad$bindS
                                                        (reg_name_forwards
                                                           rs1)
                                                        (\ (w__202 : string) . 
                                                         sail2_state_monad$returnS
                                                           ((string_append
                                                               ((f_un_rm_type_mnemonic_S_forwards
                                                                   FCVT_S_W))
                                                               ((string_append
                                                                   ((
                                                                    spc_forwards
                                                                    () ))
                                                                   ((
                                                                    string_append
                                                                    w__201
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__202
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    frm_mnemonic_forwards
                                                                    rm)) 
                                                                    ""))))))))))))))))
     | F_UN_RM_TYPE_S ((rs1, rm, rd, FCVT_S_WU)) => sail2_state_monad$bindS
                                                      (freg_name_forwards rd)
                                                      (\ (w__203 : string) .  
                                                       sail2_state_monad$bindS
                                                         (reg_name_forwards
                                                            rs1)
                                                         (\ (w__204 : string) . 
                                                          sail2_state_monad$returnS
                                                            ((string_append
                                                                ((f_un_rm_type_mnemonic_S_forwards
                                                                    FCVT_S_WU))
                                                                ((string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__203
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__204
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    frm_mnemonic_forwards
                                                                    rm)) 
                                                                    ""))))))))))))))))
     | F_UN_RM_TYPE_S ((rs1, rm, rd, FCVT_L_S)) => sail2_state_monad$bindS
                                                     (reg_name_forwards rd)
                                                     (\ (w__205 : string) .  
                                                      sail2_state_monad$bindS
                                                        (freg_name_forwards
                                                           rs1)
                                                        (\ (w__206 : string) . 
                                                         sail2_state_monad$returnS
                                                           ((string_append
                                                               ((f_un_rm_type_mnemonic_S_forwards
                                                                   FCVT_L_S))
                                                               ((string_append
                                                                   ((
                                                                    spc_forwards
                                                                    () ))
                                                                   ((
                                                                    string_append
                                                                    w__205
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__206
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    frm_mnemonic_forwards
                                                                    rm)) 
                                                                    ""))))))))))))))))
     | F_UN_RM_TYPE_S ((rs1, rm, rd, FCVT_LU_S)) => sail2_state_monad$bindS
                                                      (reg_name_forwards rd)
                                                      (\ (w__207 : string) .  
                                                       sail2_state_monad$bindS
                                                         (freg_name_forwards
                                                            rs1)
                                                         (\ (w__208 : string) . 
                                                          sail2_state_monad$returnS
                                                            ((string_append
                                                                ((f_un_rm_type_mnemonic_S_forwards
                                                                    FCVT_LU_S))
                                                                ((string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__207
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__208
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    frm_mnemonic_forwards
                                                                    rm)) 
                                                                    ""))))))))))))))))
     | F_UN_RM_TYPE_S ((rs1, rm, rd, FCVT_S_L)) => sail2_state_monad$bindS
                                                     (freg_name_forwards rd)
                                                     (\ (w__209 : string) .  
                                                      sail2_state_monad$bindS
                                                        (reg_name_forwards
                                                           rs1)
                                                        (\ (w__210 : string) . 
                                                         sail2_state_monad$returnS
                                                           ((string_append
                                                               ((f_un_rm_type_mnemonic_S_forwards
                                                                   FCVT_S_L))
                                                               ((string_append
                                                                   ((
                                                                    spc_forwards
                                                                    () ))
                                                                   ((
                                                                    string_append
                                                                    w__209
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__210
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    frm_mnemonic_forwards
                                                                    rm)) 
                                                                    ""))))))))))))))))
     | F_UN_RM_TYPE_S ((rs1, rm, rd, FCVT_S_LU)) => sail2_state_monad$bindS
                                                      (freg_name_forwards rd)
                                                      (\ (w__211 : string) .  
                                                       sail2_state_monad$bindS
                                                         (reg_name_forwards
                                                            rs1)
                                                         (\ (w__212 : string) . 
                                                          sail2_state_monad$returnS
                                                            ((string_append
                                                                ((f_un_rm_type_mnemonic_S_forwards
                                                                    FCVT_S_LU))
                                                                ((string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__211
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__212
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    frm_mnemonic_forwards
                                                                    rm)) 
                                                                    ""))))))))))))))))
     | F_BIN_TYPE_S ((rs2, rs1, rd, FSGNJ_S)) => sail2_state_monad$bindS
                                                   (freg_name_forwards rd)
                                                   (\ (w__213 : string) .  
                                                    sail2_state_monad$bindS
                                                      (freg_name_forwards rs1)
                                                      (\ (w__214 : string) .  
                                                       sail2_state_monad$bindS
                                                         (freg_name_forwards
                                                            rs2)
                                                         (\ (w__215 : string) . 
                                                          sail2_state_monad$returnS
                                                            ((string_append
                                                                ((f_bin_type_mnemonic_S_forwards
                                                                    FSGNJ_S))
                                                                ((string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__213
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__214
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__215 
                                                                    "")))))))))))))))))
     | F_BIN_TYPE_S ((rs2, rs1, rd, FSGNJN_S)) => sail2_state_monad$bindS
                                                    (freg_name_forwards rd)
                                                    (\ (w__216 : string) .  
                                                     sail2_state_monad$bindS
                                                       (freg_name_forwards
                                                          rs1)
                                                       (\ (w__217 : string) .  
                                                        sail2_state_monad$bindS
                                                          (freg_name_forwards
                                                             rs2)
                                                          (\ (w__218 : string) . 
                                                           sail2_state_monad$returnS
                                                             ((string_append
                                                                 ((f_bin_type_mnemonic_S_forwards
                                                                    FSGNJN_S))
                                                                 ((string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__216
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__217
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__218 
                                                                    "")))))))))))))))))
     | F_BIN_TYPE_S ((rs2, rs1, rd, FSGNJX_S)) => sail2_state_monad$bindS
                                                    (freg_name_forwards rd)
                                                    (\ (w__219 : string) .  
                                                     sail2_state_monad$bindS
                                                       (freg_name_forwards
                                                          rs1)
                                                       (\ (w__220 : string) .  
                                                        sail2_state_monad$bindS
                                                          (freg_name_forwards
                                                             rs2)
                                                          (\ (w__221 : string) . 
                                                           sail2_state_monad$returnS
                                                             ((string_append
                                                                 ((f_bin_type_mnemonic_S_forwards
                                                                    FSGNJX_S))
                                                                 ((string_append
                                                                    (
                                                                    (
                                                                    spc_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__219
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__220
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__221 
                                                                    "")))))))))))))))))
     | F_BIN_TYPE_S ((rs2, rs1, rd, FMIN_S)) => sail2_state_monad$bindS
                                                  (freg_name_forwards rd)
                                                  (\ (w__222 : string) .  
                                                   sail2_state_monad$bindS
                                                     (freg_name_forwards rs1)
                                                     (\ (w__223 : string) .  
                                                      sail2_state_monad$bindS
                                                        (freg_name_forwards
                                                           rs2)
                                                        (\ (w__224 : string) . 
                                                         sail2_state_monad$returnS
                                                           ((string_append
                                                               ((f_bin_type_mnemonic_S_forwards
                                                                   FMIN_S))
                                                               ((string_append
                                                                   ((
                                                                    spc_forwards
                                                                    () ))
                                                                   ((
                                                                    string_append
                                                                    w__222
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__223
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__224 
                                                                    "")))))))))))))))))
     | F_BIN_TYPE_S ((rs2, rs1, rd, FMAX_S)) => sail2_state_monad$bindS
                                                  (freg_name_forwards rd)
                                                  (\ (w__225 : string) .  
                                                   sail2_state_monad$bindS
                                                     (freg_name_forwards rs1)
                                                     (\ (w__226 : string) .  
                                                      sail2_state_monad$bindS
                                                        (freg_name_forwards
                                                           rs2)
                                                        (\ (w__227 : string) . 
                                                         sail2_state_monad$returnS
                                                           ((string_append
                                                               ((f_bin_type_mnemonic_S_forwards
                                                                   FMAX_S))
                                                               ((string_append
                                                                   ((
                                                                    spc_forwards
                                                                    () ))
                                                                   ((
                                                                    string_append
                                                                    w__225
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__226
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__227 
                                                                    "")))))))))))))))))
     | F_BIN_TYPE_S ((rs2, rs1, rd, FEQ_S)) => sail2_state_monad$bindS
                                                 (reg_name_forwards rd)
                                                 (\ (w__228 : string) .  
                                                  sail2_state_monad$bindS
                                                    (freg_name_forwards rs1)
                                                    (\ (w__229 : string) .  
                                                     sail2_state_monad$bindS
                                                       (freg_name_forwards
                                                          rs2)
                                                       (\ (w__230 : string) . 
                                                        sail2_state_monad$returnS
                                                          ((string_append
                                                              ((f_bin_type_mnemonic_S_forwards
                                                                  FEQ_S))
                                                              ((string_append
                                                                  ((spc_forwards
                                                                    () ))
                                                                  ((string_append
                                                                    w__228
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__229
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__230 
                                                                    "")))))))))))))))))
     | F_BIN_TYPE_S ((rs2, rs1, rd, FLT_S)) => sail2_state_monad$bindS
                                                 (reg_name_forwards rd)
                                                 (\ (w__231 : string) .  
                                                  sail2_state_monad$bindS
                                                    (freg_name_forwards rs1)
                                                    (\ (w__232 : string) .  
                                                     sail2_state_monad$bindS
                                                       (freg_name_forwards
                                                          rs2)
                                                       (\ (w__233 : string) . 
                                                        sail2_state_monad$returnS
                                                          ((string_append
                                                              ((f_bin_type_mnemonic_S_forwards
                                                                  FLT_S))
                                                              ((string_append
                                                                  ((spc_forwards
                                                                    () ))
                                                                  ((string_append
                                                                    w__231
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__232
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__233 
                                                                    "")))))))))))))))))
     | F_BIN_TYPE_S ((rs2, rs1, rd, FLE_S)) => sail2_state_monad$bindS
                                                 (reg_name_forwards rd)
                                                 (\ (w__234 : string) .  
                                                  sail2_state_monad$bindS
                                                    (freg_name_forwards rs1)
                                                    (\ (w__235 : string) .  
                                                     sail2_state_monad$bindS
                                                       (freg_name_forwards
                                                          rs2)
                                                       (\ (w__236 : string) . 
                                                        sail2_state_monad$returnS
                                                          ((string_append
                                                              ((f_bin_type_mnemonic_S_forwards
                                                                  FLE_S))
                                                              ((string_append
                                                                  ((spc_forwards
                                                                    () ))
                                                                  ((string_append
                                                                    w__234
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__235
                                                                    (
                                                                    (
                                                                    string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__236 
                                                                    "")))))))))))))))))
     | F_UN_TYPE_S ((rs1, rd, FMV_X_W)) => sail2_state_monad$bindS
                                             (reg_name_forwards rd)
                                             (\ (w__237 : string) .  
                                              sail2_state_monad$bindS
                                                (freg_name_forwards rs1)
                                                (\ (w__238 : string) . 
                                                 sail2_state_monad$returnS
                                                   ((string_append
                                                       ((f_un_type_mnemonic_S_forwards
                                                           FMV_X_W))
                                                       ((string_append
                                                           ((spc_forwards () ))
                                                           ((string_append
                                                               w__237
                                                               ((string_append
                                                                   ((
                                                                    sep_forwards
                                                                    () ))
                                                                   ((
                                                                    string_append
                                                                    w__238 
                                                                    ""))))))))))))
     | F_UN_TYPE_S ((rs1, rd, FMV_W_X)) => sail2_state_monad$bindS
                                             (freg_name_forwards rd)
                                             (\ (w__239 : string) .  
                                              sail2_state_monad$bindS
                                                (reg_name_forwards rs1)
                                                (\ (w__240 : string) . 
                                                 sail2_state_monad$returnS
                                                   ((string_append
                                                       ((f_un_type_mnemonic_S_forwards
                                                           FMV_W_X))
                                                       ((string_append
                                                           ((spc_forwards () ))
                                                           ((string_append
                                                               w__239
                                                               ((string_append
                                                                   ((
                                                                    sep_forwards
                                                                    () ))
                                                                   ((
                                                                    string_append
                                                                    w__240 
                                                                    ""))))))))))))
     | F_UN_TYPE_S ((rs1, rd, FCLASS_S)) => sail2_state_monad$bindS
                                              (reg_name_forwards rd)
                                              (\ (w__241 : string) .  
                                               sail2_state_monad$bindS
                                                 (freg_name_forwards rs1)
                                                 (\ (w__242 : string) . 
                                                  sail2_state_monad$returnS
                                                    ((string_append
                                                        ((f_un_type_mnemonic_S_forwards
                                                            FCLASS_S))
                                                        ((string_append
                                                            ((spc_forwards
                                                                () ))
                                                            ((string_append
                                                                w__241
                                                                ((string_append
                                                                    (
                                                                    (
                                                                    sep_forwards
                                                                    () ))
                                                                    (
                                                                    (
                                                                    string_append
                                                                    w__242 
                                                                    ""))))))))))))
     | C_FLWSP ((imm, rd)) =>
   if ((((( 32 : int): ii) = (( 32 : int): ii)))) then
     sail2_state_monad$bindS (reg_name_forwards rd)
       (\ (w__243 : string) . 
        sail2_state_monad$returnS
          ((string_append "c.flwsp"
              ((string_append ((spc_forwards () ))
                  ((string_append w__243
                      ((string_append ((sep_forwards () ))
                          ((string_append ((decimal_string_of_bits imm)) "")))))))))))
   else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | C_FSWSP ((uimm, rd)) =>
   if ((((( 32 : int): ii) = (( 32 : int): ii)))) then
     sail2_state_monad$bindS (reg_name_forwards rd)
       (\ (w__246 : string) . 
        sail2_state_monad$returnS
          ((string_append "c.fswsp"
              ((string_append ((spc_forwards () ))
                  ((string_append w__246
                      ((string_append ((sep_forwards () ))
                          ((string_append ((decimal_string_of_bits uimm)) "")))))))))))
   else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | C_FLW ((uimm, rsc, rdc)) =>
   if ((((( 32 : int): ii) = (( 32 : int): ii)))) then
     sail2_state_monad$bindS (creg_name_forwards rdc)
       (\ (w__249 : string) .  sail2_state_monad$bindS
                                 (creg_name_forwards rsc)
                                 (\ (w__250 : string) . 
                                  sail2_state_monad$returnS
                                    ((string_append "c.flw"
                                        ((string_append ((spc_forwards () ))
                                            ((string_append w__249
                                                ((string_append
                                                    ((sep_forwards () ))
                                                    ((string_append w__250
                                                        ((string_append
                                                            ((sep_forwards
                                                                () ))
                                                            ((string_append
                                                                ((decimal_string_of_bits
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    uimm
                                                                    (
                                                                    0b00w : 2 words$word) : 7 words$word))))
                                                                ""))))))))))))))))
   else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | C_FSW ((uimm, rsc1, rsc2)) =>
   if ((((( 32 : int): ii) = (( 32 : int): ii)))) then
     sail2_state_monad$bindS (creg_name_forwards rsc1)
       (\ (w__253 : string) .  sail2_state_monad$bindS
                                 (creg_name_forwards rsc2)
                                 (\ (w__254 : string) . 
                                  sail2_state_monad$returnS
                                    ((string_append "c.fsw"
                                        ((string_append ((spc_forwards () ))
                                            ((string_append w__253
                                                ((string_append
                                                    ((sep_forwards () ))
                                                    ((string_append w__254
                                                        ((string_append
                                                            ((sep_forwards
                                                                () ))
                                                            ((string_append
                                                                ((decimal_string_of_bits
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    uimm
                                                                    (
                                                                    0b00w : 2 words$word) : 7 words$word))))
                                                                ""))))))))))))))))
   else
     sail2_state_monad$seqS
       (sail2_state_monad$assert_expS F
          "Pattern match failure at unknown location")
       (sail2_state_monad$exitS () )
     | ILLEGAL (s) =>
   sail2_state_monad$returnS
     ((string_append "illegal"
         ((string_append ((spc_forwards () ))
             ((string_append ((decimal_string_of_bits s)) ""))))))
     | C_ILLEGAL (s) =>
   sail2_state_monad$returnS
     ((string_append "c.illegal"
         ((string_append ((spc_forwards () ))
             ((string_append ((decimal_string_of_bits s)) ""))))))
   )))`;


(*val _s2645_ : string -> maybe (mword ty16)*)

val _ = Define `
 ((s2645_:string ->((16)words$word)option) s2646_0=
    (let s2647_0 = s2646_0 in
   if ((string_startswith s2647_0 "c.illegal")) then  
  (case ((string_drop s2647_0 ((string_length "c.illegal")))) of
        s2648_0 =>
  (case ((spc_matches_prefix0 s2648_0)) of
        SOME ((() , s2649_0)) =>
  (case ((string_drop s2648_0 s2649_0)) of
        s2650_0 =>
  (case ((hex_bits_16_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s2650_0 : (( 16 words$word # ii)) option)) of
        SOME ((s, s2651_0)) =>
  let p0_ = (string_drop s2650_0 s2651_0) in
  if (((p0_ = ""))) then SOME s else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s2637_ : string -> maybe (mword ty32)*)

val _ = Define `
 ((s2637_:string ->((32)words$word)option) s2638_0=
    (let s2639_0 = s2638_0 in
   if ((string_startswith s2639_0 "illegal")) then  
  (case ((string_drop s2639_0 ((string_length "illegal")))) of
        s2640_0 =>
  (case ((spc_matches_prefix0 s2640_0)) of
        SOME ((() , s2641_0)) =>
  (case ((string_drop s2640_0 s2641_0)) of
        s2642_0 =>
  (case ((hex_bits_32_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s2642_0 : (( 32 words$word # ii)) option)) of
        SOME ((s, s2643_0)) =>
  let p0_ = (string_drop s2642_0 s2643_0) in
  if (((p0_ = ""))) then SOME s else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s2621_ : string -> maybe ((mword ty3 * mword ty3 * mword ty5))*)

val _ = Define `
 ((s2621_:string ->((3)words$word#(3)words$word#(5)words$word)option) s2622_0=
    (let s2623_0 = s2622_0 in
   if ((string_startswith s2623_0 "c.fsw")) then  
  (case ((string_drop s2623_0 ((string_length "c.fsw")))) of
        s2624_0 =>
  (case ((spc_matches_prefix0 s2624_0)) of
        SOME ((() , s2625_0)) =>
  (case ((string_drop s2624_0 s2625_0)) of
        s2626_0 =>
  (case ((creg_name_matches_prefix s2626_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsc1, s2627_0)) =>
  (case ((string_drop s2626_0 s2627_0)) of
        s2628_0 =>
  (case ((sep_matches_prefix s2628_0)) of
        SOME ((() , s2629_0)) =>
  (case ((string_drop s2628_0 s2629_0)) of
        s2630_0 =>
  (case ((creg_name_matches_prefix s2630_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsc2, s2631_0)) =>
  (case ((string_drop s2630_0 s2631_0)) of
        s2632_0 =>
  (case ((sep_matches_prefix s2632_0)) of
        SOME ((() , s2633_0)) =>
  (case ((string_drop s2632_0 s2633_0)) of
        s2634_0 =>
  (case ((hex_bits_7_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s2634_0
         : (( 7 words$word # ii)) option)) of
        SOME ((v__1180, s2635_0)) =>
  if (((((subrange_vec_dec v__1180 (( 1 : int): ii) (( 0 : int): ii)
         : 2 words$word)) = (0b00w : 2 words$word)))) then
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1180 (( 6 : int): ii) (( 2 : int): ii) : 5 words$word)) in
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1180 (( 6 : int): ii) (( 2 : int): ii) : 5 words$word)) in
    let p0_ = (string_drop s2634_0 s2635_0) in
    if (((p0_ = ""))) then SOME (rsc1, rsc2, uimm) else NONE else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s2605_ : string -> maybe ((mword ty3 * mword ty3 * mword ty5))*)

val _ = Define `
 ((s2605_:string ->((3)words$word#(3)words$word#(5)words$word)option) s2606_0=
    (let s2607_0 = s2606_0 in
   if ((string_startswith s2607_0 "c.flw")) then  
  (case ((string_drop s2607_0 ((string_length "c.flw")))) of
        s2608_0 =>
  (case ((spc_matches_prefix0 s2608_0)) of
        SOME ((() , s2609_0)) =>
  (case ((string_drop s2608_0 s2609_0)) of
        s2610_0 =>
  (case ((creg_name_matches_prefix s2610_0 : (( 3 words$word # ii)) option)) of
        SOME ((rdc, s2611_0)) =>
  (case ((string_drop s2610_0 s2611_0)) of
        s2612_0 =>
  (case ((sep_matches_prefix s2612_0)) of
        SOME ((() , s2613_0)) =>
  (case ((string_drop s2612_0 s2613_0)) of
        s2614_0 =>
  (case ((creg_name_matches_prefix s2614_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsc, s2615_0)) =>
  (case ((string_drop s2614_0 s2615_0)) of
        s2616_0 =>
  (case ((sep_matches_prefix s2616_0)) of
        SOME ((() , s2617_0)) =>
  (case ((string_drop s2616_0 s2617_0)) of
        s2618_0 =>
  (case ((hex_bits_7_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s2618_0
         : (( 7 words$word # ii)) option)) of
        SOME ((v__1182, s2619_0)) =>
  if (((((subrange_vec_dec v__1182 (( 1 : int): ii) (( 0 : int): ii)
         : 2 words$word)) = (0b00w : 2 words$word)))) then
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1182 (( 6 : int): ii) (( 2 : int): ii) : 5 words$word)) in
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1182 (( 6 : int): ii) (( 2 : int): ii) : 5 words$word)) in
    let p0_ = (string_drop s2618_0 s2619_0) in
    if (((p0_ = ""))) then SOME (rdc, rsc, uimm) else NONE else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s2593_ : string -> maybe ((mword ty5 * mword ty6))*)

val _ = Define `
 ((s2593_:string ->((5)words$word#(6)words$word)option) s2594_0=
    (let s2595_0 = s2594_0 in
   if ((string_startswith s2595_0 "c.fswsp")) then  
  (case ((string_drop s2595_0 ((string_length "c.fswsp")))) of
        s2596_0 =>
  (case ((spc_matches_prefix0 s2596_0)) of
        SOME ((() , s2597_0)) =>
  (case ((string_drop s2596_0 s2597_0)) of
        s2598_0 =>
  (case ((reg_name_matches_prefix s2598_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s2599_0)) =>
  (case ((string_drop s2598_0 s2599_0)) of
        s2600_0 =>
  (case ((sep_matches_prefix s2600_0)) of
        SOME ((() , s2601_0)) =>
  (case ((string_drop s2600_0 s2601_0)) of
        s2602_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s2602_0 : (( 6 words$word # ii)) option)) of
        SOME ((uimm, s2603_0)) =>
  let p0_ = (string_drop s2602_0 s2603_0) in
  if (((p0_ = ""))) then SOME (rd, uimm) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s2581_ : string -> maybe ((mword ty5 * mword ty6))*)

val _ = Define `
 ((s2581_:string ->((5)words$word#(6)words$word)option) s2582_0=
    (let s2583_0 = s2582_0 in
   if ((string_startswith s2583_0 "c.flwsp")) then  
  (case ((string_drop s2583_0 ((string_length "c.flwsp")))) of
        s2584_0 =>
  (case ((spc_matches_prefix0 s2584_0)) of
        SOME ((() , s2585_0)) =>
  (case ((string_drop s2584_0 s2585_0)) of
        s2586_0 =>
  (case ((reg_name_matches_prefix s2586_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s2587_0)) =>
  (case ((string_drop s2586_0 s2587_0)) of
        s2588_0 =>
  (case ((sep_matches_prefix s2588_0)) of
        SOME ((() , s2589_0)) =>
  (case ((string_drop s2588_0 s2589_0)) of
        s2590_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s2590_0 : (( 6 words$word # ii)) option)) of
        SOME ((imm, s2591_0)) =>
  let p0_ = (string_drop s2590_0 s2591_0) in
  if (((p0_ = ""))) then SOME (rd, imm) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s2568_ : string -> maybe ((f_un_op_S * mword ty5 * mword ty5))*)

val _ = Define `
 ((s2568_:string ->(f_un_op_S#(5)words$word#(5)words$word)option) s2569_0= 
  ((case s2569_0 of
         s2570_0 =>
   (case ((f_un_type_mnemonic_S_matches_prefix s2570_0)) of
         SOME ((FCLASS_S, s2571_0)) =>
   (case ((string_drop s2570_0 s2571_0)) of
         s2572_0 =>
   (case ((spc_matches_prefix0 s2572_0)) of
         SOME ((() , s2573_0)) =>
   (case ((string_drop s2572_0 s2573_0)) of
         s2574_0 =>
   (case ((reg_name_matches_prefix s2574_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s2575_0)) =>
   (case ((string_drop s2574_0 s2575_0)) of
         s2576_0 =>
   (case ((sep_matches_prefix s2576_0)) of
         SOME ((() , s2577_0)) =>
   (case ((string_drop s2576_0 s2577_0)) of
         s2578_0 =>
   (case ((freg_name_matches_prefix s2578_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s2579_0)) =>
   let p0_ = (string_drop s2578_0 s2579_0) in
   if (((p0_ = ""))) then SOME (FCLASS_S, rd, rs1) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s2555_ : string -> maybe ((f_un_op_S * mword ty5 * mword ty5))*)

val _ = Define `
 ((s2555_:string ->(f_un_op_S#(5)words$word#(5)words$word)option) s2556_0= 
  ((case s2556_0 of
         s2557_0 =>
   (case ((f_un_type_mnemonic_S_matches_prefix s2557_0)) of
         SOME ((FMV_W_X, s2558_0)) =>
   (case ((string_drop s2557_0 s2558_0)) of
         s2559_0 =>
   (case ((spc_matches_prefix0 s2559_0)) of
         SOME ((() , s2560_0)) =>
   (case ((string_drop s2559_0 s2560_0)) of
         s2561_0 =>
   (case ((freg_name_matches_prefix s2561_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s2562_0)) =>
   (case ((string_drop s2561_0 s2562_0)) of
         s2563_0 =>
   (case ((sep_matches_prefix s2563_0)) of
         SOME ((() , s2564_0)) =>
   (case ((string_drop s2563_0 s2564_0)) of
         s2565_0 =>
   (case ((reg_name_matches_prefix s2565_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s2566_0)) =>
   let p0_ = (string_drop s2565_0 s2566_0) in
   if (((p0_ = ""))) then SOME (FMV_W_X, rd, rs1) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s2542_ : string -> maybe ((f_un_op_S * mword ty5 * mword ty5))*)

val _ = Define `
 ((s2542_:string ->(f_un_op_S#(5)words$word#(5)words$word)option) s2543_0= 
  ((case s2543_0 of
         s2544_0 =>
   (case ((f_un_type_mnemonic_S_matches_prefix s2544_0)) of
         SOME ((FMV_X_W, s2545_0)) =>
   (case ((string_drop s2544_0 s2545_0)) of
         s2546_0 =>
   (case ((spc_matches_prefix0 s2546_0)) of
         SOME ((() , s2547_0)) =>
   (case ((string_drop s2546_0 s2547_0)) of
         s2548_0 =>
   (case ((reg_name_matches_prefix s2548_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s2549_0)) =>
   (case ((string_drop s2548_0 s2549_0)) of
         s2550_0 =>
   (case ((sep_matches_prefix s2550_0)) of
         SOME ((() , s2551_0)) =>
   (case ((string_drop s2550_0 s2551_0)) of
         s2552_0 =>
   (case ((freg_name_matches_prefix s2552_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s2553_0)) =>
   let p0_ = (string_drop s2552_0 s2553_0) in
   if (((p0_ = ""))) then SOME (FMV_X_W, rd, rs1) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s2525_ : string -> maybe ((f_bin_op_S * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s2525_:string ->(f_bin_op_S#(5)words$word#(5)words$word#(5)words$word)option) s2526_0= 
  ((case s2526_0 of
         s2527_0 =>
   (case ((f_bin_type_mnemonic_S_matches_prefix s2527_0)) of
         SOME ((FLE_S, s2528_0)) =>
   (case ((string_drop s2527_0 s2528_0)) of
         s2529_0 =>
   (case ((spc_matches_prefix0 s2529_0)) of
         SOME ((() , s2530_0)) =>
   (case ((string_drop s2529_0 s2530_0)) of
         s2531_0 =>
   (case ((reg_name_matches_prefix s2531_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s2532_0)) =>
   (case ((string_drop s2531_0 s2532_0)) of
         s2533_0 =>
   (case ((sep_matches_prefix s2533_0)) of
         SOME ((() , s2534_0)) =>
   (case ((string_drop s2533_0 s2534_0)) of
         s2535_0 =>
   (case ((freg_name_matches_prefix s2535_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s2536_0)) =>
   (case ((string_drop s2535_0 s2536_0)) of
         s2537_0 =>
   (case ((sep_matches_prefix s2537_0)) of
         SOME ((() , s2538_0)) =>
   (case ((string_drop s2537_0 s2538_0)) of
         s2539_0 =>
   (case ((freg_name_matches_prefix s2539_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s2540_0)) =>
   let p0_ = (string_drop s2539_0 s2540_0) in
   if (((p0_ = ""))) then SOME (FLE_S, rd, rs1, rs2) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s2508_ : string -> maybe ((f_bin_op_S * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s2508_:string ->(f_bin_op_S#(5)words$word#(5)words$word#(5)words$word)option) s2509_0= 
  ((case s2509_0 of
         s2510_0 =>
   (case ((f_bin_type_mnemonic_S_matches_prefix s2510_0)) of
         SOME ((FLT_S, s2511_0)) =>
   (case ((string_drop s2510_0 s2511_0)) of
         s2512_0 =>
   (case ((spc_matches_prefix0 s2512_0)) of
         SOME ((() , s2513_0)) =>
   (case ((string_drop s2512_0 s2513_0)) of
         s2514_0 =>
   (case ((reg_name_matches_prefix s2514_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s2515_0)) =>
   (case ((string_drop s2514_0 s2515_0)) of
         s2516_0 =>
   (case ((sep_matches_prefix s2516_0)) of
         SOME ((() , s2517_0)) =>
   (case ((string_drop s2516_0 s2517_0)) of
         s2518_0 =>
   (case ((freg_name_matches_prefix s2518_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s2519_0)) =>
   (case ((string_drop s2518_0 s2519_0)) of
         s2520_0 =>
   (case ((sep_matches_prefix s2520_0)) of
         SOME ((() , s2521_0)) =>
   (case ((string_drop s2520_0 s2521_0)) of
         s2522_0 =>
   (case ((freg_name_matches_prefix s2522_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s2523_0)) =>
   let p0_ = (string_drop s2522_0 s2523_0) in
   if (((p0_ = ""))) then SOME (FLT_S, rd, rs1, rs2) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s2491_ : string -> maybe ((f_bin_op_S * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s2491_:string ->(f_bin_op_S#(5)words$word#(5)words$word#(5)words$word)option) s2492_0= 
  ((case s2492_0 of
         s2493_0 =>
   (case ((f_bin_type_mnemonic_S_matches_prefix s2493_0)) of
         SOME ((FEQ_S, s2494_0)) =>
   (case ((string_drop s2493_0 s2494_0)) of
         s2495_0 =>
   (case ((spc_matches_prefix0 s2495_0)) of
         SOME ((() , s2496_0)) =>
   (case ((string_drop s2495_0 s2496_0)) of
         s2497_0 =>
   (case ((reg_name_matches_prefix s2497_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s2498_0)) =>
   (case ((string_drop s2497_0 s2498_0)) of
         s2499_0 =>
   (case ((sep_matches_prefix s2499_0)) of
         SOME ((() , s2500_0)) =>
   (case ((string_drop s2499_0 s2500_0)) of
         s2501_0 =>
   (case ((freg_name_matches_prefix s2501_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s2502_0)) =>
   (case ((string_drop s2501_0 s2502_0)) of
         s2503_0 =>
   (case ((sep_matches_prefix s2503_0)) of
         SOME ((() , s2504_0)) =>
   (case ((string_drop s2503_0 s2504_0)) of
         s2505_0 =>
   (case ((freg_name_matches_prefix s2505_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s2506_0)) =>
   let p0_ = (string_drop s2505_0 s2506_0) in
   if (((p0_ = ""))) then SOME (FEQ_S, rd, rs1, rs2) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s2474_ : string -> maybe ((f_bin_op_S * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s2474_:string ->(f_bin_op_S#(5)words$word#(5)words$word#(5)words$word)option) s2475_0= 
  ((case s2475_0 of
         s2476_0 =>
   (case ((f_bin_type_mnemonic_S_matches_prefix s2476_0)) of
         SOME ((FMAX_S, s2477_0)) =>
   (case ((string_drop s2476_0 s2477_0)) of
         s2478_0 =>
   (case ((spc_matches_prefix0 s2478_0)) of
         SOME ((() , s2479_0)) =>
   (case ((string_drop s2478_0 s2479_0)) of
         s2480_0 =>
   (case ((freg_name_matches_prefix s2480_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s2481_0)) =>
   (case ((string_drop s2480_0 s2481_0)) of
         s2482_0 =>
   (case ((sep_matches_prefix s2482_0)) of
         SOME ((() , s2483_0)) =>
   (case ((string_drop s2482_0 s2483_0)) of
         s2484_0 =>
   (case ((freg_name_matches_prefix s2484_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s2485_0)) =>
   (case ((string_drop s2484_0 s2485_0)) of
         s2486_0 =>
   (case ((sep_matches_prefix s2486_0)) of
         SOME ((() , s2487_0)) =>
   (case ((string_drop s2486_0 s2487_0)) of
         s2488_0 =>
   (case ((freg_name_matches_prefix s2488_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s2489_0)) =>
   let p0_ = (string_drop s2488_0 s2489_0) in
   if (((p0_ = ""))) then SOME (FMAX_S, rd, rs1, rs2) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s2457_ : string -> maybe ((f_bin_op_S * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s2457_:string ->(f_bin_op_S#(5)words$word#(5)words$word#(5)words$word)option) s2458_0= 
  ((case s2458_0 of
         s2459_0 =>
   (case ((f_bin_type_mnemonic_S_matches_prefix s2459_0)) of
         SOME ((FMIN_S, s2460_0)) =>
   (case ((string_drop s2459_0 s2460_0)) of
         s2461_0 =>
   (case ((spc_matches_prefix0 s2461_0)) of
         SOME ((() , s2462_0)) =>
   (case ((string_drop s2461_0 s2462_0)) of
         s2463_0 =>
   (case ((freg_name_matches_prefix s2463_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s2464_0)) =>
   (case ((string_drop s2463_0 s2464_0)) of
         s2465_0 =>
   (case ((sep_matches_prefix s2465_0)) of
         SOME ((() , s2466_0)) =>
   (case ((string_drop s2465_0 s2466_0)) of
         s2467_0 =>
   (case ((freg_name_matches_prefix s2467_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s2468_0)) =>
   (case ((string_drop s2467_0 s2468_0)) of
         s2469_0 =>
   (case ((sep_matches_prefix s2469_0)) of
         SOME ((() , s2470_0)) =>
   (case ((string_drop s2469_0 s2470_0)) of
         s2471_0 =>
   (case ((freg_name_matches_prefix s2471_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s2472_0)) =>
   let p0_ = (string_drop s2471_0 s2472_0) in
   if (((p0_ = ""))) then SOME (FMIN_S, rd, rs1, rs2) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s2440_ : string -> maybe ((f_bin_op_S * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s2440_:string ->(f_bin_op_S#(5)words$word#(5)words$word#(5)words$word)option) s2441_0= 
  ((case s2441_0 of
         s2442_0 =>
   (case ((f_bin_type_mnemonic_S_matches_prefix s2442_0)) of
         SOME ((FSGNJX_S, s2443_0)) =>
   (case ((string_drop s2442_0 s2443_0)) of
         s2444_0 =>
   (case ((spc_matches_prefix0 s2444_0)) of
         SOME ((() , s2445_0)) =>
   (case ((string_drop s2444_0 s2445_0)) of
         s2446_0 =>
   (case ((freg_name_matches_prefix s2446_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s2447_0)) =>
   (case ((string_drop s2446_0 s2447_0)) of
         s2448_0 =>
   (case ((sep_matches_prefix s2448_0)) of
         SOME ((() , s2449_0)) =>
   (case ((string_drop s2448_0 s2449_0)) of
         s2450_0 =>
   (case ((freg_name_matches_prefix s2450_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s2451_0)) =>
   (case ((string_drop s2450_0 s2451_0)) of
         s2452_0 =>
   (case ((sep_matches_prefix s2452_0)) of
         SOME ((() , s2453_0)) =>
   (case ((string_drop s2452_0 s2453_0)) of
         s2454_0 =>
   (case ((freg_name_matches_prefix s2454_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s2455_0)) =>
   let p0_ = (string_drop s2454_0 s2455_0) in
   if (((p0_ = ""))) then SOME (FSGNJX_S, rd, rs1, rs2) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s2423_ : string -> maybe ((f_bin_op_S * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s2423_:string ->(f_bin_op_S#(5)words$word#(5)words$word#(5)words$word)option) s2424_0= 
  ((case s2424_0 of
         s2425_0 =>
   (case ((f_bin_type_mnemonic_S_matches_prefix s2425_0)) of
         SOME ((FSGNJN_S, s2426_0)) =>
   (case ((string_drop s2425_0 s2426_0)) of
         s2427_0 =>
   (case ((spc_matches_prefix0 s2427_0)) of
         SOME ((() , s2428_0)) =>
   (case ((string_drop s2427_0 s2428_0)) of
         s2429_0 =>
   (case ((freg_name_matches_prefix s2429_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s2430_0)) =>
   (case ((string_drop s2429_0 s2430_0)) of
         s2431_0 =>
   (case ((sep_matches_prefix s2431_0)) of
         SOME ((() , s2432_0)) =>
   (case ((string_drop s2431_0 s2432_0)) of
         s2433_0 =>
   (case ((freg_name_matches_prefix s2433_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s2434_0)) =>
   (case ((string_drop s2433_0 s2434_0)) of
         s2435_0 =>
   (case ((sep_matches_prefix s2435_0)) of
         SOME ((() , s2436_0)) =>
   (case ((string_drop s2435_0 s2436_0)) of
         s2437_0 =>
   (case ((freg_name_matches_prefix s2437_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s2438_0)) =>
   let p0_ = (string_drop s2437_0 s2438_0) in
   if (((p0_ = ""))) then SOME (FSGNJN_S, rd, rs1, rs2) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s2406_ : string -> maybe ((f_bin_op_S * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s2406_:string ->(f_bin_op_S#(5)words$word#(5)words$word#(5)words$word)option) s2407_0= 
  ((case s2407_0 of
         s2408_0 =>
   (case ((f_bin_type_mnemonic_S_matches_prefix s2408_0)) of
         SOME ((FSGNJ_S, s2409_0)) =>
   (case ((string_drop s2408_0 s2409_0)) of
         s2410_0 =>
   (case ((spc_matches_prefix0 s2410_0)) of
         SOME ((() , s2411_0)) =>
   (case ((string_drop s2410_0 s2411_0)) of
         s2412_0 =>
   (case ((freg_name_matches_prefix s2412_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s2413_0)) =>
   (case ((string_drop s2412_0 s2413_0)) of
         s2414_0 =>
   (case ((sep_matches_prefix s2414_0)) of
         SOME ((() , s2415_0)) =>
   (case ((string_drop s2414_0 s2415_0)) of
         s2416_0 =>
   (case ((freg_name_matches_prefix s2416_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s2417_0)) =>
   (case ((string_drop s2416_0 s2417_0)) of
         s2418_0 =>
   (case ((sep_matches_prefix s2418_0)) of
         SOME ((() , s2419_0)) =>
   (case ((string_drop s2418_0 s2419_0)) of
         s2420_0 =>
   (case ((freg_name_matches_prefix s2420_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s2421_0)) =>
   let p0_ = (string_drop s2420_0 s2421_0) in
   if (((p0_ = ""))) then SOME (FSGNJ_S, rd, rs1, rs2) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s2389_ : string -> maybe ((f_un_rm_op_S * mword ty5 * mword ty5 * rounding_mode))*)

val _ = Define `
 ((s2389_:string ->(f_un_rm_op_S#(5)words$word#(5)words$word#rounding_mode)option) s2390_0= 
  ((case s2390_0 of
         s2391_0 =>
   (case ((f_un_rm_type_mnemonic_S_matches_prefix s2391_0)) of
         SOME ((FCVT_S_LU, s2392_0)) =>
   (case ((string_drop s2391_0 s2392_0)) of
         s2393_0 =>
   (case ((spc_matches_prefix0 s2393_0)) of
         SOME ((() , s2394_0)) =>
   (case ((string_drop s2393_0 s2394_0)) of
         s2395_0 =>
   (case ((freg_name_matches_prefix s2395_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s2396_0)) =>
   (case ((string_drop s2395_0 s2396_0)) of
         s2397_0 =>
   (case ((sep_matches_prefix s2397_0)) of
         SOME ((() , s2398_0)) =>
   (case ((string_drop s2397_0 s2398_0)) of
         s2399_0 =>
   (case ((reg_name_matches_prefix s2399_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s2400_0)) =>
   (case ((string_drop s2399_0 s2400_0)) of
         s2401_0 =>
   (case ((sep_matches_prefix s2401_0)) of
         SOME ((() , s2402_0)) =>
   (case ((string_drop s2401_0 s2402_0)) of
         s2403_0 =>
   (case ((frm_mnemonic_matches_prefix s2403_0)) of
         SOME ((rm, s2404_0)) =>
   let p0_ = (string_drop s2403_0 s2404_0) in
   if (((p0_ = ""))) then SOME (FCVT_S_LU, rd, rs1, rm) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s2372_ : string -> maybe ((f_un_rm_op_S * mword ty5 * mword ty5 * rounding_mode))*)

val _ = Define `
 ((s2372_:string ->(f_un_rm_op_S#(5)words$word#(5)words$word#rounding_mode)option) s2373_0= 
  ((case s2373_0 of
         s2374_0 =>
   (case ((f_un_rm_type_mnemonic_S_matches_prefix s2374_0)) of
         SOME ((FCVT_S_L, s2375_0)) =>
   (case ((string_drop s2374_0 s2375_0)) of
         s2376_0 =>
   (case ((spc_matches_prefix0 s2376_0)) of
         SOME ((() , s2377_0)) =>
   (case ((string_drop s2376_0 s2377_0)) of
         s2378_0 =>
   (case ((freg_name_matches_prefix s2378_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s2379_0)) =>
   (case ((string_drop s2378_0 s2379_0)) of
         s2380_0 =>
   (case ((sep_matches_prefix s2380_0)) of
         SOME ((() , s2381_0)) =>
   (case ((string_drop s2380_0 s2381_0)) of
         s2382_0 =>
   (case ((reg_name_matches_prefix s2382_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s2383_0)) =>
   (case ((string_drop s2382_0 s2383_0)) of
         s2384_0 =>
   (case ((sep_matches_prefix s2384_0)) of
         SOME ((() , s2385_0)) =>
   (case ((string_drop s2384_0 s2385_0)) of
         s2386_0 =>
   (case ((frm_mnemonic_matches_prefix s2386_0)) of
         SOME ((rm, s2387_0)) =>
   let p0_ = (string_drop s2386_0 s2387_0) in
   if (((p0_ = ""))) then SOME (FCVT_S_L, rd, rs1, rm) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s2355_ : string -> maybe ((f_un_rm_op_S * mword ty5 * mword ty5 * rounding_mode))*)

val _ = Define `
 ((s2355_:string ->(f_un_rm_op_S#(5)words$word#(5)words$word#rounding_mode)option) s2356_0= 
  ((case s2356_0 of
         s2357_0 =>
   (case ((f_un_rm_type_mnemonic_S_matches_prefix s2357_0)) of
         SOME ((FCVT_LU_S, s2358_0)) =>
   (case ((string_drop s2357_0 s2358_0)) of
         s2359_0 =>
   (case ((spc_matches_prefix0 s2359_0)) of
         SOME ((() , s2360_0)) =>
   (case ((string_drop s2359_0 s2360_0)) of
         s2361_0 =>
   (case ((reg_name_matches_prefix s2361_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s2362_0)) =>
   (case ((string_drop s2361_0 s2362_0)) of
         s2363_0 =>
   (case ((sep_matches_prefix s2363_0)) of
         SOME ((() , s2364_0)) =>
   (case ((string_drop s2363_0 s2364_0)) of
         s2365_0 =>
   (case ((freg_name_matches_prefix s2365_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s2366_0)) =>
   (case ((string_drop s2365_0 s2366_0)) of
         s2367_0 =>
   (case ((sep_matches_prefix s2367_0)) of
         SOME ((() , s2368_0)) =>
   (case ((string_drop s2367_0 s2368_0)) of
         s2369_0 =>
   (case ((frm_mnemonic_matches_prefix s2369_0)) of
         SOME ((rm, s2370_0)) =>
   let p0_ = (string_drop s2369_0 s2370_0) in
   if (((p0_ = ""))) then SOME (FCVT_LU_S, rd, rs1, rm) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s2338_ : string -> maybe ((f_un_rm_op_S * mword ty5 * mword ty5 * rounding_mode))*)

val _ = Define `
 ((s2338_:string ->(f_un_rm_op_S#(5)words$word#(5)words$word#rounding_mode)option) s2339_0= 
  ((case s2339_0 of
         s2340_0 =>
   (case ((f_un_rm_type_mnemonic_S_matches_prefix s2340_0)) of
         SOME ((FCVT_L_S, s2341_0)) =>
   (case ((string_drop s2340_0 s2341_0)) of
         s2342_0 =>
   (case ((spc_matches_prefix0 s2342_0)) of
         SOME ((() , s2343_0)) =>
   (case ((string_drop s2342_0 s2343_0)) of
         s2344_0 =>
   (case ((reg_name_matches_prefix s2344_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s2345_0)) =>
   (case ((string_drop s2344_0 s2345_0)) of
         s2346_0 =>
   (case ((sep_matches_prefix s2346_0)) of
         SOME ((() , s2347_0)) =>
   (case ((string_drop s2346_0 s2347_0)) of
         s2348_0 =>
   (case ((freg_name_matches_prefix s2348_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s2349_0)) =>
   (case ((string_drop s2348_0 s2349_0)) of
         s2350_0 =>
   (case ((sep_matches_prefix s2350_0)) of
         SOME ((() , s2351_0)) =>
   (case ((string_drop s2350_0 s2351_0)) of
         s2352_0 =>
   (case ((frm_mnemonic_matches_prefix s2352_0)) of
         SOME ((rm, s2353_0)) =>
   let p0_ = (string_drop s2352_0 s2353_0) in
   if (((p0_ = ""))) then SOME (FCVT_L_S, rd, rs1, rm) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s2321_ : string -> maybe ((f_un_rm_op_S * mword ty5 * mword ty5 * rounding_mode))*)

val _ = Define `
 ((s2321_:string ->(f_un_rm_op_S#(5)words$word#(5)words$word#rounding_mode)option) s2322_0= 
  ((case s2322_0 of
         s2323_0 =>
   (case ((f_un_rm_type_mnemonic_S_matches_prefix s2323_0)) of
         SOME ((FCVT_S_WU, s2324_0)) =>
   (case ((string_drop s2323_0 s2324_0)) of
         s2325_0 =>
   (case ((spc_matches_prefix0 s2325_0)) of
         SOME ((() , s2326_0)) =>
   (case ((string_drop s2325_0 s2326_0)) of
         s2327_0 =>
   (case ((freg_name_matches_prefix s2327_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s2328_0)) =>
   (case ((string_drop s2327_0 s2328_0)) of
         s2329_0 =>
   (case ((sep_matches_prefix s2329_0)) of
         SOME ((() , s2330_0)) =>
   (case ((string_drop s2329_0 s2330_0)) of
         s2331_0 =>
   (case ((reg_name_matches_prefix s2331_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s2332_0)) =>
   (case ((string_drop s2331_0 s2332_0)) of
         s2333_0 =>
   (case ((sep_matches_prefix s2333_0)) of
         SOME ((() , s2334_0)) =>
   (case ((string_drop s2333_0 s2334_0)) of
         s2335_0 =>
   (case ((frm_mnemonic_matches_prefix s2335_0)) of
         SOME ((rm, s2336_0)) =>
   let p0_ = (string_drop s2335_0 s2336_0) in
   if (((p0_ = ""))) then SOME (FCVT_S_WU, rd, rs1, rm) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s2304_ : string -> maybe ((f_un_rm_op_S * mword ty5 * mword ty5 * rounding_mode))*)

val _ = Define `
 ((s2304_:string ->(f_un_rm_op_S#(5)words$word#(5)words$word#rounding_mode)option) s2305_0= 
  ((case s2305_0 of
         s2306_0 =>
   (case ((f_un_rm_type_mnemonic_S_matches_prefix s2306_0)) of
         SOME ((FCVT_S_W, s2307_0)) =>
   (case ((string_drop s2306_0 s2307_0)) of
         s2308_0 =>
   (case ((spc_matches_prefix0 s2308_0)) of
         SOME ((() , s2309_0)) =>
   (case ((string_drop s2308_0 s2309_0)) of
         s2310_0 =>
   (case ((freg_name_matches_prefix s2310_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s2311_0)) =>
   (case ((string_drop s2310_0 s2311_0)) of
         s2312_0 =>
   (case ((sep_matches_prefix s2312_0)) of
         SOME ((() , s2313_0)) =>
   (case ((string_drop s2312_0 s2313_0)) of
         s2314_0 =>
   (case ((reg_name_matches_prefix s2314_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s2315_0)) =>
   (case ((string_drop s2314_0 s2315_0)) of
         s2316_0 =>
   (case ((sep_matches_prefix s2316_0)) of
         SOME ((() , s2317_0)) =>
   (case ((string_drop s2316_0 s2317_0)) of
         s2318_0 =>
   (case ((frm_mnemonic_matches_prefix s2318_0)) of
         SOME ((rm, s2319_0)) =>
   let p0_ = (string_drop s2318_0 s2319_0) in
   if (((p0_ = ""))) then SOME (FCVT_S_W, rd, rs1, rm) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s2287_ : string -> maybe ((f_un_rm_op_S * mword ty5 * mword ty5 * rounding_mode))*)

val _ = Define `
 ((s2287_:string ->(f_un_rm_op_S#(5)words$word#(5)words$word#rounding_mode)option) s2288_0= 
  ((case s2288_0 of
         s2289_0 =>
   (case ((f_un_rm_type_mnemonic_S_matches_prefix s2289_0)) of
         SOME ((FCVT_WU_S, s2290_0)) =>
   (case ((string_drop s2289_0 s2290_0)) of
         s2291_0 =>
   (case ((spc_matches_prefix0 s2291_0)) of
         SOME ((() , s2292_0)) =>
   (case ((string_drop s2291_0 s2292_0)) of
         s2293_0 =>
   (case ((reg_name_matches_prefix s2293_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s2294_0)) =>
   (case ((string_drop s2293_0 s2294_0)) of
         s2295_0 =>
   (case ((sep_matches_prefix s2295_0)) of
         SOME ((() , s2296_0)) =>
   (case ((string_drop s2295_0 s2296_0)) of
         s2297_0 =>
   (case ((freg_name_matches_prefix s2297_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s2298_0)) =>
   (case ((string_drop s2297_0 s2298_0)) of
         s2299_0 =>
   (case ((sep_matches_prefix s2299_0)) of
         SOME ((() , s2300_0)) =>
   (case ((string_drop s2299_0 s2300_0)) of
         s2301_0 =>
   (case ((frm_mnemonic_matches_prefix s2301_0)) of
         SOME ((rm, s2302_0)) =>
   let p0_ = (string_drop s2301_0 s2302_0) in
   if (((p0_ = ""))) then SOME (FCVT_WU_S, rd, rs1, rm) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s2270_ : string -> maybe ((f_un_rm_op_S * mword ty5 * mword ty5 * rounding_mode))*)

val _ = Define `
 ((s2270_:string ->(f_un_rm_op_S#(5)words$word#(5)words$word#rounding_mode)option) s2271_0= 
  ((case s2271_0 of
         s2272_0 =>
   (case ((f_un_rm_type_mnemonic_S_matches_prefix s2272_0)) of
         SOME ((FCVT_W_S, s2273_0)) =>
   (case ((string_drop s2272_0 s2273_0)) of
         s2274_0 =>
   (case ((spc_matches_prefix0 s2274_0)) of
         SOME ((() , s2275_0)) =>
   (case ((string_drop s2274_0 s2275_0)) of
         s2276_0 =>
   (case ((reg_name_matches_prefix s2276_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s2277_0)) =>
   (case ((string_drop s2276_0 s2277_0)) of
         s2278_0 =>
   (case ((sep_matches_prefix s2278_0)) of
         SOME ((() , s2279_0)) =>
   (case ((string_drop s2278_0 s2279_0)) of
         s2280_0 =>
   (case ((freg_name_matches_prefix s2280_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s2281_0)) =>
   (case ((string_drop s2280_0 s2281_0)) of
         s2282_0 =>
   (case ((sep_matches_prefix s2282_0)) of
         SOME ((() , s2283_0)) =>
   (case ((string_drop s2282_0 s2283_0)) of
         s2284_0 =>
   (case ((frm_mnemonic_matches_prefix s2284_0)) of
         SOME ((rm, s2285_0)) =>
   let p0_ = (string_drop s2284_0 s2285_0) in
   if (((p0_ = ""))) then SOME (FCVT_W_S, rd, rs1, rm) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s2253_ : string -> maybe ((f_un_rm_op_S * mword ty5 * mword ty5 * rounding_mode))*)

val _ = Define `
 ((s2253_:string ->(f_un_rm_op_S#(5)words$word#(5)words$word#rounding_mode)option) s2254_0= 
  ((case s2254_0 of
         s2255_0 =>
   (case ((f_un_rm_type_mnemonic_S_matches_prefix s2255_0)) of
         SOME ((FSQRT_S, s2256_0)) =>
   (case ((string_drop s2255_0 s2256_0)) of
         s2257_0 =>
   (case ((spc_matches_prefix0 s2257_0)) of
         SOME ((() , s2258_0)) =>
   (case ((string_drop s2257_0 s2258_0)) of
         s2259_0 =>
   (case ((freg_name_matches_prefix s2259_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s2260_0)) =>
   (case ((string_drop s2259_0 s2260_0)) of
         s2261_0 =>
   (case ((sep_matches_prefix s2261_0)) of
         SOME ((() , s2262_0)) =>
   (case ((string_drop s2261_0 s2262_0)) of
         s2263_0 =>
   (case ((freg_name_matches_prefix s2263_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s2264_0)) =>
   (case ((string_drop s2263_0 s2264_0)) of
         s2265_0 =>
   (case ((sep_matches_prefix s2265_0)) of
         SOME ((() , s2266_0)) =>
   (case ((string_drop s2265_0 s2266_0)) of
         s2267_0 =>
   (case ((frm_mnemonic_matches_prefix s2267_0)) of
         SOME ((rm, s2268_0)) =>
   let p0_ = (string_drop s2267_0 s2268_0) in
   if (((p0_ = ""))) then SOME (FSQRT_S, rd, rs1, rm) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s2232_ : string -> maybe ((f_bin_rm_op_S * mword ty5 * mword ty5 * mword ty5 * rounding_mode))*)

val _ = Define `
 ((s2232_:string ->(f_bin_rm_op_S#(5)words$word#(5)words$word#(5)words$word#rounding_mode)option) s2233_0= 
  ((case s2233_0 of
         s2234_0 =>
   (case ((f_bin_rm_type_mnemonic_S_matches_prefix s2234_0)) of
         SOME ((op, s2235_0)) =>
   (case ((string_drop s2234_0 s2235_0)) of
         s2236_0 =>
   (case ((spc_matches_prefix0 s2236_0)) of
         SOME ((() , s2237_0)) =>
   (case ((string_drop s2236_0 s2237_0)) of
         s2238_0 =>
   (case ((freg_name_matches_prefix s2238_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s2239_0)) =>
   (case ((string_drop s2238_0 s2239_0)) of
         s2240_0 =>
   (case ((sep_matches_prefix s2240_0)) of
         SOME ((() , s2241_0)) =>
   (case ((string_drop s2240_0 s2241_0)) of
         s2242_0 =>
   (case ((freg_name_matches_prefix s2242_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s2243_0)) =>
   (case ((string_drop s2242_0 s2243_0)) of
         s2244_0 =>
   (case ((sep_matches_prefix s2244_0)) of
         SOME ((() , s2245_0)) =>
   (case ((string_drop s2244_0 s2245_0)) of
         s2246_0 =>
   (case ((freg_name_matches_prefix s2246_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s2247_0)) =>
   (case ((string_drop s2246_0 s2247_0)) of
         s2248_0 =>
   (case ((sep_matches_prefix s2248_0)) of
         SOME ((() , s2249_0)) =>
   (case ((string_drop s2248_0 s2249_0)) of
         s2250_0 =>
   (case ((frm_mnemonic_matches_prefix s2250_0)) of
         SOME ((rm, s2251_0)) =>
   let p0_ = (string_drop s2250_0 s2251_0) in
   if (((p0_ = ""))) then SOME (op, rd, rs1, rs2, rm) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s2207_ : string -> maybe ((f_madd_op_S * mword ty5 * mword ty5 * mword ty5 * mword ty5 * rounding_mode))*)

val _ = Define `
 ((s2207_:string ->(f_madd_op_S#(5)words$word#(5)words$word#(5)words$word#(5)words$word#rounding_mode)option) s2208_0= 
  ((case s2208_0 of
         s2209_0 =>
   (case ((f_madd_type_mnemonic_S_matches_prefix s2209_0)) of
         SOME ((op, s2210_0)) =>
   (case ((string_drop s2209_0 s2210_0)) of
         s2211_0 =>
   (case ((spc_matches_prefix0 s2211_0)) of
         SOME ((() , s2212_0)) =>
   (case ((string_drop s2211_0 s2212_0)) of
         s2213_0 =>
   (case ((freg_name_matches_prefix s2213_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s2214_0)) =>
   (case ((string_drop s2213_0 s2214_0)) of
         s2215_0 =>
   (case ((sep_matches_prefix s2215_0)) of
         SOME ((() , s2216_0)) =>
   (case ((string_drop s2215_0 s2216_0)) of
         s2217_0 =>
   (case ((freg_name_matches_prefix s2217_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s2218_0)) =>
   (case ((string_drop s2217_0 s2218_0)) of
         s2219_0 =>
   (case ((sep_matches_prefix s2219_0)) of
         SOME ((() , s2220_0)) =>
   (case ((string_drop s2219_0 s2220_0)) of
         s2221_0 =>
   (case ((freg_name_matches_prefix s2221_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s2222_0)) =>
   (case ((string_drop s2221_0 s2222_0)) of
         s2223_0 =>
   (case ((sep_matches_prefix s2223_0)) of
         SOME ((() , s2224_0)) =>
   (case ((string_drop s2223_0 s2224_0)) of
         s2225_0 =>
   (case ((freg_name_matches_prefix s2225_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs3, s2226_0)) =>
   (case ((string_drop s2225_0 s2226_0)) of
         s2227_0 =>
   (case ((sep_matches_prefix s2227_0)) of
         SOME ((() , s2228_0)) =>
   (case ((string_drop s2227_0 s2228_0)) of
         s2229_0 =>
   (case ((frm_mnemonic_matches_prefix s2229_0)) of
         SOME ((rm, s2230_0)) =>
   let p0_ = (string_drop s2229_0 s2230_0) in
   if (((p0_ = ""))) then SOME (op, rd, rs1, rs2, rs3, rm) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s2183_ : string -> maybe ((word_width * mword ty5 * mword ty12 * mword ty5))*)

val _ = Define `
 ((s2183_:string ->(word_width#(5)words$word#(12)words$word#(5)words$word)option) s2184_0=
    (let s2185_0 = s2184_0 in
   if ((string_startswith s2185_0 "fs")) then  
  (case ((string_drop s2185_0 ((string_length "fs")))) of
        s2186_0 =>
  (case ((size_mnemonic_matches_prefix s2186_0)) of
        SOME ((width, s2187_0)) =>
  (case ((string_drop s2186_0 s2187_0)) of
        s2188_0 =>
  (case ((spc_matches_prefix0 s2188_0)) of
        SOME ((() , s2189_0)) =>
  (case ((string_drop s2188_0 s2189_0)) of
        s2190_0 =>
  (case ((freg_name_matches_prefix s2190_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s2191_0)) =>
  (case ((string_drop s2190_0 s2191_0)) of
        s2192_0 =>
  (case ((sep_matches_prefix s2192_0)) of
        SOME ((() , s2193_0)) =>
  (case ((string_drop s2192_0 s2193_0)) of
        s2194_0 =>
  (case ((hex_bits_12_matches_prefix0 s2194_0
         : (( 12 words$word # ii)) option)) of
        SOME ((imm, s2195_0)) =>
  (case ((string_drop s2194_0 s2195_0)) of
        s2196_0 =>
  (case ((opt_spc_matches_prefix0 s2196_0)) of
        SOME ((() , s2197_0)) =>
  let s2198_0 = (string_drop s2196_0 s2197_0) in
  if ((string_startswith s2198_0 "(")) then
    (case ((string_drop s2198_0 ((string_length "(")))) of
          s2199_0 =>
    (case ((opt_spc_matches_prefix0 s2199_0)) of
          SOME ((() , s2200_0)) =>
    (case ((string_drop s2199_0 s2200_0)) of
          s2201_0 =>
    (case ((reg_name_matches_prefix s2201_0 : (( 5 words$word # ii)) option)) of
          SOME ((rs1, s2202_0)) =>
    (case ((string_drop s2201_0 s2202_0)) of
          s2203_0 =>
    (case ((opt_spc_matches_prefix0 s2203_0)) of
          SOME ((() , s2204_0)) =>
    let s2205_0 = (string_drop s2203_0 s2204_0) in
    if ((string_startswith s2205_0 ")")) then
      let p0_ = (string_drop s2205_0 ((string_length ")"))) in
      if (((p0_ = ""))) then SOME (width, rs2, imm, rs1) else NONE else 
    NONE
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    ) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s2159_ : string -> maybe ((word_width * mword ty5 * mword ty12 * mword ty5))*)

val _ = Define `
 ((s2159_:string ->(word_width#(5)words$word#(12)words$word#(5)words$word)option) s2160_0=
    (let s2161_0 = s2160_0 in
   if ((string_startswith s2161_0 "fl")) then  
  (case ((string_drop s2161_0 ((string_length "fl")))) of
        s2162_0 =>
  (case ((size_mnemonic_matches_prefix s2162_0)) of
        SOME ((width, s2163_0)) =>
  (case ((string_drop s2162_0 s2163_0)) of
        s2164_0 =>
  (case ((spc_matches_prefix0 s2164_0)) of
        SOME ((() , s2165_0)) =>
  (case ((string_drop s2164_0 s2165_0)) of
        s2166_0 =>
  (case ((freg_name_matches_prefix s2166_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s2167_0)) =>
  (case ((string_drop s2166_0 s2167_0)) of
        s2168_0 =>
  (case ((sep_matches_prefix s2168_0)) of
        SOME ((() , s2169_0)) =>
  (case ((string_drop s2168_0 s2169_0)) of
        s2170_0 =>
  (case ((hex_bits_12_matches_prefix0 s2170_0
         : (( 12 words$word # ii)) option)) of
        SOME ((imm, s2171_0)) =>
  (case ((string_drop s2170_0 s2171_0)) of
        s2172_0 =>
  (case ((opt_spc_matches_prefix0 s2172_0)) of
        SOME ((() , s2173_0)) =>
  let s2174_0 = (string_drop s2172_0 s2173_0) in
  if ((string_startswith s2174_0 "(")) then
    (case ((string_drop s2174_0 ((string_length "(")))) of
          s2175_0 =>
    (case ((opt_spc_matches_prefix0 s2175_0)) of
          SOME ((() , s2176_0)) =>
    (case ((string_drop s2175_0 s2176_0)) of
          s2177_0 =>
    (case ((reg_name_matches_prefix s2177_0 : (( 5 words$word # ii)) option)) of
          SOME ((rs1, s2178_0)) =>
    (case ((string_drop s2177_0 s2178_0)) of
          s2179_0 =>
    (case ((opt_spc_matches_prefix0 s2179_0)) of
          SOME ((() , s2180_0)) =>
    let s2181_0 = (string_drop s2179_0 s2180_0) in
    if ((string_startswith s2181_0 ")")) then
      let p0_ = (string_drop s2181_0 ((string_length ")"))) in
      if (((p0_ = ""))) then SOME (width, rd, imm, rs1) else NONE else 
    NONE
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    ) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s2147_ : string -> maybe ((mword ty5 * mword ty5 * mword ty12))*)

val _ = Define `
 ((s2147_:string ->((5)words$word#(5)words$word#(12)words$word)option) s2148_0=
    (let s2149_0 = s2148_0 in
   if ((string_startswith s2149_0 "fence.i.reserved.")) then  
  (case ((string_drop s2149_0 ((string_length "fence.i.reserved.")))) of
        s2150_0 =>
  (case ((reg_name_matches_prefix s2150_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s2151_0)) =>
  let s2152_0 = (string_drop s2150_0 s2151_0) in
  if ((string_startswith s2152_0 ".")) then
    (case ((string_drop s2152_0 ((string_length ".")))) of
          s2153_0 =>
    (case ((reg_name_matches_prefix s2153_0 : (( 5 words$word # ii)) option)) of
          SOME ((rs, s2154_0)) =>
    let s2155_0 = (string_drop s2153_0 s2154_0) in
    if ((string_startswith s2155_0 ".")) then
      (case ((string_drop s2155_0 ((string_length ".")))) of
            s2156_0 =>
      (case ((hex_bits_12_matches_prefix0 s2156_0 : (( 12 words$word # ii)) option)) of
            SOME ((imm, s2157_0)) =>
      let p0_ = (string_drop s2156_0 s2157_0) in
      if (((p0_ = ""))) then SOME (rd, rs, imm) else NONE
        | _ => NONE
      )
      ) else NONE
      | _ => NONE
    )
    ) else NONE
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s2129_ : string -> maybe ((mword ty4 * mword ty4 * mword ty5 * mword ty5 * mword ty4))*)

val _ = Define `
 ((s2129_:string ->((4)words$word#(4)words$word#(5)words$word#(5)words$word#(4)words$word)option) s2130_0=
    (let s2131_0 = s2130_0 in
   if ((string_startswith s2131_0 "fence.reserved.")) then  
  (case ((string_drop s2131_0 ((string_length "fence.reserved.")))) of
        s2132_0 =>
  (case ((fence_bits_matches_prefix s2132_0 : (( 4 words$word # ii)) option)) of
        SOME ((pred, s2133_0)) =>
  let s2134_0 = (string_drop s2132_0 s2133_0) in
  if ((string_startswith s2134_0 ".")) then
    (case ((string_drop s2134_0 ((string_length ".")))) of
          s2135_0 =>
    (case ((fence_bits_matches_prefix s2135_0 : (( 4 words$word # ii)) option)) of
          SOME ((succ, s2136_0)) =>
    let s2137_0 = (string_drop s2135_0 s2136_0) in
    if ((string_startswith s2137_0 ".")) then
      (case ((string_drop s2137_0 ((string_length ".")))) of
            s2138_0 =>
      (case ((reg_name_matches_prefix s2138_0 : (( 5 words$word # ii)) option)) of
            SOME ((rs, s2139_0)) =>
      let s2140_0 = (string_drop s2138_0 s2139_0) in
      if ((string_startswith s2140_0 ".")) then
        (case ((string_drop s2140_0 ((string_length ".")))) of
              s2141_0 =>
        (case ((reg_name_matches_prefix s2141_0 : (( 5 words$word # ii)) option)) of
              SOME ((rd, s2142_0)) =>
        let s2143_0 = (string_drop s2141_0 s2142_0) in
        if ((string_startswith s2143_0 ".")) then
          (case ((string_drop s2143_0 ((string_length ".")))) of
                s2144_0 =>
          (case ((hex_bits_4_matches_prefix
                    instance_Sail2_values_Bitvector_Machine_word_mword_dict
                    s2144_0 : (( 4 words$word # ii)) option)) of
                SOME ((fm, s2145_0)) =>
          let p0_ = (string_drop s2144_0 s2145_0) in
          if (((p0_ = ""))) then SOME (pred, succ, rs, rd, fm) else NONE
            | _ => NONE
          )
          ) else NONE
          | _ => NONE
        )
        ) else NONE
        | _ => NONE
      )
      ) else NONE
      | _ => NONE
    )
    ) else NONE
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s2123_ : string -> maybe (mword ty3)*)

val _ = Define `
 ((s2123_:string ->((3)words$word)option) s2124_0=
    (let s2125_0 = s2124_0 in
   if ((string_startswith s2125_0 "c.srai.hint.")) then  
  (case ((string_drop s2125_0 ((string_length "c.srai.hint.")))) of
        s2126_0 =>
  (case ((creg_name_matches_prefix s2126_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s2127_0)) =>
  let p0_ = (string_drop s2126_0 s2127_0) in
  if (((p0_ = ""))) then SOME rsd else NONE
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s2117_ : string -> maybe (mword ty3)*)

val _ = Define `
 ((s2117_:string ->((3)words$word)option) s2118_0=
    (let s2119_0 = s2118_0 in
   if ((string_startswith s2119_0 "c.srli.hint.")) then  
  (case ((string_drop s2119_0 ((string_length "c.srli.hint.")))) of
        s2120_0 =>
  (case ((creg_name_matches_prefix s2120_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s2121_0)) =>
  let p0_ = (string_drop s2120_0 s2121_0) in
  if (((p0_ = ""))) then SOME rsd else NONE
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s2108_ : string -> maybe ((mword ty5 * mword ty6))*)

val _ = Define `
 ((s2108_:string ->((5)words$word#(6)words$word)option) s2109_0=
    (let s2110_0 = s2109_0 in
   if ((string_startswith s2110_0 "c.slli.hint.")) then  
  (case ((string_drop s2110_0 ((string_length "c.slli.hint.")))) of
        s2111_0 =>
  (case ((reg_name_matches_prefix s2111_0 : (( 5 words$word # ii)) option)) of
        SOME ((rsd, s2112_0)) =>
  let s2113_0 = (string_drop s2111_0 s2112_0) in
  if ((string_startswith s2113_0 ".")) then
    (case ((string_drop s2113_0 ((string_length ".")))) of
          s2114_0 =>
    (case ((hex_bits_6_matches_prefix
              instance_Sail2_values_Bitvector_Machine_word_mword_dict 
            s2114_0 : (( 6 words$word # ii)) option)) of
          SOME ((shamt, s2115_0)) =>
    let p0_ = (string_drop s2114_0 s2115_0) in
    if (((p0_ = ""))) then SOME (rsd, shamt) else NONE
      | _ => NONE
    )
    ) else NONE
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s2102_ : string -> maybe (mword ty5)*)

val _ = Define `
 ((s2102_:string ->((5)words$word)option) s2103_0=
    (let s2104_0 = s2103_0 in
   if ((string_startswith s2104_0 "c.add.hint.")) then  
  (case ((string_drop s2104_0 ((string_length "c.add.hint.")))) of
        s2105_0 =>
  (case ((reg_name_matches_prefix s2105_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s2106_0)) =>
  let p0_ = (string_drop s2105_0 s2106_0) in
  if (((p0_ = ""))) then SOME rs2 else NONE
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s2096_ : string -> maybe (mword ty5)*)

val _ = Define `
 ((s2096_:string ->((5)words$word)option) s2097_0=
    (let s2098_0 = s2097_0 in
   if ((string_startswith s2098_0 "c.mv.hint.")) then  
  (case ((string_drop s2098_0 ((string_length "c.mv.hint.")))) of
        s2099_0 =>
  (case ((reg_name_matches_prefix s2099_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s2100_0)) =>
  let p0_ = (string_drop s2099_0 s2100_0) in
  if (((p0_ = ""))) then SOME rs2 else NONE
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s2090_ : string -> maybe (mword ty6)*)

val _ = Define `
 ((s2090_:string ->((6)words$word)option) s2091_0=
    (let s2092_0 = s2091_0 in
   if ((string_startswith s2092_0 "c.lui.hint.")) then  
  (case ((string_drop s2092_0 ((string_length "c.lui.hint.")))) of
        s2093_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s2093_0 : (( 6 words$word # ii)) option)) of
        SOME ((imm, s2094_0)) =>
  let p0_ = (string_drop s2093_0 s2094_0) in
  if (((p0_ = ""))) then SOME imm else NONE
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s2084_ : string -> maybe (mword ty6)*)

val _ = Define `
 ((s2084_:string ->((6)words$word)option) s2085_0=
    (let s2086_0 = s2085_0 in
   if ((string_startswith s2086_0 "c.li.hint.")) then  
  (case ((string_drop s2086_0 ((string_length "c.li.hint.")))) of
        s2087_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s2087_0 : (( 6 words$word # ii)) option)) of
        SOME ((imm, s2088_0)) =>
  let p0_ = (string_drop s2087_0 s2088_0) in
  if (((p0_ = ""))) then SOME imm else NONE
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s2078_ : string -> maybe (mword ty5)*)

val _ = Define `
 ((s2078_:string ->((5)words$word)option) s2079_0=
    (let s2080_0 = s2079_0 in
   if ((string_startswith s2080_0 "c.addi.hint.")) then  
  (case ((string_drop s2080_0 ((string_length "c.addi.hint.")))) of
        s2081_0 =>
  (case ((reg_name_matches_prefix s2081_0 : (( 5 words$word # ii)) option)) of
        SOME ((rsd, s2082_0)) =>
  let p0_ = (string_drop s2081_0 s2082_0) in
  if (((p0_ = ""))) then SOME rsd else NONE
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s2072_ : string -> maybe (mword ty6)*)

val _ = Define `
 ((s2072_:string ->((6)words$word)option) s2073_0=
    (let s2074_0 = s2073_0 in
   if ((string_startswith s2074_0 "c.nop.hint.")) then  
  (case ((string_drop s2074_0 ((string_length "c.nop.hint.")))) of
        s2075_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s2075_0 : (( 6 words$word # ii)) option)) of
        SOME ((imm, s2076_0)) =>
  let p0_ = (string_drop s2075_0 s2076_0) in
  if (((p0_ = ""))) then SOME imm else NONE
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s2055_ : string -> maybe ((csrop * mword ty5 * mword ty12 * mword ty5))*)

val _ = Define `
 ((s2055_:string ->(csrop#(5)words$word#(12)words$word#(5)words$word)option) s2056_0= 
  ((case s2056_0 of
         s2057_0 =>
   (case ((csr_mnemonic_matches_prefix s2057_0)) of
         SOME ((op, s2058_0)) =>
   (case ((string_drop s2057_0 s2058_0)) of
         s2059_0 =>
   (case ((spc_matches_prefix0 s2059_0)) of
         SOME ((() , s2060_0)) =>
   (case ((string_drop s2059_0 s2060_0)) of
         s2061_0 =>
   (case ((reg_name_matches_prefix s2061_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s2062_0)) =>
   (case ((string_drop s2061_0 s2062_0)) of
         s2063_0 =>
   (case ((sep_matches_prefix s2063_0)) of
         SOME ((() , s2064_0)) =>
   (case ((string_drop s2063_0 s2064_0)) of
         s2065_0 =>
   (case ((csr_name_map_matches_prefix s2065_0
          : (( 12 words$word # ii)) option)) of
         SOME ((csr, s2066_0)) =>
   (case ((string_drop s2065_0 s2066_0)) of
         s2067_0 =>
   (case ((sep_matches_prefix s2067_0)) of
         SOME ((() , s2068_0)) =>
   (case ((string_drop s2067_0 s2068_0)) of
         s2069_0 =>
   (case ((reg_name_matches_prefix s2069_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s2070_0)) =>
   let p0_ = (string_drop s2069_0 s2070_0) in
   if (((p0_ = ""))) then SOME (op, rd, csr, rs1) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s2037_ : string -> maybe ((csrop * mword ty5 * mword ty12 * mword ty5))*)

val _ = Define `
 ((s2037_:string ->(csrop#(5)words$word#(12)words$word#(5)words$word)option) s2038_0= 
  ((case s2038_0 of
         s2039_0 =>
   (case ((csr_mnemonic_matches_prefix s2039_0)) of
         SOME ((op, s2040_0)) =>
   let s2041_0 = (string_drop s2039_0 s2040_0) in
   if ((string_startswith s2041_0 "i")) then
     (case ((string_drop s2041_0 ((string_length "i")))) of
           s2042_0 =>
     (case ((spc_matches_prefix0 s2042_0)) of
           SOME ((() , s2043_0)) =>
     (case ((string_drop s2042_0 s2043_0)) of
           s2044_0 =>
     (case ((reg_name_matches_prefix s2044_0 : (( 5 words$word # ii)) option)) of
           SOME ((rd, s2045_0)) =>
     (case ((string_drop s2044_0 s2045_0)) of
           s2046_0 =>
     (case ((sep_matches_prefix s2046_0)) of
           SOME ((() , s2047_0)) =>
     (case ((string_drop s2046_0 s2047_0)) of
           s2048_0 =>
     (case ((csr_name_map_matches_prefix s2048_0
            : (( 12 words$word # ii)) option)) of
           SOME ((csr, s2049_0)) =>
     (case ((string_drop s2048_0 s2049_0)) of
           s2050_0 =>
     (case ((sep_matches_prefix s2050_0)) of
           SOME ((() , s2051_0)) =>
     (case ((string_drop s2050_0 s2051_0)) of
           s2052_0 =>
     (case ((hex_bits_5_matches_prefix
               instance_Sail2_values_Bitvector_Machine_word_mword_dict
               s2052_0 : (( 5 words$word # ii)) option)) of
           SOME ((rs1, s2053_0)) =>
     let p0_ = (string_drop s2052_0 s2053_0) in
     if (((p0_ = ""))) then SOME (op, rd, csr, rs1) else NONE
       | _ => NONE
     )
     )
       | _ => NONE
     )
     )
       | _ => NONE
     )
     )
       | _ => NONE
     )
     )
       | _ => NONE
     )
     )
       | _ => NONE
     )
     ) else NONE
     | _ => NONE
   )
   )))`;


(*val _s2018_ : string -> maybe ((bool * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s2018_:string ->(bool#(5)words$word#(5)words$word#(5)words$word)option) s2019_0=
    (let s2020_0 = s2019_0 in
   if ((string_startswith s2020_0 "rem")) then  
  (case ((string_drop s2020_0 ((string_length "rem")))) of
        s2021_0 =>
  (case ((maybe_not_u_matches_prefix s2021_0)) of
        SOME ((s, s2022_0)) =>
  let s2023_0 = (string_drop s2021_0 s2022_0) in
  if ((string_startswith s2023_0 "w")) then
    (case ((string_drop s2023_0 ((string_length "w")))) of
          s2024_0 =>
    (case ((spc_matches_prefix0 s2024_0)) of
          SOME ((() , s2025_0)) =>
    (case ((string_drop s2024_0 s2025_0)) of
          s2026_0 =>
    (case ((reg_name_matches_prefix s2026_0 : (( 5 words$word # ii)) option)) of
          SOME ((rd, s2027_0)) =>
    (case ((string_drop s2026_0 s2027_0)) of
          s2028_0 =>
    (case ((sep_matches_prefix s2028_0)) of
          SOME ((() , s2029_0)) =>
    (case ((string_drop s2028_0 s2029_0)) of
          s2030_0 =>
    (case ((reg_name_matches_prefix s2030_0 : (( 5 words$word # ii)) option)) of
          SOME ((rs1, s2031_0)) =>
    (case ((string_drop s2030_0 s2031_0)) of
          s2032_0 =>
    (case ((sep_matches_prefix s2032_0)) of
          SOME ((() , s2033_0)) =>
    (case ((string_drop s2032_0 s2033_0)) of
          s2034_0 =>
    (case ((reg_name_matches_prefix s2034_0 : (( 5 words$word # ii)) option)) of
          SOME ((rs2, s2035_0)) =>
    let p0_ = (string_drop s2034_0 s2035_0) in
    if (((p0_ = ""))) then SOME (s, rd, rs1, rs2) else NONE
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    ) else NONE
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1999_ : string -> maybe ((bool * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s1999_:string ->(bool#(5)words$word#(5)words$word#(5)words$word)option) s2000_0=
    (let s2001_0 = s2000_0 in
   if ((string_startswith s2001_0 "div")) then  
  (case ((string_drop s2001_0 ((string_length "div")))) of
        s2002_0 =>
  (case ((maybe_not_u_matches_prefix s2002_0)) of
        SOME ((s, s2003_0)) =>
  let s2004_0 = (string_drop s2002_0 s2003_0) in
  if ((string_startswith s2004_0 "w")) then
    (case ((string_drop s2004_0 ((string_length "w")))) of
          s2005_0 =>
    (case ((spc_matches_prefix0 s2005_0)) of
          SOME ((() , s2006_0)) =>
    (case ((string_drop s2005_0 s2006_0)) of
          s2007_0 =>
    (case ((reg_name_matches_prefix s2007_0 : (( 5 words$word # ii)) option)) of
          SOME ((rd, s2008_0)) =>
    (case ((string_drop s2007_0 s2008_0)) of
          s2009_0 =>
    (case ((sep_matches_prefix s2009_0)) of
          SOME ((() , s2010_0)) =>
    (case ((string_drop s2009_0 s2010_0)) of
          s2011_0 =>
    (case ((reg_name_matches_prefix s2011_0 : (( 5 words$word # ii)) option)) of
          SOME ((rs1, s2012_0)) =>
    (case ((string_drop s2011_0 s2012_0)) of
          s2013_0 =>
    (case ((sep_matches_prefix s2013_0)) of
          SOME ((() , s2014_0)) =>
    (case ((string_drop s2013_0 s2014_0)) of
          s2015_0 =>
    (case ((reg_name_matches_prefix s2015_0 : (( 5 words$word # ii)) option)) of
          SOME ((rs2, s2016_0)) =>
    let p0_ = (string_drop s2015_0 s2016_0) in
    if (((p0_ = ""))) then SOME (s, rd, rs1, rs2) else NONE
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    ) else NONE
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1983_ : string -> maybe ((mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s1983_:string ->((5)words$word#(5)words$word#(5)words$word)option) s1984_0=
    (let s1985_0 = s1984_0 in
   if ((string_startswith s1985_0 "mulw")) then  
  (case ((string_drop s1985_0 ((string_length "mulw")))) of
        s1986_0 =>
  (case ((spc_matches_prefix0 s1986_0)) of
        SOME ((() , s1987_0)) =>
  (case ((string_drop s1986_0 s1987_0)) of
        s1988_0 =>
  (case ((reg_name_matches_prefix s1988_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s1989_0)) =>
  (case ((string_drop s1988_0 s1989_0)) of
        s1990_0 =>
  (case ((sep_matches_prefix s1990_0)) of
        SOME ((() , s1991_0)) =>
  (case ((string_drop s1990_0 s1991_0)) of
        s1992_0 =>
  (case ((reg_name_matches_prefix s1992_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs1, s1993_0)) =>
  (case ((string_drop s1992_0 s1993_0)) of
        s1994_0 =>
  (case ((sep_matches_prefix s1994_0)) of
        SOME ((() , s1995_0)) =>
  (case ((string_drop s1994_0 s1995_0)) of
        s1996_0 =>
  (case ((reg_name_matches_prefix s1996_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s1997_0)) =>
  let p0_ = (string_drop s1996_0 s1997_0) in
  if (((p0_ = ""))) then SOME (rd, rs1, rs2) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1965_ : string -> maybe ((bool * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s1965_:string ->(bool#(5)words$word#(5)words$word#(5)words$word)option) s1966_0=
    (let s1967_0 = s1966_0 in
   if ((string_startswith s1967_0 "rem")) then  
  (case ((string_drop s1967_0 ((string_length "rem")))) of
        s1968_0 =>
  (case ((maybe_not_u_matches_prefix s1968_0)) of
        SOME ((s, s1969_0)) =>
  (case ((string_drop s1968_0 s1969_0)) of
        s1970_0 =>
  (case ((spc_matches_prefix0 s1970_0)) of
        SOME ((() , s1971_0)) =>
  (case ((string_drop s1970_0 s1971_0)) of
        s1972_0 =>
  (case ((reg_name_matches_prefix s1972_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s1973_0)) =>
  (case ((string_drop s1972_0 s1973_0)) of
        s1974_0 =>
  (case ((sep_matches_prefix s1974_0)) of
        SOME ((() , s1975_0)) =>
  (case ((string_drop s1974_0 s1975_0)) of
        s1976_0 =>
  (case ((reg_name_matches_prefix s1976_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs1, s1977_0)) =>
  (case ((string_drop s1976_0 s1977_0)) of
        s1978_0 =>
  (case ((sep_matches_prefix s1978_0)) of
        SOME ((() , s1979_0)) =>
  (case ((string_drop s1978_0 s1979_0)) of
        s1980_0 =>
  (case ((reg_name_matches_prefix s1980_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s1981_0)) =>
  let p0_ = (string_drop s1980_0 s1981_0) in
  if (((p0_ = ""))) then SOME (s, rd, rs1, rs2) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1947_ : string -> maybe ((bool * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s1947_:string ->(bool#(5)words$word#(5)words$word#(5)words$word)option) s1948_0=
    (let s1949_0 = s1948_0 in
   if ((string_startswith s1949_0 "div")) then  
  (case ((string_drop s1949_0 ((string_length "div")))) of
        s1950_0 =>
  (case ((maybe_not_u_matches_prefix s1950_0)) of
        SOME ((s, s1951_0)) =>
  (case ((string_drop s1950_0 s1951_0)) of
        s1952_0 =>
  (case ((spc_matches_prefix0 s1952_0)) of
        SOME ((() , s1953_0)) =>
  (case ((string_drop s1952_0 s1953_0)) of
        s1954_0 =>
  (case ((reg_name_matches_prefix s1954_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s1955_0)) =>
  (case ((string_drop s1954_0 s1955_0)) of
        s1956_0 =>
  (case ((sep_matches_prefix s1956_0)) of
        SOME ((() , s1957_0)) =>
  (case ((string_drop s1956_0 s1957_0)) of
        s1958_0 =>
  (case ((reg_name_matches_prefix s1958_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs1, s1959_0)) =>
  (case ((string_drop s1958_0 s1959_0)) of
        s1960_0 =>
  (case ((sep_matches_prefix s1960_0)) of
        SOME ((() , s1961_0)) =>
  (case ((string_drop s1960_0 s1961_0)) of
        s1962_0 =>
  (case ((reg_name_matches_prefix s1962_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s1963_0)) =>
  let p0_ = (string_drop s1962_0 s1963_0) in
  if (((p0_ = ""))) then SOME (s, rd, rs1, rs2) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1930_ : string -> maybe ((bool * bool * bool * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s1930_:string ->(bool#bool#bool#(5)words$word#(5)words$word#(5)words$word)option) s1931_0= 
  ((case s1931_0 of
         s1932_0 =>
   (case ((mul_mnemonic_matches_prefix s1932_0)) of
         SOME (((high, signed1, signed2), s1933_0)) =>
   (case ((string_drop s1932_0 s1933_0)) of
         s1934_0 =>
   (case ((spc_matches_prefix0 s1934_0)) of
         SOME ((() , s1935_0)) =>
   (case ((string_drop s1934_0 s1935_0)) of
         s1936_0 =>
   (case ((reg_name_matches_prefix s1936_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s1937_0)) =>
   (case ((string_drop s1936_0 s1937_0)) of
         s1938_0 =>
   (case ((sep_matches_prefix s1938_0)) of
         SOME ((() , s1939_0)) =>
   (case ((string_drop s1938_0 s1939_0)) of
         s1940_0 =>
   (case ((reg_name_matches_prefix s1940_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s1941_0)) =>
   (case ((string_drop s1940_0 s1941_0)) of
         s1942_0 =>
   (case ((sep_matches_prefix s1942_0)) of
         SOME ((() , s1943_0)) =>
   (case ((string_drop s1942_0 s1943_0)) of
         s1944_0 =>
   (case ((reg_name_matches_prefix s1944_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s1945_0)) =>
   let p0_ = (string_drop s1944_0 s1945_0) in
   if (((p0_ = ""))) then SOME (high, signed1, signed2, rd, rs1, rs2) else
     NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s1918_ : string -> maybe ((mword ty5 * mword ty5))*)

val _ = Define `
 ((s1918_:string ->((5)words$word#(5)words$word)option) s1919_0=
    (let s1920_0 = s1919_0 in
   if ((string_startswith s1920_0 "c.add")) then  
  (case ((string_drop s1920_0 ((string_length "c.add")))) of
        s1921_0 =>
  (case ((spc_matches_prefix0 s1921_0)) of
        SOME ((() , s1922_0)) =>
  (case ((string_drop s1921_0 s1922_0)) of
        s1923_0 =>
  (case ((reg_name_matches_prefix s1923_0 : (( 5 words$word # ii)) option)) of
        SOME ((rsd, s1924_0)) =>
  (case ((string_drop s1923_0 s1924_0)) of
        s1925_0 =>
  (case ((sep_matches_prefix s1925_0)) of
        SOME ((() , s1926_0)) =>
  (case ((string_drop s1925_0 s1926_0)) of
        s1927_0 =>
  (case ((reg_name_matches_prefix s1927_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s1928_0)) =>
  let p0_ = (string_drop s1927_0 s1928_0) in
  if (((p0_ = ""))) then SOME (rsd, rs2) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1906_ : string -> maybe ((mword ty5 * mword ty5))*)

val _ = Define `
 ((s1906_:string ->((5)words$word#(5)words$word)option) s1907_0=
    (let s1908_0 = s1907_0 in
   if ((string_startswith s1908_0 "c.mv")) then  
  (case ((string_drop s1908_0 ((string_length "c.mv")))) of
        s1909_0 =>
  (case ((spc_matches_prefix0 s1909_0)) of
        SOME ((() , s1910_0)) =>
  (case ((string_drop s1909_0 s1910_0)) of
        s1911_0 =>
  (case ((reg_name_matches_prefix s1911_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s1912_0)) =>
  (case ((string_drop s1911_0 s1912_0)) of
        s1913_0 =>
  (case ((sep_matches_prefix s1913_0)) of
        SOME ((() , s1914_0)) =>
  (case ((string_drop s1913_0 s1914_0)) of
        s1915_0 =>
  (case ((reg_name_matches_prefix s1915_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s1916_0)) =>
  let p0_ = (string_drop s1915_0 s1916_0) in
  if (((p0_ = ""))) then SOME (rd, rs2) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1898_ : string -> maybe (mword ty5)*)

val _ = Define `
 ((s1898_:string ->((5)words$word)option) s1899_0=
    (let s1900_0 = s1899_0 in
   if ((string_startswith s1900_0 "c.jalr")) then  
  (case ((string_drop s1900_0 ((string_length "c.jalr")))) of
        s1901_0 =>
  (case ((spc_matches_prefix0 s1901_0)) of
        SOME ((() , s1902_0)) =>
  (case ((string_drop s1901_0 s1902_0)) of
        s1903_0 =>
  (case ((reg_name_matches_prefix s1903_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs1, s1904_0)) =>
  let p0_ = (string_drop s1903_0 s1904_0) in
  if (((p0_ = ""))) then SOME rs1 else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1890_ : string -> maybe (mword ty5)*)

val _ = Define `
 ((s1890_:string ->((5)words$word)option) s1891_0=
    (let s1892_0 = s1891_0 in
   if ((string_startswith s1892_0 "c.jr")) then  
  (case ((string_drop s1892_0 ((string_length "c.jr")))) of
        s1893_0 =>
  (case ((spc_matches_prefix0 s1893_0)) of
        SOME ((() , s1894_0)) =>
  (case ((string_drop s1893_0 s1894_0)) of
        s1895_0 =>
  (case ((reg_name_matches_prefix s1895_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs1, s1896_0)) =>
  let p0_ = (string_drop s1895_0 s1896_0) in
  if (((p0_ = ""))) then SOME rs1 else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1878_ : string -> maybe ((mword ty5 * mword ty6))*)

val _ = Define `
 ((s1878_:string ->((5)words$word#(6)words$word)option) s1879_0=
    (let s1880_0 = s1879_0 in
   if ((string_startswith s1880_0 "c.sdsp")) then  
  (case ((string_drop s1880_0 ((string_length "c.sdsp")))) of
        s1881_0 =>
  (case ((spc_matches_prefix0 s1881_0)) of
        SOME ((() , s1882_0)) =>
  (case ((string_drop s1881_0 s1882_0)) of
        s1883_0 =>
  (case ((reg_name_matches_prefix s1883_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s1884_0)) =>
  (case ((string_drop s1883_0 s1884_0)) of
        s1885_0 =>
  (case ((sep_matches_prefix s1885_0)) of
        SOME ((() , s1886_0)) =>
  (case ((string_drop s1885_0 s1886_0)) of
        s1887_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s1887_0 : (( 6 words$word # ii)) option)) of
        SOME ((uimm, s1888_0)) =>
  let p0_ = (string_drop s1887_0 s1888_0) in
  if (((p0_ = ""))) then SOME (rs2, uimm) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1866_ : string -> maybe ((mword ty5 * mword ty6))*)

val _ = Define `
 ((s1866_:string ->((5)words$word#(6)words$word)option) s1867_0=
    (let s1868_0 = s1867_0 in
   if ((string_startswith s1868_0 "c.swsp")) then  
  (case ((string_drop s1868_0 ((string_length "c.swsp")))) of
        s1869_0 =>
  (case ((spc_matches_prefix0 s1869_0)) of
        SOME ((() , s1870_0)) =>
  (case ((string_drop s1869_0 s1870_0)) of
        s1871_0 =>
  (case ((reg_name_matches_prefix s1871_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s1872_0)) =>
  (case ((string_drop s1871_0 s1872_0)) of
        s1873_0 =>
  (case ((sep_matches_prefix s1873_0)) of
        SOME ((() , s1874_0)) =>
  (case ((string_drop s1873_0 s1874_0)) of
        s1875_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s1875_0 : (( 6 words$word # ii)) option)) of
        SOME ((uimm, s1876_0)) =>
  let p0_ = (string_drop s1875_0 s1876_0) in
  if (((p0_ = ""))) then SOME (rd, uimm) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1854_ : string -> maybe ((mword ty5 * mword ty6))*)

val _ = Define `
 ((s1854_:string ->((5)words$word#(6)words$word)option) s1855_0=
    (let s1856_0 = s1855_0 in
   if ((string_startswith s1856_0 "c.ldsp")) then  
  (case ((string_drop s1856_0 ((string_length "c.ldsp")))) of
        s1857_0 =>
  (case ((spc_matches_prefix0 s1857_0)) of
        SOME ((() , s1858_0)) =>
  (case ((string_drop s1857_0 s1858_0)) of
        s1859_0 =>
  (case ((reg_name_matches_prefix s1859_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s1860_0)) =>
  (case ((string_drop s1859_0 s1860_0)) of
        s1861_0 =>
  (case ((sep_matches_prefix s1861_0)) of
        SOME ((() , s1862_0)) =>
  (case ((string_drop s1861_0 s1862_0)) of
        s1863_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s1863_0 : (( 6 words$word # ii)) option)) of
        SOME ((uimm, s1864_0)) =>
  let p0_ = (string_drop s1863_0 s1864_0) in
  if (((p0_ = ""))) then SOME (rd, uimm) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1842_ : string -> maybe ((mword ty5 * mword ty6))*)

val _ = Define `
 ((s1842_:string ->((5)words$word#(6)words$word)option) s1843_0=
    (let s1844_0 = s1843_0 in
   if ((string_startswith s1844_0 "c.lwsp")) then  
  (case ((string_drop s1844_0 ((string_length "c.lwsp")))) of
        s1845_0 =>
  (case ((spc_matches_prefix0 s1845_0)) of
        SOME ((() , s1846_0)) =>
  (case ((string_drop s1845_0 s1846_0)) of
        s1847_0 =>
  (case ((reg_name_matches_prefix s1847_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s1848_0)) =>
  (case ((string_drop s1847_0 s1848_0)) of
        s1849_0 =>
  (case ((sep_matches_prefix s1849_0)) of
        SOME ((() , s1850_0)) =>
  (case ((string_drop s1849_0 s1850_0)) of
        s1851_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s1851_0 : (( 6 words$word # ii)) option)) of
        SOME ((uimm, s1852_0)) =>
  let p0_ = (string_drop s1851_0 s1852_0) in
  if (((p0_ = ""))) then SOME (rd, uimm) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1830_ : string -> maybe ((mword ty5 * mword ty6))*)

val _ = Define `
 ((s1830_:string ->((5)words$word#(6)words$word)option) s1831_0=
    (let s1832_0 = s1831_0 in
   if ((string_startswith s1832_0 "c.slli")) then  
  (case ((string_drop s1832_0 ((string_length "c.slli")))) of
        s1833_0 =>
  (case ((spc_matches_prefix0 s1833_0)) of
        SOME ((() , s1834_0)) =>
  (case ((string_drop s1833_0 s1834_0)) of
        s1835_0 =>
  (case ((reg_name_matches_prefix s1835_0 : (( 5 words$word # ii)) option)) of
        SOME ((rsd, s1836_0)) =>
  (case ((string_drop s1835_0 s1836_0)) of
        s1837_0 =>
  (case ((sep_matches_prefix s1837_0)) of
        SOME ((() , s1838_0)) =>
  (case ((string_drop s1837_0 s1838_0)) of
        s1839_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s1839_0 : (( 6 words$word # ii)) option)) of
        SOME ((shamt, s1840_0)) =>
  let p0_ = (string_drop s1839_0 s1840_0) in
  if (((p0_ = ""))) then SOME (rsd, shamt) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1818_ : string -> maybe ((mword ty3 * mword ty8))*)

val _ = Define `
 ((s1818_:string ->((3)words$word#(8)words$word)option) s1819_0=
    (let s1820_0 = s1819_0 in
   if ((string_startswith s1820_0 "c.bnez")) then  
  (case ((string_drop s1820_0 ((string_length "c.bnez")))) of
        s1821_0 =>
  (case ((spc_matches_prefix0 s1821_0)) of
        SOME ((() , s1822_0)) =>
  (case ((string_drop s1821_0 s1822_0)) of
        s1823_0 =>
  (case ((creg_name_matches_prefix s1823_0 : (( 3 words$word # ii)) option)) of
        SOME ((rs, s1824_0)) =>
  (case ((string_drop s1823_0 s1824_0)) of
        s1825_0 =>
  (case ((sep_matches_prefix s1825_0)) of
        SOME ((() , s1826_0)) =>
  (case ((string_drop s1825_0 s1826_0)) of
        s1827_0 =>
  (case ((hex_bits_8_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s1827_0 : (( 8 words$word # ii)) option)) of
        SOME ((imm, s1828_0)) =>
  let p0_ = (string_drop s1827_0 s1828_0) in
  if (((p0_ = ""))) then SOME (rs, imm) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1806_ : string -> maybe ((mword ty3 * mword ty8))*)

val _ = Define `
 ((s1806_:string ->((3)words$word#(8)words$word)option) s1807_0=
    (let s1808_0 = s1807_0 in
   if ((string_startswith s1808_0 "c.beqz")) then  
  (case ((string_drop s1808_0 ((string_length "c.beqz")))) of
        s1809_0 =>
  (case ((spc_matches_prefix0 s1809_0)) of
        SOME ((() , s1810_0)) =>
  (case ((string_drop s1809_0 s1810_0)) of
        s1811_0 =>
  (case ((creg_name_matches_prefix s1811_0 : (( 3 words$word # ii)) option)) of
        SOME ((rs, s1812_0)) =>
  (case ((string_drop s1811_0 s1812_0)) of
        s1813_0 =>
  (case ((sep_matches_prefix s1813_0)) of
        SOME ((() , s1814_0)) =>
  (case ((string_drop s1813_0 s1814_0)) of
        s1815_0 =>
  (case ((hex_bits_8_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s1815_0 : (( 8 words$word # ii)) option)) of
        SOME ((imm, s1816_0)) =>
  let p0_ = (string_drop s1815_0 s1816_0) in
  if (((p0_ = ""))) then SOME (rs, imm) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1798_ : string -> maybe (mword ty11)*)

val _ = Define `
 ((s1798_:string ->((11)words$word)option) s1799_0=
    (let s1800_0 = s1799_0 in
   if ((string_startswith s1800_0 "c.j")) then  
  (case ((string_drop s1800_0 ((string_length "c.j")))) of
        s1801_0 =>
  (case ((spc_matches_prefix0 s1801_0)) of
        SOME ((() , s1802_0)) =>
  (case ((string_drop s1801_0 s1802_0)) of
        s1803_0 =>
  (case ((hex_bits_11_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s1803_0 : (( 11 words$word # ii)) option)) of
        SOME ((imm, s1804_0)) =>
  let p0_ = (string_drop s1803_0 s1804_0) in
  if (((p0_ = ""))) then SOME imm else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1786_ : string -> maybe ((mword ty3 * mword ty3))*)

val _ = Define `
 ((s1786_:string ->((3)words$word#(3)words$word)option) s1787_0=
    (let s1788_0 = s1787_0 in
   if ((string_startswith s1788_0 "c.addw")) then  
  (case ((string_drop s1788_0 ((string_length "c.addw")))) of
        s1789_0 =>
  (case ((spc_matches_prefix0 s1789_0)) of
        SOME ((() , s1790_0)) =>
  (case ((string_drop s1789_0 s1790_0)) of
        s1791_0 =>
  (case ((creg_name_matches_prefix s1791_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s1792_0)) =>
  (case ((string_drop s1791_0 s1792_0)) of
        s1793_0 =>
  (case ((sep_matches_prefix s1793_0)) of
        SOME ((() , s1794_0)) =>
  (case ((string_drop s1793_0 s1794_0)) of
        s1795_0 =>
  (case ((creg_name_matches_prefix s1795_0 : (( 3 words$word # ii)) option)) of
        SOME ((rs2, s1796_0)) =>
  let p0_ = (string_drop s1795_0 s1796_0) in
  if (((p0_ = ""))) then SOME (rsd, rs2) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1774_ : string -> maybe ((mword ty3 * mword ty3))*)

val _ = Define `
 ((s1774_:string ->((3)words$word#(3)words$word)option) s1775_0=
    (let s1776_0 = s1775_0 in
   if ((string_startswith s1776_0 "c.subw")) then  
  (case ((string_drop s1776_0 ((string_length "c.subw")))) of
        s1777_0 =>
  (case ((spc_matches_prefix0 s1777_0)) of
        SOME ((() , s1778_0)) =>
  (case ((string_drop s1777_0 s1778_0)) of
        s1779_0 =>
  (case ((creg_name_matches_prefix s1779_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s1780_0)) =>
  (case ((string_drop s1779_0 s1780_0)) of
        s1781_0 =>
  (case ((sep_matches_prefix s1781_0)) of
        SOME ((() , s1782_0)) =>
  (case ((string_drop s1781_0 s1782_0)) of
        s1783_0 =>
  (case ((creg_name_matches_prefix s1783_0 : (( 3 words$word # ii)) option)) of
        SOME ((rs2, s1784_0)) =>
  let p0_ = (string_drop s1783_0 s1784_0) in
  if (((p0_ = ""))) then SOME (rsd, rs2) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1762_ : string -> maybe ((mword ty3 * mword ty3))*)

val _ = Define `
 ((s1762_:string ->((3)words$word#(3)words$word)option) s1763_0=
    (let s1764_0 = s1763_0 in
   if ((string_startswith s1764_0 "c.and")) then  
  (case ((string_drop s1764_0 ((string_length "c.and")))) of
        s1765_0 =>
  (case ((spc_matches_prefix0 s1765_0)) of
        SOME ((() , s1766_0)) =>
  (case ((string_drop s1765_0 s1766_0)) of
        s1767_0 =>
  (case ((creg_name_matches_prefix s1767_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s1768_0)) =>
  (case ((string_drop s1767_0 s1768_0)) of
        s1769_0 =>
  (case ((sep_matches_prefix s1769_0)) of
        SOME ((() , s1770_0)) =>
  (case ((string_drop s1769_0 s1770_0)) of
        s1771_0 =>
  (case ((creg_name_matches_prefix s1771_0 : (( 3 words$word # ii)) option)) of
        SOME ((rs2, s1772_0)) =>
  let p0_ = (string_drop s1771_0 s1772_0) in
  if (((p0_ = ""))) then SOME (rsd, rs2) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1750_ : string -> maybe ((mword ty3 * mword ty3))*)

val _ = Define `
 ((s1750_:string ->((3)words$word#(3)words$word)option) s1751_0=
    (let s1752_0 = s1751_0 in
   if ((string_startswith s1752_0 "c.or")) then  
  (case ((string_drop s1752_0 ((string_length "c.or")))) of
        s1753_0 =>
  (case ((spc_matches_prefix0 s1753_0)) of
        SOME ((() , s1754_0)) =>
  (case ((string_drop s1753_0 s1754_0)) of
        s1755_0 =>
  (case ((creg_name_matches_prefix s1755_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s1756_0)) =>
  (case ((string_drop s1755_0 s1756_0)) of
        s1757_0 =>
  (case ((sep_matches_prefix s1757_0)) of
        SOME ((() , s1758_0)) =>
  (case ((string_drop s1757_0 s1758_0)) of
        s1759_0 =>
  (case ((creg_name_matches_prefix s1759_0 : (( 3 words$word # ii)) option)) of
        SOME ((rs2, s1760_0)) =>
  let p0_ = (string_drop s1759_0 s1760_0) in
  if (((p0_ = ""))) then SOME (rsd, rs2) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1738_ : string -> maybe ((mword ty3 * mword ty3))*)

val _ = Define `
 ((s1738_:string ->((3)words$word#(3)words$word)option) s1739_0=
    (let s1740_0 = s1739_0 in
   if ((string_startswith s1740_0 "c.xor")) then  
  (case ((string_drop s1740_0 ((string_length "c.xor")))) of
        s1741_0 =>
  (case ((spc_matches_prefix0 s1741_0)) of
        SOME ((() , s1742_0)) =>
  (case ((string_drop s1741_0 s1742_0)) of
        s1743_0 =>
  (case ((creg_name_matches_prefix s1743_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s1744_0)) =>
  (case ((string_drop s1743_0 s1744_0)) of
        s1745_0 =>
  (case ((sep_matches_prefix s1745_0)) of
        SOME ((() , s1746_0)) =>
  (case ((string_drop s1745_0 s1746_0)) of
        s1747_0 =>
  (case ((creg_name_matches_prefix s1747_0 : (( 3 words$word # ii)) option)) of
        SOME ((rs2, s1748_0)) =>
  let p0_ = (string_drop s1747_0 s1748_0) in
  if (((p0_ = ""))) then SOME (rsd, rs2) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1726_ : string -> maybe ((mword ty3 * mword ty3))*)

val _ = Define `
 ((s1726_:string ->((3)words$word#(3)words$word)option) s1727_0=
    (let s1728_0 = s1727_0 in
   if ((string_startswith s1728_0 "c.sub")) then  
  (case ((string_drop s1728_0 ((string_length "c.sub")))) of
        s1729_0 =>
  (case ((spc_matches_prefix0 s1729_0)) of
        SOME ((() , s1730_0)) =>
  (case ((string_drop s1729_0 s1730_0)) of
        s1731_0 =>
  (case ((creg_name_matches_prefix s1731_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s1732_0)) =>
  (case ((string_drop s1731_0 s1732_0)) of
        s1733_0 =>
  (case ((sep_matches_prefix s1733_0)) of
        SOME ((() , s1734_0)) =>
  (case ((string_drop s1733_0 s1734_0)) of
        s1735_0 =>
  (case ((creg_name_matches_prefix s1735_0 : (( 3 words$word # ii)) option)) of
        SOME ((rs2, s1736_0)) =>
  let p0_ = (string_drop s1735_0 s1736_0) in
  if (((p0_ = ""))) then SOME (rsd, rs2) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1714_ : string -> maybe ((mword ty3 * mword ty6))*)

val _ = Define `
 ((s1714_:string ->((3)words$word#(6)words$word)option) s1715_0=
    (let s1716_0 = s1715_0 in
   if ((string_startswith s1716_0 "c.andi")) then  
  (case ((string_drop s1716_0 ((string_length "c.andi")))) of
        s1717_0 =>
  (case ((spc_matches_prefix0 s1717_0)) of
        SOME ((() , s1718_0)) =>
  (case ((string_drop s1717_0 s1718_0)) of
        s1719_0 =>
  (case ((creg_name_matches_prefix s1719_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s1720_0)) =>
  (case ((string_drop s1719_0 s1720_0)) of
        s1721_0 =>
  (case ((sep_matches_prefix s1721_0)) of
        SOME ((() , s1722_0)) =>
  (case ((string_drop s1721_0 s1722_0)) of
        s1723_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s1723_0 : (( 6 words$word # ii)) option)) of
        SOME ((imm, s1724_0)) =>
  let p0_ = (string_drop s1723_0 s1724_0) in
  if (((p0_ = ""))) then SOME (rsd, imm) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1702_ : string -> maybe ((mword ty3 * mword ty6))*)

val _ = Define `
 ((s1702_:string ->((3)words$word#(6)words$word)option) s1703_0=
    (let s1704_0 = s1703_0 in
   if ((string_startswith s1704_0 "c.srai")) then  
  (case ((string_drop s1704_0 ((string_length "c.srai")))) of
        s1705_0 =>
  (case ((spc_matches_prefix0 s1705_0)) of
        SOME ((() , s1706_0)) =>
  (case ((string_drop s1705_0 s1706_0)) of
        s1707_0 =>
  (case ((creg_name_matches_prefix s1707_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s1708_0)) =>
  (case ((string_drop s1707_0 s1708_0)) of
        s1709_0 =>
  (case ((sep_matches_prefix s1709_0)) of
        SOME ((() , s1710_0)) =>
  (case ((string_drop s1709_0 s1710_0)) of
        s1711_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s1711_0 : (( 6 words$word # ii)) option)) of
        SOME ((shamt, s1712_0)) =>
  let p0_ = (string_drop s1711_0 s1712_0) in
  if (((p0_ = ""))) then SOME (rsd, shamt) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1690_ : string -> maybe ((mword ty3 * mword ty6))*)

val _ = Define `
 ((s1690_:string ->((3)words$word#(6)words$word)option) s1691_0=
    (let s1692_0 = s1691_0 in
   if ((string_startswith s1692_0 "c.srli")) then  
  (case ((string_drop s1692_0 ((string_length "c.srli")))) of
        s1693_0 =>
  (case ((spc_matches_prefix0 s1693_0)) of
        SOME ((() , s1694_0)) =>
  (case ((string_drop s1693_0 s1694_0)) of
        s1695_0 =>
  (case ((creg_name_matches_prefix s1695_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s1696_0)) =>
  (case ((string_drop s1695_0 s1696_0)) of
        s1697_0 =>
  (case ((sep_matches_prefix s1697_0)) of
        SOME ((() , s1698_0)) =>
  (case ((string_drop s1697_0 s1698_0)) of
        s1699_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s1699_0 : (( 6 words$word # ii)) option)) of
        SOME ((shamt, s1700_0)) =>
  let p0_ = (string_drop s1699_0 s1700_0) in
  if (((p0_ = ""))) then SOME (rsd, shamt) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1678_ : string -> maybe ((mword ty5 * mword ty6))*)

val _ = Define `
 ((s1678_:string ->((5)words$word#(6)words$word)option) s1679_0=
    (let s1680_0 = s1679_0 in
   if ((string_startswith s1680_0 "c.lui")) then  
  (case ((string_drop s1680_0 ((string_length "c.lui")))) of
        s1681_0 =>
  (case ((spc_matches_prefix0 s1681_0)) of
        SOME ((() , s1682_0)) =>
  (case ((string_drop s1681_0 s1682_0)) of
        s1683_0 =>
  (case ((reg_name_matches_prefix s1683_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s1684_0)) =>
  (case ((string_drop s1683_0 s1684_0)) of
        s1685_0 =>
  (case ((sep_matches_prefix s1685_0)) of
        SOME ((() , s1686_0)) =>
  (case ((string_drop s1685_0 s1686_0)) of
        s1687_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s1687_0 : (( 6 words$word # ii)) option)) of
        SOME ((imm, s1688_0)) =>
  let p0_ = (string_drop s1687_0 s1688_0) in
  if (((p0_ = ""))) then SOME (rd, imm) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1670_ : string -> maybe (mword ty6)*)

val _ = Define `
 ((s1670_:string ->((6)words$word)option) s1671_0=
    (let s1672_0 = s1671_0 in
   if ((string_startswith s1672_0 "c.addi16sp")) then  
  (case ((string_drop s1672_0 ((string_length "c.addi16sp")))) of
        s1673_0 =>
  (case ((spc_matches_prefix0 s1673_0)) of
        SOME ((() , s1674_0)) =>
  (case ((string_drop s1673_0 s1674_0)) of
        s1675_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s1675_0 : (( 6 words$word # ii)) option)) of
        SOME ((imm, s1676_0)) =>
  let p0_ = (string_drop s1675_0 s1676_0) in
  if (((p0_ = ""))) then SOME imm else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1658_ : string -> maybe ((mword ty5 * mword ty6))*)

val _ = Define `
 ((s1658_:string ->((5)words$word#(6)words$word)option) s1659_0=
    (let s1660_0 = s1659_0 in
   if ((string_startswith s1660_0 "c.li")) then  
  (case ((string_drop s1660_0 ((string_length "c.li")))) of
        s1661_0 =>
  (case ((spc_matches_prefix0 s1661_0)) of
        SOME ((() , s1662_0)) =>
  (case ((string_drop s1661_0 s1662_0)) of
        s1663_0 =>
  (case ((reg_name_matches_prefix s1663_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s1664_0)) =>
  (case ((string_drop s1663_0 s1664_0)) of
        s1665_0 =>
  (case ((sep_matches_prefix s1665_0)) of
        SOME ((() , s1666_0)) =>
  (case ((string_drop s1665_0 s1666_0)) of
        s1667_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s1667_0 : (( 6 words$word # ii)) option)) of
        SOME ((imm, s1668_0)) =>
  let p0_ = (string_drop s1667_0 s1668_0) in
  if (((p0_ = ""))) then SOME (rd, imm) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1646_ : string -> maybe ((mword ty5 * mword ty6))*)

val _ = Define `
 ((s1646_:string ->((5)words$word#(6)words$word)option) s1647_0=
    (let s1648_0 = s1647_0 in
   if ((string_startswith s1648_0 "c.addiw")) then  
  (case ((string_drop s1648_0 ((string_length "c.addiw")))) of
        s1649_0 =>
  (case ((spc_matches_prefix0 s1649_0)) of
        SOME ((() , s1650_0)) =>
  (case ((string_drop s1649_0 s1650_0)) of
        s1651_0 =>
  (case ((reg_name_matches_prefix s1651_0 : (( 5 words$word # ii)) option)) of
        SOME ((rsd, s1652_0)) =>
  (case ((string_drop s1651_0 s1652_0)) of
        s1653_0 =>
  (case ((sep_matches_prefix s1653_0)) of
        SOME ((() , s1654_0)) =>
  (case ((string_drop s1653_0 s1654_0)) of
        s1655_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s1655_0 : (( 6 words$word # ii)) option)) of
        SOME ((imm, s1656_0)) =>
  let p0_ = (string_drop s1655_0 s1656_0) in
  if (((p0_ = ""))) then SOME (rsd, imm) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1638_ : string -> maybe (mword ty11)*)

val _ = Define `
 ((s1638_:string ->((11)words$word)option) s1639_0=
    (let s1640_0 = s1639_0 in
   if ((string_startswith s1640_0 "c.jal")) then  
  (case ((string_drop s1640_0 ((string_length "c.jal")))) of
        s1641_0 =>
  (case ((spc_matches_prefix0 s1641_0)) of
        SOME ((() , s1642_0)) =>
  (case ((string_drop s1641_0 s1642_0)) of
        s1643_0 =>
  (case ((hex_bits_12_matches_prefix0 s1643_0 : (( 12 words$word # ii)) option)) of
        SOME ((v__1184, s1644_0)) =>
  if (((((subrange_vec_dec v__1184 (( 0 : int): ii) (( 0 : int): ii) : 1 words$word))
          = (0b0w : 1 words$word)))) then
    let (imm : 11 words$word) = ((subrange_vec_dec v__1184 (( 11 : int): ii)
                                    (( 1 : int): ii) : 11 words$word)) in
    let (imm : 11 words$word) = ((subrange_vec_dec v__1184 (( 11 : int): ii)
                                    (( 1 : int): ii) : 11 words$word)) in
    let p0_ = (string_drop s1643_0 s1644_0) in
    if (((p0_ = ""))) then SOME imm else NONE else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1626_ : string -> maybe ((mword ty5 * mword ty6))*)

val _ = Define `
 ((s1626_:string ->((5)words$word#(6)words$word)option) s1627_0=
    (let s1628_0 = s1627_0 in
   if ((string_startswith s1628_0 "c.addi")) then  
  (case ((string_drop s1628_0 ((string_length "c.addi")))) of
        s1629_0 =>
  (case ((spc_matches_prefix0 s1629_0)) of
        SOME ((() , s1630_0)) =>
  (case ((string_drop s1629_0 s1630_0)) of
        s1631_0 =>
  (case ((reg_name_matches_prefix s1631_0 : (( 5 words$word # ii)) option)) of
        SOME ((rsd, s1632_0)) =>
  (case ((string_drop s1631_0 s1632_0)) of
        s1633_0 =>
  (case ((sep_matches_prefix s1633_0)) of
        SOME ((() , s1634_0)) =>
  (case ((string_drop s1633_0 s1634_0)) of
        s1635_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s1635_0 : (( 6 words$word # ii)) option)) of
        SOME ((nzi, s1636_0)) =>
  let p0_ = (string_drop s1635_0 s1636_0) in
  if (((p0_ = ""))) then SOME (rsd, nzi) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1610_ : string -> maybe ((mword ty3 * mword ty3 * mword ty5))*)

val _ = Define `
 ((s1610_:string ->((3)words$word#(3)words$word#(5)words$word)option) s1611_0=
    (let s1612_0 = s1611_0 in
   if ((string_startswith s1612_0 "c.sd")) then  
  (case ((string_drop s1612_0 ((string_length "c.sd")))) of
        s1613_0 =>
  (case ((spc_matches_prefix0 s1613_0)) of
        SOME ((() , s1614_0)) =>
  (case ((string_drop s1613_0 s1614_0)) of
        s1615_0 =>
  (case ((creg_name_matches_prefix s1615_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsc1, s1616_0)) =>
  (case ((string_drop s1615_0 s1616_0)) of
        s1617_0 =>
  (case ((sep_matches_prefix s1617_0)) of
        SOME ((() , s1618_0)) =>
  (case ((string_drop s1617_0 s1618_0)) of
        s1619_0 =>
  (case ((creg_name_matches_prefix s1619_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsc2, s1620_0)) =>
  (case ((string_drop s1619_0 s1620_0)) of
        s1621_0 =>
  (case ((sep_matches_prefix s1621_0)) of
        SOME ((() , s1622_0)) =>
  (case ((string_drop s1621_0 s1622_0)) of
        s1623_0 =>
  (case ((hex_bits_8_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s1623_0
         : (( 8 words$word # ii)) option)) of
        SOME ((v__1186, s1624_0)) =>
  if (((((subrange_vec_dec v__1186 (( 2 : int): ii) (( 0 : int): ii)
         : 3 words$word)) = (0b000w : 3 words$word)))) then
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1186 (( 7 : int): ii) (( 3 : int): ii) : 5 words$word)) in
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1186 (( 7 : int): ii) (( 3 : int): ii) : 5 words$word)) in
    let p0_ = (string_drop s1623_0 s1624_0) in
    if (((p0_ = ""))) then SOME (rsc1, rsc2, uimm) else NONE else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1594_ : string -> maybe ((mword ty3 * mword ty3 * mword ty5))*)

val _ = Define `
 ((s1594_:string ->((3)words$word#(3)words$word#(5)words$word)option) s1595_0=
    (let s1596_0 = s1595_0 in
   if ((string_startswith s1596_0 "c.sw")) then  
  (case ((string_drop s1596_0 ((string_length "c.sw")))) of
        s1597_0 =>
  (case ((spc_matches_prefix0 s1597_0)) of
        SOME ((() , s1598_0)) =>
  (case ((string_drop s1597_0 s1598_0)) of
        s1599_0 =>
  (case ((creg_name_matches_prefix s1599_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsc1, s1600_0)) =>
  (case ((string_drop s1599_0 s1600_0)) of
        s1601_0 =>
  (case ((sep_matches_prefix s1601_0)) of
        SOME ((() , s1602_0)) =>
  (case ((string_drop s1601_0 s1602_0)) of
        s1603_0 =>
  (case ((creg_name_matches_prefix s1603_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsc2, s1604_0)) =>
  (case ((string_drop s1603_0 s1604_0)) of
        s1605_0 =>
  (case ((sep_matches_prefix s1605_0)) of
        SOME ((() , s1606_0)) =>
  (case ((string_drop s1605_0 s1606_0)) of
        s1607_0 =>
  (case ((hex_bits_7_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s1607_0
         : (( 7 words$word # ii)) option)) of
        SOME ((v__1188, s1608_0)) =>
  if (((((subrange_vec_dec v__1188 (( 1 : int): ii) (( 0 : int): ii)
         : 2 words$word)) = (0b00w : 2 words$word)))) then
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1188 (( 6 : int): ii) (( 2 : int): ii) : 5 words$word)) in
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1188 (( 6 : int): ii) (( 2 : int): ii) : 5 words$word)) in
    let p0_ = (string_drop s1607_0 s1608_0) in
    if (((p0_ = ""))) then SOME (rsc1, rsc2, uimm) else NONE else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1578_ : string -> maybe ((mword ty3 * mword ty3 * mword ty5))*)

val _ = Define `
 ((s1578_:string ->((3)words$word#(3)words$word#(5)words$word)option) s1579_0=
    (let s1580_0 = s1579_0 in
   if ((string_startswith s1580_0 "c.ld")) then  
  (case ((string_drop s1580_0 ((string_length "c.ld")))) of
        s1581_0 =>
  (case ((spc_matches_prefix0 s1581_0)) of
        SOME ((() , s1582_0)) =>
  (case ((string_drop s1581_0 s1582_0)) of
        s1583_0 =>
  (case ((creg_name_matches_prefix s1583_0 : (( 3 words$word # ii)) option)) of
        SOME ((rdc, s1584_0)) =>
  (case ((string_drop s1583_0 s1584_0)) of
        s1585_0 =>
  (case ((sep_matches_prefix s1585_0)) of
        SOME ((() , s1586_0)) =>
  (case ((string_drop s1585_0 s1586_0)) of
        s1587_0 =>
  (case ((creg_name_matches_prefix s1587_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsc, s1588_0)) =>
  (case ((string_drop s1587_0 s1588_0)) of
        s1589_0 =>
  (case ((sep_matches_prefix s1589_0)) of
        SOME ((() , s1590_0)) =>
  (case ((string_drop s1589_0 s1590_0)) of
        s1591_0 =>
  (case ((hex_bits_8_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s1591_0
         : (( 8 words$word # ii)) option)) of
        SOME ((v__1190, s1592_0)) =>
  if (((((subrange_vec_dec v__1190 (( 2 : int): ii) (( 0 : int): ii)
         : 3 words$word)) = (0b000w : 3 words$word)))) then
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1190 (( 7 : int): ii) (( 3 : int): ii) : 5 words$word)) in
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1190 (( 7 : int): ii) (( 3 : int): ii) : 5 words$word)) in
    let p0_ = (string_drop s1591_0 s1592_0) in
    if (((p0_ = ""))) then SOME (rdc, rsc, uimm) else NONE else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1562_ : string -> maybe ((mword ty3 * mword ty3 * mword ty5))*)

val _ = Define `
 ((s1562_:string ->((3)words$word#(3)words$word#(5)words$word)option) s1563_0=
    (let s1564_0 = s1563_0 in
   if ((string_startswith s1564_0 "c.lw")) then  
  (case ((string_drop s1564_0 ((string_length "c.lw")))) of
        s1565_0 =>
  (case ((spc_matches_prefix0 s1565_0)) of
        SOME ((() , s1566_0)) =>
  (case ((string_drop s1565_0 s1566_0)) of
        s1567_0 =>
  (case ((creg_name_matches_prefix s1567_0 : (( 3 words$word # ii)) option)) of
        SOME ((rdc, s1568_0)) =>
  (case ((string_drop s1567_0 s1568_0)) of
        s1569_0 =>
  (case ((sep_matches_prefix s1569_0)) of
        SOME ((() , s1570_0)) =>
  (case ((string_drop s1569_0 s1570_0)) of
        s1571_0 =>
  (case ((creg_name_matches_prefix s1571_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsc, s1572_0)) =>
  (case ((string_drop s1571_0 s1572_0)) of
        s1573_0 =>
  (case ((sep_matches_prefix s1573_0)) of
        SOME ((() , s1574_0)) =>
  (case ((string_drop s1573_0 s1574_0)) of
        s1575_0 =>
  (case ((hex_bits_7_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s1575_0
         : (( 7 words$word # ii)) option)) of
        SOME ((v__1192, s1576_0)) =>
  if (((((subrange_vec_dec v__1192 (( 1 : int): ii) (( 0 : int): ii)
         : 2 words$word)) = (0b00w : 2 words$word)))) then
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1192 (( 6 : int): ii) (( 2 : int): ii) : 5 words$word)) in
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1192 (( 6 : int): ii) (( 2 : int): ii) : 5 words$word)) in
    let p0_ = (string_drop s1575_0 s1576_0) in
    if (((p0_ = ""))) then SOME (rdc, rsc, uimm) else NONE else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1550_ : string -> maybe ((mword ty3 * mword ty8))*)

val _ = Define `
 ((s1550_:string ->((3)words$word#(8)words$word)option) s1551_0=
    (let s1552_0 = s1551_0 in
   if ((string_startswith s1552_0 "c.addi4spn")) then  
  (case ((string_drop s1552_0 ((string_length "c.addi4spn")))) of
        s1553_0 =>
  (case ((spc_matches_prefix0 s1553_0)) of
        SOME ((() , s1554_0)) =>
  (case ((string_drop s1553_0 s1554_0)) of
        s1555_0 =>
  (case ((creg_name_matches_prefix s1555_0 : (( 3 words$word # ii)) option)) of
        SOME ((rdc, s1556_0)) =>
  (case ((string_drop s1555_0 s1556_0)) of
        s1557_0 =>
  (case ((sep_matches_prefix s1557_0)) of
        SOME ((() , s1558_0)) =>
  (case ((string_drop s1557_0 s1558_0)) of
        s1559_0 =>
  (case ((hex_bits_10_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s1559_0 : (( 10 words$word # ii)) option)) of
        SOME ((v__1194, s1560_0)) =>
  if (((((subrange_vec_dec v__1194 (( 1 : int): ii) (( 0 : int): ii) : 2 words$word))
          = (0b00w : 2 words$word)))) then
    let (nzimm : 8 words$word) =
        ((subrange_vec_dec v__1194 (( 9 : int): ii) (( 2 : int): ii) : 8 words$word)) in
    let (nzimm : 8 words$word) =
        ((subrange_vec_dec v__1194 (( 9 : int): ii) (( 2 : int): ii) : 8 words$word)) in
    let p0_ = (string_drop s1559_0 s1560_0) in
    if (((p0_ = ""))) then SOME (rdc, nzimm) else NONE else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1524_ : string -> maybe ((amoop * word_width * bool * bool * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s1524_:string ->(amoop#word_width#bool#bool#(5)words$word#(5)words$word#(5)words$word)option) s1525_0= 
  ((case s1525_0 of
         s1526_0 =>
   (case ((amo_mnemonic_matches_prefix s1526_0)) of
         SOME ((op, s1527_0)) =>
   let s1528_0 = (string_drop s1526_0 s1527_0) in
   if ((string_startswith s1528_0 ".")) then
     (case ((string_drop s1528_0 ((string_length ".")))) of
           s1529_0 =>
     (case ((size_mnemonic_matches_prefix s1529_0)) of
           SOME ((width, s1530_0)) =>
     (case ((string_drop s1529_0 s1530_0)) of
           s1531_0 =>
     (case ((maybe_aq_matches_prefix s1531_0)) of
           SOME ((aq, s1532_0)) =>
     (case ((string_drop s1531_0 s1532_0)) of
           s1533_0 =>
     (case ((maybe_rl_matches_prefix s1533_0)) of
           SOME ((rl, s1534_0)) =>
     (case ((string_drop s1533_0 s1534_0)) of
           s1535_0 =>
     (case ((spc_matches_prefix0 s1535_0)) of
           SOME ((() , s1536_0)) =>
     (case ((string_drop s1535_0 s1536_0)) of
           s1537_0 =>
     (case ((reg_name_matches_prefix s1537_0 : (( 5 words$word # ii)) option)) of
           SOME ((rd, s1538_0)) =>
     (case ((string_drop s1537_0 s1538_0)) of
           s1539_0 =>
     (case ((sep_matches_prefix s1539_0)) of
           SOME ((() , s1540_0)) =>
     (case ((string_drop s1539_0 s1540_0)) of
           s1541_0 =>
     (case ((reg_name_matches_prefix s1541_0 : (( 5 words$word # ii)) option)) of
           SOME ((rs2, s1542_0)) =>
     (case ((string_drop s1541_0 s1542_0)) of
           s1543_0 =>
     (case ((sep_matches_prefix s1543_0)) of
           SOME ((() , s1544_0)) =>
     let s1545_0 = (string_drop s1543_0 s1544_0) in
     if ((string_startswith s1545_0 "(")) then
       (case ((string_drop s1545_0 ((string_length "(")))) of
             s1546_0 =>
       (case ((reg_name_matches_prefix s1546_0
              : (( 5 words$word # ii)) option)) of
             SOME ((rs1, s1547_0)) =>
       let s1548_0 = (string_drop s1546_0 s1547_0) in
       if ((string_startswith s1548_0 ")")) then
         let p0_ = (string_drop s1548_0 ((string_length ")"))) in
         if (((p0_ = ""))) then SOME (op, width, aq, rl, rd, rs2, rs1) else
           NONE else NONE
         | _ => NONE
       )
       ) else NONE
       | _ => NONE
     )
     )
       | _ => NONE
     )
     )
       | _ => NONE
     )
     )
       | _ => NONE
     )
     )
       | _ => NONE
     )
     )
       | _ => NONE
     )
     )
       | _ => NONE
     )
     )
       | _ => NONE
     )
     ) else NONE
     | _ => NONE
   )
   )))`;


(*val _s1502_ : string -> maybe ((word_width * bool * bool * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s1502_:string ->(word_width#bool#bool#(5)words$word#(5)words$word#(5)words$word)option) s1503_0=
    (let s1504_0 = s1503_0 in
   if ((string_startswith s1504_0 "sc.")) then  
  (case ((string_drop s1504_0 ((string_length "sc.")))) of
        s1505_0 =>
  (case ((size_mnemonic_matches_prefix s1505_0)) of
        SOME ((size1, s1506_0)) =>
  (case ((string_drop s1505_0 s1506_0)) of
        s1507_0 =>
  (case ((maybe_aq_matches_prefix s1507_0)) of
        SOME ((aq, s1508_0)) =>
  (case ((string_drop s1507_0 s1508_0)) of
        s1509_0 =>
  (case ((maybe_rl_matches_prefix s1509_0)) of
        SOME ((rl, s1510_0)) =>
  (case ((string_drop s1509_0 s1510_0)) of
        s1511_0 =>
  (case ((spc_matches_prefix0 s1511_0)) of
        SOME ((() , s1512_0)) =>
  (case ((string_drop s1511_0 s1512_0)) of
        s1513_0 =>
  (case ((reg_name_matches_prefix s1513_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s1514_0)) =>
  (case ((string_drop s1513_0 s1514_0)) of
        s1515_0 =>
  (case ((sep_matches_prefix s1515_0)) of
        SOME ((() , s1516_0)) =>
  (case ((string_drop s1515_0 s1516_0)) of
        s1517_0 =>
  (case ((reg_name_matches_prefix s1517_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs1, s1518_0)) =>
  (case ((string_drop s1517_0 s1518_0)) of
        s1519_0 =>
  (case ((sep_matches_prefix s1519_0)) of
        SOME ((() , s1520_0)) =>
  (case ((string_drop s1519_0 s1520_0)) of
        s1521_0 =>
  (case ((reg_name_matches_prefix s1521_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s1522_0)) =>
  let p0_ = (string_drop s1521_0 s1522_0) in
  if (((p0_ = ""))) then SOME (size1, aq, rl, rd, rs1, rs2) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1484_ : string -> maybe ((word_width * bool * bool * mword ty5 * mword ty5))*)

val _ = Define `
 ((s1484_:string ->(word_width#bool#bool#(5)words$word#(5)words$word)option) s1485_0=
    (let s1486_0 = s1485_0 in
   if ((string_startswith s1486_0 "lr.")) then  
  (case ((string_drop s1486_0 ((string_length "lr.")))) of
        s1487_0 =>
  (case ((size_mnemonic_matches_prefix s1487_0)) of
        SOME ((size1, s1488_0)) =>
  (case ((string_drop s1487_0 s1488_0)) of
        s1489_0 =>
  (case ((maybe_aq_matches_prefix s1489_0)) of
        SOME ((aq, s1490_0)) =>
  (case ((string_drop s1489_0 s1490_0)) of
        s1491_0 =>
  (case ((maybe_rl_matches_prefix s1491_0)) of
        SOME ((rl, s1492_0)) =>
  (case ((string_drop s1491_0 s1492_0)) of
        s1493_0 =>
  (case ((spc_matches_prefix0 s1493_0)) of
        SOME ((() , s1494_0)) =>
  (case ((string_drop s1493_0 s1494_0)) of
        s1495_0 =>
  (case ((reg_name_matches_prefix s1495_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s1496_0)) =>
  (case ((string_drop s1495_0 s1496_0)) of
        s1497_0 =>
  (case ((sep_matches_prefix s1497_0)) of
        SOME ((() , s1498_0)) =>
  (case ((string_drop s1497_0 s1498_0)) of
        s1499_0 =>
  (case ((reg_name_matches_prefix s1499_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs1, s1500_0)) =>
  let p0_ = (string_drop s1499_0 s1500_0) in
  if (((p0_ = ""))) then SOME (size1, aq, rl, rd, rs1) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1472_ : string -> maybe ((mword ty5 * mword ty5))*)

val _ = Define `
 ((s1472_:string ->((5)words$word#(5)words$word)option) s1473_0=
    (let s1474_0 = s1473_0 in
   if ((string_startswith s1474_0 "sfence.vma")) then  
  (case ((string_drop s1474_0 ((string_length "sfence.vma")))) of
        s1475_0 =>
  (case ((spc_matches_prefix0 s1475_0)) of
        SOME ((() , s1476_0)) =>
  (case ((string_drop s1475_0 s1476_0)) of
        s1477_0 =>
  (case ((reg_name_matches_prefix s1477_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs1, s1478_0)) =>
  (case ((string_drop s1477_0 s1478_0)) of
        s1479_0 =>
  (case ((sep_matches_prefix s1479_0)) of
        SOME ((() , s1480_0)) =>
  (case ((string_drop s1479_0 s1480_0)) of
        s1481_0 =>
  (case ((reg_name_matches_prefix s1481_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s1482_0)) =>
  let p0_ = (string_drop s1481_0 s1482_0) in
  if (((p0_ = ""))) then SOME (rs1, rs2) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1460_ : string -> maybe ((mword ty4 * mword ty4))*)

val _ = Define `
 ((s1460_:string ->((4)words$word#(4)words$word)option) s1461_0=
    (let s1462_0 = s1461_0 in
   if ((string_startswith s1462_0 "fence.tso")) then  
  (case ((string_drop s1462_0 ((string_length "fence.tso")))) of
        s1463_0 =>
  (case ((spc_matches_prefix0 s1463_0)) of
        SOME ((() , s1464_0)) =>
  (case ((string_drop s1463_0 s1464_0)) of
        s1465_0 =>
  (case ((fence_bits_matches_prefix s1465_0 : (( 4 words$word # ii)) option)) of
        SOME ((pred, s1466_0)) =>
  (case ((string_drop s1465_0 s1466_0)) of
        s1467_0 =>
  (case ((sep_matches_prefix s1467_0)) of
        SOME ((() , s1468_0)) =>
  (case ((string_drop s1467_0 s1468_0)) of
        s1469_0 =>
  (case ((fence_bits_matches_prefix s1469_0 : (( 4 words$word # ii)) option)) of
        SOME ((succ, s1470_0)) =>
  let p0_ = (string_drop s1469_0 s1470_0) in
  if (((p0_ = ""))) then SOME (pred, succ) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1448_ : string -> maybe ((mword ty4 * mword ty4))*)

val _ = Define `
 ((s1448_:string ->((4)words$word#(4)words$word)option) s1449_0=
    (let s1450_0 = s1449_0 in
   if ((string_startswith s1450_0 "fence")) then  
  (case ((string_drop s1450_0 ((string_length "fence")))) of
        s1451_0 =>
  (case ((spc_matches_prefix0 s1451_0)) of
        SOME ((() , s1452_0)) =>
  (case ((string_drop s1451_0 s1452_0)) of
        s1453_0 =>
  (case ((fence_bits_matches_prefix s1453_0 : (( 4 words$word # ii)) option)) of
        SOME ((pred, s1454_0)) =>
  (case ((string_drop s1453_0 s1454_0)) of
        s1455_0 =>
  (case ((sep_matches_prefix s1455_0)) of
        SOME ((() , s1456_0)) =>
  (case ((string_drop s1455_0 s1456_0)) of
        s1457_0 =>
  (case ((fence_bits_matches_prefix s1457_0 : (( 4 words$word # ii)) option)) of
        SOME ((succ, s1458_0)) =>
  let p0_ = (string_drop s1457_0 s1458_0) in
  if (((p0_ = ""))) then SOME (pred, succ) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1431_ : string -> maybe ((sopw * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s1431_:string ->(sopw#(5)words$word#(5)words$word#(5)words$word)option) s1432_0= 
  ((case s1432_0 of
         s1433_0 =>
   (case ((shiftiwop_mnemonic_matches_prefix s1433_0)) of
         SOME ((op, s1434_0)) =>
   (case ((string_drop s1433_0 s1434_0)) of
         s1435_0 =>
   (case ((spc_matches_prefix0 s1435_0)) of
         SOME ((() , s1436_0)) =>
   (case ((string_drop s1435_0 s1436_0)) of
         s1437_0 =>
   (case ((reg_name_matches_prefix s1437_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s1438_0)) =>
   (case ((string_drop s1437_0 s1438_0)) of
         s1439_0 =>
   (case ((sep_matches_prefix s1439_0)) of
         SOME ((() , s1440_0)) =>
   (case ((string_drop s1439_0 s1440_0)) of
         s1441_0 =>
   (case ((reg_name_matches_prefix s1441_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s1442_0)) =>
   (case ((string_drop s1441_0 s1442_0)) of
         s1443_0 =>
   (case ((sep_matches_prefix s1443_0)) of
         SOME ((() , s1444_0)) =>
   (case ((string_drop s1443_0 s1444_0)) of
         s1445_0 =>
   (case ((hex_bits_5_matches_prefix
             instance_Sail2_values_Bitvector_Machine_word_mword_dict 
           s1445_0 : (( 5 words$word # ii)) option)) of
         SOME ((shamt, s1446_0)) =>
   let p0_ = (string_drop s1445_0 s1446_0) in
   if (((p0_ = ""))) then SOME (op, rd, rs1, shamt) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s1414_ : string -> maybe ((ropw * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s1414_:string ->(ropw#(5)words$word#(5)words$word#(5)words$word)option) s1415_0= 
  ((case s1415_0 of
         s1416_0 =>
   (case ((rtypew_mnemonic_matches_prefix s1416_0)) of
         SOME ((op, s1417_0)) =>
   (case ((string_drop s1416_0 s1417_0)) of
         s1418_0 =>
   (case ((spc_matches_prefix0 s1418_0)) of
         SOME ((() , s1419_0)) =>
   (case ((string_drop s1418_0 s1419_0)) of
         s1420_0 =>
   (case ((reg_name_matches_prefix s1420_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s1421_0)) =>
   (case ((string_drop s1420_0 s1421_0)) of
         s1422_0 =>
   (case ((sep_matches_prefix s1422_0)) of
         SOME ((() , s1423_0)) =>
   (case ((string_drop s1422_0 s1423_0)) of
         s1424_0 =>
   (case ((reg_name_matches_prefix s1424_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s1425_0)) =>
   (case ((string_drop s1424_0 s1425_0)) of
         s1426_0 =>
   (case ((sep_matches_prefix s1426_0)) of
         SOME ((() , s1427_0)) =>
   (case ((string_drop s1426_0 s1427_0)) of
         s1428_0 =>
   (case ((reg_name_matches_prefix s1428_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s1429_0)) =>
   let p0_ = (string_drop s1428_0 s1429_0) in
   if (((p0_ = ""))) then SOME (op, rd, rs1, rs2) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s1397_ : string -> maybe ((sop * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s1397_:string ->(sop#(5)words$word#(5)words$word#(5)words$word)option) s1398_0= 
  ((case s1398_0 of
         s1399_0 =>
   (case ((shiftw_mnemonic_matches_prefix s1399_0)) of
         SOME ((op, s1400_0)) =>
   (case ((string_drop s1399_0 s1400_0)) of
         s1401_0 =>
   (case ((spc_matches_prefix0 s1401_0)) of
         SOME ((() , s1402_0)) =>
   (case ((string_drop s1401_0 s1402_0)) of
         s1403_0 =>
   (case ((reg_name_matches_prefix s1403_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s1404_0)) =>
   (case ((string_drop s1403_0 s1404_0)) of
         s1405_0 =>
   (case ((sep_matches_prefix s1405_0)) of
         SOME ((() , s1406_0)) =>
   (case ((string_drop s1405_0 s1406_0)) of
         s1407_0 =>
   (case ((reg_name_matches_prefix s1407_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s1408_0)) =>
   (case ((string_drop s1407_0 s1408_0)) of
         s1409_0 =>
   (case ((sep_matches_prefix s1409_0)) of
         SOME ((() , s1410_0)) =>
   (case ((string_drop s1409_0 s1410_0)) of
         s1411_0 =>
   (case ((hex_bits_5_matches_prefix
             instance_Sail2_values_Bitvector_Machine_word_mword_dict 
           s1411_0 : (( 5 words$word # ii)) option)) of
         SOME ((shamt, s1412_0)) =>
   let p0_ = (string_drop s1411_0 s1412_0) in
   if (((p0_ = ""))) then SOME (op, rd, rs1, shamt) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s1381_ : string -> maybe ((mword ty5 * mword ty5 * mword ty12))*)

val _ = Define `
 ((s1381_:string ->((5)words$word#(5)words$word#(12)words$word)option) s1382_0=
    (let s1383_0 = s1382_0 in
   if ((string_startswith s1383_0 "addiw")) then  
  (case ((string_drop s1383_0 ((string_length "addiw")))) of
        s1384_0 =>
  (case ((spc_matches_prefix0 s1384_0)) of
        SOME ((() , s1385_0)) =>
  (case ((string_drop s1384_0 s1385_0)) of
        s1386_0 =>
  (case ((reg_name_matches_prefix s1386_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s1387_0)) =>
  (case ((string_drop s1386_0 s1387_0)) of
        s1388_0 =>
  (case ((sep_matches_prefix s1388_0)) of
        SOME ((() , s1389_0)) =>
  (case ((string_drop s1388_0 s1389_0)) of
        s1390_0 =>
  (case ((reg_name_matches_prefix s1390_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs1, s1391_0)) =>
  (case ((string_drop s1390_0 s1391_0)) of
        s1392_0 =>
  (case ((sep_matches_prefix s1392_0)) of
        SOME ((() , s1393_0)) =>
  (case ((string_drop s1392_0 s1393_0)) of
        s1394_0 =>
  (case ((hex_bits_12_matches_prefix0 s1394_0
         : (( 12 words$word # ii)) option)) of
        SOME ((imm, s1395_0)) =>
  let p0_ = (string_drop s1394_0 s1395_0) in
  if (((p0_ = ""))) then SOME (rd, rs1, imm) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1353_ : string -> maybe ((word_width * bool * bool * mword ty5 * mword ty12 * mword ty5))*)

val _ = Define `
 ((s1353_:string ->(word_width#bool#bool#(5)words$word#(12)words$word#(5)words$word)option) s1354_0=
    (let s1355_0 = s1354_0 in
   if ((string_startswith s1355_0 "s")) then  
  (case ((string_drop s1355_0 ((string_length "s")))) of
        s1356_0 =>
  (case ((size_mnemonic_matches_prefix s1356_0)) of
        SOME ((size1, s1357_0)) =>
  (case ((string_drop s1356_0 s1357_0)) of
        s1358_0 =>
  (case ((maybe_aq_matches_prefix s1358_0)) of
        SOME ((aq, s1359_0)) =>
  (case ((string_drop s1358_0 s1359_0)) of
        s1360_0 =>
  (case ((maybe_rl_matches_prefix s1360_0)) of
        SOME ((rl, s1361_0)) =>
  (case ((string_drop s1360_0 s1361_0)) of
        s1362_0 =>
  (case ((spc_matches_prefix0 s1362_0)) of
        SOME ((() , s1363_0)) =>
  (case ((string_drop s1362_0 s1363_0)) of
        s1364_0 =>
  (case ((reg_name_matches_prefix s1364_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s1365_0)) =>
  (case ((string_drop s1364_0 s1365_0)) of
        s1366_0 =>
  (case ((sep_matches_prefix s1366_0)) of
        SOME ((() , s1367_0)) =>
  (case ((string_drop s1366_0 s1367_0)) of
        s1368_0 =>
  (case ((hex_bits_12_matches_prefix0 s1368_0
         : (( 12 words$word # ii)) option)) of
        SOME ((imm, s1369_0)) =>
  (case ((string_drop s1368_0 s1369_0)) of
        s1370_0 =>
  (case ((opt_spc_matches_prefix0 s1370_0)) of
        SOME ((() , s1371_0)) =>
  let s1372_0 = (string_drop s1370_0 s1371_0) in
  if ((string_startswith s1372_0 "(")) then
    (case ((string_drop s1372_0 ((string_length "(")))) of
          s1373_0 =>
    (case ((opt_spc_matches_prefix0 s1373_0)) of
          SOME ((() , s1374_0)) =>
    (case ((string_drop s1373_0 s1374_0)) of
          s1375_0 =>
    (case ((reg_name_matches_prefix s1375_0 : (( 5 words$word # ii)) option)) of
          SOME ((rs1, s1376_0)) =>
    (case ((string_drop s1375_0 s1376_0)) of
          s1377_0 =>
    (case ((opt_spc_matches_prefix0 s1377_0)) of
          SOME ((() , s1378_0)) =>
    let s1379_0 = (string_drop s1377_0 s1378_0) in
    if ((string_startswith s1379_0 ")")) then
      let p0_ = (string_drop s1379_0 ((string_length ")"))) in
      if (((p0_ = ""))) then SOME (size1, aq, rl, rs2, imm, rs1) else NONE
    else NONE
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    ) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1323_ : string -> maybe ((word_width * bool * bool * bool * mword ty5 * mword ty12 * mword ty5))*)

val _ = Define `
 ((s1323_:string ->(word_width#bool#bool#bool#(5)words$word#(12)words$word#(5)words$word)option) s1324_0=
    (let s1325_0 = s1324_0 in
   if ((string_startswith s1325_0 "l")) then  
  (case ((string_drop s1325_0 ((string_length "l")))) of
        s1326_0 =>
  (case ((size_mnemonic_matches_prefix s1326_0)) of
        SOME ((size1, s1327_0)) =>
  (case ((string_drop s1326_0 s1327_0)) of
        s1328_0 =>
  (case ((maybe_u_matches_prefix s1328_0)) of
        SOME ((is_unsigned, s1329_0)) =>
  (case ((string_drop s1328_0 s1329_0)) of
        s1330_0 =>
  (case ((maybe_aq_matches_prefix s1330_0)) of
        SOME ((aq, s1331_0)) =>
  (case ((string_drop s1330_0 s1331_0)) of
        s1332_0 =>
  (case ((maybe_rl_matches_prefix s1332_0)) of
        SOME ((rl, s1333_0)) =>
  (case ((string_drop s1332_0 s1333_0)) of
        s1334_0 =>
  (case ((spc_matches_prefix0 s1334_0)) of
        SOME ((() , s1335_0)) =>
  (case ((string_drop s1334_0 s1335_0)) of
        s1336_0 =>
  (case ((reg_name_matches_prefix s1336_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s1337_0)) =>
  (case ((string_drop s1336_0 s1337_0)) of
        s1338_0 =>
  (case ((sep_matches_prefix s1338_0)) of
        SOME ((() , s1339_0)) =>
  (case ((string_drop s1338_0 s1339_0)) of
        s1340_0 =>
  (case ((hex_bits_12_matches_prefix0 s1340_0
         : (( 12 words$word # ii)) option)) of
        SOME ((imm, s1341_0)) =>
  (case ((string_drop s1340_0 s1341_0)) of
        s1342_0 =>
  (case ((opt_spc_matches_prefix0 s1342_0)) of
        SOME ((() , s1343_0)) =>
  let s1344_0 = (string_drop s1342_0 s1343_0) in
  if ((string_startswith s1344_0 "(")) then
    (case ((string_drop s1344_0 ((string_length "(")))) of
          s1345_0 =>
    (case ((opt_spc_matches_prefix0 s1345_0)) of
          SOME ((() , s1346_0)) =>
    (case ((string_drop s1345_0 s1346_0)) of
          s1347_0 =>
    (case ((reg_name_matches_prefix s1347_0 : (( 5 words$word # ii)) option)) of
          SOME ((rs1, s1348_0)) =>
    (case ((string_drop s1347_0 s1348_0)) of
          s1349_0 =>
    (case ((opt_spc_matches_prefix0 s1349_0)) of
          SOME ((() , s1350_0)) =>
    let s1351_0 = (string_drop s1349_0 s1350_0) in
    if ((string_startswith s1351_0 ")")) then
      let p0_ = (string_drop s1351_0 ((string_length ")"))) in
      if (((p0_ = ""))) then SOME (size1, is_unsigned, aq, rl, rd, imm, rs1)
      else NONE else NONE
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    ) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1306_ : string -> maybe ((rop * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s1306_:string ->(rop#(5)words$word#(5)words$word#(5)words$word)option) s1307_0= 
  ((case s1307_0 of
         s1308_0 =>
   (case ((rtype_mnemonic_matches_prefix s1308_0)) of
         SOME ((op, s1309_0)) =>
   (case ((string_drop s1308_0 s1309_0)) of
         s1310_0 =>
   (case ((spc_matches_prefix0 s1310_0)) of
         SOME ((() , s1311_0)) =>
   (case ((string_drop s1310_0 s1311_0)) of
         s1312_0 =>
   (case ((reg_name_matches_prefix s1312_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s1313_0)) =>
   (case ((string_drop s1312_0 s1313_0)) of
         s1314_0 =>
   (case ((sep_matches_prefix s1314_0)) of
         SOME ((() , s1315_0)) =>
   (case ((string_drop s1314_0 s1315_0)) of
         s1316_0 =>
   (case ((reg_name_matches_prefix s1316_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s1317_0)) =>
   (case ((string_drop s1316_0 s1317_0)) of
         s1318_0 =>
   (case ((sep_matches_prefix s1318_0)) of
         SOME ((() , s1319_0)) =>
   (case ((string_drop s1318_0 s1319_0)) of
         s1320_0 =>
   (case ((reg_name_matches_prefix s1320_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s1321_0)) =>
   let p0_ = (string_drop s1320_0 s1321_0) in
   if (((p0_ = ""))) then SOME (op, rd, rs1, rs2) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s1289_ : string -> maybe ((sop * mword ty5 * mword ty5 * mword ty6))*)

val _ = Define `
 ((s1289_:string ->(sop#(5)words$word#(5)words$word#(6)words$word)option) s1290_0= 
  ((case s1290_0 of
         s1291_0 =>
   (case ((shiftiop_mnemonic_matches_prefix s1291_0)) of
         SOME ((op, s1292_0)) =>
   (case ((string_drop s1291_0 s1292_0)) of
         s1293_0 =>
   (case ((spc_matches_prefix0 s1293_0)) of
         SOME ((() , s1294_0)) =>
   (case ((string_drop s1293_0 s1294_0)) of
         s1295_0 =>
   (case ((reg_name_matches_prefix s1295_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s1296_0)) =>
   (case ((string_drop s1295_0 s1296_0)) of
         s1297_0 =>
   (case ((sep_matches_prefix s1297_0)) of
         SOME ((() , s1298_0)) =>
   (case ((string_drop s1297_0 s1298_0)) of
         s1299_0 =>
   (case ((reg_name_matches_prefix s1299_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s1300_0)) =>
   (case ((string_drop s1299_0 s1300_0)) of
         s1301_0 =>
   (case ((sep_matches_prefix s1301_0)) of
         SOME ((() , s1302_0)) =>
   (case ((string_drop s1301_0 s1302_0)) of
         s1303_0 =>
   (case ((hex_bits_6_matches_prefix
             instance_Sail2_values_Bitvector_Machine_word_mword_dict 
           s1303_0 : (( 6 words$word # ii)) option)) of
         SOME ((shamt, s1304_0)) =>
   let p0_ = (string_drop s1303_0 s1304_0) in
   if (((p0_ = ""))) then SOME (op, rd, rs1, shamt) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s1272_ : string -> maybe ((iop * mword ty5 * mword ty5 * mword ty12))*)

val _ = Define `
 ((s1272_:string ->(iop#(5)words$word#(5)words$word#(12)words$word)option) s1273_0= 
  ((case s1273_0 of
         s1274_0 =>
   (case ((itype_mnemonic_matches_prefix s1274_0)) of
         SOME ((op, s1275_0)) =>
   (case ((string_drop s1274_0 s1275_0)) of
         s1276_0 =>
   (case ((spc_matches_prefix0 s1276_0)) of
         SOME ((() , s1277_0)) =>
   (case ((string_drop s1276_0 s1277_0)) of
         s1278_0 =>
   (case ((reg_name_matches_prefix s1278_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s1279_0)) =>
   (case ((string_drop s1278_0 s1279_0)) of
         s1280_0 =>
   (case ((sep_matches_prefix s1280_0)) of
         SOME ((() , s1281_0)) =>
   (case ((string_drop s1280_0 s1281_0)) of
         s1282_0 =>
   (case ((reg_name_matches_prefix s1282_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s1283_0)) =>
   (case ((string_drop s1282_0 s1283_0)) of
         s1284_0 =>
   (case ((sep_matches_prefix s1284_0)) of
         SOME ((() , s1285_0)) =>
   (case ((string_drop s1284_0 s1285_0)) of
         s1286_0 =>
   (case ((hex_bits_12_matches_prefix0 s1286_0
          : (( 12 words$word # ii)) option)) of
         SOME ((imm, s1287_0)) =>
   let p0_ = (string_drop s1286_0 s1287_0) in
   if (((p0_ = ""))) then SOME (op, rd, rs1, imm) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s1255_ : string -> maybe ((bop * mword ty5 * mword ty5 * mword ty13))*)

val _ = Define `
 ((s1255_:string ->(bop#(5)words$word#(5)words$word#(13)words$word)option) s1256_0= 
  ((case s1256_0 of
         s1257_0 =>
   (case ((btype_mnemonic_matches_prefix s1257_0)) of
         SOME ((op, s1258_0)) =>
   (case ((string_drop s1257_0 s1258_0)) of
         s1259_0 =>
   (case ((spc_matches_prefix0 s1259_0)) of
         SOME ((() , s1260_0)) =>
   (case ((string_drop s1259_0 s1260_0)) of
         s1261_0 =>
   (case ((reg_name_matches_prefix s1261_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s1262_0)) =>
   (case ((string_drop s1261_0 s1262_0)) of
         s1263_0 =>
   (case ((sep_matches_prefix s1263_0)) of
         SOME ((() , s1264_0)) =>
   (case ((string_drop s1263_0 s1264_0)) of
         s1265_0 =>
   (case ((reg_name_matches_prefix s1265_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s1266_0)) =>
   (case ((string_drop s1265_0 s1266_0)) of
         s1267_0 =>
   (case ((sep_matches_prefix s1267_0)) of
         SOME ((() , s1268_0)) =>
   (case ((string_drop s1267_0 s1268_0)) of
         s1269_0 =>
   (case ((hex_bits_13_matches_prefix
             instance_Sail2_values_Bitvector_Machine_word_mword_dict 
           s1269_0 : (( 13 words$word # ii)) option)) of
         SOME ((imm, s1270_0)) =>
   let p0_ = (string_drop s1269_0 s1270_0) in
   if (((p0_ = ""))) then SOME (op, rs1, rs2, imm) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s1239_ : string -> maybe ((mword ty5 * mword ty5 * mword ty12))*)

val _ = Define `
 ((s1239_:string ->((5)words$word#(5)words$word#(12)words$word)option) s1240_0=
    (let s1241_0 = s1240_0 in
   if ((string_startswith s1241_0 "jalr")) then  
  (case ((string_drop s1241_0 ((string_length "jalr")))) of
        s1242_0 =>
  (case ((spc_matches_prefix0 s1242_0)) of
        SOME ((() , s1243_0)) =>
  (case ((string_drop s1242_0 s1243_0)) of
        s1244_0 =>
  (case ((reg_name_matches_prefix s1244_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s1245_0)) =>
  (case ((string_drop s1244_0 s1245_0)) of
        s1246_0 =>
  (case ((sep_matches_prefix s1246_0)) of
        SOME ((() , s1247_0)) =>
  (case ((string_drop s1246_0 s1247_0)) of
        s1248_0 =>
  (case ((reg_name_matches_prefix s1248_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs1, s1249_0)) =>
  (case ((string_drop s1248_0 s1249_0)) of
        s1250_0 =>
  (case ((sep_matches_prefix s1250_0)) of
        SOME ((() , s1251_0)) =>
  (case ((string_drop s1250_0 s1251_0)) of
        s1252_0 =>
  (case ((hex_bits_12_matches_prefix0 s1252_0
         : (( 12 words$word # ii)) option)) of
        SOME ((imm, s1253_0)) =>
  let p0_ = (string_drop s1252_0 s1253_0) in
  if (((p0_ = ""))) then SOME (rd, rs1, imm) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1227_ : string -> maybe ((mword ty5 * mword ty21))*)

val _ = Define `
 ((s1227_:string ->((5)words$word#(21)words$word)option) s1228_0=
    (let s1229_0 = s1228_0 in
   if ((string_startswith s1229_0 "jal")) then  
  (case ((string_drop s1229_0 ((string_length "jal")))) of
        s1230_0 =>
  (case ((spc_matches_prefix0 s1230_0)) of
        SOME ((() , s1231_0)) =>
  (case ((string_drop s1230_0 s1231_0)) of
        s1232_0 =>
  (case ((reg_name_matches_prefix s1232_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s1233_0)) =>
  (case ((string_drop s1232_0 s1233_0)) of
        s1234_0 =>
  (case ((sep_matches_prefix s1234_0)) of
        SOME ((() , s1235_0)) =>
  (case ((string_drop s1234_0 s1235_0)) of
        s1236_0 =>
  (case ((hex_bits_21_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s1236_0 : (( 21 words$word # ii)) option)) of
        SOME ((imm, s1237_0)) =>
  let p0_ = (string_drop s1236_0 s1237_0) in
  if (((p0_ = ""))) then SOME (rd, imm) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s1214_ : string -> maybe ((uop * mword ty5 * mword ty20))*)

val _ = Define `
 ((s1214_:string ->(uop#(5)words$word#(20)words$word)option) s1215_0= 
  ((case s1215_0 of
         s1216_0 =>
   (case ((utype_mnemonic_matches_prefix s1216_0)) of
         SOME ((op, s1217_0)) =>
   (case ((string_drop s1216_0 s1217_0)) of
         s1218_0 =>
   (case ((spc_matches_prefix0 s1218_0)) of
         SOME ((() , s1219_0)) =>
   (case ((string_drop s1218_0 s1219_0)) of
         s1220_0 =>
   (case ((reg_name_matches_prefix s1220_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s1221_0)) =>
   (case ((string_drop s1220_0 s1221_0)) of
         s1222_0 =>
   (case ((sep_matches_prefix s1222_0)) of
         SOME ((() , s1223_0)) =>
   (case ((string_drop s1222_0 s1223_0)) of
         s1224_0 =>
   (case ((hex_bits_20_matches_prefix
             instance_Sail2_values_Bitvector_Machine_word_mword_dict 
           s1224_0 : (( 20 words$word # ii)) option)) of
         SOME ((imm, s1225_0)) =>
   let p0_ = (string_drop s1224_0 s1225_0) in
   if (((p0_ = ""))) then SOME (op, rd, imm) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


val _ = Define `
 ((assembly_backwards:string ->(regstate)sail2_state_monad$sequential_state ->(((ast),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) arg_=
    (let s1226_0 = arg_ in
   if ((case ((s1214_ s1226_0  :  ((uop #  5 words$word #  20 words$word))option)) of
       SOME ((op, rd, imm)) => T
     | _ => F
     )) then  (case (s1214_ s1226_0 : (( uop # 5 words$word # 20 words$word)) option) of
     (SOME ((op, rd, imm))) =>
 sail2_state_monad$returnS (UTYPE (imm, rd, op))
 )
   else if ((case ((s1227_ s1226_0  :  (( 5 words$word #  21 words$word))option)) of
       SOME ((rd, imm)) => T
     | _ => F
     )) then  (case (s1227_ s1226_0 : (( 5 words$word # 21 words$word)) option) of
     (SOME ((rd, imm))) =>
 sail2_state_monad$returnS (RISCV_JAL (imm, rd))
 )
   else if ((case ((s1239_ s1226_0  :  (( 5 words$word #  5 words$word #  12 words$word))option)) of
       SOME ((rd, rs1, imm)) => T
     | _ => F
     )) then  (case (s1239_ s1226_0 : (( 5 words$word # 5 words$word # 12 words$word)) option) of
     (SOME ((rd, rs1, imm))) =>
 sail2_state_monad$returnS (RISCV_JALR (imm, rs1, rd))
 )
   else if ((case ((s1255_ s1226_0  :  ((bop #  5 words$word #  5 words$word #  13 words$word))option)) of
       SOME ((op, rs1, rs2, imm)) => T
     | _ => F
     )) then  (case
 (s1255_ s1226_0 : (( bop # 5 words$word # 5 words$word # 13 words$word)) option) of
     (SOME ((op, rs1, rs2, imm))) =>
 sail2_state_monad$returnS (BTYPE (imm, rs2, rs1, op))
 )
   else if ((case ((s1272_ s1226_0  :  ((iop #  5 words$word #  5 words$word #  12 words$word))option)) of
       SOME ((op, rd, rs1, imm)) => T
     | _ => F
     )) then  (case
 (s1272_ s1226_0 : (( iop # 5 words$word # 5 words$word # 12 words$word)) option) of
     (SOME ((op, rd, rs1, imm))) =>
 sail2_state_monad$returnS (ITYPE (imm, rs1, rd, op))
 )
   else if ((case ((s1289_ s1226_0  :  ((sop #  5 words$word #  5 words$word #  6 words$word))option)) of
       SOME ((op, rd, rs1, shamt)) => T
     | _ => F
     )) then  (case
 (s1289_ s1226_0 : (( sop # 5 words$word # 5 words$word # 6 words$word)) option) of
     (SOME ((op, rd, rs1, shamt))) =>
 sail2_state_monad$returnS (SHIFTIOP (shamt, rs1, rd, op))
 )
   else if ((case ((s1306_ s1226_0  :  ((rop #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((op, rd, rs1, rs2)) => T
     | _ => F
     )) then  (case
 (s1306_ s1226_0 : (( rop # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((op, rd, rs1, rs2))) =>
 sail2_state_monad$returnS (RTYPE (rs2, rs1, rd, op))
 )
   else if ((case ((s1323_ s1226_0
                     :  ((word_width # bool # bool # bool #  5 words$word #  12 words$word #  5 words$word))option)) of
       SOME ((size1, is_unsigned, aq, rl, rd, imm, rs1)) => T
     | _ => F
     )) then  (case
 (s1323_ s1226_0
 : (( word_width # bool # bool # bool # 5 words$word # 12 words$word # 5 words$word)) option) of
     (SOME ((size1, is_unsigned, aq, rl, rd, imm, rs1))) =>
 sail2_state_monad$returnS (LOAD (imm, rs1, rd, is_unsigned, size1, aq, rl))
 )
   else if ((case ((s1353_ s1226_0
                     :  ((word_width # bool # bool #  5 words$word #  12 words$word #  5 words$word))option)) of
       SOME ((size1, aq, rl, rs2, imm, rs1)) => T
     | _ => F
     )) then  (case
 (s1353_ s1226_0 : (( word_width # bool # bool # 5 words$word # 12 words$word # 5 words$word)) option) of
     (SOME ((size1, aq, rl, rs2, imm, rs1))) =>
 sail2_state_monad$returnS (STORE (imm, rs2, rs1, size1, aq, rl))
 )
   else if ((case ((s1381_ s1226_0  :  (( 5 words$word #  5 words$word #  12 words$word))option)) of
       SOME ((rd, rs1, imm)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case (s1381_ s1226_0 : (( 5 words$word # 5 words$word # 12 words$word)) option) of
     (SOME ((rd, rs1, imm))) =>
 sail2_state_monad$returnS (ADDIW (imm, rs1, rd))
 )
   else if ((case ((s1397_ s1226_0  :  ((sop #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((op, rd, rs1, shamt)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case
 (s1397_ s1226_0 : (( sop # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((op, rd, rs1, shamt))) =>
 sail2_state_monad$returnS (SHIFTW (shamt, rs1, rd, op))
 )
   else if ((case ((s1414_ s1226_0  :  ((ropw #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((op, rd, rs1, rs2)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case
 (s1414_ s1226_0 : (( ropw # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((op, rd, rs1, rs2))) =>
 sail2_state_monad$returnS (RTYPEW (rs2, rs1, rd, op))
 )
   else if ((case ((s1431_ s1226_0  :  ((sopw #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((op, rd, rs1, shamt)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case
 (s1431_ s1226_0 : (( sopw # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((op, rd, rs1, shamt))) =>
 sail2_state_monad$returnS (SHIFTIWOP (shamt, rs1, rd, op))
 )
   else if ((case ((s1448_ s1226_0  :  (( 4 words$word #  4 words$word))option)) of
       SOME ((pred, succ)) => T
     | _ => F
     )) then  (case (s1448_ s1226_0 : (( 4 words$word # 4 words$word)) option) of
     (SOME ((pred, succ))) =>
 sail2_state_monad$returnS (FENCE (pred, succ))
 )
   else if ((case ((s1460_ s1226_0  :  (( 4 words$word #  4 words$word))option)) of
       SOME ((pred, succ)) => T
     | _ => F
     )) then  (case (s1460_ s1226_0 : (( 4 words$word # 4 words$word)) option) of
     (SOME ((pred, succ))) =>
 sail2_state_monad$returnS (FENCE_TSO (pred, succ))
 )
   else if (((s1226_0 = "fence.i"))) then sail2_state_monad$returnS (FENCEI () )
   else if (((s1226_0 = "ecall"))) then sail2_state_monad$returnS (ECALL () )
   else if (((s1226_0 = "mret"))) then sail2_state_monad$returnS (MRET () )
   else if (((s1226_0 = "sret"))) then sail2_state_monad$returnS (SRET () )
   else if (((s1226_0 = "ebreak"))) then sail2_state_monad$returnS (EBREAK () )
   else if (((s1226_0 = "wfi"))) then sail2_state_monad$returnS (WFI () )
   else if ((case ((s1472_ s1226_0  :  (( 5 words$word #  5 words$word))option)) of
       SOME ((rs1, rs2)) => T
     | _ => F
     )) then  (case (s1472_ s1226_0 : (( 5 words$word # 5 words$word)) option) of
     (SOME ((rs1, rs2))) =>
 sail2_state_monad$returnS (SFENCE_VMA (rs1, rs2))
 )
   else if ((case ((s1484_ s1226_0  :  ((word_width # bool # bool #  5 words$word #  5 words$word))option)) of
       SOME ((size1, aq, rl, rd, rs1)) => T
     | _ => F
     )) then  (case
 (s1484_ s1226_0 : (( word_width # bool # bool # 5 words$word # 5 words$word)) option) of
     (SOME ((size1, aq, rl, rd, rs1))) =>
 sail2_state_monad$returnS (LOADRES (aq, rl, rs1, size1, rd))
 )
   else if ((case ((s1502_ s1226_0
                     :  ((word_width # bool # bool #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((size1, aq, rl, rd, rs1, rs2)) => T
     | _ => F
     )) then  (case
 (s1502_ s1226_0 : (( word_width # bool # bool # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((size1, aq, rl, rd, rs1, rs2))) =>
 sail2_state_monad$returnS (STORECON (aq, rl, rs2, rs1, size1, rd))
 )
   else if ((case ((s1524_ s1226_0
                     :  ((amoop # word_width # bool # bool #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((op, width, aq, rl, rd, rs2, rs1)) => T
     | _ => F
     )) then  (case
 (s1524_ s1226_0
 : (( amoop # word_width # bool # bool # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((op, width, aq, rl, rd, rs2, rs1))) =>
 sail2_state_monad$returnS (AMO (op, aq, rl, rs2, rs1, width, rd))
 )
   else if (((s1226_0 = "c.nop"))) then sail2_state_monad$returnS (C_NOP () )
   else if ((case ((s1550_ s1226_0  :  (( 3 words$word #  8 words$word))option)) of
       SOME ((rdc, nzimm)) => (nzimm <> (0x00w :  8 words$word))
     | _ => F
     )) then  (case (s1550_ s1226_0 : (( 3 words$word # 8 words$word)) option) of
     (SOME ((rdc, nzimm))) =>
 sail2_state_monad$returnS (C_ADDI4SPN (rdc, nzimm))
 )
   else if ((case ((s1562_ s1226_0  :  (( 3 words$word #  3 words$word #  5 words$word))option)) of
       SOME ((rdc, rsc, uimm)) => T
     | _ => F
     )) then  (case
 (s1562_ s1226_0 : (( 3 words$word # 3 words$word # 5 words$word)) option) of
     (SOME ((rdc, rsc, uimm))) =>
 sail2_state_monad$returnS (C_LW (uimm, rsc, rdc))
 )
   else if ((case ((s1578_ s1226_0  :  (( 3 words$word #  3 words$word #  5 words$word))option)) of
       SOME ((rdc, rsc, uimm)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case
 (s1578_ s1226_0 : (( 3 words$word # 3 words$word # 5 words$word)) option) of
     (SOME ((rdc, rsc, uimm))) =>
 sail2_state_monad$returnS (C_LD (uimm, rsc, rdc))
 )
   else if ((case ((s1594_ s1226_0  :  (( 3 words$word #  3 words$word #  5 words$word))option)) of
       SOME ((rsc1, rsc2, uimm)) => T
     | _ => F
     )) then  (case
 (s1594_ s1226_0 : (( 3 words$word # 3 words$word # 5 words$word)) option) of
     (SOME ((rsc1, rsc2, uimm))) =>
 sail2_state_monad$returnS (C_SW (uimm, rsc1, rsc2))
 )
   else if ((case ((s1610_ s1226_0  :  (( 3 words$word #  3 words$word #  5 words$word))option)) of
       SOME ((rsc1, rsc2, uimm)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case
 (s1610_ s1226_0 : (( 3 words$word # 3 words$word # 5 words$word)) option) of
     (SOME ((rsc1, rsc2, uimm))) =>
 sail2_state_monad$returnS (C_SD (uimm, rsc1, rsc2))
 )
   else if ((case ((s1626_ s1226_0  :  (( 5 words$word #  6 words$word))option)) of
       SOME ((rsd, nzi)) => ((((nzi <> (0b000000w :  6 words$word)))) /\ (((rsd <> zreg))))
     | _ => F
     )) then  (case (s1626_ s1226_0 : (( 5 words$word # 6 words$word)) option) of
     (SOME ((rsd, nzi))) =>
 sail2_state_monad$returnS (C_ADDI (nzi, rsd))
 )
   else if ((case ((s1638_ s1226_0  :  ( 11 words$word)option)) of
       SOME (imm) => ((( 32 : int):ii) = (( 32 : int):ii))
     | _ => F
     )) then  (case (s1638_ s1226_0 : ( 11 words$word) option) of
     (SOME (imm)) =>
 sail2_state_monad$returnS (C_JAL imm)
 )
   else if ((case ((s1646_ s1226_0  :  (( 5 words$word #  6 words$word))option)) of
       SOME ((rsd, imm)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case (s1646_ s1226_0 : (( 5 words$word # 6 words$word)) option) of
     (SOME ((rsd, imm))) =>
 sail2_state_monad$returnS (C_ADDIW (imm, rsd))
 )
   else if ((case ((s1658_ s1226_0  :  (( 5 words$word #  6 words$word))option)) of
       SOME ((rd, imm)) => (rd <> zreg)
     | _ => F
     )) then  (case (s1658_ s1226_0 : (( 5 words$word # 6 words$word)) option) of
     (SOME ((rd, imm))) =>
 sail2_state_monad$returnS (C_LI (imm, rd))
 )
   else if ((case ((s1670_ s1226_0  :  ( 6 words$word)option)) of
       SOME (imm) => (imm <> (0b000000w :  6 words$word))
     | _ => F
     )) then  (case (s1670_ s1226_0 : ( 6 words$word) option) of
     (SOME (imm)) =>
 sail2_state_monad$returnS (C_ADDI16SP imm)
 )
   else if ((case ((s1678_ s1226_0  :  (( 5 words$word #  6 words$word))option)) of
       SOME ((rd, imm)) =>
        ((((rd <> zreg))) /\ ((((((rd <> sp))) /\ (((imm <> (0b000000w :  6 words$word))))))))
     | _ => F
     )) then  (case (s1678_ s1226_0 : (( 5 words$word # 6 words$word)) option) of
     (SOME ((rd, imm))) =>
 sail2_state_monad$returnS (C_LUI (imm, rd))
 )
   else if ((case ((s1690_ s1226_0  :  (( 3 words$word #  6 words$word))option)) of
       SOME ((rsd, shamt)) => (shamt <> (0b000000w :  6 words$word))
     | _ => F
     )) then  (case (s1690_ s1226_0 : (( 3 words$word # 6 words$word)) option) of
     (SOME ((rsd, shamt))) =>
 sail2_state_monad$returnS (C_SRLI (shamt, rsd))
 )
   else if ((case ((s1702_ s1226_0  :  (( 3 words$word #  6 words$word))option)) of
       SOME ((rsd, shamt)) => (shamt <> (0b000000w :  6 words$word))
     | _ => F
     )) then  (case (s1702_ s1226_0 : (( 3 words$word # 6 words$word)) option) of
     (SOME ((rsd, shamt))) =>
 sail2_state_monad$returnS (C_SRAI (shamt, rsd))
 )
   else if ((case ((s1714_ s1226_0  :  (( 3 words$word #  6 words$word))option)) of
       SOME ((rsd, imm)) => T
     | _ => F
     )) then  (case (s1714_ s1226_0 : (( 3 words$word # 6 words$word)) option) of
     (SOME ((rsd, imm))) =>
 sail2_state_monad$returnS (C_ANDI (imm, rsd))
 )
   else if ((case ((s1726_ s1226_0  :  (( 3 words$word #  3 words$word))option)) of
       SOME ((rsd, rs2)) => T
     | _ => F
     )) then  (case (s1726_ s1226_0 : (( 3 words$word # 3 words$word)) option) of
     (SOME ((rsd, rs2))) =>
 sail2_state_monad$returnS (C_SUB (rsd, rs2))
 )
   else if ((case ((s1738_ s1226_0  :  (( 3 words$word #  3 words$word))option)) of
       SOME ((rsd, rs2)) => T
     | _ => F
     )) then  (case (s1738_ s1226_0 : (( 3 words$word # 3 words$word)) option) of
     (SOME ((rsd, rs2))) =>
 sail2_state_monad$returnS (C_XOR (rsd, rs2))
 )
   else if ((case ((s1750_ s1226_0  :  (( 3 words$word #  3 words$word))option)) of
       SOME ((rsd, rs2)) => T
     | _ => F
     )) then  (case (s1750_ s1226_0 : (( 3 words$word # 3 words$word)) option) of
     (SOME ((rsd, rs2))) =>
 sail2_state_monad$returnS (C_OR (rsd, rs2))
 )
   else if ((case ((s1762_ s1226_0  :  (( 3 words$word #  3 words$word))option)) of
       SOME ((rsd, rs2)) => T
     | _ => F
     )) then  (case (s1762_ s1226_0 : (( 3 words$word # 3 words$word)) option) of
     (SOME ((rsd, rs2))) =>
 sail2_state_monad$returnS (C_AND (rsd, rs2))
 )
   else if ((case ((s1774_ s1226_0  :  (( 3 words$word #  3 words$word))option)) of
       SOME ((rsd, rs2)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case (s1774_ s1226_0 : (( 3 words$word # 3 words$word)) option) of
     (SOME ((rsd, rs2))) =>
 sail2_state_monad$returnS (C_SUBW (rsd, rs2))
 )
   else if ((case ((s1786_ s1226_0  :  (( 3 words$word #  3 words$word))option)) of
       SOME ((rsd, rs2)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case (s1786_ s1226_0 : (( 3 words$word # 3 words$word)) option) of
     (SOME ((rsd, rs2))) =>
 sail2_state_monad$returnS (C_ADDW (rsd, rs2))
 )
   else if ((case ((s1798_ s1226_0  :  ( 11 words$word)option)) of
       SOME (imm) => T
     | _ => F
     )) then  (case (s1798_ s1226_0 : ( 11 words$word) option) of
     (SOME (imm)) =>
 sail2_state_monad$returnS (C_J imm)
 )
   else if ((case ((s1806_ s1226_0  :  (( 3 words$word #  8 words$word))option)) of
       SOME ((rs, imm)) => T
     | _ => F
     )) then  (case (s1806_ s1226_0 : (( 3 words$word # 8 words$word)) option) of
     (SOME ((rs, imm))) =>
 sail2_state_monad$returnS (C_BEQZ (imm, rs))
 )
   else if ((case ((s1818_ s1226_0  :  (( 3 words$word #  8 words$word))option)) of
       SOME ((rs, imm)) => T
     | _ => F
     )) then  (case (s1818_ s1226_0 : (( 3 words$word # 8 words$word)) option) of
     (SOME ((rs, imm))) =>
 sail2_state_monad$returnS (C_BNEZ (imm, rs))
 )
   else if ((case ((s1830_ s1226_0  :  (( 5 words$word #  6 words$word))option)) of
       SOME ((rsd, shamt)) => ((((shamt <> (0b000000w :  6 words$word)))) /\ (((rsd <> zreg))))
     | _ => F
     )) then  (case (s1830_ s1226_0 : (( 5 words$word # 6 words$word)) option) of
     (SOME ((rsd, shamt))) =>
 sail2_state_monad$returnS (C_SLLI (shamt, rsd))
 )
   else if ((case ((s1842_ s1226_0  :  (( 5 words$word #  6 words$word))option)) of
       SOME ((rd, uimm)) => (rd <> zreg)
     | _ => F
     )) then  (case (s1842_ s1226_0 : (( 5 words$word # 6 words$word)) option) of
     (SOME ((rd, uimm))) =>
 sail2_state_monad$returnS (C_LWSP (uimm, rd))
 )
   else if ((case ((s1854_ s1226_0  :  (( 5 words$word #  6 words$word))option)) of
       SOME ((rd, uimm)) => ((((rd <> zreg))) /\ ((((( 32 : int):ii) = (( 64 : int):ii)))))
     | _ => F
     )) then  (case (s1854_ s1226_0 : (( 5 words$word # 6 words$word)) option) of
     (SOME ((rd, uimm))) =>
 sail2_state_monad$returnS (C_LDSP (uimm, rd))
 )
   else if ((case ((s1866_ s1226_0  :  (( 5 words$word #  6 words$word))option)) of
       SOME ((rd, uimm)) => T
     | _ => F
     )) then  (case (s1866_ s1226_0 : (( 5 words$word # 6 words$word)) option) of
     (SOME ((rd, uimm))) =>
 sail2_state_monad$returnS (C_SWSP (uimm, rd))
 )
   else if ((case ((s1878_ s1226_0  :  (( 5 words$word #  6 words$word))option)) of
       SOME ((rs2, uimm)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case (s1878_ s1226_0 : (( 5 words$word # 6 words$word)) option) of
     (SOME ((rs2, uimm))) =>
 sail2_state_monad$returnS (C_SDSP (uimm, rs2))
 )
   else if ((case ((s1890_ s1226_0  :  ( 5 words$word)option)) of
       SOME (rs1) => (rs1 <> zreg)
     | _ => F
     )) then  (case (s1890_ s1226_0 : ( 5 words$word) option) of
     (SOME (rs1)) =>
 sail2_state_monad$returnS (C_JR rs1)
 )
   else if ((case ((s1898_ s1226_0  :  ( 5 words$word)option)) of
       SOME (rs1) => (rs1 <> zreg)
     | _ => F
     )) then  (case (s1898_ s1226_0 : ( 5 words$word) option) of
     (SOME (rs1)) =>
 sail2_state_monad$returnS (C_JALR rs1)
 )
   else if ((case ((s1906_ s1226_0  :  (( 5 words$word #  5 words$word))option)) of
       SOME ((rd, rs2)) => ((((rd <> zreg))) /\ (((rs2 <> zreg))))
     | _ => F
     )) then  (case (s1906_ s1226_0 : (( 5 words$word # 5 words$word)) option) of
     (SOME ((rd, rs2))) =>
 sail2_state_monad$returnS (C_MV (rd, rs2))
 )
   else if (((s1226_0 = "c.ebreak"))) then sail2_state_monad$returnS (C_EBREAK () )
   else if ((case ((s1918_ s1226_0  :  (( 5 words$word #  5 words$word))option)) of
       SOME ((rsd, rs2)) => ((((rsd <> zreg))) /\ (((rs2 <> zreg))))
     | _ => F
     )) then  (case (s1918_ s1226_0 : (( 5 words$word # 5 words$word)) option) of
     (SOME ((rsd, rs2))) =>
 sail2_state_monad$returnS (C_ADD (rsd, rs2))
 )
   else if ((case ((s1930_ s1226_0
                     :  ((bool # bool # bool #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((high, signed1, signed2, rd, rs1, rs2)) => T
     | _ => F
     )) then  (case
 (s1930_ s1226_0 : (( bool # bool # bool # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((high, signed1, signed2, rd, rs1, rs2))) =>
 sail2_state_monad$returnS (MUL (rs2, rs1, rd, high, signed1, signed2))
 )
   else if ((case ((s1947_ s1226_0  :  ((bool #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((s, rd, rs1, rs2)) => T
     | _ => F
     )) then  (case
 (s1947_ s1226_0 : (( bool # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((s, rd, rs1, rs2))) =>
 sail2_state_monad$returnS (DIV0 (rs2, rs1, rd, s))
 )
   else if ((case ((s1965_ s1226_0  :  ((bool #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((s, rd, rs1, rs2)) => T
     | _ => F
     )) then  (case
 (s1965_ s1226_0 : (( bool # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((s, rd, rs1, rs2))) =>
 sail2_state_monad$returnS (REM (rs2, rs1, rd, s))
 )
   else if ((case ((s1983_ s1226_0  :  (( 5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((rd, rs1, rs2)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case (s1983_ s1226_0 : (( 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((rd, rs1, rs2))) =>
 sail2_state_monad$returnS (MULW (rs2, rs1, rd))
 )
   else if ((case ((s1999_ s1226_0  :  ((bool #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((s, rd, rs1, rs2)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case
 (s1999_ s1226_0 : (( bool # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((s, rd, rs1, rs2))) =>
 sail2_state_monad$returnS (DIVW (rs2, rs1, rd, s))
 )
   else if ((case ((s2018_ s1226_0  :  ((bool #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((s, rd, rs1, rs2)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case
 (s2018_ s1226_0 : (( bool # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((s, rd, rs1, rs2))) =>
 sail2_state_monad$returnS (REMW (rs2, rs1, rd, s))
 )
   else if ((case ((s2037_ s1226_0  :  ((csrop #  5 words$word #  12 words$word #  5 words$word))option)) of
       SOME ((op, rd, csr, rs1)) => T
     | _ => F
     )) then  (case
 (s2037_ s1226_0 : (( csrop # 5 words$word # 12 words$word # 5 words$word)) option) of
     (SOME ((op, rd, csr, rs1))) =>
 sail2_state_monad$returnS (CSR (csr, rs1, rd, T, op))
 )
   else if ((case ((s2055_ s1226_0  :  ((csrop #  5 words$word #  12 words$word #  5 words$word))option)) of
       SOME ((op, rd, csr, rs1)) => T
     | _ => F
     )) then  (case
 (s2055_ s1226_0 : (( csrop # 5 words$word # 12 words$word # 5 words$word)) option) of
     (SOME ((op, rd, csr, rs1))) =>
 sail2_state_monad$returnS (CSR (csr, rs1, rd, F, op))
 )
   else if (((s1226_0 = "uret"))) then sail2_state_monad$returnS (URET () )
   else if ((case ((s2072_ s1226_0  :  ( 6 words$word)option)) of
       SOME (imm) => T
     | _ => F
     )) then  (case (s2072_ s1226_0 : ( 6 words$word) option) of
     (SOME (imm)) =>
 sail2_state_monad$returnS (C_NOP_HINT imm)
 )
   else if ((case ((s2078_ s1226_0  :  ( 5 words$word)option)) of
       SOME (rsd) => (rsd <> zreg)
     | _ => F
     )) then  (case (s2078_ s1226_0 : ( 5 words$word) option) of
     (SOME (rsd)) =>
 sail2_state_monad$returnS (C_ADDI_HINT rsd)
 )
   else if ((case ((s2084_ s1226_0  :  ( 6 words$word)option)) of
       SOME (imm) => T
     | _ => F
     )) then  (case (s2084_ s1226_0 : ( 6 words$word) option) of
     (SOME (imm)) =>
 sail2_state_monad$returnS (C_LI_HINT imm)
 )
   else if ((case ((s2090_ s1226_0  :  ( 6 words$word)option)) of
       SOME (imm) => (imm <> (0b000000w :  6 words$word))
     | _ => F
     )) then  (case (s2090_ s1226_0 : ( 6 words$word) option) of
     (SOME (imm)) =>
 sail2_state_monad$returnS (C_LUI_HINT imm)
 )
   else if ((case ((s2096_ s1226_0  :  ( 5 words$word)option)) of
       SOME (rs2) => (rs2 <> zreg)
     | _ => F
     )) then  (case (s2096_ s1226_0 : ( 5 words$word) option) of
     (SOME (rs2)) =>
 sail2_state_monad$returnS (C_MV_HINT rs2)
 )
   else if ((case ((s2102_ s1226_0  :  ( 5 words$word)option)) of
       SOME (rs2) => (rs2 <> zreg)
     | _ => F
     )) then  (case (s2102_ s1226_0 : ( 5 words$word) option) of
     (SOME (rs2)) =>
 sail2_state_monad$returnS (C_ADD_HINT rs2)
 )
   else if ((case ((s2108_ s1226_0  :  (( 5 words$word #  6 words$word))option)) of
       SOME ((rsd, shamt)) => ((((shamt = (0b000000w :  6 words$word)))) \/ (((rsd = zreg))))
     | _ => F
     )) then  (case (s2108_ s1226_0 : (( 5 words$word # 6 words$word)) option) of
     (SOME ((rsd, shamt))) =>
 sail2_state_monad$returnS (C_SLLI_HINT (shamt, rsd))
 )
   else if ((case ((s2117_ s1226_0  :  ( 3 words$word)option)) of
       SOME (rsd) => T
     | _ => F
     )) then  (case (s2117_ s1226_0 : ( 3 words$word) option) of
     (SOME (rsd)) =>
 sail2_state_monad$returnS (C_SRLI_HINT rsd)
 )
   else if ((case ((s2123_ s1226_0  :  ( 3 words$word)option)) of
       SOME (rsd) => T
     | _ => F
     )) then  (case (s2123_ s1226_0 : ( 3 words$word) option) of
     (SOME (rsd)) =>
 sail2_state_monad$returnS (C_SRAI_HINT rsd)
 )
   else if ((case ((s2129_ s1226_0
                     :  (( 4 words$word #  4 words$word #  5 words$word #  5 words$word #  4 words$word))option)) of
       SOME ((pred, succ, rs, rd, fm)) =>
        (((((((fm <> (0x0w :  4 words$word)))) /\ (((fm <> (0x8w :  4 words$word))))))) \/ ((((((rs <> (0b00000w :  5 words$word)))) \/ (((rd <> (0b00000w :  5 words$word))))))))
     | _ => F
     )) then  (case
 (s2129_ s1226_0 : (( 4 words$word # 4 words$word # 5 words$word # 5 words$word # 4 words$word)) option) of
     (SOME ((pred, succ, rs, rd, fm))) =>
 sail2_state_monad$returnS (FENCE_RESERVED (fm, pred, succ, rs, rd))
 )
   else if ((case ((s2147_ s1226_0  :  (( 5 words$word #  5 words$word #  12 words$word))option)) of
       SOME ((rd, rs, imm)) =>
        ((((imm <> (0x000w :  12 words$word)))) \/ ((((((rs <> zreg))) \/ (((rd <> zreg)))))))
     | _ => F
     )) then  (case (s2147_ s1226_0 : (( 5 words$word # 5 words$word # 12 words$word)) option) of
     (SOME ((rd, rs, imm))) =>
 sail2_state_monad$returnS (FENCEI_RESERVED (imm, rs, rd))
 )
   else if ((case ((s2159_ s1226_0  :  ((word_width #  5 words$word #  12 words$word #  5 words$word))option)) of
       SOME ((width, rd, imm, rs1)) => T
     | _ => F
     )) then  (case
 (s2159_ s1226_0 : (( word_width # 5 words$word # 12 words$word # 5 words$word)) option) of
     (SOME ((width, rd, imm, rs1))) =>
 sail2_state_monad$returnS (LOAD_FP (imm, rs1, rd, width))
 )
   else if ((case ((s2183_ s1226_0  :  ((word_width #  5 words$word #  12 words$word #  5 words$word))option)) of
       SOME ((width, rs2, imm, rs1)) => T
     | _ => F
     )) then  (case
 (s2183_ s1226_0 : (( word_width # 5 words$word # 12 words$word # 5 words$word)) option) of
     (SOME ((width, rs2, imm, rs1))) =>
 sail2_state_monad$returnS (STORE_FP (imm, rs2, rs1, width))
 )
   else if ((case ((s2207_ s1226_0
                     :  ((f_madd_op_S #  5 words$word #  5 words$word #  5 words$word #  5 words$word # rounding_mode))option)) of
       SOME ((op, rd, rs1, rs2, rs3, rm)) => T
     | _ => F
     )) then  (case
 (s2207_ s1226_0
 : (( f_madd_op_S # 5 words$word # 5 words$word # 5 words$word # 5 words$word # rounding_mode)) option) of
     (SOME ((op, rd, rs1, rs2, rs3, rm))) =>
 sail2_state_monad$returnS (F_MADD_TYPE_S (rs3, rs2, rs1, rm, rd, op))
 )
   else if ((case ((s2232_ s1226_0
                     :  ((f_bin_rm_op_S #  5 words$word #  5 words$word #  5 words$word # rounding_mode))option)) of
       SOME ((op, rd, rs1, rs2, rm)) => T
     | _ => F
     )) then  (case
 (s2232_ s1226_0
 : (( f_bin_rm_op_S # 5 words$word # 5 words$word # 5 words$word # rounding_mode)) option) of
     (SOME ((op, rd, rs1, rs2, rm))) =>
 sail2_state_monad$returnS (F_BIN_RM_TYPE_S (rs2, rs1, rm, rd, op))
 )
   else if ((case ((s2253_ s1226_0
                     :  ((f_un_rm_op_S #  5 words$word #  5 words$word # rounding_mode))option)) of
       SOME ((FSQRT_S, rd, rs1, rm)) => T
     | _ => F
     )) then  (case
 (s2253_ s1226_0 : (( f_un_rm_op_S # 5 words$word # 5 words$word # rounding_mode)) option) of
     (SOME ((FSQRT_S, rd, rs1, rm))) =>
 sail2_state_monad$returnS (F_UN_RM_TYPE_S (rs1, rm, rd, FSQRT_S))
 )
   else if ((case ((s2270_ s1226_0
                     :  ((f_un_rm_op_S #  5 words$word #  5 words$word # rounding_mode))option)) of
       SOME ((FCVT_W_S, rd, rs1, rm)) => T
     | _ => F
     )) then  (case
 (s2270_ s1226_0 : (( f_un_rm_op_S # 5 words$word # 5 words$word # rounding_mode)) option) of
     (SOME ((FCVT_W_S, rd, rs1, rm))) =>
 sail2_state_monad$returnS (F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_W_S))
 )
   else if ((case ((s2287_ s1226_0
                     :  ((f_un_rm_op_S #  5 words$word #  5 words$word # rounding_mode))option)) of
       SOME ((FCVT_WU_S, rd, rs1, rm)) => T
     | _ => F
     )) then  (case
 (s2287_ s1226_0 : (( f_un_rm_op_S # 5 words$word # 5 words$word # rounding_mode)) option) of
     (SOME ((FCVT_WU_S, rd, rs1, rm))) =>
 sail2_state_monad$returnS (F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_WU_S))
 )
   else if ((case ((s2304_ s1226_0
                     :  ((f_un_rm_op_S #  5 words$word #  5 words$word # rounding_mode))option)) of
       SOME ((FCVT_S_W, rd, rs1, rm)) => T
     | _ => F
     )) then  (case
 (s2304_ s1226_0 : (( f_un_rm_op_S # 5 words$word # 5 words$word # rounding_mode)) option) of
     (SOME ((FCVT_S_W, rd, rs1, rm))) =>
 sail2_state_monad$returnS (F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_S_W))
 )
   else if ((case ((s2321_ s1226_0
                     :  ((f_un_rm_op_S #  5 words$word #  5 words$word # rounding_mode))option)) of
       SOME ((FCVT_S_WU, rd, rs1, rm)) => T
     | _ => F
     )) then  (case
 (s2321_ s1226_0 : (( f_un_rm_op_S # 5 words$word # 5 words$word # rounding_mode)) option) of
     (SOME ((FCVT_S_WU, rd, rs1, rm))) =>
 sail2_state_monad$returnS (F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_S_WU))
 )
   else if ((case ((s2338_ s1226_0
                     :  ((f_un_rm_op_S #  5 words$word #  5 words$word # rounding_mode))option)) of
       SOME ((FCVT_L_S, rd, rs1, rm)) => T
     | _ => F
     )) then  (case
 (s2338_ s1226_0 : (( f_un_rm_op_S # 5 words$word # 5 words$word # rounding_mode)) option) of
     (SOME ((FCVT_L_S, rd, rs1, rm))) =>
 sail2_state_monad$returnS (F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_L_S))
 )
   else if ((case ((s2355_ s1226_0
                     :  ((f_un_rm_op_S #  5 words$word #  5 words$word # rounding_mode))option)) of
       SOME ((FCVT_LU_S, rd, rs1, rm)) => T
     | _ => F
     )) then  (case
 (s2355_ s1226_0 : (( f_un_rm_op_S # 5 words$word # 5 words$word # rounding_mode)) option) of
     (SOME ((FCVT_LU_S, rd, rs1, rm))) =>
 sail2_state_monad$returnS (F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_LU_S))
 )
   else if ((case ((s2372_ s1226_0
                     :  ((f_un_rm_op_S #  5 words$word #  5 words$word # rounding_mode))option)) of
       SOME ((FCVT_S_L, rd, rs1, rm)) => T
     | _ => F
     )) then  (case
 (s2372_ s1226_0 : (( f_un_rm_op_S # 5 words$word # 5 words$word # rounding_mode)) option) of
     (SOME ((FCVT_S_L, rd, rs1, rm))) =>
 sail2_state_monad$returnS (F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_S_L))
 )
   else if ((case ((s2389_ s1226_0
                     :  ((f_un_rm_op_S #  5 words$word #  5 words$word # rounding_mode))option)) of
       SOME ((FCVT_S_LU, rd, rs1, rm)) => T
     | _ => F
     )) then  (case
 (s2389_ s1226_0 : (( f_un_rm_op_S # 5 words$word # 5 words$word # rounding_mode)) option) of
     (SOME ((FCVT_S_LU, rd, rs1, rm))) =>
 sail2_state_monad$returnS (F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_S_LU))
 )
   else if ((case ((s2406_ s1226_0  :  ((f_bin_op_S #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((FSGNJ_S, rd, rs1, rs2)) => T
     | _ => F
     )) then  (case
 (s2406_ s1226_0 : (( f_bin_op_S # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((FSGNJ_S, rd, rs1, rs2))) =>
 sail2_state_monad$returnS (F_BIN_TYPE_S (rs2, rs1, rd, FSGNJ_S))
 )
   else if ((case ((s2423_ s1226_0  :  ((f_bin_op_S #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((FSGNJN_S, rd, rs1, rs2)) => T
     | _ => F
     )) then  (case
 (s2423_ s1226_0 : (( f_bin_op_S # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((FSGNJN_S, rd, rs1, rs2))) =>
 sail2_state_monad$returnS (F_BIN_TYPE_S (rs2, rs1, rd, FSGNJN_S))
 )
   else if ((case ((s2440_ s1226_0  :  ((f_bin_op_S #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((FSGNJX_S, rd, rs1, rs2)) => T
     | _ => F
     )) then  (case
 (s2440_ s1226_0 : (( f_bin_op_S # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((FSGNJX_S, rd, rs1, rs2))) =>
 sail2_state_monad$returnS (F_BIN_TYPE_S (rs2, rs1, rd, FSGNJX_S))
 )
   else if ((case ((s2457_ s1226_0  :  ((f_bin_op_S #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((FMIN_S, rd, rs1, rs2)) => T
     | _ => F
     )) then  (case
 (s2457_ s1226_0 : (( f_bin_op_S # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((FMIN_S, rd, rs1, rs2))) =>
 sail2_state_monad$returnS (F_BIN_TYPE_S (rs2, rs1, rd, FMIN_S))
 )
   else if ((case ((s2474_ s1226_0  :  ((f_bin_op_S #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((FMAX_S, rd, rs1, rs2)) => T
     | _ => F
     )) then  (case
 (s2474_ s1226_0 : (( f_bin_op_S # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((FMAX_S, rd, rs1, rs2))) =>
 sail2_state_monad$returnS (F_BIN_TYPE_S (rs2, rs1, rd, FMAX_S))
 )
   else if ((case ((s2491_ s1226_0  :  ((f_bin_op_S #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((FEQ_S, rd, rs1, rs2)) => T
     | _ => F
     )) then  (case
 (s2491_ s1226_0 : (( f_bin_op_S # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((FEQ_S, rd, rs1, rs2))) =>
 sail2_state_monad$returnS (F_BIN_TYPE_S (rs2, rs1, rd, FEQ_S))
 )
   else if ((case ((s2508_ s1226_0  :  ((f_bin_op_S #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((FLT_S, rd, rs1, rs2)) => T
     | _ => F
     )) then  (case
 (s2508_ s1226_0 : (( f_bin_op_S # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((FLT_S, rd, rs1, rs2))) =>
 sail2_state_monad$returnS (F_BIN_TYPE_S (rs2, rs1, rd, FLT_S))
 )
   else if ((case ((s2525_ s1226_0  :  ((f_bin_op_S #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((FLE_S, rd, rs1, rs2)) => T
     | _ => F
     )) then  (case
 (s2525_ s1226_0 : (( f_bin_op_S # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((FLE_S, rd, rs1, rs2))) =>
 sail2_state_monad$returnS (F_BIN_TYPE_S (rs2, rs1, rd, FLE_S))
 )
   else if ((case ((s2542_ s1226_0  :  ((f_un_op_S #  5 words$word #  5 words$word))option)) of
       SOME ((FMV_X_W, rd, rs1)) => T
     | _ => F
     )) then  (case
 (s2542_ s1226_0 : (( f_un_op_S # 5 words$word # 5 words$word)) option) of
     (SOME ((FMV_X_W, rd, rs1))) =>
 sail2_state_monad$returnS (F_UN_TYPE_S (rs1, rd, FMV_X_W))
 )
   else if ((case ((s2555_ s1226_0  :  ((f_un_op_S #  5 words$word #  5 words$word))option)) of
       SOME ((FMV_W_X, rd, rs1)) => T
     | _ => F
     )) then  (case
 (s2555_ s1226_0 : (( f_un_op_S # 5 words$word # 5 words$word)) option) of
     (SOME ((FMV_W_X, rd, rs1))) =>
 sail2_state_monad$returnS (F_UN_TYPE_S (rs1, rd, FMV_W_X))
 )
   else if ((case ((s2568_ s1226_0  :  ((f_un_op_S #  5 words$word #  5 words$word))option)) of
       SOME ((FCLASS_S, rd, rs1)) => T
     | _ => F
     )) then  (case
 (s2568_ s1226_0 : (( f_un_op_S # 5 words$word # 5 words$word)) option) of
     (SOME ((FCLASS_S, rd, rs1))) =>
 sail2_state_monad$returnS (F_UN_TYPE_S (rs1, rd, FCLASS_S))
 )
   else if ((case ((s2581_ s1226_0  :  (( 5 words$word #  6 words$word))option)) of
       SOME ((rd, imm)) => ((( 32 : int):ii) = (( 32 : int):ii))
     | _ => F
     )) then  (case (s2581_ s1226_0 : (( 5 words$word # 6 words$word)) option) of
     (SOME ((rd, imm))) =>
 sail2_state_monad$returnS (C_FLWSP (imm, rd))
 )
   else if ((case ((s2593_ s1226_0  :  (( 5 words$word #  6 words$word))option)) of
       SOME ((rd, uimm)) => ((( 32 : int):ii) = (( 32 : int):ii))
     | _ => F
     )) then  (case (s2593_ s1226_0 : (( 5 words$word # 6 words$word)) option) of
     (SOME ((rd, uimm))) =>
 sail2_state_monad$returnS (C_FSWSP (uimm, rd))
 )
   else if ((case ((s2605_ s1226_0  :  (( 3 words$word #  3 words$word #  5 words$word))option)) of
       SOME ((rdc, rsc, uimm)) => ((( 32 : int):ii) = (( 32 : int):ii))
     | _ => F
     )) then  (case
 (s2605_ s1226_0 : (( 3 words$word # 3 words$word # 5 words$word)) option) of
     (SOME ((rdc, rsc, uimm))) =>
 sail2_state_monad$returnS (C_FLW (uimm, rsc, rdc))
 )
   else if ((case ((s2621_ s1226_0  :  (( 3 words$word #  3 words$word #  5 words$word))option)) of
       SOME ((rsc1, rsc2, uimm)) => ((( 32 : int):ii) = (( 32 : int):ii))
     | _ => F
     )) then  (case
 (s2621_ s1226_0 : (( 3 words$word # 3 words$word # 5 words$word)) option) of
     (SOME ((rsc1, rsc2, uimm))) =>
 sail2_state_monad$returnS (C_FSW (uimm, rsc1, rsc2))
 )
   else if ((case ((s2637_ s1226_0  :  ( 32 words$word)option)) of   SOME (s) => T | _ => F ))
   then  (case (s2637_ s1226_0 : ( 32 words$word) option) of
     (SOME (s)) =>
 sail2_state_monad$returnS (ILLEGAL s)
 )
   else if ((case ((s2645_ s1226_0  :  ( 16 words$word)option)) of   SOME (s) => T | _ => F ))
   then  (case (s2645_ s1226_0 : ( 16 words$word) option) of
     (SOME (s)) =>
 sail2_state_monad$returnS (C_ILLEGAL s)
 )
   else sail2_state_monad$seqS (sail2_state_monad$assert_expS F "Pattern match failure at unknown location") (sail2_state_monad$exitS () )))`;


val _ = Define `
 ((assembly_forwards_matches:ast -> bool) arg_= 
  ((case arg_ of
         UTYPE ((imm, rd, op)) => T
     | RISCV_JAL ((imm, rd)) => T
     | RISCV_JALR ((imm, rs1, rd)) => T
     | BTYPE ((imm, rs2, rs1, op)) => T
     | ITYPE ((imm, rs1, rd, op)) => T
     | SHIFTIOP ((shamt, rs1, rd, op)) => T
     | RTYPE ((rs2, rs1, rd, op)) => T
     | LOAD ((imm, rs1, rd, is_unsigned, size1, aq, rl)) => T
     | STORE ((imm, rs2, rs1, size1, aq, rl)) => T
     | ADDIW ((imm, rs1, rd)) =>
   if ((((( 32 : int): ii) = (( 64 : int): ii)))) then T else F
     | SHIFTW ((shamt, rs1, rd, op)) =>
   if ((((( 32 : int): ii) = (( 64 : int): ii)))) then T else F
     | RTYPEW ((rs2, rs1, rd, op)) =>
   if ((((( 32 : int): ii) = (( 64 : int): ii)))) then T else F
     | SHIFTIWOP ((shamt, rs1, rd, op)) =>
   if ((((( 32 : int): ii) = (( 64 : int): ii)))) then T else F
     | FENCE ((pred, succ)) => T
     | FENCE_TSO ((pred, succ)) => T
     | FENCEI (() ) => T
     | ECALL (() ) => T
     | MRET (() ) => T
     | SRET (() ) => T
     | EBREAK (() ) => T
     | WFI (() ) => T
     | SFENCE_VMA ((rs1, rs2)) => T
     | LOADRES ((aq, rl, rs1, size1, rd)) => T
     | STORECON ((aq, rl, rs2, rs1, size1, rd)) => T
     | AMO ((op, aq, rl, rs2, rs1, width, rd)) => T
     | C_NOP (() ) => T
     | C_ADDI4SPN ((rdc, nzimm)) =>
   if (((nzimm <> (0x00w : 8 words$word)))) then T else F
     | C_LW ((uimm, rsc, rdc)) => T
     | C_LD ((uimm, rsc, rdc)) =>
   if ((((( 32 : int): ii) = (( 64 : int): ii)))) then T else F
     | C_SW ((uimm, rsc1, rsc2)) => T
     | C_SD ((uimm, rsc1, rsc2)) =>
   if ((((( 32 : int): ii) = (( 64 : int): ii)))) then T else F
     | C_ADDI ((nzi, rsd)) =>
   if ((((((nzi <> (0b000000w : 6 words$word)))) /\ (((rsd <> zreg)))))) then
     T else F
     | C_JAL (imm) =>
   if ((((( 32 : int): ii) = (( 32 : int): ii)))) then T else F
     | C_ADDIW ((imm, rsd)) =>
   if ((((( 32 : int): ii) = (( 64 : int): ii)))) then T else F
     | C_LI ((imm, rd)) =>
   if (((rd <> zreg))) then T else F
     | C_ADDI16SP (imm) =>
   if (((imm <> (0b000000w : 6 words$word)))) then T else F
     | C_LUI ((imm, rd)) =>
   if ((((((rd <> zreg))) /\
           ((((((rd <> sp))) /\ (((imm <> (0b000000w : 6 words$word)))))))))) then
     T else F
     | C_SRLI ((shamt, rsd)) =>
   if (((shamt <> (0b000000w : 6 words$word)))) then T else F
     | C_SRAI ((shamt, rsd)) =>
   if (((shamt <> (0b000000w : 6 words$word)))) then T else F
     | C_ANDI ((imm, rsd)) => T
     | C_SUB ((rsd, rs2)) => T
     | C_XOR ((rsd, rs2)) => T
     | C_OR ((rsd, rs2)) => T
     | C_AND ((rsd, rs2)) => T
     | C_SUBW ((rsd, rs2)) =>
   if ((((( 32 : int): ii) = (( 64 : int): ii)))) then T else F
     | C_ADDW ((rsd, rs2)) =>
   if ((((( 32 : int): ii) = (( 64 : int): ii)))) then T else F
     | C_J (imm) => T
     | C_BEQZ ((imm, rs)) => T
     | C_BNEZ ((imm, rs)) => T
     | C_SLLI ((shamt, rsd)) =>
   if ((((((shamt <> (0b000000w : 6 words$word)))) /\ (((rsd <> zreg)))))) then
     T else F
     | C_LWSP ((uimm, rd)) =>
   if (((rd <> zreg))) then T else F
     | C_LDSP ((uimm, rd)) =>
   if ((((((rd <> zreg))) /\ ((((( 32 : int): ii) = (( 64 : int): ii))))))) then
     T else F
     | C_SWSP ((uimm, rd)) => T
     | C_SDSP ((uimm, rs2)) =>
   if ((((( 32 : int): ii) = (( 64 : int): ii)))) then T else F
     | C_JR (rs1) =>
   if (((rs1 <> zreg))) then T else F
     | C_JALR (rs1) =>
   if (((rs1 <> zreg))) then T else F
     | C_MV ((rd, rs2)) =>
   if ((((((rd <> zreg))) /\ (((rs2 <> zreg)))))) then T else F
     | C_EBREAK (() ) => T
     | C_ADD ((rsd, rs2)) =>
   if ((((((rsd <> zreg))) /\ (((rs2 <> zreg)))))) then T else F
     | MUL ((rs2, rs1, rd, high, signed1, signed2)) => T
     | DIV0 ((rs2, rs1, rd, s)) => T
     | REM ((rs2, rs1, rd, s)) => T
     | MULW ((rs2, rs1, rd)) =>
   if ((((( 32 : int): ii) = (( 64 : int): ii)))) then T else F
     | DIVW ((rs2, rs1, rd, s)) =>
   if ((((( 32 : int): ii) = (( 64 : int): ii)))) then T else F
     | REMW ((rs2, rs1, rd, s)) =>
   if ((((( 32 : int): ii) = (( 64 : int): ii)))) then T else F
     | CSR ((csr, rs1, rd, T, op)) => T
     | CSR ((csr, rs1, rd, F, op)) => T
     | URET (() ) => T
     | C_NOP_HINT (imm) => T
     | C_ADDI_HINT (rsd) =>
   if (((rsd <> zreg))) then T else F
     | C_LI_HINT (imm) => T
     | C_LUI_HINT (imm) =>
   if (((imm <> (0b000000w : 6 words$word)))) then T else F
     | C_MV_HINT (rs2) =>
   if (((rs2 <> zreg))) then T else F
     | C_ADD_HINT (rs2) =>
   if (((rs2 <> zreg))) then T else F
     | C_SLLI_HINT ((shamt, rsd)) =>
   if ((((((shamt = (0b000000w : 6 words$word)))) \/ (((rsd = zreg)))))) then
     T else F
     | C_SRLI_HINT (rsd) => T
     | C_SRAI_HINT (rsd) => T
     | FENCE_RESERVED ((fm, pred, succ, rs, rd)) =>
   if (((((((((fm <> (0x0w : 4 words$word)))) /\
              (((fm <> (0x8w : 4 words$word))))))) \/
           ((((((rs <> (0b00000w : 5 words$word)))) \/
                (((rd <> (0b00000w : 5 words$word)))))))))) then T else 
   F
     | FENCEI_RESERVED ((imm, rs, rd)) =>
   if ((((((imm <> (0x000w : 12 words$word)))) \/
           ((((((rs <> zreg))) \/ (((rd <> zreg))))))))) then T else 
   F
     | LOAD_FP ((imm, rs1, rd, width)) => T
     | STORE_FP ((imm, rs2, rs1, width)) => T
     | F_MADD_TYPE_S ((rs3, rs2, rs1, rm, rd, op)) => T
     | F_BIN_RM_TYPE_S ((rs2, rs1, rm, rd, op)) => T
     | F_UN_RM_TYPE_S ((rs1, rm, rd, FSQRT_S)) => T
     | F_UN_RM_TYPE_S ((rs1, rm, rd, FCVT_W_S)) => T
     | F_UN_RM_TYPE_S ((rs1, rm, rd, FCVT_WU_S)) => T
     | F_UN_RM_TYPE_S ((rs1, rm, rd, FCVT_S_W)) => T
     | F_UN_RM_TYPE_S ((rs1, rm, rd, FCVT_S_WU)) => T
     | F_UN_RM_TYPE_S ((rs1, rm, rd, FCVT_L_S)) => T
     | F_UN_RM_TYPE_S ((rs1, rm, rd, FCVT_LU_S)) => T
     | F_UN_RM_TYPE_S ((rs1, rm, rd, FCVT_S_L)) => T
     | F_UN_RM_TYPE_S ((rs1, rm, rd, FCVT_S_LU)) => T
     | F_BIN_TYPE_S ((rs2, rs1, rd, FSGNJ_S)) => T
     | F_BIN_TYPE_S ((rs2, rs1, rd, FSGNJN_S)) => T
     | F_BIN_TYPE_S ((rs2, rs1, rd, FSGNJX_S)) => T
     | F_BIN_TYPE_S ((rs2, rs1, rd, FMIN_S)) => T
     | F_BIN_TYPE_S ((rs2, rs1, rd, FMAX_S)) => T
     | F_BIN_TYPE_S ((rs2, rs1, rd, FEQ_S)) => T
     | F_BIN_TYPE_S ((rs2, rs1, rd, FLT_S)) => T
     | F_BIN_TYPE_S ((rs2, rs1, rd, FLE_S)) => T
     | F_UN_TYPE_S ((rs1, rd, FMV_X_W)) => T
     | F_UN_TYPE_S ((rs1, rd, FMV_W_X)) => T
     | F_UN_TYPE_S ((rs1, rd, FCLASS_S)) => T
     | C_FLWSP ((imm, rd)) =>
   if ((((( 32 : int): ii) = (( 32 : int): ii)))) then T else F
     | C_FSWSP ((uimm, rd)) =>
   if ((((( 32 : int): ii) = (( 32 : int): ii)))) then T else F
     | C_FLW ((uimm, rsc, rdc)) =>
   if ((((( 32 : int): ii) = (( 32 : int): ii)))) then T else F
     | C_FSW ((uimm, rsc1, rsc2)) =>
   if ((((( 32 : int): ii) = (( 32 : int): ii)))) then T else F
     | ILLEGAL (s) => T
     | C_ILLEGAL (s) => T
   )))`;


(*val _s4084_ : string -> maybe (mword ty16)*)

val _ = Define `
 ((s4084_:string ->((16)words$word)option) s4085_0=
    (let s4086_0 = s4085_0 in
   if ((string_startswith s4086_0 "c.illegal")) then  
  (case ((string_drop s4086_0 ((string_length "c.illegal")))) of
        s4087_0 =>
  (case ((spc_matches_prefix0 s4087_0)) of
        SOME ((() , s4088_0)) =>
  (case ((string_drop s4087_0 s4088_0)) of
        s4089_0 =>
  (case ((hex_bits_16_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s4089_0 : (( 16 words$word # ii)) option)) of
        SOME ((s, s4090_0)) =>
  let p0_ = (string_drop s4089_0 s4090_0) in
  if (((p0_ = ""))) then SOME s else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4076_ : string -> maybe (mword ty32)*)

val _ = Define `
 ((s4076_:string ->((32)words$word)option) s4077_0=
    (let s4078_0 = s4077_0 in
   if ((string_startswith s4078_0 "illegal")) then  
  (case ((string_drop s4078_0 ((string_length "illegal")))) of
        s4079_0 =>
  (case ((spc_matches_prefix0 s4079_0)) of
        SOME ((() , s4080_0)) =>
  (case ((string_drop s4079_0 s4080_0)) of
        s4081_0 =>
  (case ((hex_bits_32_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s4081_0 : (( 32 words$word # ii)) option)) of
        SOME ((s, s4082_0)) =>
  let p0_ = (string_drop s4081_0 s4082_0) in
  if (((p0_ = ""))) then SOME s else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4060_ : string -> maybe ((mword ty3 * mword ty3 * mword ty5))*)

val _ = Define `
 ((s4060_:string ->((3)words$word#(3)words$word#(5)words$word)option) s4061_0=
    (let s4062_0 = s4061_0 in
   if ((string_startswith s4062_0 "c.fsw")) then  
  (case ((string_drop s4062_0 ((string_length "c.fsw")))) of
        s4063_0 =>
  (case ((spc_matches_prefix0 s4063_0)) of
        SOME ((() , s4064_0)) =>
  (case ((string_drop s4063_0 s4064_0)) of
        s4065_0 =>
  (case ((creg_name_matches_prefix s4065_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsc1, s4066_0)) =>
  (case ((string_drop s4065_0 s4066_0)) of
        s4067_0 =>
  (case ((sep_matches_prefix s4067_0)) of
        SOME ((() , s4068_0)) =>
  (case ((string_drop s4067_0 s4068_0)) of
        s4069_0 =>
  (case ((creg_name_matches_prefix s4069_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsc2, s4070_0)) =>
  (case ((string_drop s4069_0 s4070_0)) of
        s4071_0 =>
  (case ((sep_matches_prefix s4071_0)) of
        SOME ((() , s4072_0)) =>
  (case ((string_drop s4071_0 s4072_0)) of
        s4073_0 =>
  (case ((hex_bits_7_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s4073_0
         : (( 7 words$word # ii)) option)) of
        SOME ((v__1196, s4074_0)) =>
  if (((((subrange_vec_dec v__1196 (( 1 : int): ii) (( 0 : int): ii)
         : 2 words$word)) = (0b00w : 2 words$word)))) then
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1196 (( 6 : int): ii) (( 2 : int): ii) : 5 words$word)) in
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1196 (( 6 : int): ii) (( 2 : int): ii) : 5 words$word)) in
    let p0_ = (string_drop s4073_0 s4074_0) in
    if (((p0_ = ""))) then SOME (rsc1, rsc2, uimm) else NONE else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4044_ : string -> maybe ((mword ty3 * mword ty3 * mword ty5))*)

val _ = Define `
 ((s4044_:string ->((3)words$word#(3)words$word#(5)words$word)option) s4045_0=
    (let s4046_0 = s4045_0 in
   if ((string_startswith s4046_0 "c.flw")) then  
  (case ((string_drop s4046_0 ((string_length "c.flw")))) of
        s4047_0 =>
  (case ((spc_matches_prefix0 s4047_0)) of
        SOME ((() , s4048_0)) =>
  (case ((string_drop s4047_0 s4048_0)) of
        s4049_0 =>
  (case ((creg_name_matches_prefix s4049_0 : (( 3 words$word # ii)) option)) of
        SOME ((rdc, s4050_0)) =>
  (case ((string_drop s4049_0 s4050_0)) of
        s4051_0 =>
  (case ((sep_matches_prefix s4051_0)) of
        SOME ((() , s4052_0)) =>
  (case ((string_drop s4051_0 s4052_0)) of
        s4053_0 =>
  (case ((creg_name_matches_prefix s4053_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsc, s4054_0)) =>
  (case ((string_drop s4053_0 s4054_0)) of
        s4055_0 =>
  (case ((sep_matches_prefix s4055_0)) of
        SOME ((() , s4056_0)) =>
  (case ((string_drop s4055_0 s4056_0)) of
        s4057_0 =>
  (case ((hex_bits_7_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s4057_0
         : (( 7 words$word # ii)) option)) of
        SOME ((v__1198, s4058_0)) =>
  if (((((subrange_vec_dec v__1198 (( 1 : int): ii) (( 0 : int): ii)
         : 2 words$word)) = (0b00w : 2 words$word)))) then
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1198 (( 6 : int): ii) (( 2 : int): ii) : 5 words$word)) in
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1198 (( 6 : int): ii) (( 2 : int): ii) : 5 words$word)) in
    let p0_ = (string_drop s4057_0 s4058_0) in
    if (((p0_ = ""))) then SOME (rdc, rsc, uimm) else NONE else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4032_ : string -> maybe ((mword ty5 * mword ty6))*)

val _ = Define `
 ((s4032_:string ->((5)words$word#(6)words$word)option) s4033_0=
    (let s4034_0 = s4033_0 in
   if ((string_startswith s4034_0 "c.fswsp")) then  
  (case ((string_drop s4034_0 ((string_length "c.fswsp")))) of
        s4035_0 =>
  (case ((spc_matches_prefix0 s4035_0)) of
        SOME ((() , s4036_0)) =>
  (case ((string_drop s4035_0 s4036_0)) of
        s4037_0 =>
  (case ((reg_name_matches_prefix s4037_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s4038_0)) =>
  (case ((string_drop s4037_0 s4038_0)) of
        s4039_0 =>
  (case ((sep_matches_prefix s4039_0)) of
        SOME ((() , s4040_0)) =>
  (case ((string_drop s4039_0 s4040_0)) of
        s4041_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s4041_0 : (( 6 words$word # ii)) option)) of
        SOME ((uimm, s4042_0)) =>
  let p0_ = (string_drop s4041_0 s4042_0) in
  if (((p0_ = ""))) then SOME (rd, uimm) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4020_ : string -> maybe ((mword ty5 * mword ty6))*)

val _ = Define `
 ((s4020_:string ->((5)words$word#(6)words$word)option) s4021_0=
    (let s4022_0 = s4021_0 in
   if ((string_startswith s4022_0 "c.flwsp")) then  
  (case ((string_drop s4022_0 ((string_length "c.flwsp")))) of
        s4023_0 =>
  (case ((spc_matches_prefix0 s4023_0)) of
        SOME ((() , s4024_0)) =>
  (case ((string_drop s4023_0 s4024_0)) of
        s4025_0 =>
  (case ((reg_name_matches_prefix s4025_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s4026_0)) =>
  (case ((string_drop s4025_0 s4026_0)) of
        s4027_0 =>
  (case ((sep_matches_prefix s4027_0)) of
        SOME ((() , s4028_0)) =>
  (case ((string_drop s4027_0 s4028_0)) of
        s4029_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s4029_0 : (( 6 words$word # ii)) option)) of
        SOME ((imm, s4030_0)) =>
  let p0_ = (string_drop s4029_0 s4030_0) in
  if (((p0_ = ""))) then SOME (rd, imm) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4007_ : string -> maybe ((f_un_op_S * mword ty5 * mword ty5))*)

val _ = Define `
 ((s4007_:string ->(f_un_op_S#(5)words$word#(5)words$word)option) s4008_0= 
  ((case s4008_0 of
         s4009_0 =>
   (case ((f_un_type_mnemonic_S_matches_prefix s4009_0)) of
         SOME ((FCLASS_S, s4010_0)) =>
   (case ((string_drop s4009_0 s4010_0)) of
         s4011_0 =>
   (case ((spc_matches_prefix0 s4011_0)) of
         SOME ((() , s4012_0)) =>
   (case ((string_drop s4011_0 s4012_0)) of
         s4013_0 =>
   (case ((reg_name_matches_prefix s4013_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s4014_0)) =>
   (case ((string_drop s4013_0 s4014_0)) of
         s4015_0 =>
   (case ((sep_matches_prefix s4015_0)) of
         SOME ((() , s4016_0)) =>
   (case ((string_drop s4015_0 s4016_0)) of
         s4017_0 =>
   (case ((freg_name_matches_prefix s4017_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s4018_0)) =>
   let p0_ = (string_drop s4017_0 s4018_0) in
   if (((p0_ = ""))) then SOME (FCLASS_S, rd, rs1) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s3994_ : string -> maybe ((f_un_op_S * mword ty5 * mword ty5))*)

val _ = Define `
 ((s3994_:string ->(f_un_op_S#(5)words$word#(5)words$word)option) s3995_0= 
  ((case s3995_0 of
         s3996_0 =>
   (case ((f_un_type_mnemonic_S_matches_prefix s3996_0)) of
         SOME ((FMV_W_X, s3997_0)) =>
   (case ((string_drop s3996_0 s3997_0)) of
         s3998_0 =>
   (case ((spc_matches_prefix0 s3998_0)) of
         SOME ((() , s3999_0)) =>
   (case ((string_drop s3998_0 s3999_0)) of
         s4000_0 =>
   (case ((freg_name_matches_prefix s4000_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s4001_0)) =>
   (case ((string_drop s4000_0 s4001_0)) of
         s4002_0 =>
   (case ((sep_matches_prefix s4002_0)) of
         SOME ((() , s4003_0)) =>
   (case ((string_drop s4002_0 s4003_0)) of
         s4004_0 =>
   (case ((reg_name_matches_prefix s4004_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s4005_0)) =>
   let p0_ = (string_drop s4004_0 s4005_0) in
   if (((p0_ = ""))) then SOME (FMV_W_X, rd, rs1) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s3981_ : string -> maybe ((f_un_op_S * mword ty5 * mword ty5))*)

val _ = Define `
 ((s3981_:string ->(f_un_op_S#(5)words$word#(5)words$word)option) s3982_0= 
  ((case s3982_0 of
         s3983_0 =>
   (case ((f_un_type_mnemonic_S_matches_prefix s3983_0)) of
         SOME ((FMV_X_W, s3984_0)) =>
   (case ((string_drop s3983_0 s3984_0)) of
         s3985_0 =>
   (case ((spc_matches_prefix0 s3985_0)) of
         SOME ((() , s3986_0)) =>
   (case ((string_drop s3985_0 s3986_0)) of
         s3987_0 =>
   (case ((reg_name_matches_prefix s3987_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s3988_0)) =>
   (case ((string_drop s3987_0 s3988_0)) of
         s3989_0 =>
   (case ((sep_matches_prefix s3989_0)) of
         SOME ((() , s3990_0)) =>
   (case ((string_drop s3989_0 s3990_0)) of
         s3991_0 =>
   (case ((freg_name_matches_prefix s3991_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s3992_0)) =>
   let p0_ = (string_drop s3991_0 s3992_0) in
   if (((p0_ = ""))) then SOME (FMV_X_W, rd, rs1) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s3964_ : string -> maybe ((f_bin_op_S * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s3964_:string ->(f_bin_op_S#(5)words$word#(5)words$word#(5)words$word)option) s3965_0= 
  ((case s3965_0 of
         s3966_0 =>
   (case ((f_bin_type_mnemonic_S_matches_prefix s3966_0)) of
         SOME ((FLE_S, s3967_0)) =>
   (case ((string_drop s3966_0 s3967_0)) of
         s3968_0 =>
   (case ((spc_matches_prefix0 s3968_0)) of
         SOME ((() , s3969_0)) =>
   (case ((string_drop s3968_0 s3969_0)) of
         s3970_0 =>
   (case ((reg_name_matches_prefix s3970_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s3971_0)) =>
   (case ((string_drop s3970_0 s3971_0)) of
         s3972_0 =>
   (case ((sep_matches_prefix s3972_0)) of
         SOME ((() , s3973_0)) =>
   (case ((string_drop s3972_0 s3973_0)) of
         s3974_0 =>
   (case ((freg_name_matches_prefix s3974_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s3975_0)) =>
   (case ((string_drop s3974_0 s3975_0)) of
         s3976_0 =>
   (case ((sep_matches_prefix s3976_0)) of
         SOME ((() , s3977_0)) =>
   (case ((string_drop s3976_0 s3977_0)) of
         s3978_0 =>
   (case ((freg_name_matches_prefix s3978_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s3979_0)) =>
   let p0_ = (string_drop s3978_0 s3979_0) in
   if (((p0_ = ""))) then SOME (FLE_S, rd, rs1, rs2) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s3947_ : string -> maybe ((f_bin_op_S * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s3947_:string ->(f_bin_op_S#(5)words$word#(5)words$word#(5)words$word)option) s3948_0= 
  ((case s3948_0 of
         s3949_0 =>
   (case ((f_bin_type_mnemonic_S_matches_prefix s3949_0)) of
         SOME ((FLT_S, s3950_0)) =>
   (case ((string_drop s3949_0 s3950_0)) of
         s3951_0 =>
   (case ((spc_matches_prefix0 s3951_0)) of
         SOME ((() , s3952_0)) =>
   (case ((string_drop s3951_0 s3952_0)) of
         s3953_0 =>
   (case ((reg_name_matches_prefix s3953_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s3954_0)) =>
   (case ((string_drop s3953_0 s3954_0)) of
         s3955_0 =>
   (case ((sep_matches_prefix s3955_0)) of
         SOME ((() , s3956_0)) =>
   (case ((string_drop s3955_0 s3956_0)) of
         s3957_0 =>
   (case ((freg_name_matches_prefix s3957_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s3958_0)) =>
   (case ((string_drop s3957_0 s3958_0)) of
         s3959_0 =>
   (case ((sep_matches_prefix s3959_0)) of
         SOME ((() , s3960_0)) =>
   (case ((string_drop s3959_0 s3960_0)) of
         s3961_0 =>
   (case ((freg_name_matches_prefix s3961_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s3962_0)) =>
   let p0_ = (string_drop s3961_0 s3962_0) in
   if (((p0_ = ""))) then SOME (FLT_S, rd, rs1, rs2) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s3930_ : string -> maybe ((f_bin_op_S * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s3930_:string ->(f_bin_op_S#(5)words$word#(5)words$word#(5)words$word)option) s3931_0= 
  ((case s3931_0 of
         s3932_0 =>
   (case ((f_bin_type_mnemonic_S_matches_prefix s3932_0)) of
         SOME ((FEQ_S, s3933_0)) =>
   (case ((string_drop s3932_0 s3933_0)) of
         s3934_0 =>
   (case ((spc_matches_prefix0 s3934_0)) of
         SOME ((() , s3935_0)) =>
   (case ((string_drop s3934_0 s3935_0)) of
         s3936_0 =>
   (case ((reg_name_matches_prefix s3936_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s3937_0)) =>
   (case ((string_drop s3936_0 s3937_0)) of
         s3938_0 =>
   (case ((sep_matches_prefix s3938_0)) of
         SOME ((() , s3939_0)) =>
   (case ((string_drop s3938_0 s3939_0)) of
         s3940_0 =>
   (case ((freg_name_matches_prefix s3940_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s3941_0)) =>
   (case ((string_drop s3940_0 s3941_0)) of
         s3942_0 =>
   (case ((sep_matches_prefix s3942_0)) of
         SOME ((() , s3943_0)) =>
   (case ((string_drop s3942_0 s3943_0)) of
         s3944_0 =>
   (case ((freg_name_matches_prefix s3944_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s3945_0)) =>
   let p0_ = (string_drop s3944_0 s3945_0) in
   if (((p0_ = ""))) then SOME (FEQ_S, rd, rs1, rs2) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s3913_ : string -> maybe ((f_bin_op_S * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s3913_:string ->(f_bin_op_S#(5)words$word#(5)words$word#(5)words$word)option) s3914_0= 
  ((case s3914_0 of
         s3915_0 =>
   (case ((f_bin_type_mnemonic_S_matches_prefix s3915_0)) of
         SOME ((FMAX_S, s3916_0)) =>
   (case ((string_drop s3915_0 s3916_0)) of
         s3917_0 =>
   (case ((spc_matches_prefix0 s3917_0)) of
         SOME ((() , s3918_0)) =>
   (case ((string_drop s3917_0 s3918_0)) of
         s3919_0 =>
   (case ((freg_name_matches_prefix s3919_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s3920_0)) =>
   (case ((string_drop s3919_0 s3920_0)) of
         s3921_0 =>
   (case ((sep_matches_prefix s3921_0)) of
         SOME ((() , s3922_0)) =>
   (case ((string_drop s3921_0 s3922_0)) of
         s3923_0 =>
   (case ((freg_name_matches_prefix s3923_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s3924_0)) =>
   (case ((string_drop s3923_0 s3924_0)) of
         s3925_0 =>
   (case ((sep_matches_prefix s3925_0)) of
         SOME ((() , s3926_0)) =>
   (case ((string_drop s3925_0 s3926_0)) of
         s3927_0 =>
   (case ((freg_name_matches_prefix s3927_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s3928_0)) =>
   let p0_ = (string_drop s3927_0 s3928_0) in
   if (((p0_ = ""))) then SOME (FMAX_S, rd, rs1, rs2) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s3896_ : string -> maybe ((f_bin_op_S * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s3896_:string ->(f_bin_op_S#(5)words$word#(5)words$word#(5)words$word)option) s3897_0= 
  ((case s3897_0 of
         s3898_0 =>
   (case ((f_bin_type_mnemonic_S_matches_prefix s3898_0)) of
         SOME ((FMIN_S, s3899_0)) =>
   (case ((string_drop s3898_0 s3899_0)) of
         s3900_0 =>
   (case ((spc_matches_prefix0 s3900_0)) of
         SOME ((() , s3901_0)) =>
   (case ((string_drop s3900_0 s3901_0)) of
         s3902_0 =>
   (case ((freg_name_matches_prefix s3902_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s3903_0)) =>
   (case ((string_drop s3902_0 s3903_0)) of
         s3904_0 =>
   (case ((sep_matches_prefix s3904_0)) of
         SOME ((() , s3905_0)) =>
   (case ((string_drop s3904_0 s3905_0)) of
         s3906_0 =>
   (case ((freg_name_matches_prefix s3906_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s3907_0)) =>
   (case ((string_drop s3906_0 s3907_0)) of
         s3908_0 =>
   (case ((sep_matches_prefix s3908_0)) of
         SOME ((() , s3909_0)) =>
   (case ((string_drop s3908_0 s3909_0)) of
         s3910_0 =>
   (case ((freg_name_matches_prefix s3910_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s3911_0)) =>
   let p0_ = (string_drop s3910_0 s3911_0) in
   if (((p0_ = ""))) then SOME (FMIN_S, rd, rs1, rs2) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s3879_ : string -> maybe ((f_bin_op_S * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s3879_:string ->(f_bin_op_S#(5)words$word#(5)words$word#(5)words$word)option) s3880_0= 
  ((case s3880_0 of
         s3881_0 =>
   (case ((f_bin_type_mnemonic_S_matches_prefix s3881_0)) of
         SOME ((FSGNJX_S, s3882_0)) =>
   (case ((string_drop s3881_0 s3882_0)) of
         s3883_0 =>
   (case ((spc_matches_prefix0 s3883_0)) of
         SOME ((() , s3884_0)) =>
   (case ((string_drop s3883_0 s3884_0)) of
         s3885_0 =>
   (case ((freg_name_matches_prefix s3885_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s3886_0)) =>
   (case ((string_drop s3885_0 s3886_0)) of
         s3887_0 =>
   (case ((sep_matches_prefix s3887_0)) of
         SOME ((() , s3888_0)) =>
   (case ((string_drop s3887_0 s3888_0)) of
         s3889_0 =>
   (case ((freg_name_matches_prefix s3889_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s3890_0)) =>
   (case ((string_drop s3889_0 s3890_0)) of
         s3891_0 =>
   (case ((sep_matches_prefix s3891_0)) of
         SOME ((() , s3892_0)) =>
   (case ((string_drop s3891_0 s3892_0)) of
         s3893_0 =>
   (case ((freg_name_matches_prefix s3893_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s3894_0)) =>
   let p0_ = (string_drop s3893_0 s3894_0) in
   if (((p0_ = ""))) then SOME (FSGNJX_S, rd, rs1, rs2) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s3862_ : string -> maybe ((f_bin_op_S * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s3862_:string ->(f_bin_op_S#(5)words$word#(5)words$word#(5)words$word)option) s3863_0= 
  ((case s3863_0 of
         s3864_0 =>
   (case ((f_bin_type_mnemonic_S_matches_prefix s3864_0)) of
         SOME ((FSGNJN_S, s3865_0)) =>
   (case ((string_drop s3864_0 s3865_0)) of
         s3866_0 =>
   (case ((spc_matches_prefix0 s3866_0)) of
         SOME ((() , s3867_0)) =>
   (case ((string_drop s3866_0 s3867_0)) of
         s3868_0 =>
   (case ((freg_name_matches_prefix s3868_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s3869_0)) =>
   (case ((string_drop s3868_0 s3869_0)) of
         s3870_0 =>
   (case ((sep_matches_prefix s3870_0)) of
         SOME ((() , s3871_0)) =>
   (case ((string_drop s3870_0 s3871_0)) of
         s3872_0 =>
   (case ((freg_name_matches_prefix s3872_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s3873_0)) =>
   (case ((string_drop s3872_0 s3873_0)) of
         s3874_0 =>
   (case ((sep_matches_prefix s3874_0)) of
         SOME ((() , s3875_0)) =>
   (case ((string_drop s3874_0 s3875_0)) of
         s3876_0 =>
   (case ((freg_name_matches_prefix s3876_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s3877_0)) =>
   let p0_ = (string_drop s3876_0 s3877_0) in
   if (((p0_ = ""))) then SOME (FSGNJN_S, rd, rs1, rs2) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s3845_ : string -> maybe ((f_bin_op_S * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s3845_:string ->(f_bin_op_S#(5)words$word#(5)words$word#(5)words$word)option) s3846_0= 
  ((case s3846_0 of
         s3847_0 =>
   (case ((f_bin_type_mnemonic_S_matches_prefix s3847_0)) of
         SOME ((FSGNJ_S, s3848_0)) =>
   (case ((string_drop s3847_0 s3848_0)) of
         s3849_0 =>
   (case ((spc_matches_prefix0 s3849_0)) of
         SOME ((() , s3850_0)) =>
   (case ((string_drop s3849_0 s3850_0)) of
         s3851_0 =>
   (case ((freg_name_matches_prefix s3851_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s3852_0)) =>
   (case ((string_drop s3851_0 s3852_0)) of
         s3853_0 =>
   (case ((sep_matches_prefix s3853_0)) of
         SOME ((() , s3854_0)) =>
   (case ((string_drop s3853_0 s3854_0)) of
         s3855_0 =>
   (case ((freg_name_matches_prefix s3855_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s3856_0)) =>
   (case ((string_drop s3855_0 s3856_0)) of
         s3857_0 =>
   (case ((sep_matches_prefix s3857_0)) of
         SOME ((() , s3858_0)) =>
   (case ((string_drop s3857_0 s3858_0)) of
         s3859_0 =>
   (case ((freg_name_matches_prefix s3859_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s3860_0)) =>
   let p0_ = (string_drop s3859_0 s3860_0) in
   if (((p0_ = ""))) then SOME (FSGNJ_S, rd, rs1, rs2) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s3828_ : string -> maybe ((f_un_rm_op_S * mword ty5 * mword ty5 * rounding_mode))*)

val _ = Define `
 ((s3828_:string ->(f_un_rm_op_S#(5)words$word#(5)words$word#rounding_mode)option) s3829_0= 
  ((case s3829_0 of
         s3830_0 =>
   (case ((f_un_rm_type_mnemonic_S_matches_prefix s3830_0)) of
         SOME ((FCVT_S_LU, s3831_0)) =>
   (case ((string_drop s3830_0 s3831_0)) of
         s3832_0 =>
   (case ((spc_matches_prefix0 s3832_0)) of
         SOME ((() , s3833_0)) =>
   (case ((string_drop s3832_0 s3833_0)) of
         s3834_0 =>
   (case ((freg_name_matches_prefix s3834_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s3835_0)) =>
   (case ((string_drop s3834_0 s3835_0)) of
         s3836_0 =>
   (case ((sep_matches_prefix s3836_0)) of
         SOME ((() , s3837_0)) =>
   (case ((string_drop s3836_0 s3837_0)) of
         s3838_0 =>
   (case ((reg_name_matches_prefix s3838_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s3839_0)) =>
   (case ((string_drop s3838_0 s3839_0)) of
         s3840_0 =>
   (case ((sep_matches_prefix s3840_0)) of
         SOME ((() , s3841_0)) =>
   (case ((string_drop s3840_0 s3841_0)) of
         s3842_0 =>
   (case ((frm_mnemonic_matches_prefix s3842_0)) of
         SOME ((rm, s3843_0)) =>
   let p0_ = (string_drop s3842_0 s3843_0) in
   if (((p0_ = ""))) then SOME (FCVT_S_LU, rd, rs1, rm) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s3811_ : string -> maybe ((f_un_rm_op_S * mword ty5 * mword ty5 * rounding_mode))*)

val _ = Define `
 ((s3811_:string ->(f_un_rm_op_S#(5)words$word#(5)words$word#rounding_mode)option) s3812_0= 
  ((case s3812_0 of
         s3813_0 =>
   (case ((f_un_rm_type_mnemonic_S_matches_prefix s3813_0)) of
         SOME ((FCVT_S_L, s3814_0)) =>
   (case ((string_drop s3813_0 s3814_0)) of
         s3815_0 =>
   (case ((spc_matches_prefix0 s3815_0)) of
         SOME ((() , s3816_0)) =>
   (case ((string_drop s3815_0 s3816_0)) of
         s3817_0 =>
   (case ((freg_name_matches_prefix s3817_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s3818_0)) =>
   (case ((string_drop s3817_0 s3818_0)) of
         s3819_0 =>
   (case ((sep_matches_prefix s3819_0)) of
         SOME ((() , s3820_0)) =>
   (case ((string_drop s3819_0 s3820_0)) of
         s3821_0 =>
   (case ((reg_name_matches_prefix s3821_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s3822_0)) =>
   (case ((string_drop s3821_0 s3822_0)) of
         s3823_0 =>
   (case ((sep_matches_prefix s3823_0)) of
         SOME ((() , s3824_0)) =>
   (case ((string_drop s3823_0 s3824_0)) of
         s3825_0 =>
   (case ((frm_mnemonic_matches_prefix s3825_0)) of
         SOME ((rm, s3826_0)) =>
   let p0_ = (string_drop s3825_0 s3826_0) in
   if (((p0_ = ""))) then SOME (FCVT_S_L, rd, rs1, rm) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s3794_ : string -> maybe ((f_un_rm_op_S * mword ty5 * mword ty5 * rounding_mode))*)

val _ = Define `
 ((s3794_:string ->(f_un_rm_op_S#(5)words$word#(5)words$word#rounding_mode)option) s3795_0= 
  ((case s3795_0 of
         s3796_0 =>
   (case ((f_un_rm_type_mnemonic_S_matches_prefix s3796_0)) of
         SOME ((FCVT_LU_S, s3797_0)) =>
   (case ((string_drop s3796_0 s3797_0)) of
         s3798_0 =>
   (case ((spc_matches_prefix0 s3798_0)) of
         SOME ((() , s3799_0)) =>
   (case ((string_drop s3798_0 s3799_0)) of
         s3800_0 =>
   (case ((reg_name_matches_prefix s3800_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s3801_0)) =>
   (case ((string_drop s3800_0 s3801_0)) of
         s3802_0 =>
   (case ((sep_matches_prefix s3802_0)) of
         SOME ((() , s3803_0)) =>
   (case ((string_drop s3802_0 s3803_0)) of
         s3804_0 =>
   (case ((freg_name_matches_prefix s3804_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s3805_0)) =>
   (case ((string_drop s3804_0 s3805_0)) of
         s3806_0 =>
   (case ((sep_matches_prefix s3806_0)) of
         SOME ((() , s3807_0)) =>
   (case ((string_drop s3806_0 s3807_0)) of
         s3808_0 =>
   (case ((frm_mnemonic_matches_prefix s3808_0)) of
         SOME ((rm, s3809_0)) =>
   let p0_ = (string_drop s3808_0 s3809_0) in
   if (((p0_ = ""))) then SOME (FCVT_LU_S, rd, rs1, rm) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s3777_ : string -> maybe ((f_un_rm_op_S * mword ty5 * mword ty5 * rounding_mode))*)

val _ = Define `
 ((s3777_:string ->(f_un_rm_op_S#(5)words$word#(5)words$word#rounding_mode)option) s3778_0= 
  ((case s3778_0 of
         s3779_0 =>
   (case ((f_un_rm_type_mnemonic_S_matches_prefix s3779_0)) of
         SOME ((FCVT_L_S, s3780_0)) =>
   (case ((string_drop s3779_0 s3780_0)) of
         s3781_0 =>
   (case ((spc_matches_prefix0 s3781_0)) of
         SOME ((() , s3782_0)) =>
   (case ((string_drop s3781_0 s3782_0)) of
         s3783_0 =>
   (case ((reg_name_matches_prefix s3783_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s3784_0)) =>
   (case ((string_drop s3783_0 s3784_0)) of
         s3785_0 =>
   (case ((sep_matches_prefix s3785_0)) of
         SOME ((() , s3786_0)) =>
   (case ((string_drop s3785_0 s3786_0)) of
         s3787_0 =>
   (case ((freg_name_matches_prefix s3787_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s3788_0)) =>
   (case ((string_drop s3787_0 s3788_0)) of
         s3789_0 =>
   (case ((sep_matches_prefix s3789_0)) of
         SOME ((() , s3790_0)) =>
   (case ((string_drop s3789_0 s3790_0)) of
         s3791_0 =>
   (case ((frm_mnemonic_matches_prefix s3791_0)) of
         SOME ((rm, s3792_0)) =>
   let p0_ = (string_drop s3791_0 s3792_0) in
   if (((p0_ = ""))) then SOME (FCVT_L_S, rd, rs1, rm) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s3760_ : string -> maybe ((f_un_rm_op_S * mword ty5 * mword ty5 * rounding_mode))*)

val _ = Define `
 ((s3760_:string ->(f_un_rm_op_S#(5)words$word#(5)words$word#rounding_mode)option) s3761_0= 
  ((case s3761_0 of
         s3762_0 =>
   (case ((f_un_rm_type_mnemonic_S_matches_prefix s3762_0)) of
         SOME ((FCVT_S_WU, s3763_0)) =>
   (case ((string_drop s3762_0 s3763_0)) of
         s3764_0 =>
   (case ((spc_matches_prefix0 s3764_0)) of
         SOME ((() , s3765_0)) =>
   (case ((string_drop s3764_0 s3765_0)) of
         s3766_0 =>
   (case ((freg_name_matches_prefix s3766_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s3767_0)) =>
   (case ((string_drop s3766_0 s3767_0)) of
         s3768_0 =>
   (case ((sep_matches_prefix s3768_0)) of
         SOME ((() , s3769_0)) =>
   (case ((string_drop s3768_0 s3769_0)) of
         s3770_0 =>
   (case ((reg_name_matches_prefix s3770_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s3771_0)) =>
   (case ((string_drop s3770_0 s3771_0)) of
         s3772_0 =>
   (case ((sep_matches_prefix s3772_0)) of
         SOME ((() , s3773_0)) =>
   (case ((string_drop s3772_0 s3773_0)) of
         s3774_0 =>
   (case ((frm_mnemonic_matches_prefix s3774_0)) of
         SOME ((rm, s3775_0)) =>
   let p0_ = (string_drop s3774_0 s3775_0) in
   if (((p0_ = ""))) then SOME (FCVT_S_WU, rd, rs1, rm) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s3743_ : string -> maybe ((f_un_rm_op_S * mword ty5 * mword ty5 * rounding_mode))*)

val _ = Define `
 ((s3743_:string ->(f_un_rm_op_S#(5)words$word#(5)words$word#rounding_mode)option) s3744_0= 
  ((case s3744_0 of
         s3745_0 =>
   (case ((f_un_rm_type_mnemonic_S_matches_prefix s3745_0)) of
         SOME ((FCVT_S_W, s3746_0)) =>
   (case ((string_drop s3745_0 s3746_0)) of
         s3747_0 =>
   (case ((spc_matches_prefix0 s3747_0)) of
         SOME ((() , s3748_0)) =>
   (case ((string_drop s3747_0 s3748_0)) of
         s3749_0 =>
   (case ((freg_name_matches_prefix s3749_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s3750_0)) =>
   (case ((string_drop s3749_0 s3750_0)) of
         s3751_0 =>
   (case ((sep_matches_prefix s3751_0)) of
         SOME ((() , s3752_0)) =>
   (case ((string_drop s3751_0 s3752_0)) of
         s3753_0 =>
   (case ((reg_name_matches_prefix s3753_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s3754_0)) =>
   (case ((string_drop s3753_0 s3754_0)) of
         s3755_0 =>
   (case ((sep_matches_prefix s3755_0)) of
         SOME ((() , s3756_0)) =>
   (case ((string_drop s3755_0 s3756_0)) of
         s3757_0 =>
   (case ((frm_mnemonic_matches_prefix s3757_0)) of
         SOME ((rm, s3758_0)) =>
   let p0_ = (string_drop s3757_0 s3758_0) in
   if (((p0_ = ""))) then SOME (FCVT_S_W, rd, rs1, rm) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s3726_ : string -> maybe ((f_un_rm_op_S * mword ty5 * mword ty5 * rounding_mode))*)

val _ = Define `
 ((s3726_:string ->(f_un_rm_op_S#(5)words$word#(5)words$word#rounding_mode)option) s3727_0= 
  ((case s3727_0 of
         s3728_0 =>
   (case ((f_un_rm_type_mnemonic_S_matches_prefix s3728_0)) of
         SOME ((FCVT_WU_S, s3729_0)) =>
   (case ((string_drop s3728_0 s3729_0)) of
         s3730_0 =>
   (case ((spc_matches_prefix0 s3730_0)) of
         SOME ((() , s3731_0)) =>
   (case ((string_drop s3730_0 s3731_0)) of
         s3732_0 =>
   (case ((reg_name_matches_prefix s3732_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s3733_0)) =>
   (case ((string_drop s3732_0 s3733_0)) of
         s3734_0 =>
   (case ((sep_matches_prefix s3734_0)) of
         SOME ((() , s3735_0)) =>
   (case ((string_drop s3734_0 s3735_0)) of
         s3736_0 =>
   (case ((freg_name_matches_prefix s3736_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s3737_0)) =>
   (case ((string_drop s3736_0 s3737_0)) of
         s3738_0 =>
   (case ((sep_matches_prefix s3738_0)) of
         SOME ((() , s3739_0)) =>
   (case ((string_drop s3738_0 s3739_0)) of
         s3740_0 =>
   (case ((frm_mnemonic_matches_prefix s3740_0)) of
         SOME ((rm, s3741_0)) =>
   let p0_ = (string_drop s3740_0 s3741_0) in
   if (((p0_ = ""))) then SOME (FCVT_WU_S, rd, rs1, rm) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s3709_ : string -> maybe ((f_un_rm_op_S * mword ty5 * mword ty5 * rounding_mode))*)

val _ = Define `
 ((s3709_:string ->(f_un_rm_op_S#(5)words$word#(5)words$word#rounding_mode)option) s3710_0= 
  ((case s3710_0 of
         s3711_0 =>
   (case ((f_un_rm_type_mnemonic_S_matches_prefix s3711_0)) of
         SOME ((FCVT_W_S, s3712_0)) =>
   (case ((string_drop s3711_0 s3712_0)) of
         s3713_0 =>
   (case ((spc_matches_prefix0 s3713_0)) of
         SOME ((() , s3714_0)) =>
   (case ((string_drop s3713_0 s3714_0)) of
         s3715_0 =>
   (case ((reg_name_matches_prefix s3715_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s3716_0)) =>
   (case ((string_drop s3715_0 s3716_0)) of
         s3717_0 =>
   (case ((sep_matches_prefix s3717_0)) of
         SOME ((() , s3718_0)) =>
   (case ((string_drop s3717_0 s3718_0)) of
         s3719_0 =>
   (case ((freg_name_matches_prefix s3719_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s3720_0)) =>
   (case ((string_drop s3719_0 s3720_0)) of
         s3721_0 =>
   (case ((sep_matches_prefix s3721_0)) of
         SOME ((() , s3722_0)) =>
   (case ((string_drop s3721_0 s3722_0)) of
         s3723_0 =>
   (case ((frm_mnemonic_matches_prefix s3723_0)) of
         SOME ((rm, s3724_0)) =>
   let p0_ = (string_drop s3723_0 s3724_0) in
   if (((p0_ = ""))) then SOME (FCVT_W_S, rd, rs1, rm) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s3692_ : string -> maybe ((f_un_rm_op_S * mword ty5 * mword ty5 * rounding_mode))*)

val _ = Define `
 ((s3692_:string ->(f_un_rm_op_S#(5)words$word#(5)words$word#rounding_mode)option) s3693_0= 
  ((case s3693_0 of
         s3694_0 =>
   (case ((f_un_rm_type_mnemonic_S_matches_prefix s3694_0)) of
         SOME ((FSQRT_S, s3695_0)) =>
   (case ((string_drop s3694_0 s3695_0)) of
         s3696_0 =>
   (case ((spc_matches_prefix0 s3696_0)) of
         SOME ((() , s3697_0)) =>
   (case ((string_drop s3696_0 s3697_0)) of
         s3698_0 =>
   (case ((freg_name_matches_prefix s3698_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s3699_0)) =>
   (case ((string_drop s3698_0 s3699_0)) of
         s3700_0 =>
   (case ((sep_matches_prefix s3700_0)) of
         SOME ((() , s3701_0)) =>
   (case ((string_drop s3700_0 s3701_0)) of
         s3702_0 =>
   (case ((freg_name_matches_prefix s3702_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s3703_0)) =>
   (case ((string_drop s3702_0 s3703_0)) of
         s3704_0 =>
   (case ((sep_matches_prefix s3704_0)) of
         SOME ((() , s3705_0)) =>
   (case ((string_drop s3704_0 s3705_0)) of
         s3706_0 =>
   (case ((frm_mnemonic_matches_prefix s3706_0)) of
         SOME ((rm, s3707_0)) =>
   let p0_ = (string_drop s3706_0 s3707_0) in
   if (((p0_ = ""))) then SOME (FSQRT_S, rd, rs1, rm) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s3671_ : string -> maybe ((f_bin_rm_op_S * mword ty5 * mword ty5 * mword ty5 * rounding_mode))*)

val _ = Define `
 ((s3671_:string ->(f_bin_rm_op_S#(5)words$word#(5)words$word#(5)words$word#rounding_mode)option) s3672_0= 
  ((case s3672_0 of
         s3673_0 =>
   (case ((f_bin_rm_type_mnemonic_S_matches_prefix s3673_0)) of
         SOME ((op, s3674_0)) =>
   (case ((string_drop s3673_0 s3674_0)) of
         s3675_0 =>
   (case ((spc_matches_prefix0 s3675_0)) of
         SOME ((() , s3676_0)) =>
   (case ((string_drop s3675_0 s3676_0)) of
         s3677_0 =>
   (case ((freg_name_matches_prefix s3677_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s3678_0)) =>
   (case ((string_drop s3677_0 s3678_0)) of
         s3679_0 =>
   (case ((sep_matches_prefix s3679_0)) of
         SOME ((() , s3680_0)) =>
   (case ((string_drop s3679_0 s3680_0)) of
         s3681_0 =>
   (case ((freg_name_matches_prefix s3681_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s3682_0)) =>
   (case ((string_drop s3681_0 s3682_0)) of
         s3683_0 =>
   (case ((sep_matches_prefix s3683_0)) of
         SOME ((() , s3684_0)) =>
   (case ((string_drop s3683_0 s3684_0)) of
         s3685_0 =>
   (case ((freg_name_matches_prefix s3685_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s3686_0)) =>
   (case ((string_drop s3685_0 s3686_0)) of
         s3687_0 =>
   (case ((sep_matches_prefix s3687_0)) of
         SOME ((() , s3688_0)) =>
   (case ((string_drop s3687_0 s3688_0)) of
         s3689_0 =>
   (case ((frm_mnemonic_matches_prefix s3689_0)) of
         SOME ((rm, s3690_0)) =>
   let p0_ = (string_drop s3689_0 s3690_0) in
   if (((p0_ = ""))) then SOME (op, rd, rs1, rs2, rm) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s3646_ : string -> maybe ((f_madd_op_S * mword ty5 * mword ty5 * mword ty5 * mword ty5 * rounding_mode))*)

val _ = Define `
 ((s3646_:string ->(f_madd_op_S#(5)words$word#(5)words$word#(5)words$word#(5)words$word#rounding_mode)option) s3647_0= 
  ((case s3647_0 of
         s3648_0 =>
   (case ((f_madd_type_mnemonic_S_matches_prefix s3648_0)) of
         SOME ((op, s3649_0)) =>
   (case ((string_drop s3648_0 s3649_0)) of
         s3650_0 =>
   (case ((spc_matches_prefix0 s3650_0)) of
         SOME ((() , s3651_0)) =>
   (case ((string_drop s3650_0 s3651_0)) of
         s3652_0 =>
   (case ((freg_name_matches_prefix s3652_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s3653_0)) =>
   (case ((string_drop s3652_0 s3653_0)) of
         s3654_0 =>
   (case ((sep_matches_prefix s3654_0)) of
         SOME ((() , s3655_0)) =>
   (case ((string_drop s3654_0 s3655_0)) of
         s3656_0 =>
   (case ((freg_name_matches_prefix s3656_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s3657_0)) =>
   (case ((string_drop s3656_0 s3657_0)) of
         s3658_0 =>
   (case ((sep_matches_prefix s3658_0)) of
         SOME ((() , s3659_0)) =>
   (case ((string_drop s3658_0 s3659_0)) of
         s3660_0 =>
   (case ((freg_name_matches_prefix s3660_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s3661_0)) =>
   (case ((string_drop s3660_0 s3661_0)) of
         s3662_0 =>
   (case ((sep_matches_prefix s3662_0)) of
         SOME ((() , s3663_0)) =>
   (case ((string_drop s3662_0 s3663_0)) of
         s3664_0 =>
   (case ((freg_name_matches_prefix s3664_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs3, s3665_0)) =>
   (case ((string_drop s3664_0 s3665_0)) of
         s3666_0 =>
   (case ((sep_matches_prefix s3666_0)) of
         SOME ((() , s3667_0)) =>
   (case ((string_drop s3666_0 s3667_0)) of
         s3668_0 =>
   (case ((frm_mnemonic_matches_prefix s3668_0)) of
         SOME ((rm, s3669_0)) =>
   let p0_ = (string_drop s3668_0 s3669_0) in
   if (((p0_ = ""))) then SOME (op, rd, rs1, rs2, rs3, rm) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s3622_ : string -> maybe ((word_width * mword ty5 * mword ty12 * mword ty5))*)

val _ = Define `
 ((s3622_:string ->(word_width#(5)words$word#(12)words$word#(5)words$word)option) s3623_0=
    (let s3624_0 = s3623_0 in
   if ((string_startswith s3624_0 "fs")) then  
  (case ((string_drop s3624_0 ((string_length "fs")))) of
        s3625_0 =>
  (case ((size_mnemonic_matches_prefix s3625_0)) of
        SOME ((width, s3626_0)) =>
  (case ((string_drop s3625_0 s3626_0)) of
        s3627_0 =>
  (case ((spc_matches_prefix0 s3627_0)) of
        SOME ((() , s3628_0)) =>
  (case ((string_drop s3627_0 s3628_0)) of
        s3629_0 =>
  (case ((freg_name_matches_prefix s3629_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s3630_0)) =>
  (case ((string_drop s3629_0 s3630_0)) of
        s3631_0 =>
  (case ((sep_matches_prefix s3631_0)) of
        SOME ((() , s3632_0)) =>
  (case ((string_drop s3631_0 s3632_0)) of
        s3633_0 =>
  (case ((hex_bits_12_matches_prefix0 s3633_0
         : (( 12 words$word # ii)) option)) of
        SOME ((imm, s3634_0)) =>
  (case ((string_drop s3633_0 s3634_0)) of
        s3635_0 =>
  (case ((opt_spc_matches_prefix0 s3635_0)) of
        SOME ((() , s3636_0)) =>
  let s3637_0 = (string_drop s3635_0 s3636_0) in
  if ((string_startswith s3637_0 "(")) then
    (case ((string_drop s3637_0 ((string_length "(")))) of
          s3638_0 =>
    (case ((opt_spc_matches_prefix0 s3638_0)) of
          SOME ((() , s3639_0)) =>
    (case ((string_drop s3638_0 s3639_0)) of
          s3640_0 =>
    (case ((reg_name_matches_prefix s3640_0 : (( 5 words$word # ii)) option)) of
          SOME ((rs1, s3641_0)) =>
    (case ((string_drop s3640_0 s3641_0)) of
          s3642_0 =>
    (case ((opt_spc_matches_prefix0 s3642_0)) of
          SOME ((() , s3643_0)) =>
    let s3644_0 = (string_drop s3642_0 s3643_0) in
    if ((string_startswith s3644_0 ")")) then
      let p0_ = (string_drop s3644_0 ((string_length ")"))) in
      if (((p0_ = ""))) then SOME (width, rs2, imm, rs1) else NONE else 
    NONE
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    ) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3598_ : string -> maybe ((word_width * mword ty5 * mword ty12 * mword ty5))*)

val _ = Define `
 ((s3598_:string ->(word_width#(5)words$word#(12)words$word#(5)words$word)option) s3599_0=
    (let s3600_0 = s3599_0 in
   if ((string_startswith s3600_0 "fl")) then  
  (case ((string_drop s3600_0 ((string_length "fl")))) of
        s3601_0 =>
  (case ((size_mnemonic_matches_prefix s3601_0)) of
        SOME ((width, s3602_0)) =>
  (case ((string_drop s3601_0 s3602_0)) of
        s3603_0 =>
  (case ((spc_matches_prefix0 s3603_0)) of
        SOME ((() , s3604_0)) =>
  (case ((string_drop s3603_0 s3604_0)) of
        s3605_0 =>
  (case ((freg_name_matches_prefix s3605_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s3606_0)) =>
  (case ((string_drop s3605_0 s3606_0)) of
        s3607_0 =>
  (case ((sep_matches_prefix s3607_0)) of
        SOME ((() , s3608_0)) =>
  (case ((string_drop s3607_0 s3608_0)) of
        s3609_0 =>
  (case ((hex_bits_12_matches_prefix0 s3609_0
         : (( 12 words$word # ii)) option)) of
        SOME ((imm, s3610_0)) =>
  (case ((string_drop s3609_0 s3610_0)) of
        s3611_0 =>
  (case ((opt_spc_matches_prefix0 s3611_0)) of
        SOME ((() , s3612_0)) =>
  let s3613_0 = (string_drop s3611_0 s3612_0) in
  if ((string_startswith s3613_0 "(")) then
    (case ((string_drop s3613_0 ((string_length "(")))) of
          s3614_0 =>
    (case ((opt_spc_matches_prefix0 s3614_0)) of
          SOME ((() , s3615_0)) =>
    (case ((string_drop s3614_0 s3615_0)) of
          s3616_0 =>
    (case ((reg_name_matches_prefix s3616_0 : (( 5 words$word # ii)) option)) of
          SOME ((rs1, s3617_0)) =>
    (case ((string_drop s3616_0 s3617_0)) of
          s3618_0 =>
    (case ((opt_spc_matches_prefix0 s3618_0)) of
          SOME ((() , s3619_0)) =>
    let s3620_0 = (string_drop s3618_0 s3619_0) in
    if ((string_startswith s3620_0 ")")) then
      let p0_ = (string_drop s3620_0 ((string_length ")"))) in
      if (((p0_ = ""))) then SOME (width, rd, imm, rs1) else NONE else 
    NONE
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    ) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3586_ : string -> maybe ((mword ty5 * mword ty5 * mword ty12))*)

val _ = Define `
 ((s3586_:string ->((5)words$word#(5)words$word#(12)words$word)option) s3587_0=
    (let s3588_0 = s3587_0 in
   if ((string_startswith s3588_0 "fence.i.reserved.")) then  
  (case ((string_drop s3588_0 ((string_length "fence.i.reserved.")))) of
        s3589_0 =>
  (case ((reg_name_matches_prefix s3589_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s3590_0)) =>
  let s3591_0 = (string_drop s3589_0 s3590_0) in
  if ((string_startswith s3591_0 ".")) then
    (case ((string_drop s3591_0 ((string_length ".")))) of
          s3592_0 =>
    (case ((reg_name_matches_prefix s3592_0 : (( 5 words$word # ii)) option)) of
          SOME ((rs, s3593_0)) =>
    let s3594_0 = (string_drop s3592_0 s3593_0) in
    if ((string_startswith s3594_0 ".")) then
      (case ((string_drop s3594_0 ((string_length ".")))) of
            s3595_0 =>
      (case ((hex_bits_12_matches_prefix0 s3595_0 : (( 12 words$word # ii)) option)) of
            SOME ((imm, s3596_0)) =>
      let p0_ = (string_drop s3595_0 s3596_0) in
      if (((p0_ = ""))) then SOME (rd, rs, imm) else NONE
        | _ => NONE
      )
      ) else NONE
      | _ => NONE
    )
    ) else NONE
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3568_ : string -> maybe ((mword ty4 * mword ty4 * mword ty5 * mword ty5 * mword ty4))*)

val _ = Define `
 ((s3568_:string ->((4)words$word#(4)words$word#(5)words$word#(5)words$word#(4)words$word)option) s3569_0=
    (let s3570_0 = s3569_0 in
   if ((string_startswith s3570_0 "fence.reserved.")) then  
  (case ((string_drop s3570_0 ((string_length "fence.reserved.")))) of
        s3571_0 =>
  (case ((fence_bits_matches_prefix s3571_0 : (( 4 words$word # ii)) option)) of
        SOME ((pred, s3572_0)) =>
  let s3573_0 = (string_drop s3571_0 s3572_0) in
  if ((string_startswith s3573_0 ".")) then
    (case ((string_drop s3573_0 ((string_length ".")))) of
          s3574_0 =>
    (case ((fence_bits_matches_prefix s3574_0 : (( 4 words$word # ii)) option)) of
          SOME ((succ, s3575_0)) =>
    let s3576_0 = (string_drop s3574_0 s3575_0) in
    if ((string_startswith s3576_0 ".")) then
      (case ((string_drop s3576_0 ((string_length ".")))) of
            s3577_0 =>
      (case ((reg_name_matches_prefix s3577_0 : (( 5 words$word # ii)) option)) of
            SOME ((rs, s3578_0)) =>
      let s3579_0 = (string_drop s3577_0 s3578_0) in
      if ((string_startswith s3579_0 ".")) then
        (case ((string_drop s3579_0 ((string_length ".")))) of
              s3580_0 =>
        (case ((reg_name_matches_prefix s3580_0 : (( 5 words$word # ii)) option)) of
              SOME ((rd, s3581_0)) =>
        let s3582_0 = (string_drop s3580_0 s3581_0) in
        if ((string_startswith s3582_0 ".")) then
          (case ((string_drop s3582_0 ((string_length ".")))) of
                s3583_0 =>
          (case ((hex_bits_4_matches_prefix
                    instance_Sail2_values_Bitvector_Machine_word_mword_dict
                    s3583_0 : (( 4 words$word # ii)) option)) of
                SOME ((fm, s3584_0)) =>
          let p0_ = (string_drop s3583_0 s3584_0) in
          if (((p0_ = ""))) then SOME (pred, succ, rs, rd, fm) else NONE
            | _ => NONE
          )
          ) else NONE
          | _ => NONE
        )
        ) else NONE
        | _ => NONE
      )
      ) else NONE
      | _ => NONE
    )
    ) else NONE
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3562_ : string -> maybe (mword ty3)*)

val _ = Define `
 ((s3562_:string ->((3)words$word)option) s3563_0=
    (let s3564_0 = s3563_0 in
   if ((string_startswith s3564_0 "c.srai.hint.")) then  
  (case ((string_drop s3564_0 ((string_length "c.srai.hint.")))) of
        s3565_0 =>
  (case ((creg_name_matches_prefix s3565_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s3566_0)) =>
  let p0_ = (string_drop s3565_0 s3566_0) in
  if (((p0_ = ""))) then SOME rsd else NONE
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3556_ : string -> maybe (mword ty3)*)

val _ = Define `
 ((s3556_:string ->((3)words$word)option) s3557_0=
    (let s3558_0 = s3557_0 in
   if ((string_startswith s3558_0 "c.srli.hint.")) then  
  (case ((string_drop s3558_0 ((string_length "c.srli.hint.")))) of
        s3559_0 =>
  (case ((creg_name_matches_prefix s3559_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s3560_0)) =>
  let p0_ = (string_drop s3559_0 s3560_0) in
  if (((p0_ = ""))) then SOME rsd else NONE
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3547_ : string -> maybe ((mword ty5 * mword ty6))*)

val _ = Define `
 ((s3547_:string ->((5)words$word#(6)words$word)option) s3548_0=
    (let s3549_0 = s3548_0 in
   if ((string_startswith s3549_0 "c.slli.hint.")) then  
  (case ((string_drop s3549_0 ((string_length "c.slli.hint.")))) of
        s3550_0 =>
  (case ((reg_name_matches_prefix s3550_0 : (( 5 words$word # ii)) option)) of
        SOME ((rsd, s3551_0)) =>
  let s3552_0 = (string_drop s3550_0 s3551_0) in
  if ((string_startswith s3552_0 ".")) then
    (case ((string_drop s3552_0 ((string_length ".")))) of
          s3553_0 =>
    (case ((hex_bits_6_matches_prefix
              instance_Sail2_values_Bitvector_Machine_word_mword_dict 
            s3553_0 : (( 6 words$word # ii)) option)) of
          SOME ((shamt, s3554_0)) =>
    let p0_ = (string_drop s3553_0 s3554_0) in
    if (((p0_ = ""))) then SOME (rsd, shamt) else NONE
      | _ => NONE
    )
    ) else NONE
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3541_ : string -> maybe (mword ty5)*)

val _ = Define `
 ((s3541_:string ->((5)words$word)option) s3542_0=
    (let s3543_0 = s3542_0 in
   if ((string_startswith s3543_0 "c.add.hint.")) then  
  (case ((string_drop s3543_0 ((string_length "c.add.hint.")))) of
        s3544_0 =>
  (case ((reg_name_matches_prefix s3544_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s3545_0)) =>
  let p0_ = (string_drop s3544_0 s3545_0) in
  if (((p0_ = ""))) then SOME rs2 else NONE
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3535_ : string -> maybe (mword ty5)*)

val _ = Define `
 ((s3535_:string ->((5)words$word)option) s3536_0=
    (let s3537_0 = s3536_0 in
   if ((string_startswith s3537_0 "c.mv.hint.")) then  
  (case ((string_drop s3537_0 ((string_length "c.mv.hint.")))) of
        s3538_0 =>
  (case ((reg_name_matches_prefix s3538_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s3539_0)) =>
  let p0_ = (string_drop s3538_0 s3539_0) in
  if (((p0_ = ""))) then SOME rs2 else NONE
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3529_ : string -> maybe (mword ty6)*)

val _ = Define `
 ((s3529_:string ->((6)words$word)option) s3530_0=
    (let s3531_0 = s3530_0 in
   if ((string_startswith s3531_0 "c.lui.hint.")) then  
  (case ((string_drop s3531_0 ((string_length "c.lui.hint.")))) of
        s3532_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s3532_0 : (( 6 words$word # ii)) option)) of
        SOME ((imm, s3533_0)) =>
  let p0_ = (string_drop s3532_0 s3533_0) in
  if (((p0_ = ""))) then SOME imm else NONE
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3523_ : string -> maybe (mword ty6)*)

val _ = Define `
 ((s3523_:string ->((6)words$word)option) s3524_0=
    (let s3525_0 = s3524_0 in
   if ((string_startswith s3525_0 "c.li.hint.")) then  
  (case ((string_drop s3525_0 ((string_length "c.li.hint.")))) of
        s3526_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s3526_0 : (( 6 words$word # ii)) option)) of
        SOME ((imm, s3527_0)) =>
  let p0_ = (string_drop s3526_0 s3527_0) in
  if (((p0_ = ""))) then SOME imm else NONE
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3517_ : string -> maybe (mword ty5)*)

val _ = Define `
 ((s3517_:string ->((5)words$word)option) s3518_0=
    (let s3519_0 = s3518_0 in
   if ((string_startswith s3519_0 "c.addi.hint.")) then  
  (case ((string_drop s3519_0 ((string_length "c.addi.hint.")))) of
        s3520_0 =>
  (case ((reg_name_matches_prefix s3520_0 : (( 5 words$word # ii)) option)) of
        SOME ((rsd, s3521_0)) =>
  let p0_ = (string_drop s3520_0 s3521_0) in
  if (((p0_ = ""))) then SOME rsd else NONE
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3511_ : string -> maybe (mword ty6)*)

val _ = Define `
 ((s3511_:string ->((6)words$word)option) s3512_0=
    (let s3513_0 = s3512_0 in
   if ((string_startswith s3513_0 "c.nop.hint.")) then  
  (case ((string_drop s3513_0 ((string_length "c.nop.hint.")))) of
        s3514_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s3514_0 : (( 6 words$word # ii)) option)) of
        SOME ((imm, s3515_0)) =>
  let p0_ = (string_drop s3514_0 s3515_0) in
  if (((p0_ = ""))) then SOME imm else NONE
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3494_ : string -> maybe ((csrop * mword ty5 * mword ty12 * mword ty5))*)

val _ = Define `
 ((s3494_:string ->(csrop#(5)words$word#(12)words$word#(5)words$word)option) s3495_0= 
  ((case s3495_0 of
         s3496_0 =>
   (case ((csr_mnemonic_matches_prefix s3496_0)) of
         SOME ((op, s3497_0)) =>
   (case ((string_drop s3496_0 s3497_0)) of
         s3498_0 =>
   (case ((spc_matches_prefix0 s3498_0)) of
         SOME ((() , s3499_0)) =>
   (case ((string_drop s3498_0 s3499_0)) of
         s3500_0 =>
   (case ((reg_name_matches_prefix s3500_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s3501_0)) =>
   (case ((string_drop s3500_0 s3501_0)) of
         s3502_0 =>
   (case ((sep_matches_prefix s3502_0)) of
         SOME ((() , s3503_0)) =>
   (case ((string_drop s3502_0 s3503_0)) of
         s3504_0 =>
   (case ((csr_name_map_matches_prefix s3504_0
          : (( 12 words$word # ii)) option)) of
         SOME ((csr, s3505_0)) =>
   (case ((string_drop s3504_0 s3505_0)) of
         s3506_0 =>
   (case ((sep_matches_prefix s3506_0)) of
         SOME ((() , s3507_0)) =>
   (case ((string_drop s3506_0 s3507_0)) of
         s3508_0 =>
   (case ((reg_name_matches_prefix s3508_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s3509_0)) =>
   let p0_ = (string_drop s3508_0 s3509_0) in
   if (((p0_ = ""))) then SOME (op, rd, csr, rs1) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s3476_ : string -> maybe ((csrop * mword ty5 * mword ty12 * mword ty5))*)

val _ = Define `
 ((s3476_:string ->(csrop#(5)words$word#(12)words$word#(5)words$word)option) s3477_0= 
  ((case s3477_0 of
         s3478_0 =>
   (case ((csr_mnemonic_matches_prefix s3478_0)) of
         SOME ((op, s3479_0)) =>
   let s3480_0 = (string_drop s3478_0 s3479_0) in
   if ((string_startswith s3480_0 "i")) then
     (case ((string_drop s3480_0 ((string_length "i")))) of
           s3481_0 =>
     (case ((spc_matches_prefix0 s3481_0)) of
           SOME ((() , s3482_0)) =>
     (case ((string_drop s3481_0 s3482_0)) of
           s3483_0 =>
     (case ((reg_name_matches_prefix s3483_0 : (( 5 words$word # ii)) option)) of
           SOME ((rd, s3484_0)) =>
     (case ((string_drop s3483_0 s3484_0)) of
           s3485_0 =>
     (case ((sep_matches_prefix s3485_0)) of
           SOME ((() , s3486_0)) =>
     (case ((string_drop s3485_0 s3486_0)) of
           s3487_0 =>
     (case ((csr_name_map_matches_prefix s3487_0
            : (( 12 words$word # ii)) option)) of
           SOME ((csr, s3488_0)) =>
     (case ((string_drop s3487_0 s3488_0)) of
           s3489_0 =>
     (case ((sep_matches_prefix s3489_0)) of
           SOME ((() , s3490_0)) =>
     (case ((string_drop s3489_0 s3490_0)) of
           s3491_0 =>
     (case ((hex_bits_5_matches_prefix
               instance_Sail2_values_Bitvector_Machine_word_mword_dict
               s3491_0 : (( 5 words$word # ii)) option)) of
           SOME ((rs1, s3492_0)) =>
     let p0_ = (string_drop s3491_0 s3492_0) in
     if (((p0_ = ""))) then SOME (op, rd, csr, rs1) else NONE
       | _ => NONE
     )
     )
       | _ => NONE
     )
     )
       | _ => NONE
     )
     )
       | _ => NONE
     )
     )
       | _ => NONE
     )
     )
       | _ => NONE
     )
     ) else NONE
     | _ => NONE
   )
   )))`;


(*val _s3457_ : string -> maybe ((bool * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s3457_:string ->(bool#(5)words$word#(5)words$word#(5)words$word)option) s3458_0=
    (let s3459_0 = s3458_0 in
   if ((string_startswith s3459_0 "rem")) then  
  (case ((string_drop s3459_0 ((string_length "rem")))) of
        s3460_0 =>
  (case ((maybe_not_u_matches_prefix s3460_0)) of
        SOME ((s, s3461_0)) =>
  let s3462_0 = (string_drop s3460_0 s3461_0) in
  if ((string_startswith s3462_0 "w")) then
    (case ((string_drop s3462_0 ((string_length "w")))) of
          s3463_0 =>
    (case ((spc_matches_prefix0 s3463_0)) of
          SOME ((() , s3464_0)) =>
    (case ((string_drop s3463_0 s3464_0)) of
          s3465_0 =>
    (case ((reg_name_matches_prefix s3465_0 : (( 5 words$word # ii)) option)) of
          SOME ((rd, s3466_0)) =>
    (case ((string_drop s3465_0 s3466_0)) of
          s3467_0 =>
    (case ((sep_matches_prefix s3467_0)) of
          SOME ((() , s3468_0)) =>
    (case ((string_drop s3467_0 s3468_0)) of
          s3469_0 =>
    (case ((reg_name_matches_prefix s3469_0 : (( 5 words$word # ii)) option)) of
          SOME ((rs1, s3470_0)) =>
    (case ((string_drop s3469_0 s3470_0)) of
          s3471_0 =>
    (case ((sep_matches_prefix s3471_0)) of
          SOME ((() , s3472_0)) =>
    (case ((string_drop s3471_0 s3472_0)) of
          s3473_0 =>
    (case ((reg_name_matches_prefix s3473_0 : (( 5 words$word # ii)) option)) of
          SOME ((rs2, s3474_0)) =>
    let p0_ = (string_drop s3473_0 s3474_0) in
    if (((p0_ = ""))) then SOME (s, rd, rs1, rs2) else NONE
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    ) else NONE
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3438_ : string -> maybe ((bool * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s3438_:string ->(bool#(5)words$word#(5)words$word#(5)words$word)option) s3439_0=
    (let s3440_0 = s3439_0 in
   if ((string_startswith s3440_0 "div")) then  
  (case ((string_drop s3440_0 ((string_length "div")))) of
        s3441_0 =>
  (case ((maybe_not_u_matches_prefix s3441_0)) of
        SOME ((s, s3442_0)) =>
  let s3443_0 = (string_drop s3441_0 s3442_0) in
  if ((string_startswith s3443_0 "w")) then
    (case ((string_drop s3443_0 ((string_length "w")))) of
          s3444_0 =>
    (case ((spc_matches_prefix0 s3444_0)) of
          SOME ((() , s3445_0)) =>
    (case ((string_drop s3444_0 s3445_0)) of
          s3446_0 =>
    (case ((reg_name_matches_prefix s3446_0 : (( 5 words$word # ii)) option)) of
          SOME ((rd, s3447_0)) =>
    (case ((string_drop s3446_0 s3447_0)) of
          s3448_0 =>
    (case ((sep_matches_prefix s3448_0)) of
          SOME ((() , s3449_0)) =>
    (case ((string_drop s3448_0 s3449_0)) of
          s3450_0 =>
    (case ((reg_name_matches_prefix s3450_0 : (( 5 words$word # ii)) option)) of
          SOME ((rs1, s3451_0)) =>
    (case ((string_drop s3450_0 s3451_0)) of
          s3452_0 =>
    (case ((sep_matches_prefix s3452_0)) of
          SOME ((() , s3453_0)) =>
    (case ((string_drop s3452_0 s3453_0)) of
          s3454_0 =>
    (case ((reg_name_matches_prefix s3454_0 : (( 5 words$word # ii)) option)) of
          SOME ((rs2, s3455_0)) =>
    let p0_ = (string_drop s3454_0 s3455_0) in
    if (((p0_ = ""))) then SOME (s, rd, rs1, rs2) else NONE
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    ) else NONE
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3422_ : string -> maybe ((mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s3422_:string ->((5)words$word#(5)words$word#(5)words$word)option) s3423_0=
    (let s3424_0 = s3423_0 in
   if ((string_startswith s3424_0 "mulw")) then  
  (case ((string_drop s3424_0 ((string_length "mulw")))) of
        s3425_0 =>
  (case ((spc_matches_prefix0 s3425_0)) of
        SOME ((() , s3426_0)) =>
  (case ((string_drop s3425_0 s3426_0)) of
        s3427_0 =>
  (case ((reg_name_matches_prefix s3427_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s3428_0)) =>
  (case ((string_drop s3427_0 s3428_0)) of
        s3429_0 =>
  (case ((sep_matches_prefix s3429_0)) of
        SOME ((() , s3430_0)) =>
  (case ((string_drop s3429_0 s3430_0)) of
        s3431_0 =>
  (case ((reg_name_matches_prefix s3431_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs1, s3432_0)) =>
  (case ((string_drop s3431_0 s3432_0)) of
        s3433_0 =>
  (case ((sep_matches_prefix s3433_0)) of
        SOME ((() , s3434_0)) =>
  (case ((string_drop s3433_0 s3434_0)) of
        s3435_0 =>
  (case ((reg_name_matches_prefix s3435_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s3436_0)) =>
  let p0_ = (string_drop s3435_0 s3436_0) in
  if (((p0_ = ""))) then SOME (rd, rs1, rs2) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3404_ : string -> maybe ((bool * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s3404_:string ->(bool#(5)words$word#(5)words$word#(5)words$word)option) s3405_0=
    (let s3406_0 = s3405_0 in
   if ((string_startswith s3406_0 "rem")) then  
  (case ((string_drop s3406_0 ((string_length "rem")))) of
        s3407_0 =>
  (case ((maybe_not_u_matches_prefix s3407_0)) of
        SOME ((s, s3408_0)) =>
  (case ((string_drop s3407_0 s3408_0)) of
        s3409_0 =>
  (case ((spc_matches_prefix0 s3409_0)) of
        SOME ((() , s3410_0)) =>
  (case ((string_drop s3409_0 s3410_0)) of
        s3411_0 =>
  (case ((reg_name_matches_prefix s3411_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s3412_0)) =>
  (case ((string_drop s3411_0 s3412_0)) of
        s3413_0 =>
  (case ((sep_matches_prefix s3413_0)) of
        SOME ((() , s3414_0)) =>
  (case ((string_drop s3413_0 s3414_0)) of
        s3415_0 =>
  (case ((reg_name_matches_prefix s3415_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs1, s3416_0)) =>
  (case ((string_drop s3415_0 s3416_0)) of
        s3417_0 =>
  (case ((sep_matches_prefix s3417_0)) of
        SOME ((() , s3418_0)) =>
  (case ((string_drop s3417_0 s3418_0)) of
        s3419_0 =>
  (case ((reg_name_matches_prefix s3419_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s3420_0)) =>
  let p0_ = (string_drop s3419_0 s3420_0) in
  if (((p0_ = ""))) then SOME (s, rd, rs1, rs2) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3386_ : string -> maybe ((bool * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s3386_:string ->(bool#(5)words$word#(5)words$word#(5)words$word)option) s3387_0=
    (let s3388_0 = s3387_0 in
   if ((string_startswith s3388_0 "div")) then  
  (case ((string_drop s3388_0 ((string_length "div")))) of
        s3389_0 =>
  (case ((maybe_not_u_matches_prefix s3389_0)) of
        SOME ((s, s3390_0)) =>
  (case ((string_drop s3389_0 s3390_0)) of
        s3391_0 =>
  (case ((spc_matches_prefix0 s3391_0)) of
        SOME ((() , s3392_0)) =>
  (case ((string_drop s3391_0 s3392_0)) of
        s3393_0 =>
  (case ((reg_name_matches_prefix s3393_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s3394_0)) =>
  (case ((string_drop s3393_0 s3394_0)) of
        s3395_0 =>
  (case ((sep_matches_prefix s3395_0)) of
        SOME ((() , s3396_0)) =>
  (case ((string_drop s3395_0 s3396_0)) of
        s3397_0 =>
  (case ((reg_name_matches_prefix s3397_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs1, s3398_0)) =>
  (case ((string_drop s3397_0 s3398_0)) of
        s3399_0 =>
  (case ((sep_matches_prefix s3399_0)) of
        SOME ((() , s3400_0)) =>
  (case ((string_drop s3399_0 s3400_0)) of
        s3401_0 =>
  (case ((reg_name_matches_prefix s3401_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s3402_0)) =>
  let p0_ = (string_drop s3401_0 s3402_0) in
  if (((p0_ = ""))) then SOME (s, rd, rs1, rs2) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3369_ : string -> maybe ((bool * bool * bool * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s3369_:string ->(bool#bool#bool#(5)words$word#(5)words$word#(5)words$word)option) s3370_0= 
  ((case s3370_0 of
         s3371_0 =>
   (case ((mul_mnemonic_matches_prefix s3371_0)) of
         SOME (((high, signed1, signed2), s3372_0)) =>
   (case ((string_drop s3371_0 s3372_0)) of
         s3373_0 =>
   (case ((spc_matches_prefix0 s3373_0)) of
         SOME ((() , s3374_0)) =>
   (case ((string_drop s3373_0 s3374_0)) of
         s3375_0 =>
   (case ((reg_name_matches_prefix s3375_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s3376_0)) =>
   (case ((string_drop s3375_0 s3376_0)) of
         s3377_0 =>
   (case ((sep_matches_prefix s3377_0)) of
         SOME ((() , s3378_0)) =>
   (case ((string_drop s3377_0 s3378_0)) of
         s3379_0 =>
   (case ((reg_name_matches_prefix s3379_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s3380_0)) =>
   (case ((string_drop s3379_0 s3380_0)) of
         s3381_0 =>
   (case ((sep_matches_prefix s3381_0)) of
         SOME ((() , s3382_0)) =>
   (case ((string_drop s3381_0 s3382_0)) of
         s3383_0 =>
   (case ((reg_name_matches_prefix s3383_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s3384_0)) =>
   let p0_ = (string_drop s3383_0 s3384_0) in
   if (((p0_ = ""))) then SOME (high, signed1, signed2, rd, rs1, rs2) else
     NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s3357_ : string -> maybe ((mword ty5 * mword ty5))*)

val _ = Define `
 ((s3357_:string ->((5)words$word#(5)words$word)option) s3358_0=
    (let s3359_0 = s3358_0 in
   if ((string_startswith s3359_0 "c.add")) then  
  (case ((string_drop s3359_0 ((string_length "c.add")))) of
        s3360_0 =>
  (case ((spc_matches_prefix0 s3360_0)) of
        SOME ((() , s3361_0)) =>
  (case ((string_drop s3360_0 s3361_0)) of
        s3362_0 =>
  (case ((reg_name_matches_prefix s3362_0 : (( 5 words$word # ii)) option)) of
        SOME ((rsd, s3363_0)) =>
  (case ((string_drop s3362_0 s3363_0)) of
        s3364_0 =>
  (case ((sep_matches_prefix s3364_0)) of
        SOME ((() , s3365_0)) =>
  (case ((string_drop s3364_0 s3365_0)) of
        s3366_0 =>
  (case ((reg_name_matches_prefix s3366_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s3367_0)) =>
  let p0_ = (string_drop s3366_0 s3367_0) in
  if (((p0_ = ""))) then SOME (rsd, rs2) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3345_ : string -> maybe ((mword ty5 * mword ty5))*)

val _ = Define `
 ((s3345_:string ->((5)words$word#(5)words$word)option) s3346_0=
    (let s3347_0 = s3346_0 in
   if ((string_startswith s3347_0 "c.mv")) then  
  (case ((string_drop s3347_0 ((string_length "c.mv")))) of
        s3348_0 =>
  (case ((spc_matches_prefix0 s3348_0)) of
        SOME ((() , s3349_0)) =>
  (case ((string_drop s3348_0 s3349_0)) of
        s3350_0 =>
  (case ((reg_name_matches_prefix s3350_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s3351_0)) =>
  (case ((string_drop s3350_0 s3351_0)) of
        s3352_0 =>
  (case ((sep_matches_prefix s3352_0)) of
        SOME ((() , s3353_0)) =>
  (case ((string_drop s3352_0 s3353_0)) of
        s3354_0 =>
  (case ((reg_name_matches_prefix s3354_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s3355_0)) =>
  let p0_ = (string_drop s3354_0 s3355_0) in
  if (((p0_ = ""))) then SOME (rd, rs2) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3337_ : string -> maybe (mword ty5)*)

val _ = Define `
 ((s3337_:string ->((5)words$word)option) s3338_0=
    (let s3339_0 = s3338_0 in
   if ((string_startswith s3339_0 "c.jalr")) then  
  (case ((string_drop s3339_0 ((string_length "c.jalr")))) of
        s3340_0 =>
  (case ((spc_matches_prefix0 s3340_0)) of
        SOME ((() , s3341_0)) =>
  (case ((string_drop s3340_0 s3341_0)) of
        s3342_0 =>
  (case ((reg_name_matches_prefix s3342_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs1, s3343_0)) =>
  let p0_ = (string_drop s3342_0 s3343_0) in
  if (((p0_ = ""))) then SOME rs1 else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3329_ : string -> maybe (mword ty5)*)

val _ = Define `
 ((s3329_:string ->((5)words$word)option) s3330_0=
    (let s3331_0 = s3330_0 in
   if ((string_startswith s3331_0 "c.jr")) then  
  (case ((string_drop s3331_0 ((string_length "c.jr")))) of
        s3332_0 =>
  (case ((spc_matches_prefix0 s3332_0)) of
        SOME ((() , s3333_0)) =>
  (case ((string_drop s3332_0 s3333_0)) of
        s3334_0 =>
  (case ((reg_name_matches_prefix s3334_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs1, s3335_0)) =>
  let p0_ = (string_drop s3334_0 s3335_0) in
  if (((p0_ = ""))) then SOME rs1 else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3317_ : string -> maybe ((mword ty5 * mword ty6))*)

val _ = Define `
 ((s3317_:string ->((5)words$word#(6)words$word)option) s3318_0=
    (let s3319_0 = s3318_0 in
   if ((string_startswith s3319_0 "c.sdsp")) then  
  (case ((string_drop s3319_0 ((string_length "c.sdsp")))) of
        s3320_0 =>
  (case ((spc_matches_prefix0 s3320_0)) of
        SOME ((() , s3321_0)) =>
  (case ((string_drop s3320_0 s3321_0)) of
        s3322_0 =>
  (case ((reg_name_matches_prefix s3322_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s3323_0)) =>
  (case ((string_drop s3322_0 s3323_0)) of
        s3324_0 =>
  (case ((sep_matches_prefix s3324_0)) of
        SOME ((() , s3325_0)) =>
  (case ((string_drop s3324_0 s3325_0)) of
        s3326_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s3326_0 : (( 6 words$word # ii)) option)) of
        SOME ((uimm, s3327_0)) =>
  let p0_ = (string_drop s3326_0 s3327_0) in
  if (((p0_ = ""))) then SOME (rs2, uimm) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3305_ : string -> maybe ((mword ty5 * mword ty6))*)

val _ = Define `
 ((s3305_:string ->((5)words$word#(6)words$word)option) s3306_0=
    (let s3307_0 = s3306_0 in
   if ((string_startswith s3307_0 "c.swsp")) then  
  (case ((string_drop s3307_0 ((string_length "c.swsp")))) of
        s3308_0 =>
  (case ((spc_matches_prefix0 s3308_0)) of
        SOME ((() , s3309_0)) =>
  (case ((string_drop s3308_0 s3309_0)) of
        s3310_0 =>
  (case ((reg_name_matches_prefix s3310_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s3311_0)) =>
  (case ((string_drop s3310_0 s3311_0)) of
        s3312_0 =>
  (case ((sep_matches_prefix s3312_0)) of
        SOME ((() , s3313_0)) =>
  (case ((string_drop s3312_0 s3313_0)) of
        s3314_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s3314_0 : (( 6 words$word # ii)) option)) of
        SOME ((uimm, s3315_0)) =>
  let p0_ = (string_drop s3314_0 s3315_0) in
  if (((p0_ = ""))) then SOME (rd, uimm) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3293_ : string -> maybe ((mword ty5 * mword ty6))*)

val _ = Define `
 ((s3293_:string ->((5)words$word#(6)words$word)option) s3294_0=
    (let s3295_0 = s3294_0 in
   if ((string_startswith s3295_0 "c.ldsp")) then  
  (case ((string_drop s3295_0 ((string_length "c.ldsp")))) of
        s3296_0 =>
  (case ((spc_matches_prefix0 s3296_0)) of
        SOME ((() , s3297_0)) =>
  (case ((string_drop s3296_0 s3297_0)) of
        s3298_0 =>
  (case ((reg_name_matches_prefix s3298_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s3299_0)) =>
  (case ((string_drop s3298_0 s3299_0)) of
        s3300_0 =>
  (case ((sep_matches_prefix s3300_0)) of
        SOME ((() , s3301_0)) =>
  (case ((string_drop s3300_0 s3301_0)) of
        s3302_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s3302_0 : (( 6 words$word # ii)) option)) of
        SOME ((uimm, s3303_0)) =>
  let p0_ = (string_drop s3302_0 s3303_0) in
  if (((p0_ = ""))) then SOME (rd, uimm) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3281_ : string -> maybe ((mword ty5 * mword ty6))*)

val _ = Define `
 ((s3281_:string ->((5)words$word#(6)words$word)option) s3282_0=
    (let s3283_0 = s3282_0 in
   if ((string_startswith s3283_0 "c.lwsp")) then  
  (case ((string_drop s3283_0 ((string_length "c.lwsp")))) of
        s3284_0 =>
  (case ((spc_matches_prefix0 s3284_0)) of
        SOME ((() , s3285_0)) =>
  (case ((string_drop s3284_0 s3285_0)) of
        s3286_0 =>
  (case ((reg_name_matches_prefix s3286_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s3287_0)) =>
  (case ((string_drop s3286_0 s3287_0)) of
        s3288_0 =>
  (case ((sep_matches_prefix s3288_0)) of
        SOME ((() , s3289_0)) =>
  (case ((string_drop s3288_0 s3289_0)) of
        s3290_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s3290_0 : (( 6 words$word # ii)) option)) of
        SOME ((uimm, s3291_0)) =>
  let p0_ = (string_drop s3290_0 s3291_0) in
  if (((p0_ = ""))) then SOME (rd, uimm) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3269_ : string -> maybe ((mword ty5 * mword ty6))*)

val _ = Define `
 ((s3269_:string ->((5)words$word#(6)words$word)option) s3270_0=
    (let s3271_0 = s3270_0 in
   if ((string_startswith s3271_0 "c.slli")) then  
  (case ((string_drop s3271_0 ((string_length "c.slli")))) of
        s3272_0 =>
  (case ((spc_matches_prefix0 s3272_0)) of
        SOME ((() , s3273_0)) =>
  (case ((string_drop s3272_0 s3273_0)) of
        s3274_0 =>
  (case ((reg_name_matches_prefix s3274_0 : (( 5 words$word # ii)) option)) of
        SOME ((rsd, s3275_0)) =>
  (case ((string_drop s3274_0 s3275_0)) of
        s3276_0 =>
  (case ((sep_matches_prefix s3276_0)) of
        SOME ((() , s3277_0)) =>
  (case ((string_drop s3276_0 s3277_0)) of
        s3278_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s3278_0 : (( 6 words$word # ii)) option)) of
        SOME ((shamt, s3279_0)) =>
  let p0_ = (string_drop s3278_0 s3279_0) in
  if (((p0_ = ""))) then SOME (rsd, shamt) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3257_ : string -> maybe ((mword ty3 * mword ty8))*)

val _ = Define `
 ((s3257_:string ->((3)words$word#(8)words$word)option) s3258_0=
    (let s3259_0 = s3258_0 in
   if ((string_startswith s3259_0 "c.bnez")) then  
  (case ((string_drop s3259_0 ((string_length "c.bnez")))) of
        s3260_0 =>
  (case ((spc_matches_prefix0 s3260_0)) of
        SOME ((() , s3261_0)) =>
  (case ((string_drop s3260_0 s3261_0)) of
        s3262_0 =>
  (case ((creg_name_matches_prefix s3262_0 : (( 3 words$word # ii)) option)) of
        SOME ((rs, s3263_0)) =>
  (case ((string_drop s3262_0 s3263_0)) of
        s3264_0 =>
  (case ((sep_matches_prefix s3264_0)) of
        SOME ((() , s3265_0)) =>
  (case ((string_drop s3264_0 s3265_0)) of
        s3266_0 =>
  (case ((hex_bits_8_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s3266_0 : (( 8 words$word # ii)) option)) of
        SOME ((imm, s3267_0)) =>
  let p0_ = (string_drop s3266_0 s3267_0) in
  if (((p0_ = ""))) then SOME (rs, imm) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3245_ : string -> maybe ((mword ty3 * mword ty8))*)

val _ = Define `
 ((s3245_:string ->((3)words$word#(8)words$word)option) s3246_0=
    (let s3247_0 = s3246_0 in
   if ((string_startswith s3247_0 "c.beqz")) then  
  (case ((string_drop s3247_0 ((string_length "c.beqz")))) of
        s3248_0 =>
  (case ((spc_matches_prefix0 s3248_0)) of
        SOME ((() , s3249_0)) =>
  (case ((string_drop s3248_0 s3249_0)) of
        s3250_0 =>
  (case ((creg_name_matches_prefix s3250_0 : (( 3 words$word # ii)) option)) of
        SOME ((rs, s3251_0)) =>
  (case ((string_drop s3250_0 s3251_0)) of
        s3252_0 =>
  (case ((sep_matches_prefix s3252_0)) of
        SOME ((() , s3253_0)) =>
  (case ((string_drop s3252_0 s3253_0)) of
        s3254_0 =>
  (case ((hex_bits_8_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s3254_0 : (( 8 words$word # ii)) option)) of
        SOME ((imm, s3255_0)) =>
  let p0_ = (string_drop s3254_0 s3255_0) in
  if (((p0_ = ""))) then SOME (rs, imm) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3237_ : string -> maybe (mword ty11)*)

val _ = Define `
 ((s3237_:string ->((11)words$word)option) s3238_0=
    (let s3239_0 = s3238_0 in
   if ((string_startswith s3239_0 "c.j")) then  
  (case ((string_drop s3239_0 ((string_length "c.j")))) of
        s3240_0 =>
  (case ((spc_matches_prefix0 s3240_0)) of
        SOME ((() , s3241_0)) =>
  (case ((string_drop s3240_0 s3241_0)) of
        s3242_0 =>
  (case ((hex_bits_11_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s3242_0 : (( 11 words$word # ii)) option)) of
        SOME ((imm, s3243_0)) =>
  let p0_ = (string_drop s3242_0 s3243_0) in
  if (((p0_ = ""))) then SOME imm else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3225_ : string -> maybe ((mword ty3 * mword ty3))*)

val _ = Define `
 ((s3225_:string ->((3)words$word#(3)words$word)option) s3226_0=
    (let s3227_0 = s3226_0 in
   if ((string_startswith s3227_0 "c.addw")) then  
  (case ((string_drop s3227_0 ((string_length "c.addw")))) of
        s3228_0 =>
  (case ((spc_matches_prefix0 s3228_0)) of
        SOME ((() , s3229_0)) =>
  (case ((string_drop s3228_0 s3229_0)) of
        s3230_0 =>
  (case ((creg_name_matches_prefix s3230_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s3231_0)) =>
  (case ((string_drop s3230_0 s3231_0)) of
        s3232_0 =>
  (case ((sep_matches_prefix s3232_0)) of
        SOME ((() , s3233_0)) =>
  (case ((string_drop s3232_0 s3233_0)) of
        s3234_0 =>
  (case ((creg_name_matches_prefix s3234_0 : (( 3 words$word # ii)) option)) of
        SOME ((rs2, s3235_0)) =>
  let p0_ = (string_drop s3234_0 s3235_0) in
  if (((p0_ = ""))) then SOME (rsd, rs2) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3213_ : string -> maybe ((mword ty3 * mword ty3))*)

val _ = Define `
 ((s3213_:string ->((3)words$word#(3)words$word)option) s3214_0=
    (let s3215_0 = s3214_0 in
   if ((string_startswith s3215_0 "c.subw")) then  
  (case ((string_drop s3215_0 ((string_length "c.subw")))) of
        s3216_0 =>
  (case ((spc_matches_prefix0 s3216_0)) of
        SOME ((() , s3217_0)) =>
  (case ((string_drop s3216_0 s3217_0)) of
        s3218_0 =>
  (case ((creg_name_matches_prefix s3218_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s3219_0)) =>
  (case ((string_drop s3218_0 s3219_0)) of
        s3220_0 =>
  (case ((sep_matches_prefix s3220_0)) of
        SOME ((() , s3221_0)) =>
  (case ((string_drop s3220_0 s3221_0)) of
        s3222_0 =>
  (case ((creg_name_matches_prefix s3222_0 : (( 3 words$word # ii)) option)) of
        SOME ((rs2, s3223_0)) =>
  let p0_ = (string_drop s3222_0 s3223_0) in
  if (((p0_ = ""))) then SOME (rsd, rs2) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3201_ : string -> maybe ((mword ty3 * mword ty3))*)

val _ = Define `
 ((s3201_:string ->((3)words$word#(3)words$word)option) s3202_0=
    (let s3203_0 = s3202_0 in
   if ((string_startswith s3203_0 "c.and")) then  
  (case ((string_drop s3203_0 ((string_length "c.and")))) of
        s3204_0 =>
  (case ((spc_matches_prefix0 s3204_0)) of
        SOME ((() , s3205_0)) =>
  (case ((string_drop s3204_0 s3205_0)) of
        s3206_0 =>
  (case ((creg_name_matches_prefix s3206_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s3207_0)) =>
  (case ((string_drop s3206_0 s3207_0)) of
        s3208_0 =>
  (case ((sep_matches_prefix s3208_0)) of
        SOME ((() , s3209_0)) =>
  (case ((string_drop s3208_0 s3209_0)) of
        s3210_0 =>
  (case ((creg_name_matches_prefix s3210_0 : (( 3 words$word # ii)) option)) of
        SOME ((rs2, s3211_0)) =>
  let p0_ = (string_drop s3210_0 s3211_0) in
  if (((p0_ = ""))) then SOME (rsd, rs2) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3189_ : string -> maybe ((mword ty3 * mword ty3))*)

val _ = Define `
 ((s3189_:string ->((3)words$word#(3)words$word)option) s3190_0=
    (let s3191_0 = s3190_0 in
   if ((string_startswith s3191_0 "c.or")) then  
  (case ((string_drop s3191_0 ((string_length "c.or")))) of
        s3192_0 =>
  (case ((spc_matches_prefix0 s3192_0)) of
        SOME ((() , s3193_0)) =>
  (case ((string_drop s3192_0 s3193_0)) of
        s3194_0 =>
  (case ((creg_name_matches_prefix s3194_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s3195_0)) =>
  (case ((string_drop s3194_0 s3195_0)) of
        s3196_0 =>
  (case ((sep_matches_prefix s3196_0)) of
        SOME ((() , s3197_0)) =>
  (case ((string_drop s3196_0 s3197_0)) of
        s3198_0 =>
  (case ((creg_name_matches_prefix s3198_0 : (( 3 words$word # ii)) option)) of
        SOME ((rs2, s3199_0)) =>
  let p0_ = (string_drop s3198_0 s3199_0) in
  if (((p0_ = ""))) then SOME (rsd, rs2) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3177_ : string -> maybe ((mword ty3 * mword ty3))*)

val _ = Define `
 ((s3177_:string ->((3)words$word#(3)words$word)option) s3178_0=
    (let s3179_0 = s3178_0 in
   if ((string_startswith s3179_0 "c.xor")) then  
  (case ((string_drop s3179_0 ((string_length "c.xor")))) of
        s3180_0 =>
  (case ((spc_matches_prefix0 s3180_0)) of
        SOME ((() , s3181_0)) =>
  (case ((string_drop s3180_0 s3181_0)) of
        s3182_0 =>
  (case ((creg_name_matches_prefix s3182_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s3183_0)) =>
  (case ((string_drop s3182_0 s3183_0)) of
        s3184_0 =>
  (case ((sep_matches_prefix s3184_0)) of
        SOME ((() , s3185_0)) =>
  (case ((string_drop s3184_0 s3185_0)) of
        s3186_0 =>
  (case ((creg_name_matches_prefix s3186_0 : (( 3 words$word # ii)) option)) of
        SOME ((rs2, s3187_0)) =>
  let p0_ = (string_drop s3186_0 s3187_0) in
  if (((p0_ = ""))) then SOME (rsd, rs2) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3165_ : string -> maybe ((mword ty3 * mword ty3))*)

val _ = Define `
 ((s3165_:string ->((3)words$word#(3)words$word)option) s3166_0=
    (let s3167_0 = s3166_0 in
   if ((string_startswith s3167_0 "c.sub")) then  
  (case ((string_drop s3167_0 ((string_length "c.sub")))) of
        s3168_0 =>
  (case ((spc_matches_prefix0 s3168_0)) of
        SOME ((() , s3169_0)) =>
  (case ((string_drop s3168_0 s3169_0)) of
        s3170_0 =>
  (case ((creg_name_matches_prefix s3170_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s3171_0)) =>
  (case ((string_drop s3170_0 s3171_0)) of
        s3172_0 =>
  (case ((sep_matches_prefix s3172_0)) of
        SOME ((() , s3173_0)) =>
  (case ((string_drop s3172_0 s3173_0)) of
        s3174_0 =>
  (case ((creg_name_matches_prefix s3174_0 : (( 3 words$word # ii)) option)) of
        SOME ((rs2, s3175_0)) =>
  let p0_ = (string_drop s3174_0 s3175_0) in
  if (((p0_ = ""))) then SOME (rsd, rs2) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3153_ : string -> maybe ((mword ty3 * mword ty6))*)

val _ = Define `
 ((s3153_:string ->((3)words$word#(6)words$word)option) s3154_0=
    (let s3155_0 = s3154_0 in
   if ((string_startswith s3155_0 "c.andi")) then  
  (case ((string_drop s3155_0 ((string_length "c.andi")))) of
        s3156_0 =>
  (case ((spc_matches_prefix0 s3156_0)) of
        SOME ((() , s3157_0)) =>
  (case ((string_drop s3156_0 s3157_0)) of
        s3158_0 =>
  (case ((creg_name_matches_prefix s3158_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s3159_0)) =>
  (case ((string_drop s3158_0 s3159_0)) of
        s3160_0 =>
  (case ((sep_matches_prefix s3160_0)) of
        SOME ((() , s3161_0)) =>
  (case ((string_drop s3160_0 s3161_0)) of
        s3162_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s3162_0 : (( 6 words$word # ii)) option)) of
        SOME ((imm, s3163_0)) =>
  let p0_ = (string_drop s3162_0 s3163_0) in
  if (((p0_ = ""))) then SOME (rsd, imm) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3141_ : string -> maybe ((mword ty3 * mword ty6))*)

val _ = Define `
 ((s3141_:string ->((3)words$word#(6)words$word)option) s3142_0=
    (let s3143_0 = s3142_0 in
   if ((string_startswith s3143_0 "c.srai")) then  
  (case ((string_drop s3143_0 ((string_length "c.srai")))) of
        s3144_0 =>
  (case ((spc_matches_prefix0 s3144_0)) of
        SOME ((() , s3145_0)) =>
  (case ((string_drop s3144_0 s3145_0)) of
        s3146_0 =>
  (case ((creg_name_matches_prefix s3146_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s3147_0)) =>
  (case ((string_drop s3146_0 s3147_0)) of
        s3148_0 =>
  (case ((sep_matches_prefix s3148_0)) of
        SOME ((() , s3149_0)) =>
  (case ((string_drop s3148_0 s3149_0)) of
        s3150_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s3150_0 : (( 6 words$word # ii)) option)) of
        SOME ((shamt, s3151_0)) =>
  let p0_ = (string_drop s3150_0 s3151_0) in
  if (((p0_ = ""))) then SOME (rsd, shamt) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3129_ : string -> maybe ((mword ty3 * mword ty6))*)

val _ = Define `
 ((s3129_:string ->((3)words$word#(6)words$word)option) s3130_0=
    (let s3131_0 = s3130_0 in
   if ((string_startswith s3131_0 "c.srli")) then  
  (case ((string_drop s3131_0 ((string_length "c.srli")))) of
        s3132_0 =>
  (case ((spc_matches_prefix0 s3132_0)) of
        SOME ((() , s3133_0)) =>
  (case ((string_drop s3132_0 s3133_0)) of
        s3134_0 =>
  (case ((creg_name_matches_prefix s3134_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s3135_0)) =>
  (case ((string_drop s3134_0 s3135_0)) of
        s3136_0 =>
  (case ((sep_matches_prefix s3136_0)) of
        SOME ((() , s3137_0)) =>
  (case ((string_drop s3136_0 s3137_0)) of
        s3138_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s3138_0 : (( 6 words$word # ii)) option)) of
        SOME ((shamt, s3139_0)) =>
  let p0_ = (string_drop s3138_0 s3139_0) in
  if (((p0_ = ""))) then SOME (rsd, shamt) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3117_ : string -> maybe ((mword ty5 * mword ty6))*)

val _ = Define `
 ((s3117_:string ->((5)words$word#(6)words$word)option) s3118_0=
    (let s3119_0 = s3118_0 in
   if ((string_startswith s3119_0 "c.lui")) then  
  (case ((string_drop s3119_0 ((string_length "c.lui")))) of
        s3120_0 =>
  (case ((spc_matches_prefix0 s3120_0)) of
        SOME ((() , s3121_0)) =>
  (case ((string_drop s3120_0 s3121_0)) of
        s3122_0 =>
  (case ((reg_name_matches_prefix s3122_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s3123_0)) =>
  (case ((string_drop s3122_0 s3123_0)) of
        s3124_0 =>
  (case ((sep_matches_prefix s3124_0)) of
        SOME ((() , s3125_0)) =>
  (case ((string_drop s3124_0 s3125_0)) of
        s3126_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s3126_0 : (( 6 words$word # ii)) option)) of
        SOME ((imm, s3127_0)) =>
  let p0_ = (string_drop s3126_0 s3127_0) in
  if (((p0_ = ""))) then SOME (rd, imm) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3109_ : string -> maybe (mword ty6)*)

val _ = Define `
 ((s3109_:string ->((6)words$word)option) s3110_0=
    (let s3111_0 = s3110_0 in
   if ((string_startswith s3111_0 "c.addi16sp")) then  
  (case ((string_drop s3111_0 ((string_length "c.addi16sp")))) of
        s3112_0 =>
  (case ((spc_matches_prefix0 s3112_0)) of
        SOME ((() , s3113_0)) =>
  (case ((string_drop s3112_0 s3113_0)) of
        s3114_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s3114_0 : (( 6 words$word # ii)) option)) of
        SOME ((imm, s3115_0)) =>
  let p0_ = (string_drop s3114_0 s3115_0) in
  if (((p0_ = ""))) then SOME imm else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3097_ : string -> maybe ((mword ty5 * mword ty6))*)

val _ = Define `
 ((s3097_:string ->((5)words$word#(6)words$word)option) s3098_0=
    (let s3099_0 = s3098_0 in
   if ((string_startswith s3099_0 "c.li")) then  
  (case ((string_drop s3099_0 ((string_length "c.li")))) of
        s3100_0 =>
  (case ((spc_matches_prefix0 s3100_0)) of
        SOME ((() , s3101_0)) =>
  (case ((string_drop s3100_0 s3101_0)) of
        s3102_0 =>
  (case ((reg_name_matches_prefix s3102_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s3103_0)) =>
  (case ((string_drop s3102_0 s3103_0)) of
        s3104_0 =>
  (case ((sep_matches_prefix s3104_0)) of
        SOME ((() , s3105_0)) =>
  (case ((string_drop s3104_0 s3105_0)) of
        s3106_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s3106_0 : (( 6 words$word # ii)) option)) of
        SOME ((imm, s3107_0)) =>
  let p0_ = (string_drop s3106_0 s3107_0) in
  if (((p0_ = ""))) then SOME (rd, imm) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3085_ : string -> maybe ((mword ty5 * mword ty6))*)

val _ = Define `
 ((s3085_:string ->((5)words$word#(6)words$word)option) s3086_0=
    (let s3087_0 = s3086_0 in
   if ((string_startswith s3087_0 "c.addiw")) then  
  (case ((string_drop s3087_0 ((string_length "c.addiw")))) of
        s3088_0 =>
  (case ((spc_matches_prefix0 s3088_0)) of
        SOME ((() , s3089_0)) =>
  (case ((string_drop s3088_0 s3089_0)) of
        s3090_0 =>
  (case ((reg_name_matches_prefix s3090_0 : (( 5 words$word # ii)) option)) of
        SOME ((rsd, s3091_0)) =>
  (case ((string_drop s3090_0 s3091_0)) of
        s3092_0 =>
  (case ((sep_matches_prefix s3092_0)) of
        SOME ((() , s3093_0)) =>
  (case ((string_drop s3092_0 s3093_0)) of
        s3094_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s3094_0 : (( 6 words$word # ii)) option)) of
        SOME ((imm, s3095_0)) =>
  let p0_ = (string_drop s3094_0 s3095_0) in
  if (((p0_ = ""))) then SOME (rsd, imm) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3077_ : string -> maybe (mword ty11)*)

val _ = Define `
 ((s3077_:string ->((11)words$word)option) s3078_0=
    (let s3079_0 = s3078_0 in
   if ((string_startswith s3079_0 "c.jal")) then  
  (case ((string_drop s3079_0 ((string_length "c.jal")))) of
        s3080_0 =>
  (case ((spc_matches_prefix0 s3080_0)) of
        SOME ((() , s3081_0)) =>
  (case ((string_drop s3080_0 s3081_0)) of
        s3082_0 =>
  (case ((hex_bits_12_matches_prefix0 s3082_0 : (( 12 words$word # ii)) option)) of
        SOME ((v__1200, s3083_0)) =>
  if (((((subrange_vec_dec v__1200 (( 0 : int): ii) (( 0 : int): ii) : 1 words$word))
          = (0b0w : 1 words$word)))) then
    let (imm : 11 words$word) = ((subrange_vec_dec v__1200 (( 11 : int): ii)
                                    (( 1 : int): ii) : 11 words$word)) in
    let (imm : 11 words$word) = ((subrange_vec_dec v__1200 (( 11 : int): ii)
                                    (( 1 : int): ii) : 11 words$word)) in
    let p0_ = (string_drop s3082_0 s3083_0) in
    if (((p0_ = ""))) then SOME imm else NONE else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3065_ : string -> maybe ((mword ty5 * mword ty6))*)

val _ = Define `
 ((s3065_:string ->((5)words$word#(6)words$word)option) s3066_0=
    (let s3067_0 = s3066_0 in
   if ((string_startswith s3067_0 "c.addi")) then  
  (case ((string_drop s3067_0 ((string_length "c.addi")))) of
        s3068_0 =>
  (case ((spc_matches_prefix0 s3068_0)) of
        SOME ((() , s3069_0)) =>
  (case ((string_drop s3068_0 s3069_0)) of
        s3070_0 =>
  (case ((reg_name_matches_prefix s3070_0 : (( 5 words$word # ii)) option)) of
        SOME ((rsd, s3071_0)) =>
  (case ((string_drop s3070_0 s3071_0)) of
        s3072_0 =>
  (case ((sep_matches_prefix s3072_0)) of
        SOME ((() , s3073_0)) =>
  (case ((string_drop s3072_0 s3073_0)) of
        s3074_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s3074_0 : (( 6 words$word # ii)) option)) of
        SOME ((nzi, s3075_0)) =>
  let p0_ = (string_drop s3074_0 s3075_0) in
  if (((p0_ = ""))) then SOME (rsd, nzi) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3049_ : string -> maybe ((mword ty3 * mword ty3 * mword ty5))*)

val _ = Define `
 ((s3049_:string ->((3)words$word#(3)words$word#(5)words$word)option) s3050_0=
    (let s3051_0 = s3050_0 in
   if ((string_startswith s3051_0 "c.sd")) then  
  (case ((string_drop s3051_0 ((string_length "c.sd")))) of
        s3052_0 =>
  (case ((spc_matches_prefix0 s3052_0)) of
        SOME ((() , s3053_0)) =>
  (case ((string_drop s3052_0 s3053_0)) of
        s3054_0 =>
  (case ((creg_name_matches_prefix s3054_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsc1, s3055_0)) =>
  (case ((string_drop s3054_0 s3055_0)) of
        s3056_0 =>
  (case ((sep_matches_prefix s3056_0)) of
        SOME ((() , s3057_0)) =>
  (case ((string_drop s3056_0 s3057_0)) of
        s3058_0 =>
  (case ((creg_name_matches_prefix s3058_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsc2, s3059_0)) =>
  (case ((string_drop s3058_0 s3059_0)) of
        s3060_0 =>
  (case ((sep_matches_prefix s3060_0)) of
        SOME ((() , s3061_0)) =>
  (case ((string_drop s3060_0 s3061_0)) of
        s3062_0 =>
  (case ((hex_bits_8_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s3062_0
         : (( 8 words$word # ii)) option)) of
        SOME ((v__1202, s3063_0)) =>
  if (((((subrange_vec_dec v__1202 (( 2 : int): ii) (( 0 : int): ii)
         : 3 words$word)) = (0b000w : 3 words$word)))) then
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1202 (( 7 : int): ii) (( 3 : int): ii) : 5 words$word)) in
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1202 (( 7 : int): ii) (( 3 : int): ii) : 5 words$word)) in
    let p0_ = (string_drop s3062_0 s3063_0) in
    if (((p0_ = ""))) then SOME (rsc1, rsc2, uimm) else NONE else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3033_ : string -> maybe ((mword ty3 * mword ty3 * mword ty5))*)

val _ = Define `
 ((s3033_:string ->((3)words$word#(3)words$word#(5)words$word)option) s3034_0=
    (let s3035_0 = s3034_0 in
   if ((string_startswith s3035_0 "c.sw")) then  
  (case ((string_drop s3035_0 ((string_length "c.sw")))) of
        s3036_0 =>
  (case ((spc_matches_prefix0 s3036_0)) of
        SOME ((() , s3037_0)) =>
  (case ((string_drop s3036_0 s3037_0)) of
        s3038_0 =>
  (case ((creg_name_matches_prefix s3038_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsc1, s3039_0)) =>
  (case ((string_drop s3038_0 s3039_0)) of
        s3040_0 =>
  (case ((sep_matches_prefix s3040_0)) of
        SOME ((() , s3041_0)) =>
  (case ((string_drop s3040_0 s3041_0)) of
        s3042_0 =>
  (case ((creg_name_matches_prefix s3042_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsc2, s3043_0)) =>
  (case ((string_drop s3042_0 s3043_0)) of
        s3044_0 =>
  (case ((sep_matches_prefix s3044_0)) of
        SOME ((() , s3045_0)) =>
  (case ((string_drop s3044_0 s3045_0)) of
        s3046_0 =>
  (case ((hex_bits_7_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s3046_0
         : (( 7 words$word # ii)) option)) of
        SOME ((v__1204, s3047_0)) =>
  if (((((subrange_vec_dec v__1204 (( 1 : int): ii) (( 0 : int): ii)
         : 2 words$word)) = (0b00w : 2 words$word)))) then
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1204 (( 6 : int): ii) (( 2 : int): ii) : 5 words$word)) in
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1204 (( 6 : int): ii) (( 2 : int): ii) : 5 words$word)) in
    let p0_ = (string_drop s3046_0 s3047_0) in
    if (((p0_ = ""))) then SOME (rsc1, rsc2, uimm) else NONE else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3017_ : string -> maybe ((mword ty3 * mword ty3 * mword ty5))*)

val _ = Define `
 ((s3017_:string ->((3)words$word#(3)words$word#(5)words$word)option) s3018_0=
    (let s3019_0 = s3018_0 in
   if ((string_startswith s3019_0 "c.ld")) then  
  (case ((string_drop s3019_0 ((string_length "c.ld")))) of
        s3020_0 =>
  (case ((spc_matches_prefix0 s3020_0)) of
        SOME ((() , s3021_0)) =>
  (case ((string_drop s3020_0 s3021_0)) of
        s3022_0 =>
  (case ((creg_name_matches_prefix s3022_0 : (( 3 words$word # ii)) option)) of
        SOME ((rdc, s3023_0)) =>
  (case ((string_drop s3022_0 s3023_0)) of
        s3024_0 =>
  (case ((sep_matches_prefix s3024_0)) of
        SOME ((() , s3025_0)) =>
  (case ((string_drop s3024_0 s3025_0)) of
        s3026_0 =>
  (case ((creg_name_matches_prefix s3026_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsc, s3027_0)) =>
  (case ((string_drop s3026_0 s3027_0)) of
        s3028_0 =>
  (case ((sep_matches_prefix s3028_0)) of
        SOME ((() , s3029_0)) =>
  (case ((string_drop s3028_0 s3029_0)) of
        s3030_0 =>
  (case ((hex_bits_8_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s3030_0
         : (( 8 words$word # ii)) option)) of
        SOME ((v__1206, s3031_0)) =>
  if (((((subrange_vec_dec v__1206 (( 2 : int): ii) (( 0 : int): ii)
         : 3 words$word)) = (0b000w : 3 words$word)))) then
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1206 (( 7 : int): ii) (( 3 : int): ii) : 5 words$word)) in
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1206 (( 7 : int): ii) (( 3 : int): ii) : 5 words$word)) in
    let p0_ = (string_drop s3030_0 s3031_0) in
    if (((p0_ = ""))) then SOME (rdc, rsc, uimm) else NONE else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s3001_ : string -> maybe ((mword ty3 * mword ty3 * mword ty5))*)

val _ = Define `
 ((s3001_:string ->((3)words$word#(3)words$word#(5)words$word)option) s3002_0=
    (let s3003_0 = s3002_0 in
   if ((string_startswith s3003_0 "c.lw")) then  
  (case ((string_drop s3003_0 ((string_length "c.lw")))) of
        s3004_0 =>
  (case ((spc_matches_prefix0 s3004_0)) of
        SOME ((() , s3005_0)) =>
  (case ((string_drop s3004_0 s3005_0)) of
        s3006_0 =>
  (case ((creg_name_matches_prefix s3006_0 : (( 3 words$word # ii)) option)) of
        SOME ((rdc, s3007_0)) =>
  (case ((string_drop s3006_0 s3007_0)) of
        s3008_0 =>
  (case ((sep_matches_prefix s3008_0)) of
        SOME ((() , s3009_0)) =>
  (case ((string_drop s3008_0 s3009_0)) of
        s3010_0 =>
  (case ((creg_name_matches_prefix s3010_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsc, s3011_0)) =>
  (case ((string_drop s3010_0 s3011_0)) of
        s3012_0 =>
  (case ((sep_matches_prefix s3012_0)) of
        SOME ((() , s3013_0)) =>
  (case ((string_drop s3012_0 s3013_0)) of
        s3014_0 =>
  (case ((hex_bits_7_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s3014_0
         : (( 7 words$word # ii)) option)) of
        SOME ((v__1208, s3015_0)) =>
  if (((((subrange_vec_dec v__1208 (( 1 : int): ii) (( 0 : int): ii)
         : 2 words$word)) = (0b00w : 2 words$word)))) then
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1208 (( 6 : int): ii) (( 2 : int): ii) : 5 words$word)) in
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1208 (( 6 : int): ii) (( 2 : int): ii) : 5 words$word)) in
    let p0_ = (string_drop s3014_0 s3015_0) in
    if (((p0_ = ""))) then SOME (rdc, rsc, uimm) else NONE else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s2989_ : string -> maybe ((mword ty3 * mword ty8))*)

val _ = Define `
 ((s2989_:string ->((3)words$word#(8)words$word)option) s2990_0=
    (let s2991_0 = s2990_0 in
   if ((string_startswith s2991_0 "c.addi4spn")) then  
  (case ((string_drop s2991_0 ((string_length "c.addi4spn")))) of
        s2992_0 =>
  (case ((spc_matches_prefix0 s2992_0)) of
        SOME ((() , s2993_0)) =>
  (case ((string_drop s2992_0 s2993_0)) of
        s2994_0 =>
  (case ((creg_name_matches_prefix s2994_0 : (( 3 words$word # ii)) option)) of
        SOME ((rdc, s2995_0)) =>
  (case ((string_drop s2994_0 s2995_0)) of
        s2996_0 =>
  (case ((sep_matches_prefix s2996_0)) of
        SOME ((() , s2997_0)) =>
  (case ((string_drop s2996_0 s2997_0)) of
        s2998_0 =>
  (case ((hex_bits_10_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s2998_0 : (( 10 words$word # ii)) option)) of
        SOME ((v__1210, s2999_0)) =>
  if (((((subrange_vec_dec v__1210 (( 1 : int): ii) (( 0 : int): ii) : 2 words$word))
          = (0b00w : 2 words$word)))) then
    let (nzimm : 8 words$word) =
        ((subrange_vec_dec v__1210 (( 9 : int): ii) (( 2 : int): ii) : 8 words$word)) in
    let (nzimm : 8 words$word) =
        ((subrange_vec_dec v__1210 (( 9 : int): ii) (( 2 : int): ii) : 8 words$word)) in
    let p0_ = (string_drop s2998_0 s2999_0) in
    if (((p0_ = ""))) then SOME (rdc, nzimm) else NONE else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s2963_ : string -> maybe ((amoop * word_width * bool * bool * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s2963_:string ->(amoop#word_width#bool#bool#(5)words$word#(5)words$word#(5)words$word)option) s2964_0= 
  ((case s2964_0 of
         s2965_0 =>
   (case ((amo_mnemonic_matches_prefix s2965_0)) of
         SOME ((op, s2966_0)) =>
   let s2967_0 = (string_drop s2965_0 s2966_0) in
   if ((string_startswith s2967_0 ".")) then
     (case ((string_drop s2967_0 ((string_length ".")))) of
           s2968_0 =>
     (case ((size_mnemonic_matches_prefix s2968_0)) of
           SOME ((width, s2969_0)) =>
     (case ((string_drop s2968_0 s2969_0)) of
           s2970_0 =>
     (case ((maybe_aq_matches_prefix s2970_0)) of
           SOME ((aq, s2971_0)) =>
     (case ((string_drop s2970_0 s2971_0)) of
           s2972_0 =>
     (case ((maybe_rl_matches_prefix s2972_0)) of
           SOME ((rl, s2973_0)) =>
     (case ((string_drop s2972_0 s2973_0)) of
           s2974_0 =>
     (case ((spc_matches_prefix0 s2974_0)) of
           SOME ((() , s2975_0)) =>
     (case ((string_drop s2974_0 s2975_0)) of
           s2976_0 =>
     (case ((reg_name_matches_prefix s2976_0 : (( 5 words$word # ii)) option)) of
           SOME ((rd, s2977_0)) =>
     (case ((string_drop s2976_0 s2977_0)) of
           s2978_0 =>
     (case ((sep_matches_prefix s2978_0)) of
           SOME ((() , s2979_0)) =>
     (case ((string_drop s2978_0 s2979_0)) of
           s2980_0 =>
     (case ((reg_name_matches_prefix s2980_0 : (( 5 words$word # ii)) option)) of
           SOME ((rs2, s2981_0)) =>
     (case ((string_drop s2980_0 s2981_0)) of
           s2982_0 =>
     (case ((sep_matches_prefix s2982_0)) of
           SOME ((() , s2983_0)) =>
     let s2984_0 = (string_drop s2982_0 s2983_0) in
     if ((string_startswith s2984_0 "(")) then
       (case ((string_drop s2984_0 ((string_length "(")))) of
             s2985_0 =>
       (case ((reg_name_matches_prefix s2985_0
              : (( 5 words$word # ii)) option)) of
             SOME ((rs1, s2986_0)) =>
       let s2987_0 = (string_drop s2985_0 s2986_0) in
       if ((string_startswith s2987_0 ")")) then
         let p0_ = (string_drop s2987_0 ((string_length ")"))) in
         if (((p0_ = ""))) then SOME (op, width, aq, rl, rd, rs2, rs1) else
           NONE else NONE
         | _ => NONE
       )
       ) else NONE
       | _ => NONE
     )
     )
       | _ => NONE
     )
     )
       | _ => NONE
     )
     )
       | _ => NONE
     )
     )
       | _ => NONE
     )
     )
       | _ => NONE
     )
     )
       | _ => NONE
     )
     )
       | _ => NONE
     )
     ) else NONE
     | _ => NONE
   )
   )))`;


(*val _s2941_ : string -> maybe ((word_width * bool * bool * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s2941_:string ->(word_width#bool#bool#(5)words$word#(5)words$word#(5)words$word)option) s2942_0=
    (let s2943_0 = s2942_0 in
   if ((string_startswith s2943_0 "sc.")) then  
  (case ((string_drop s2943_0 ((string_length "sc.")))) of
        s2944_0 =>
  (case ((size_mnemonic_matches_prefix s2944_0)) of
        SOME ((size1, s2945_0)) =>
  (case ((string_drop s2944_0 s2945_0)) of
        s2946_0 =>
  (case ((maybe_aq_matches_prefix s2946_0)) of
        SOME ((aq, s2947_0)) =>
  (case ((string_drop s2946_0 s2947_0)) of
        s2948_0 =>
  (case ((maybe_rl_matches_prefix s2948_0)) of
        SOME ((rl, s2949_0)) =>
  (case ((string_drop s2948_0 s2949_0)) of
        s2950_0 =>
  (case ((spc_matches_prefix0 s2950_0)) of
        SOME ((() , s2951_0)) =>
  (case ((string_drop s2950_0 s2951_0)) of
        s2952_0 =>
  (case ((reg_name_matches_prefix s2952_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s2953_0)) =>
  (case ((string_drop s2952_0 s2953_0)) of
        s2954_0 =>
  (case ((sep_matches_prefix s2954_0)) of
        SOME ((() , s2955_0)) =>
  (case ((string_drop s2954_0 s2955_0)) of
        s2956_0 =>
  (case ((reg_name_matches_prefix s2956_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs1, s2957_0)) =>
  (case ((string_drop s2956_0 s2957_0)) of
        s2958_0 =>
  (case ((sep_matches_prefix s2958_0)) of
        SOME ((() , s2959_0)) =>
  (case ((string_drop s2958_0 s2959_0)) of
        s2960_0 =>
  (case ((reg_name_matches_prefix s2960_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s2961_0)) =>
  let p0_ = (string_drop s2960_0 s2961_0) in
  if (((p0_ = ""))) then SOME (size1, aq, rl, rd, rs1, rs2) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s2923_ : string -> maybe ((word_width * bool * bool * mword ty5 * mword ty5))*)

val _ = Define `
 ((s2923_:string ->(word_width#bool#bool#(5)words$word#(5)words$word)option) s2924_0=
    (let s2925_0 = s2924_0 in
   if ((string_startswith s2925_0 "lr.")) then  
  (case ((string_drop s2925_0 ((string_length "lr.")))) of
        s2926_0 =>
  (case ((size_mnemonic_matches_prefix s2926_0)) of
        SOME ((size1, s2927_0)) =>
  (case ((string_drop s2926_0 s2927_0)) of
        s2928_0 =>
  (case ((maybe_aq_matches_prefix s2928_0)) of
        SOME ((aq, s2929_0)) =>
  (case ((string_drop s2928_0 s2929_0)) of
        s2930_0 =>
  (case ((maybe_rl_matches_prefix s2930_0)) of
        SOME ((rl, s2931_0)) =>
  (case ((string_drop s2930_0 s2931_0)) of
        s2932_0 =>
  (case ((spc_matches_prefix0 s2932_0)) of
        SOME ((() , s2933_0)) =>
  (case ((string_drop s2932_0 s2933_0)) of
        s2934_0 =>
  (case ((reg_name_matches_prefix s2934_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s2935_0)) =>
  (case ((string_drop s2934_0 s2935_0)) of
        s2936_0 =>
  (case ((sep_matches_prefix s2936_0)) of
        SOME ((() , s2937_0)) =>
  (case ((string_drop s2936_0 s2937_0)) of
        s2938_0 =>
  (case ((reg_name_matches_prefix s2938_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs1, s2939_0)) =>
  let p0_ = (string_drop s2938_0 s2939_0) in
  if (((p0_ = ""))) then SOME (size1, aq, rl, rd, rs1) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s2911_ : string -> maybe ((mword ty5 * mword ty5))*)

val _ = Define `
 ((s2911_:string ->((5)words$word#(5)words$word)option) s2912_0=
    (let s2913_0 = s2912_0 in
   if ((string_startswith s2913_0 "sfence.vma")) then  
  (case ((string_drop s2913_0 ((string_length "sfence.vma")))) of
        s2914_0 =>
  (case ((spc_matches_prefix0 s2914_0)) of
        SOME ((() , s2915_0)) =>
  (case ((string_drop s2914_0 s2915_0)) of
        s2916_0 =>
  (case ((reg_name_matches_prefix s2916_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs1, s2917_0)) =>
  (case ((string_drop s2916_0 s2917_0)) of
        s2918_0 =>
  (case ((sep_matches_prefix s2918_0)) of
        SOME ((() , s2919_0)) =>
  (case ((string_drop s2918_0 s2919_0)) of
        s2920_0 =>
  (case ((reg_name_matches_prefix s2920_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s2921_0)) =>
  let p0_ = (string_drop s2920_0 s2921_0) in
  if (((p0_ = ""))) then SOME (rs1, rs2) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s2899_ : string -> maybe ((mword ty4 * mword ty4))*)

val _ = Define `
 ((s2899_:string ->((4)words$word#(4)words$word)option) s2900_0=
    (let s2901_0 = s2900_0 in
   if ((string_startswith s2901_0 "fence.tso")) then  
  (case ((string_drop s2901_0 ((string_length "fence.tso")))) of
        s2902_0 =>
  (case ((spc_matches_prefix0 s2902_0)) of
        SOME ((() , s2903_0)) =>
  (case ((string_drop s2902_0 s2903_0)) of
        s2904_0 =>
  (case ((fence_bits_matches_prefix s2904_0 : (( 4 words$word # ii)) option)) of
        SOME ((pred, s2905_0)) =>
  (case ((string_drop s2904_0 s2905_0)) of
        s2906_0 =>
  (case ((sep_matches_prefix s2906_0)) of
        SOME ((() , s2907_0)) =>
  (case ((string_drop s2906_0 s2907_0)) of
        s2908_0 =>
  (case ((fence_bits_matches_prefix s2908_0 : (( 4 words$word # ii)) option)) of
        SOME ((succ, s2909_0)) =>
  let p0_ = (string_drop s2908_0 s2909_0) in
  if (((p0_ = ""))) then SOME (pred, succ) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s2887_ : string -> maybe ((mword ty4 * mword ty4))*)

val _ = Define `
 ((s2887_:string ->((4)words$word#(4)words$word)option) s2888_0=
    (let s2889_0 = s2888_0 in
   if ((string_startswith s2889_0 "fence")) then  
  (case ((string_drop s2889_0 ((string_length "fence")))) of
        s2890_0 =>
  (case ((spc_matches_prefix0 s2890_0)) of
        SOME ((() , s2891_0)) =>
  (case ((string_drop s2890_0 s2891_0)) of
        s2892_0 =>
  (case ((fence_bits_matches_prefix s2892_0 : (( 4 words$word # ii)) option)) of
        SOME ((pred, s2893_0)) =>
  (case ((string_drop s2892_0 s2893_0)) of
        s2894_0 =>
  (case ((sep_matches_prefix s2894_0)) of
        SOME ((() , s2895_0)) =>
  (case ((string_drop s2894_0 s2895_0)) of
        s2896_0 =>
  (case ((fence_bits_matches_prefix s2896_0 : (( 4 words$word # ii)) option)) of
        SOME ((succ, s2897_0)) =>
  let p0_ = (string_drop s2896_0 s2897_0) in
  if (((p0_ = ""))) then SOME (pred, succ) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s2870_ : string -> maybe ((sopw * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s2870_:string ->(sopw#(5)words$word#(5)words$word#(5)words$word)option) s2871_0= 
  ((case s2871_0 of
         s2872_0 =>
   (case ((shiftiwop_mnemonic_matches_prefix s2872_0)) of
         SOME ((op, s2873_0)) =>
   (case ((string_drop s2872_0 s2873_0)) of
         s2874_0 =>
   (case ((spc_matches_prefix0 s2874_0)) of
         SOME ((() , s2875_0)) =>
   (case ((string_drop s2874_0 s2875_0)) of
         s2876_0 =>
   (case ((reg_name_matches_prefix s2876_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s2877_0)) =>
   (case ((string_drop s2876_0 s2877_0)) of
         s2878_0 =>
   (case ((sep_matches_prefix s2878_0)) of
         SOME ((() , s2879_0)) =>
   (case ((string_drop s2878_0 s2879_0)) of
         s2880_0 =>
   (case ((reg_name_matches_prefix s2880_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s2881_0)) =>
   (case ((string_drop s2880_0 s2881_0)) of
         s2882_0 =>
   (case ((sep_matches_prefix s2882_0)) of
         SOME ((() , s2883_0)) =>
   (case ((string_drop s2882_0 s2883_0)) of
         s2884_0 =>
   (case ((hex_bits_5_matches_prefix
             instance_Sail2_values_Bitvector_Machine_word_mword_dict 
           s2884_0 : (( 5 words$word # ii)) option)) of
         SOME ((shamt, s2885_0)) =>
   let p0_ = (string_drop s2884_0 s2885_0) in
   if (((p0_ = ""))) then SOME (op, rd, rs1, shamt) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s2853_ : string -> maybe ((ropw * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s2853_:string ->(ropw#(5)words$word#(5)words$word#(5)words$word)option) s2854_0= 
  ((case s2854_0 of
         s2855_0 =>
   (case ((rtypew_mnemonic_matches_prefix s2855_0)) of
         SOME ((op, s2856_0)) =>
   (case ((string_drop s2855_0 s2856_0)) of
         s2857_0 =>
   (case ((spc_matches_prefix0 s2857_0)) of
         SOME ((() , s2858_0)) =>
   (case ((string_drop s2857_0 s2858_0)) of
         s2859_0 =>
   (case ((reg_name_matches_prefix s2859_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s2860_0)) =>
   (case ((string_drop s2859_0 s2860_0)) of
         s2861_0 =>
   (case ((sep_matches_prefix s2861_0)) of
         SOME ((() , s2862_0)) =>
   (case ((string_drop s2861_0 s2862_0)) of
         s2863_0 =>
   (case ((reg_name_matches_prefix s2863_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s2864_0)) =>
   (case ((string_drop s2863_0 s2864_0)) of
         s2865_0 =>
   (case ((sep_matches_prefix s2865_0)) of
         SOME ((() , s2866_0)) =>
   (case ((string_drop s2865_0 s2866_0)) of
         s2867_0 =>
   (case ((reg_name_matches_prefix s2867_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s2868_0)) =>
   let p0_ = (string_drop s2867_0 s2868_0) in
   if (((p0_ = ""))) then SOME (op, rd, rs1, rs2) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s2836_ : string -> maybe ((sop * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s2836_:string ->(sop#(5)words$word#(5)words$word#(5)words$word)option) s2837_0= 
  ((case s2837_0 of
         s2838_0 =>
   (case ((shiftw_mnemonic_matches_prefix s2838_0)) of
         SOME ((op, s2839_0)) =>
   (case ((string_drop s2838_0 s2839_0)) of
         s2840_0 =>
   (case ((spc_matches_prefix0 s2840_0)) of
         SOME ((() , s2841_0)) =>
   (case ((string_drop s2840_0 s2841_0)) of
         s2842_0 =>
   (case ((reg_name_matches_prefix s2842_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s2843_0)) =>
   (case ((string_drop s2842_0 s2843_0)) of
         s2844_0 =>
   (case ((sep_matches_prefix s2844_0)) of
         SOME ((() , s2845_0)) =>
   (case ((string_drop s2844_0 s2845_0)) of
         s2846_0 =>
   (case ((reg_name_matches_prefix s2846_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s2847_0)) =>
   (case ((string_drop s2846_0 s2847_0)) of
         s2848_0 =>
   (case ((sep_matches_prefix s2848_0)) of
         SOME ((() , s2849_0)) =>
   (case ((string_drop s2848_0 s2849_0)) of
         s2850_0 =>
   (case ((hex_bits_5_matches_prefix
             instance_Sail2_values_Bitvector_Machine_word_mword_dict 
           s2850_0 : (( 5 words$word # ii)) option)) of
         SOME ((shamt, s2851_0)) =>
   let p0_ = (string_drop s2850_0 s2851_0) in
   if (((p0_ = ""))) then SOME (op, rd, rs1, shamt) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s2820_ : string -> maybe ((mword ty5 * mword ty5 * mword ty12))*)

val _ = Define `
 ((s2820_:string ->((5)words$word#(5)words$word#(12)words$word)option) s2821_0=
    (let s2822_0 = s2821_0 in
   if ((string_startswith s2822_0 "addiw")) then  
  (case ((string_drop s2822_0 ((string_length "addiw")))) of
        s2823_0 =>
  (case ((spc_matches_prefix0 s2823_0)) of
        SOME ((() , s2824_0)) =>
  (case ((string_drop s2823_0 s2824_0)) of
        s2825_0 =>
  (case ((reg_name_matches_prefix s2825_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s2826_0)) =>
  (case ((string_drop s2825_0 s2826_0)) of
        s2827_0 =>
  (case ((sep_matches_prefix s2827_0)) of
        SOME ((() , s2828_0)) =>
  (case ((string_drop s2827_0 s2828_0)) of
        s2829_0 =>
  (case ((reg_name_matches_prefix s2829_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs1, s2830_0)) =>
  (case ((string_drop s2829_0 s2830_0)) of
        s2831_0 =>
  (case ((sep_matches_prefix s2831_0)) of
        SOME ((() , s2832_0)) =>
  (case ((string_drop s2831_0 s2832_0)) of
        s2833_0 =>
  (case ((hex_bits_12_matches_prefix0 s2833_0
         : (( 12 words$word # ii)) option)) of
        SOME ((imm, s2834_0)) =>
  let p0_ = (string_drop s2833_0 s2834_0) in
  if (((p0_ = ""))) then SOME (rd, rs1, imm) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s2792_ : string -> maybe ((word_width * bool * bool * mword ty5 * mword ty12 * mword ty5))*)

val _ = Define `
 ((s2792_:string ->(word_width#bool#bool#(5)words$word#(12)words$word#(5)words$word)option) s2793_0=
    (let s2794_0 = s2793_0 in
   if ((string_startswith s2794_0 "s")) then  
  (case ((string_drop s2794_0 ((string_length "s")))) of
        s2795_0 =>
  (case ((size_mnemonic_matches_prefix s2795_0)) of
        SOME ((size1, s2796_0)) =>
  (case ((string_drop s2795_0 s2796_0)) of
        s2797_0 =>
  (case ((maybe_aq_matches_prefix s2797_0)) of
        SOME ((aq, s2798_0)) =>
  (case ((string_drop s2797_0 s2798_0)) of
        s2799_0 =>
  (case ((maybe_rl_matches_prefix s2799_0)) of
        SOME ((rl, s2800_0)) =>
  (case ((string_drop s2799_0 s2800_0)) of
        s2801_0 =>
  (case ((spc_matches_prefix0 s2801_0)) of
        SOME ((() , s2802_0)) =>
  (case ((string_drop s2801_0 s2802_0)) of
        s2803_0 =>
  (case ((reg_name_matches_prefix s2803_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s2804_0)) =>
  (case ((string_drop s2803_0 s2804_0)) of
        s2805_0 =>
  (case ((sep_matches_prefix s2805_0)) of
        SOME ((() , s2806_0)) =>
  (case ((string_drop s2805_0 s2806_0)) of
        s2807_0 =>
  (case ((hex_bits_12_matches_prefix0 s2807_0
         : (( 12 words$word # ii)) option)) of
        SOME ((imm, s2808_0)) =>
  (case ((string_drop s2807_0 s2808_0)) of
        s2809_0 =>
  (case ((opt_spc_matches_prefix0 s2809_0)) of
        SOME ((() , s2810_0)) =>
  let s2811_0 = (string_drop s2809_0 s2810_0) in
  if ((string_startswith s2811_0 "(")) then
    (case ((string_drop s2811_0 ((string_length "(")))) of
          s2812_0 =>
    (case ((opt_spc_matches_prefix0 s2812_0)) of
          SOME ((() , s2813_0)) =>
    (case ((string_drop s2812_0 s2813_0)) of
          s2814_0 =>
    (case ((reg_name_matches_prefix s2814_0 : (( 5 words$word # ii)) option)) of
          SOME ((rs1, s2815_0)) =>
    (case ((string_drop s2814_0 s2815_0)) of
          s2816_0 =>
    (case ((opt_spc_matches_prefix0 s2816_0)) of
          SOME ((() , s2817_0)) =>
    let s2818_0 = (string_drop s2816_0 s2817_0) in
    if ((string_startswith s2818_0 ")")) then
      let p0_ = (string_drop s2818_0 ((string_length ")"))) in
      if (((p0_ = ""))) then SOME (size1, aq, rl, rs2, imm, rs1) else NONE
    else NONE
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    ) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s2762_ : string -> maybe ((word_width * bool * bool * bool * mword ty5 * mword ty12 * mword ty5))*)

val _ = Define `
 ((s2762_:string ->(word_width#bool#bool#bool#(5)words$word#(12)words$word#(5)words$word)option) s2763_0=
    (let s2764_0 = s2763_0 in
   if ((string_startswith s2764_0 "l")) then  
  (case ((string_drop s2764_0 ((string_length "l")))) of
        s2765_0 =>
  (case ((size_mnemonic_matches_prefix s2765_0)) of
        SOME ((size1, s2766_0)) =>
  (case ((string_drop s2765_0 s2766_0)) of
        s2767_0 =>
  (case ((maybe_u_matches_prefix s2767_0)) of
        SOME ((is_unsigned, s2768_0)) =>
  (case ((string_drop s2767_0 s2768_0)) of
        s2769_0 =>
  (case ((maybe_aq_matches_prefix s2769_0)) of
        SOME ((aq, s2770_0)) =>
  (case ((string_drop s2769_0 s2770_0)) of
        s2771_0 =>
  (case ((maybe_rl_matches_prefix s2771_0)) of
        SOME ((rl, s2772_0)) =>
  (case ((string_drop s2771_0 s2772_0)) of
        s2773_0 =>
  (case ((spc_matches_prefix0 s2773_0)) of
        SOME ((() , s2774_0)) =>
  (case ((string_drop s2773_0 s2774_0)) of
        s2775_0 =>
  (case ((reg_name_matches_prefix s2775_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s2776_0)) =>
  (case ((string_drop s2775_0 s2776_0)) of
        s2777_0 =>
  (case ((sep_matches_prefix s2777_0)) of
        SOME ((() , s2778_0)) =>
  (case ((string_drop s2777_0 s2778_0)) of
        s2779_0 =>
  (case ((hex_bits_12_matches_prefix0 s2779_0
         : (( 12 words$word # ii)) option)) of
        SOME ((imm, s2780_0)) =>
  (case ((string_drop s2779_0 s2780_0)) of
        s2781_0 =>
  (case ((opt_spc_matches_prefix0 s2781_0)) of
        SOME ((() , s2782_0)) =>
  let s2783_0 = (string_drop s2781_0 s2782_0) in
  if ((string_startswith s2783_0 "(")) then
    (case ((string_drop s2783_0 ((string_length "(")))) of
          s2784_0 =>
    (case ((opt_spc_matches_prefix0 s2784_0)) of
          SOME ((() , s2785_0)) =>
    (case ((string_drop s2784_0 s2785_0)) of
          s2786_0 =>
    (case ((reg_name_matches_prefix s2786_0 : (( 5 words$word # ii)) option)) of
          SOME ((rs1, s2787_0)) =>
    (case ((string_drop s2786_0 s2787_0)) of
          s2788_0 =>
    (case ((opt_spc_matches_prefix0 s2788_0)) of
          SOME ((() , s2789_0)) =>
    let s2790_0 = (string_drop s2788_0 s2789_0) in
    if ((string_startswith s2790_0 ")")) then
      let p0_ = (string_drop s2790_0 ((string_length ")"))) in
      if (((p0_ = ""))) then SOME (size1, is_unsigned, aq, rl, rd, imm, rs1)
      else NONE else NONE
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    ) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s2745_ : string -> maybe ((rop * mword ty5 * mword ty5 * mword ty5))*)

val _ = Define `
 ((s2745_:string ->(rop#(5)words$word#(5)words$word#(5)words$word)option) s2746_0= 
  ((case s2746_0 of
         s2747_0 =>
   (case ((rtype_mnemonic_matches_prefix s2747_0)) of
         SOME ((op, s2748_0)) =>
   (case ((string_drop s2747_0 s2748_0)) of
         s2749_0 =>
   (case ((spc_matches_prefix0 s2749_0)) of
         SOME ((() , s2750_0)) =>
   (case ((string_drop s2749_0 s2750_0)) of
         s2751_0 =>
   (case ((reg_name_matches_prefix s2751_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s2752_0)) =>
   (case ((string_drop s2751_0 s2752_0)) of
         s2753_0 =>
   (case ((sep_matches_prefix s2753_0)) of
         SOME ((() , s2754_0)) =>
   (case ((string_drop s2753_0 s2754_0)) of
         s2755_0 =>
   (case ((reg_name_matches_prefix s2755_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s2756_0)) =>
   (case ((string_drop s2755_0 s2756_0)) of
         s2757_0 =>
   (case ((sep_matches_prefix s2757_0)) of
         SOME ((() , s2758_0)) =>
   (case ((string_drop s2757_0 s2758_0)) of
         s2759_0 =>
   (case ((reg_name_matches_prefix s2759_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s2760_0)) =>
   let p0_ = (string_drop s2759_0 s2760_0) in
   if (((p0_ = ""))) then SOME (op, rd, rs1, rs2) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s2728_ : string -> maybe ((sop * mword ty5 * mword ty5 * mword ty6))*)

val _ = Define `
 ((s2728_:string ->(sop#(5)words$word#(5)words$word#(6)words$word)option) s2729_0= 
  ((case s2729_0 of
         s2730_0 =>
   (case ((shiftiop_mnemonic_matches_prefix s2730_0)) of
         SOME ((op, s2731_0)) =>
   (case ((string_drop s2730_0 s2731_0)) of
         s2732_0 =>
   (case ((spc_matches_prefix0 s2732_0)) of
         SOME ((() , s2733_0)) =>
   (case ((string_drop s2732_0 s2733_0)) of
         s2734_0 =>
   (case ((reg_name_matches_prefix s2734_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s2735_0)) =>
   (case ((string_drop s2734_0 s2735_0)) of
         s2736_0 =>
   (case ((sep_matches_prefix s2736_0)) of
         SOME ((() , s2737_0)) =>
   (case ((string_drop s2736_0 s2737_0)) of
         s2738_0 =>
   (case ((reg_name_matches_prefix s2738_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s2739_0)) =>
   (case ((string_drop s2738_0 s2739_0)) of
         s2740_0 =>
   (case ((sep_matches_prefix s2740_0)) of
         SOME ((() , s2741_0)) =>
   (case ((string_drop s2740_0 s2741_0)) of
         s2742_0 =>
   (case ((hex_bits_6_matches_prefix
             instance_Sail2_values_Bitvector_Machine_word_mword_dict 
           s2742_0 : (( 6 words$word # ii)) option)) of
         SOME ((shamt, s2743_0)) =>
   let p0_ = (string_drop s2742_0 s2743_0) in
   if (((p0_ = ""))) then SOME (op, rd, rs1, shamt) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s2711_ : string -> maybe ((iop * mword ty5 * mword ty5 * mword ty12))*)

val _ = Define `
 ((s2711_:string ->(iop#(5)words$word#(5)words$word#(12)words$word)option) s2712_0= 
  ((case s2712_0 of
         s2713_0 =>
   (case ((itype_mnemonic_matches_prefix s2713_0)) of
         SOME ((op, s2714_0)) =>
   (case ((string_drop s2713_0 s2714_0)) of
         s2715_0 =>
   (case ((spc_matches_prefix0 s2715_0)) of
         SOME ((() , s2716_0)) =>
   (case ((string_drop s2715_0 s2716_0)) of
         s2717_0 =>
   (case ((reg_name_matches_prefix s2717_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s2718_0)) =>
   (case ((string_drop s2717_0 s2718_0)) of
         s2719_0 =>
   (case ((sep_matches_prefix s2719_0)) of
         SOME ((() , s2720_0)) =>
   (case ((string_drop s2719_0 s2720_0)) of
         s2721_0 =>
   (case ((reg_name_matches_prefix s2721_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s2722_0)) =>
   (case ((string_drop s2721_0 s2722_0)) of
         s2723_0 =>
   (case ((sep_matches_prefix s2723_0)) of
         SOME ((() , s2724_0)) =>
   (case ((string_drop s2723_0 s2724_0)) of
         s2725_0 =>
   (case ((hex_bits_12_matches_prefix0 s2725_0
          : (( 12 words$word # ii)) option)) of
         SOME ((imm, s2726_0)) =>
   let p0_ = (string_drop s2725_0 s2726_0) in
   if (((p0_ = ""))) then SOME (op, rd, rs1, imm) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s2694_ : string -> maybe ((bop * mword ty5 * mword ty5 * mword ty13))*)

val _ = Define `
 ((s2694_:string ->(bop#(5)words$word#(5)words$word#(13)words$word)option) s2695_0= 
  ((case s2695_0 of
         s2696_0 =>
   (case ((btype_mnemonic_matches_prefix s2696_0)) of
         SOME ((op, s2697_0)) =>
   (case ((string_drop s2696_0 s2697_0)) of
         s2698_0 =>
   (case ((spc_matches_prefix0 s2698_0)) of
         SOME ((() , s2699_0)) =>
   (case ((string_drop s2698_0 s2699_0)) of
         s2700_0 =>
   (case ((reg_name_matches_prefix s2700_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s2701_0)) =>
   (case ((string_drop s2700_0 s2701_0)) of
         s2702_0 =>
   (case ((sep_matches_prefix s2702_0)) of
         SOME ((() , s2703_0)) =>
   (case ((string_drop s2702_0 s2703_0)) of
         s2704_0 =>
   (case ((reg_name_matches_prefix s2704_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s2705_0)) =>
   (case ((string_drop s2704_0 s2705_0)) of
         s2706_0 =>
   (case ((sep_matches_prefix s2706_0)) of
         SOME ((() , s2707_0)) =>
   (case ((string_drop s2706_0 s2707_0)) of
         s2708_0 =>
   (case ((hex_bits_13_matches_prefix
             instance_Sail2_values_Bitvector_Machine_word_mword_dict 
           s2708_0 : (( 13 words$word # ii)) option)) of
         SOME ((imm, s2709_0)) =>
   let p0_ = (string_drop s2708_0 s2709_0) in
   if (((p0_ = ""))) then SOME (op, rs1, rs2, imm) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s2678_ : string -> maybe ((mword ty5 * mword ty5 * mword ty12))*)

val _ = Define `
 ((s2678_:string ->((5)words$word#(5)words$word#(12)words$word)option) s2679_0=
    (let s2680_0 = s2679_0 in
   if ((string_startswith s2680_0 "jalr")) then  
  (case ((string_drop s2680_0 ((string_length "jalr")))) of
        s2681_0 =>
  (case ((spc_matches_prefix0 s2681_0)) of
        SOME ((() , s2682_0)) =>
  (case ((string_drop s2681_0 s2682_0)) of
        s2683_0 =>
  (case ((reg_name_matches_prefix s2683_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s2684_0)) =>
  (case ((string_drop s2683_0 s2684_0)) of
        s2685_0 =>
  (case ((sep_matches_prefix s2685_0)) of
        SOME ((() , s2686_0)) =>
  (case ((string_drop s2685_0 s2686_0)) of
        s2687_0 =>
  (case ((reg_name_matches_prefix s2687_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs1, s2688_0)) =>
  (case ((string_drop s2687_0 s2688_0)) of
        s2689_0 =>
  (case ((sep_matches_prefix s2689_0)) of
        SOME ((() , s2690_0)) =>
  (case ((string_drop s2689_0 s2690_0)) of
        s2691_0 =>
  (case ((hex_bits_12_matches_prefix0 s2691_0
         : (( 12 words$word # ii)) option)) of
        SOME ((imm, s2692_0)) =>
  let p0_ = (string_drop s2691_0 s2692_0) in
  if (((p0_ = ""))) then SOME (rd, rs1, imm) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s2666_ : string -> maybe ((mword ty5 * mword ty21))*)

val _ = Define `
 ((s2666_:string ->((5)words$word#(21)words$word)option) s2667_0=
    (let s2668_0 = s2667_0 in
   if ((string_startswith s2668_0 "jal")) then  
  (case ((string_drop s2668_0 ((string_length "jal")))) of
        s2669_0 =>
  (case ((spc_matches_prefix0 s2669_0)) of
        SOME ((() , s2670_0)) =>
  (case ((string_drop s2669_0 s2670_0)) of
        s2671_0 =>
  (case ((reg_name_matches_prefix s2671_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s2672_0)) =>
  (case ((string_drop s2671_0 s2672_0)) of
        s2673_0 =>
  (case ((sep_matches_prefix s2673_0)) of
        SOME ((() , s2674_0)) =>
  (case ((string_drop s2673_0 s2674_0)) of
        s2675_0 =>
  (case ((hex_bits_21_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s2675_0 : (( 21 words$word # ii)) option)) of
        SOME ((imm, s2676_0)) =>
  let p0_ = (string_drop s2675_0 s2676_0) in
  if (((p0_ = ""))) then SOME (rd, imm) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s2653_ : string -> maybe ((uop * mword ty5 * mword ty20))*)

val _ = Define `
 ((s2653_:string ->(uop#(5)words$word#(20)words$word)option) s2654_0= 
  ((case s2654_0 of
         s2655_0 =>
   (case ((utype_mnemonic_matches_prefix s2655_0)) of
         SOME ((op, s2656_0)) =>
   (case ((string_drop s2655_0 s2656_0)) of
         s2657_0 =>
   (case ((spc_matches_prefix0 s2657_0)) of
         SOME ((() , s2658_0)) =>
   (case ((string_drop s2657_0 s2658_0)) of
         s2659_0 =>
   (case ((reg_name_matches_prefix s2659_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s2660_0)) =>
   (case ((string_drop s2659_0 s2660_0)) of
         s2661_0 =>
   (case ((sep_matches_prefix s2661_0)) of
         SOME ((() , s2662_0)) =>
   (case ((string_drop s2661_0 s2662_0)) of
         s2663_0 =>
   (case ((hex_bits_20_matches_prefix
             instance_Sail2_values_Bitvector_Machine_word_mword_dict 
           s2663_0 : (( 20 words$word # ii)) option)) of
         SOME ((imm, s2664_0)) =>
   let p0_ = (string_drop s2663_0 s2664_0) in
   if (((p0_ = ""))) then SOME (op, rd, imm) else NONE
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


val _ = Define `
 ((assembly_backwards_matches:string -> bool) arg_=
    (let s2665_0 = arg_ in
   if ((case ((s2653_ s2665_0  :  ((uop #  5 words$word #  20 words$word))option)) of
       SOME ((op, rd, imm)) => T
     | _ => F
     )) then  (case (s2653_ s2665_0 : (( uop # 5 words$word # 20 words$word)) option) of
     (SOME ((op, rd, imm))) =>
 T
 )
   else if ((case ((s2666_ s2665_0  :  (( 5 words$word #  21 words$word))option)) of
       SOME ((rd, imm)) => T
     | _ => F
     )) then  (case (s2666_ s2665_0 : (( 5 words$word # 21 words$word)) option) of
     (SOME ((rd, imm))) =>
 T
 )
   else if ((case ((s2678_ s2665_0  :  (( 5 words$word #  5 words$word #  12 words$word))option)) of
       SOME ((rd, rs1, imm)) => T
     | _ => F
     )) then  (case (s2678_ s2665_0 : (( 5 words$word # 5 words$word # 12 words$word)) option) of
     (SOME ((rd, rs1, imm))) =>
 T
 )
   else if ((case ((s2694_ s2665_0  :  ((bop #  5 words$word #  5 words$word #  13 words$word))option)) of
       SOME ((op, rs1, rs2, imm)) => T
     | _ => F
     )) then  (case
 (s2694_ s2665_0 : (( bop # 5 words$word # 5 words$word # 13 words$word)) option) of
     (SOME ((op, rs1, rs2, imm))) =>
 T
 )
   else if ((case ((s2711_ s2665_0  :  ((iop #  5 words$word #  5 words$word #  12 words$word))option)) of
       SOME ((op, rd, rs1, imm)) => T
     | _ => F
     )) then  (case
 (s2711_ s2665_0 : (( iop # 5 words$word # 5 words$word # 12 words$word)) option) of
     (SOME ((op, rd, rs1, imm))) =>
 T
 )
   else if ((case ((s2728_ s2665_0  :  ((sop #  5 words$word #  5 words$word #  6 words$word))option)) of
       SOME ((op, rd, rs1, shamt)) => T
     | _ => F
     )) then  (case
 (s2728_ s2665_0 : (( sop # 5 words$word # 5 words$word # 6 words$word)) option) of
     (SOME ((op, rd, rs1, shamt))) =>
 T
 )
   else if ((case ((s2745_ s2665_0  :  ((rop #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((op, rd, rs1, rs2)) => T
     | _ => F
     )) then  (case
 (s2745_ s2665_0 : (( rop # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((op, rd, rs1, rs2))) =>
 T
 )
   else if ((case ((s2762_ s2665_0
                     :  ((word_width # bool # bool # bool #  5 words$word #  12 words$word #  5 words$word))option)) of
       SOME ((size1, is_unsigned, aq, rl, rd, imm, rs1)) => T
     | _ => F
     )) then  (case
 (s2762_ s2665_0
 : (( word_width # bool # bool # bool # 5 words$word # 12 words$word # 5 words$word)) option) of
     (SOME ((size1, is_unsigned, aq, rl, rd, imm, rs1))) =>
 T
 )
   else if ((case ((s2792_ s2665_0
                     :  ((word_width # bool # bool #  5 words$word #  12 words$word #  5 words$word))option)) of
       SOME ((size1, aq, rl, rs2, imm, rs1)) => T
     | _ => F
     )) then  (case
 (s2792_ s2665_0 : (( word_width # bool # bool # 5 words$word # 12 words$word # 5 words$word)) option) of
     (SOME ((size1, aq, rl, rs2, imm, rs1))) =>
 T
 )
   else if ((case ((s2820_ s2665_0  :  (( 5 words$word #  5 words$word #  12 words$word))option)) of
       SOME ((rd, rs1, imm)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case (s2820_ s2665_0 : (( 5 words$word # 5 words$word # 12 words$word)) option) of
     (SOME ((rd, rs1, imm))) =>
 T
 )
   else if ((case ((s2836_ s2665_0  :  ((sop #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((op, rd, rs1, shamt)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case
 (s2836_ s2665_0 : (( sop # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((op, rd, rs1, shamt))) =>
 T
 )
   else if ((case ((s2853_ s2665_0  :  ((ropw #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((op, rd, rs1, rs2)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case
 (s2853_ s2665_0 : (( ropw # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((op, rd, rs1, rs2))) =>
 T
 )
   else if ((case ((s2870_ s2665_0  :  ((sopw #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((op, rd, rs1, shamt)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case
 (s2870_ s2665_0 : (( sopw # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((op, rd, rs1, shamt))) =>
 T
 )
   else if ((case ((s2887_ s2665_0  :  (( 4 words$word #  4 words$word))option)) of
       SOME ((pred, succ)) => T
     | _ => F
     )) then  (case (s2887_ s2665_0 : (( 4 words$word # 4 words$word)) option) of
     (SOME ((pred, succ))) =>
 T
 )
   else if ((case ((s2899_ s2665_0  :  (( 4 words$word #  4 words$word))option)) of
       SOME ((pred, succ)) => T
     | _ => F
     )) then  (case (s2899_ s2665_0 : (( 4 words$word # 4 words$word)) option) of
     (SOME ((pred, succ))) =>
 T
 )
   else if (((s2665_0 = "fence.i"))) then T
   else if (((s2665_0 = "ecall"))) then T
   else if (((s2665_0 = "mret"))) then T
   else if (((s2665_0 = "sret"))) then T
   else if (((s2665_0 = "ebreak"))) then T
   else if (((s2665_0 = "wfi"))) then T
   else if ((case ((s2911_ s2665_0  :  (( 5 words$word #  5 words$word))option)) of
       SOME ((rs1, rs2)) => T
     | _ => F
     )) then  (case (s2911_ s2665_0 : (( 5 words$word # 5 words$word)) option) of
     (SOME ((rs1, rs2))) =>
 T
 )
   else if ((case ((s2923_ s2665_0  :  ((word_width # bool # bool #  5 words$word #  5 words$word))option)) of
       SOME ((size1, aq, rl, rd, rs1)) => T
     | _ => F
     )) then  (case
 (s2923_ s2665_0 : (( word_width # bool # bool # 5 words$word # 5 words$word)) option) of
     (SOME ((size1, aq, rl, rd, rs1))) =>
 T
 )
   else if ((case ((s2941_ s2665_0
                     :  ((word_width # bool # bool #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((size1, aq, rl, rd, rs1, rs2)) => T
     | _ => F
     )) then  (case
 (s2941_ s2665_0 : (( word_width # bool # bool # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((size1, aq, rl, rd, rs1, rs2))) =>
 T
 )
   else if ((case ((s2963_ s2665_0
                     :  ((amoop # word_width # bool # bool #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((op, width, aq, rl, rd, rs2, rs1)) => T
     | _ => F
     )) then  (case
 (s2963_ s2665_0
 : (( amoop # word_width # bool # bool # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((op, width, aq, rl, rd, rs2, rs1))) =>
 T
 )
   else if (((s2665_0 = "c.nop"))) then T
   else if ((case ((s2989_ s2665_0  :  (( 3 words$word #  8 words$word))option)) of
       SOME ((rdc, nzimm)) => (nzimm <> (0x00w :  8 words$word))
     | _ => F
     )) then  (case (s2989_ s2665_0 : (( 3 words$word # 8 words$word)) option) of
     (SOME ((rdc, nzimm))) =>
 T
 )
   else if ((case ((s3001_ s2665_0  :  (( 3 words$word #  3 words$word #  5 words$word))option)) of
       SOME ((rdc, rsc, uimm)) => T
     | _ => F
     )) then  (case
 (s3001_ s2665_0 : (( 3 words$word # 3 words$word # 5 words$word)) option) of
     (SOME ((rdc, rsc, uimm))) =>
 T
 )
   else if ((case ((s3017_ s2665_0  :  (( 3 words$word #  3 words$word #  5 words$word))option)) of
       SOME ((rdc, rsc, uimm)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case
 (s3017_ s2665_0 : (( 3 words$word # 3 words$word # 5 words$word)) option) of
     (SOME ((rdc, rsc, uimm))) =>
 T
 )
   else if ((case ((s3033_ s2665_0  :  (( 3 words$word #  3 words$word #  5 words$word))option)) of
       SOME ((rsc1, rsc2, uimm)) => T
     | _ => F
     )) then  (case
 (s3033_ s2665_0 : (( 3 words$word # 3 words$word # 5 words$word)) option) of
     (SOME ((rsc1, rsc2, uimm))) =>
 T
 )
   else if ((case ((s3049_ s2665_0  :  (( 3 words$word #  3 words$word #  5 words$word))option)) of
       SOME ((rsc1, rsc2, uimm)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case
 (s3049_ s2665_0 : (( 3 words$word # 3 words$word # 5 words$word)) option) of
     (SOME ((rsc1, rsc2, uimm))) =>
 T
 )
   else if ((case ((s3065_ s2665_0  :  (( 5 words$word #  6 words$word))option)) of
       SOME ((rsd, nzi)) => ((((nzi <> (0b000000w :  6 words$word)))) /\ (((rsd <> zreg))))
     | _ => F
     )) then  (case (s3065_ s2665_0 : (( 5 words$word # 6 words$word)) option) of
     (SOME ((rsd, nzi))) =>
 T
 )
   else if ((case ((s3077_ s2665_0  :  ( 11 words$word)option)) of
       SOME (imm) => ((( 32 : int):ii) = (( 32 : int):ii))
     | _ => F
     )) then  (case (s3077_ s2665_0 : ( 11 words$word) option) of (SOME (imm)) => T )
   else if ((case ((s3085_ s2665_0  :  (( 5 words$word #  6 words$word))option)) of
       SOME ((rsd, imm)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case (s3085_ s2665_0 : (( 5 words$word # 6 words$word)) option) of
     (SOME ((rsd, imm))) =>
 T
 )
   else if ((case ((s3097_ s2665_0  :  (( 5 words$word #  6 words$word))option)) of
       SOME ((rd, imm)) => (rd <> zreg)
     | _ => F
     )) then  (case (s3097_ s2665_0 : (( 5 words$word # 6 words$word)) option) of
     (SOME ((rd, imm))) =>
 T
 )
   else if ((case ((s3109_ s2665_0  :  ( 6 words$word)option)) of
       SOME (imm) => (imm <> (0b000000w :  6 words$word))
     | _ => F
     )) then  (case (s3109_ s2665_0 : ( 6 words$word) option) of (SOME (imm)) => T )
   else if ((case ((s3117_ s2665_0  :  (( 5 words$word #  6 words$word))option)) of
       SOME ((rd, imm)) =>
        ((((rd <> zreg))) /\ ((((((rd <> sp))) /\ (((imm <> (0b000000w :  6 words$word))))))))
     | _ => F
     )) then  (case (s3117_ s2665_0 : (( 5 words$word # 6 words$word)) option) of
     (SOME ((rd, imm))) =>
 T
 )
   else if ((case ((s3129_ s2665_0  :  (( 3 words$word #  6 words$word))option)) of
       SOME ((rsd, shamt)) => (shamt <> (0b000000w :  6 words$word))
     | _ => F
     )) then  (case (s3129_ s2665_0 : (( 3 words$word # 6 words$word)) option) of
     (SOME ((rsd, shamt))) =>
 T
 )
   else if ((case ((s3141_ s2665_0  :  (( 3 words$word #  6 words$word))option)) of
       SOME ((rsd, shamt)) => (shamt <> (0b000000w :  6 words$word))
     | _ => F
     )) then  (case (s3141_ s2665_0 : (( 3 words$word # 6 words$word)) option) of
     (SOME ((rsd, shamt))) =>
 T
 )
   else if ((case ((s3153_ s2665_0  :  (( 3 words$word #  6 words$word))option)) of
       SOME ((rsd, imm)) => T
     | _ => F
     )) then  (case (s3153_ s2665_0 : (( 3 words$word # 6 words$word)) option) of
     (SOME ((rsd, imm))) =>
 T
 )
   else if ((case ((s3165_ s2665_0  :  (( 3 words$word #  3 words$word))option)) of
       SOME ((rsd, rs2)) => T
     | _ => F
     )) then  (case (s3165_ s2665_0 : (( 3 words$word # 3 words$word)) option) of
     (SOME ((rsd, rs2))) =>
 T
 )
   else if ((case ((s3177_ s2665_0  :  (( 3 words$word #  3 words$word))option)) of
       SOME ((rsd, rs2)) => T
     | _ => F
     )) then  (case (s3177_ s2665_0 : (( 3 words$word # 3 words$word)) option) of
     (SOME ((rsd, rs2))) =>
 T
 )
   else if ((case ((s3189_ s2665_0  :  (( 3 words$word #  3 words$word))option)) of
       SOME ((rsd, rs2)) => T
     | _ => F
     )) then  (case (s3189_ s2665_0 : (( 3 words$word # 3 words$word)) option) of
     (SOME ((rsd, rs2))) =>
 T
 )
   else if ((case ((s3201_ s2665_0  :  (( 3 words$word #  3 words$word))option)) of
       SOME ((rsd, rs2)) => T
     | _ => F
     )) then  (case (s3201_ s2665_0 : (( 3 words$word # 3 words$word)) option) of
     (SOME ((rsd, rs2))) =>
 T
 )
   else if ((case ((s3213_ s2665_0  :  (( 3 words$word #  3 words$word))option)) of
       SOME ((rsd, rs2)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case (s3213_ s2665_0 : (( 3 words$word # 3 words$word)) option) of
     (SOME ((rsd, rs2))) =>
 T
 )
   else if ((case ((s3225_ s2665_0  :  (( 3 words$word #  3 words$word))option)) of
       SOME ((rsd, rs2)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case (s3225_ s2665_0 : (( 3 words$word # 3 words$word)) option) of
     (SOME ((rsd, rs2))) =>
 T
 )
   else if ((case ((s3237_ s2665_0  :  ( 11 words$word)option)) of
       SOME (imm) => T
     | _ => F
     )) then  (case (s3237_ s2665_0 : ( 11 words$word) option) of (SOME (imm)) => T )
   else if ((case ((s3245_ s2665_0  :  (( 3 words$word #  8 words$word))option)) of
       SOME ((rs, imm)) => T
     | _ => F
     )) then  (case (s3245_ s2665_0 : (( 3 words$word # 8 words$word)) option) of
     (SOME ((rs, imm))) =>
 T
 )
   else if ((case ((s3257_ s2665_0  :  (( 3 words$word #  8 words$word))option)) of
       SOME ((rs, imm)) => T
     | _ => F
     )) then  (case (s3257_ s2665_0 : (( 3 words$word # 8 words$word)) option) of
     (SOME ((rs, imm))) =>
 T
 )
   else if ((case ((s3269_ s2665_0  :  (( 5 words$word #  6 words$word))option)) of
       SOME ((rsd, shamt)) => ((((shamt <> (0b000000w :  6 words$word)))) /\ (((rsd <> zreg))))
     | _ => F
     )) then  (case (s3269_ s2665_0 : (( 5 words$word # 6 words$word)) option) of
     (SOME ((rsd, shamt))) =>
 T
 )
   else if ((case ((s3281_ s2665_0  :  (( 5 words$word #  6 words$word))option)) of
       SOME ((rd, uimm)) => (rd <> zreg)
     | _ => F
     )) then  (case (s3281_ s2665_0 : (( 5 words$word # 6 words$word)) option) of
     (SOME ((rd, uimm))) =>
 T
 )
   else if ((case ((s3293_ s2665_0  :  (( 5 words$word #  6 words$word))option)) of
       SOME ((rd, uimm)) => ((((rd <> zreg))) /\ ((((( 32 : int):ii) = (( 64 : int):ii)))))
     | _ => F
     )) then  (case (s3293_ s2665_0 : (( 5 words$word # 6 words$word)) option) of
     (SOME ((rd, uimm))) =>
 T
 )
   else if ((case ((s3305_ s2665_0  :  (( 5 words$word #  6 words$word))option)) of
       SOME ((rd, uimm)) => T
     | _ => F
     )) then  (case (s3305_ s2665_0 : (( 5 words$word # 6 words$word)) option) of
     (SOME ((rd, uimm))) =>
 T
 )
   else if ((case ((s3317_ s2665_0  :  (( 5 words$word #  6 words$word))option)) of
       SOME ((rs2, uimm)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case (s3317_ s2665_0 : (( 5 words$word # 6 words$word)) option) of
     (SOME ((rs2, uimm))) =>
 T
 )
   else if ((case ((s3329_ s2665_0  :  ( 5 words$word)option)) of
       SOME (rs1) => (rs1 <> zreg)
     | _ => F
     )) then  (case (s3329_ s2665_0 : ( 5 words$word) option) of (SOME (rs1)) => T )
   else if ((case ((s3337_ s2665_0  :  ( 5 words$word)option)) of
       SOME (rs1) => (rs1 <> zreg)
     | _ => F
     )) then  (case (s3337_ s2665_0 : ( 5 words$word) option) of (SOME (rs1)) => T )
   else if ((case ((s3345_ s2665_0  :  (( 5 words$word #  5 words$word))option)) of
       SOME ((rd, rs2)) => ((((rd <> zreg))) /\ (((rs2 <> zreg))))
     | _ => F
     )) then  (case (s3345_ s2665_0 : (( 5 words$word # 5 words$word)) option) of
     (SOME ((rd, rs2))) =>
 T
 )
   else if (((s2665_0 = "c.ebreak"))) then T
   else if ((case ((s3357_ s2665_0  :  (( 5 words$word #  5 words$word))option)) of
       SOME ((rsd, rs2)) => ((((rsd <> zreg))) /\ (((rs2 <> zreg))))
     | _ => F
     )) then  (case (s3357_ s2665_0 : (( 5 words$word # 5 words$word)) option) of
     (SOME ((rsd, rs2))) =>
 T
 )
   else if ((case ((s3369_ s2665_0
                     :  ((bool # bool # bool #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((high, signed1, signed2, rd, rs1, rs2)) => T
     | _ => F
     )) then  (case
 (s3369_ s2665_0 : (( bool # bool # bool # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((high, signed1, signed2, rd, rs1, rs2))) =>
 T
 )
   else if ((case ((s3386_ s2665_0  :  ((bool #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((s, rd, rs1, rs2)) => T
     | _ => F
     )) then  (case
 (s3386_ s2665_0 : (( bool # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((s, rd, rs1, rs2))) =>
 T
 )
   else if ((case ((s3404_ s2665_0  :  ((bool #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((s, rd, rs1, rs2)) => T
     | _ => F
     )) then  (case
 (s3404_ s2665_0 : (( bool # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((s, rd, rs1, rs2))) =>
 T
 )
   else if ((case ((s3422_ s2665_0  :  (( 5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((rd, rs1, rs2)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case (s3422_ s2665_0 : (( 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((rd, rs1, rs2))) =>
 T
 )
   else if ((case ((s3438_ s2665_0  :  ((bool #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((s, rd, rs1, rs2)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case
 (s3438_ s2665_0 : (( bool # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((s, rd, rs1, rs2))) =>
 T
 )
   else if ((case ((s3457_ s2665_0  :  ((bool #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((s, rd, rs1, rs2)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case
 (s3457_ s2665_0 : (( bool # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((s, rd, rs1, rs2))) =>
 T
 )
   else if ((case ((s3476_ s2665_0  :  ((csrop #  5 words$word #  12 words$word #  5 words$word))option)) of
       SOME ((op, rd, csr, rs1)) => T
     | _ => F
     )) then  (case
 (s3476_ s2665_0 : (( csrop # 5 words$word # 12 words$word # 5 words$word)) option) of
     (SOME ((op, rd, csr, rs1))) =>
 T
 )
   else if ((case ((s3494_ s2665_0  :  ((csrop #  5 words$word #  12 words$word #  5 words$word))option)) of
       SOME ((op, rd, csr, rs1)) => T
     | _ => F
     )) then  (case
 (s3494_ s2665_0 : (( csrop # 5 words$word # 12 words$word # 5 words$word)) option) of
     (SOME ((op, rd, csr, rs1))) =>
 T
 )
   else if (((s2665_0 = "uret"))) then T
   else if ((case ((s3511_ s2665_0  :  ( 6 words$word)option)) of
       SOME (imm) => T
     | _ => F
     )) then  (case (s3511_ s2665_0 : ( 6 words$word) option) of (SOME (imm)) => T )
   else if ((case ((s3517_ s2665_0  :  ( 5 words$word)option)) of
       SOME (rsd) => (rsd <> zreg)
     | _ => F
     )) then  (case (s3517_ s2665_0 : ( 5 words$word) option) of (SOME (rsd)) => T )
   else if ((case ((s3523_ s2665_0  :  ( 6 words$word)option)) of
       SOME (imm) => T
     | _ => F
     )) then  (case (s3523_ s2665_0 : ( 6 words$word) option) of (SOME (imm)) => T )
   else if ((case ((s3529_ s2665_0  :  ( 6 words$word)option)) of
       SOME (imm) => (imm <> (0b000000w :  6 words$word))
     | _ => F
     )) then  (case (s3529_ s2665_0 : ( 6 words$word) option) of (SOME (imm)) => T )
   else if ((case ((s3535_ s2665_0  :  ( 5 words$word)option)) of
       SOME (rs2) => (rs2 <> zreg)
     | _ => F
     )) then  (case (s3535_ s2665_0 : ( 5 words$word) option) of (SOME (rs2)) => T )
   else if ((case ((s3541_ s2665_0  :  ( 5 words$word)option)) of
       SOME (rs2) => (rs2 <> zreg)
     | _ => F
     )) then  (case (s3541_ s2665_0 : ( 5 words$word) option) of (SOME (rs2)) => T )
   else if ((case ((s3547_ s2665_0  :  (( 5 words$word #  6 words$word))option)) of
       SOME ((rsd, shamt)) => ((((shamt = (0b000000w :  6 words$word)))) \/ (((rsd = zreg))))
     | _ => F
     )) then  (case (s3547_ s2665_0 : (( 5 words$word # 6 words$word)) option) of
     (SOME ((rsd, shamt))) =>
 T
 )
   else if ((case ((s3556_ s2665_0  :  ( 3 words$word)option)) of
       SOME (rsd) => T
     | _ => F
     )) then  (case (s3556_ s2665_0 : ( 3 words$word) option) of (SOME (rsd)) => T )
   else if ((case ((s3562_ s2665_0  :  ( 3 words$word)option)) of
       SOME (rsd) => T
     | _ => F
     )) then  (case (s3562_ s2665_0 : ( 3 words$word) option) of (SOME (rsd)) => T )
   else if ((case ((s3568_ s2665_0
                     :  (( 4 words$word #  4 words$word #  5 words$word #  5 words$word #  4 words$word))option)) of
       SOME ((pred, succ, rs, rd, fm)) =>
        (((((((fm <> (0x0w :  4 words$word)))) /\ (((fm <> (0x8w :  4 words$word))))))) \/ ((((((rs <> (0b00000w :  5 words$word)))) \/ (((rd <> (0b00000w :  5 words$word))))))))
     | _ => F
     )) then  (case
 (s3568_ s2665_0 : (( 4 words$word # 4 words$word # 5 words$word # 5 words$word # 4 words$word)) option) of
     (SOME ((pred, succ, rs, rd, fm))) =>
 T
 )
   else if ((case ((s3586_ s2665_0  :  (( 5 words$word #  5 words$word #  12 words$word))option)) of
       SOME ((rd, rs, imm)) =>
        ((((imm <> (0x000w :  12 words$word)))) \/ ((((((rs <> zreg))) \/ (((rd <> zreg)))))))
     | _ => F
     )) then  (case (s3586_ s2665_0 : (( 5 words$word # 5 words$word # 12 words$word)) option) of
     (SOME ((rd, rs, imm))) =>
 T
 )
   else if ((case ((s3598_ s2665_0  :  ((word_width #  5 words$word #  12 words$word #  5 words$word))option)) of
       SOME ((width, rd, imm, rs1)) => T
     | _ => F
     )) then  (case
 (s3598_ s2665_0 : (( word_width # 5 words$word # 12 words$word # 5 words$word)) option) of
     (SOME ((width, rd, imm, rs1))) =>
 T
 )
   else if ((case ((s3622_ s2665_0  :  ((word_width #  5 words$word #  12 words$word #  5 words$word))option)) of
       SOME ((width, rs2, imm, rs1)) => T
     | _ => F
     )) then  (case
 (s3622_ s2665_0 : (( word_width # 5 words$word # 12 words$word # 5 words$word)) option) of
     (SOME ((width, rs2, imm, rs1))) =>
 T
 )
   else if ((case ((s3646_ s2665_0
                     :  ((f_madd_op_S #  5 words$word #  5 words$word #  5 words$word #  5 words$word # rounding_mode))option)) of
       SOME ((op, rd, rs1, rs2, rs3, rm)) => T
     | _ => F
     )) then  (case
 (s3646_ s2665_0
 : (( f_madd_op_S # 5 words$word # 5 words$word # 5 words$word # 5 words$word # rounding_mode)) option) of
     (SOME ((op, rd, rs1, rs2, rs3, rm))) =>
 T
 )
   else if ((case ((s3671_ s2665_0
                     :  ((f_bin_rm_op_S #  5 words$word #  5 words$word #  5 words$word # rounding_mode))option)) of
       SOME ((op, rd, rs1, rs2, rm)) => T
     | _ => F
     )) then  (case
 (s3671_ s2665_0
 : (( f_bin_rm_op_S # 5 words$word # 5 words$word # 5 words$word # rounding_mode)) option) of
     (SOME ((op, rd, rs1, rs2, rm))) =>
 T
 )
   else if ((case ((s3692_ s2665_0
                     :  ((f_un_rm_op_S #  5 words$word #  5 words$word # rounding_mode))option)) of
       SOME ((FSQRT_S, rd, rs1, rm)) => T
     | _ => F
     )) then  (case
 (s3692_ s2665_0 : (( f_un_rm_op_S # 5 words$word # 5 words$word # rounding_mode)) option) of
     (SOME ((FSQRT_S, rd, rs1, rm))) =>
 T
 )
   else if ((case ((s3709_ s2665_0
                     :  ((f_un_rm_op_S #  5 words$word #  5 words$word # rounding_mode))option)) of
       SOME ((FCVT_W_S, rd, rs1, rm)) => T
     | _ => F
     )) then  (case
 (s3709_ s2665_0 : (( f_un_rm_op_S # 5 words$word # 5 words$word # rounding_mode)) option) of
     (SOME ((FCVT_W_S, rd, rs1, rm))) =>
 T
 )
   else if ((case ((s3726_ s2665_0
                     :  ((f_un_rm_op_S #  5 words$word #  5 words$word # rounding_mode))option)) of
       SOME ((FCVT_WU_S, rd, rs1, rm)) => T
     | _ => F
     )) then  (case
 (s3726_ s2665_0 : (( f_un_rm_op_S # 5 words$word # 5 words$word # rounding_mode)) option) of
     (SOME ((FCVT_WU_S, rd, rs1, rm))) =>
 T
 )
   else if ((case ((s3743_ s2665_0
                     :  ((f_un_rm_op_S #  5 words$word #  5 words$word # rounding_mode))option)) of
       SOME ((FCVT_S_W, rd, rs1, rm)) => T
     | _ => F
     )) then  (case
 (s3743_ s2665_0 : (( f_un_rm_op_S # 5 words$word # 5 words$word # rounding_mode)) option) of
     (SOME ((FCVT_S_W, rd, rs1, rm))) =>
 T
 )
   else if ((case ((s3760_ s2665_0
                     :  ((f_un_rm_op_S #  5 words$word #  5 words$word # rounding_mode))option)) of
       SOME ((FCVT_S_WU, rd, rs1, rm)) => T
     | _ => F
     )) then  (case
 (s3760_ s2665_0 : (( f_un_rm_op_S # 5 words$word # 5 words$word # rounding_mode)) option) of
     (SOME ((FCVT_S_WU, rd, rs1, rm))) =>
 T
 )
   else if ((case ((s3777_ s2665_0
                     :  ((f_un_rm_op_S #  5 words$word #  5 words$word # rounding_mode))option)) of
       SOME ((FCVT_L_S, rd, rs1, rm)) => T
     | _ => F
     )) then  (case
 (s3777_ s2665_0 : (( f_un_rm_op_S # 5 words$word # 5 words$word # rounding_mode)) option) of
     (SOME ((FCVT_L_S, rd, rs1, rm))) =>
 T
 )
   else if ((case ((s3794_ s2665_0
                     :  ((f_un_rm_op_S #  5 words$word #  5 words$word # rounding_mode))option)) of
       SOME ((FCVT_LU_S, rd, rs1, rm)) => T
     | _ => F
     )) then  (case
 (s3794_ s2665_0 : (( f_un_rm_op_S # 5 words$word # 5 words$word # rounding_mode)) option) of
     (SOME ((FCVT_LU_S, rd, rs1, rm))) =>
 T
 )
   else if ((case ((s3811_ s2665_0
                     :  ((f_un_rm_op_S #  5 words$word #  5 words$word # rounding_mode))option)) of
       SOME ((FCVT_S_L, rd, rs1, rm)) => T
     | _ => F
     )) then  (case
 (s3811_ s2665_0 : (( f_un_rm_op_S # 5 words$word # 5 words$word # rounding_mode)) option) of
     (SOME ((FCVT_S_L, rd, rs1, rm))) =>
 T
 )
   else if ((case ((s3828_ s2665_0
                     :  ((f_un_rm_op_S #  5 words$word #  5 words$word # rounding_mode))option)) of
       SOME ((FCVT_S_LU, rd, rs1, rm)) => T
     | _ => F
     )) then  (case
 (s3828_ s2665_0 : (( f_un_rm_op_S # 5 words$word # 5 words$word # rounding_mode)) option) of
     (SOME ((FCVT_S_LU, rd, rs1, rm))) =>
 T
 )
   else if ((case ((s3845_ s2665_0  :  ((f_bin_op_S #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((FSGNJ_S, rd, rs1, rs2)) => T
     | _ => F
     )) then  (case
 (s3845_ s2665_0 : (( f_bin_op_S # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((FSGNJ_S, rd, rs1, rs2))) =>
 T
 )
   else if ((case ((s3862_ s2665_0  :  ((f_bin_op_S #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((FSGNJN_S, rd, rs1, rs2)) => T
     | _ => F
     )) then  (case
 (s3862_ s2665_0 : (( f_bin_op_S # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((FSGNJN_S, rd, rs1, rs2))) =>
 T
 )
   else if ((case ((s3879_ s2665_0  :  ((f_bin_op_S #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((FSGNJX_S, rd, rs1, rs2)) => T
     | _ => F
     )) then  (case
 (s3879_ s2665_0 : (( f_bin_op_S # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((FSGNJX_S, rd, rs1, rs2))) =>
 T
 )
   else if ((case ((s3896_ s2665_0  :  ((f_bin_op_S #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((FMIN_S, rd, rs1, rs2)) => T
     | _ => F
     )) then  (case
 (s3896_ s2665_0 : (( f_bin_op_S # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((FMIN_S, rd, rs1, rs2))) =>
 T
 )
   else if ((case ((s3913_ s2665_0  :  ((f_bin_op_S #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((FMAX_S, rd, rs1, rs2)) => T
     | _ => F
     )) then  (case
 (s3913_ s2665_0 : (( f_bin_op_S # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((FMAX_S, rd, rs1, rs2))) =>
 T
 )
   else if ((case ((s3930_ s2665_0  :  ((f_bin_op_S #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((FEQ_S, rd, rs1, rs2)) => T
     | _ => F
     )) then  (case
 (s3930_ s2665_0 : (( f_bin_op_S # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((FEQ_S, rd, rs1, rs2))) =>
 T
 )
   else if ((case ((s3947_ s2665_0  :  ((f_bin_op_S #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((FLT_S, rd, rs1, rs2)) => T
     | _ => F
     )) then  (case
 (s3947_ s2665_0 : (( f_bin_op_S # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((FLT_S, rd, rs1, rs2))) =>
 T
 )
   else if ((case ((s3964_ s2665_0  :  ((f_bin_op_S #  5 words$word #  5 words$word #  5 words$word))option)) of
       SOME ((FLE_S, rd, rs1, rs2)) => T
     | _ => F
     )) then  (case
 (s3964_ s2665_0 : (( f_bin_op_S # 5 words$word # 5 words$word # 5 words$word)) option) of
     (SOME ((FLE_S, rd, rs1, rs2))) =>
 T
 )
   else if ((case ((s3981_ s2665_0  :  ((f_un_op_S #  5 words$word #  5 words$word))option)) of
       SOME ((FMV_X_W, rd, rs1)) => T
     | _ => F
     )) then  (case
 (s3981_ s2665_0 : (( f_un_op_S # 5 words$word # 5 words$word)) option) of
     (SOME ((FMV_X_W, rd, rs1))) =>
 T
 )
   else if ((case ((s3994_ s2665_0  :  ((f_un_op_S #  5 words$word #  5 words$word))option)) of
       SOME ((FMV_W_X, rd, rs1)) => T
     | _ => F
     )) then  (case
 (s3994_ s2665_0 : (( f_un_op_S # 5 words$word # 5 words$word)) option) of
     (SOME ((FMV_W_X, rd, rs1))) =>
 T
 )
   else if ((case ((s4007_ s2665_0  :  ((f_un_op_S #  5 words$word #  5 words$word))option)) of
       SOME ((FCLASS_S, rd, rs1)) => T
     | _ => F
     )) then  (case
 (s4007_ s2665_0 : (( f_un_op_S # 5 words$word # 5 words$word)) option) of
     (SOME ((FCLASS_S, rd, rs1))) =>
 T
 )
   else if ((case ((s4020_ s2665_0  :  (( 5 words$word #  6 words$word))option)) of
       SOME ((rd, imm)) => ((( 32 : int):ii) = (( 32 : int):ii))
     | _ => F
     )) then  (case (s4020_ s2665_0 : (( 5 words$word # 6 words$word)) option) of
     (SOME ((rd, imm))) =>
 T
 )
   else if ((case ((s4032_ s2665_0  :  (( 5 words$word #  6 words$word))option)) of
       SOME ((rd, uimm)) => ((( 32 : int):ii) = (( 32 : int):ii))
     | _ => F
     )) then  (case (s4032_ s2665_0 : (( 5 words$word # 6 words$word)) option) of
     (SOME ((rd, uimm))) =>
 T
 )
   else if ((case ((s4044_ s2665_0  :  (( 3 words$word #  3 words$word #  5 words$word))option)) of
       SOME ((rdc, rsc, uimm)) => ((( 32 : int):ii) = (( 32 : int):ii))
     | _ => F
     )) then  (case
 (s4044_ s2665_0 : (( 3 words$word # 3 words$word # 5 words$word)) option) of
     (SOME ((rdc, rsc, uimm))) =>
 T
 )
   else if ((case ((s4060_ s2665_0  :  (( 3 words$word #  3 words$word #  5 words$word))option)) of
       SOME ((rsc1, rsc2, uimm)) => ((( 32 : int):ii) = (( 32 : int):ii))
     | _ => F
     )) then  (case
 (s4060_ s2665_0 : (( 3 words$word # 3 words$word # 5 words$word)) option) of
     (SOME ((rsc1, rsc2, uimm))) =>
 T
 )
   else if ((case ((s4076_ s2665_0  :  ( 32 words$word)option)) of   SOME (s) => T | _ => F ))
   then  (case (s4076_ s2665_0 : ( 32 words$word) option) of (SOME (s)) => T )
   else if ((case ((s4084_ s2665_0  :  ( 16 words$word)option)) of   SOME (s) => T | _ => F ))
   then  (case (s4084_ s2665_0 : ( 16 words$word) option) of (SOME (s)) => T )
   else F))`;


(*val _s5559_ : string -> maybe ((mword ty16 * string))*)

val _ = Define `
 ((s5559_:string ->((16)words$word#string)option) s5560_0=
    (let s5561_0 = s5560_0 in
   if ((string_startswith s5561_0 "c.illegal")) then  
  (case ((string_drop s5561_0 ((string_length "c.illegal")))) of
        s5562_0 =>
  (case ((spc_matches_prefix0 s5562_0)) of
        SOME ((() , s5563_0)) =>
  (case ((string_drop s5562_0 s5563_0)) of
        s5564_0 =>
  (case ((hex_bits_16_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s5564_0 : (( 16 words$word # ii)) option)) of
        SOME ((s, s5565_0)) =>
  (case ((string_drop s5564_0 s5565_0)) of   s_ => SOME (s, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s5551_ : string -> maybe ((mword ty32 * string))*)

val _ = Define `
 ((s5551_:string ->((32)words$word#string)option) s5552_0=
    (let s5553_0 = s5552_0 in
   if ((string_startswith s5553_0 "illegal")) then  
  (case ((string_drop s5553_0 ((string_length "illegal")))) of
        s5554_0 =>
  (case ((spc_matches_prefix0 s5554_0)) of
        SOME ((() , s5555_0)) =>
  (case ((string_drop s5554_0 s5555_0)) of
        s5556_0 =>
  (case ((hex_bits_32_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s5556_0 : (( 32 words$word # ii)) option)) of
        SOME ((s, s5557_0)) =>
  (case ((string_drop s5556_0 s5557_0)) of   s_ => SOME (s, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s5535_ : string -> maybe ((mword ty3 * mword ty3 * mword ty5 * string))*)

val _ = Define `
 ((s5535_:string ->((3)words$word#(3)words$word#(5)words$word#string)option) s5536_0=
    (let s5537_0 = s5536_0 in
   if ((string_startswith s5537_0 "c.fsw")) then  
  (case ((string_drop s5537_0 ((string_length "c.fsw")))) of
        s5538_0 =>
  (case ((spc_matches_prefix0 s5538_0)) of
        SOME ((() , s5539_0)) =>
  (case ((string_drop s5538_0 s5539_0)) of
        s5540_0 =>
  (case ((creg_name_matches_prefix s5540_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsc1, s5541_0)) =>
  (case ((string_drop s5540_0 s5541_0)) of
        s5542_0 =>
  (case ((sep_matches_prefix s5542_0)) of
        SOME ((() , s5543_0)) =>
  (case ((string_drop s5542_0 s5543_0)) of
        s5544_0 =>
  (case ((creg_name_matches_prefix s5544_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsc2, s5545_0)) =>
  (case ((string_drop s5544_0 s5545_0)) of
        s5546_0 =>
  (case ((sep_matches_prefix s5546_0)) of
        SOME ((() , s5547_0)) =>
  (case ((string_drop s5546_0 s5547_0)) of
        s5548_0 =>
  (case ((hex_bits_7_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s5548_0
         : (( 7 words$word # ii)) option)) of
        SOME ((v__1212, s5549_0)) =>
  if (((((subrange_vec_dec v__1212 (( 1 : int): ii) (( 0 : int): ii)
         : 2 words$word)) = (0b00w : 2 words$word)))) then
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1212 (( 6 : int): ii) (( 2 : int): ii) : 5 words$word)) in
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1212 (( 6 : int): ii) (( 2 : int): ii) : 5 words$word)) in
    (case ((string_drop s5548_0 s5549_0)) of
          s_ => SOME (rsc1, rsc2, uimm, s_)
    ) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s5519_ : string -> maybe ((mword ty3 * mword ty3 * mword ty5 * string))*)

val _ = Define `
 ((s5519_:string ->((3)words$word#(3)words$word#(5)words$word#string)option) s5520_0=
    (let s5521_0 = s5520_0 in
   if ((string_startswith s5521_0 "c.flw")) then  
  (case ((string_drop s5521_0 ((string_length "c.flw")))) of
        s5522_0 =>
  (case ((spc_matches_prefix0 s5522_0)) of
        SOME ((() , s5523_0)) =>
  (case ((string_drop s5522_0 s5523_0)) of
        s5524_0 =>
  (case ((creg_name_matches_prefix s5524_0 : (( 3 words$word # ii)) option)) of
        SOME ((rdc, s5525_0)) =>
  (case ((string_drop s5524_0 s5525_0)) of
        s5526_0 =>
  (case ((sep_matches_prefix s5526_0)) of
        SOME ((() , s5527_0)) =>
  (case ((string_drop s5526_0 s5527_0)) of
        s5528_0 =>
  (case ((creg_name_matches_prefix s5528_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsc, s5529_0)) =>
  (case ((string_drop s5528_0 s5529_0)) of
        s5530_0 =>
  (case ((sep_matches_prefix s5530_0)) of
        SOME ((() , s5531_0)) =>
  (case ((string_drop s5530_0 s5531_0)) of
        s5532_0 =>
  (case ((hex_bits_7_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s5532_0
         : (( 7 words$word # ii)) option)) of
        SOME ((v__1214, s5533_0)) =>
  if (((((subrange_vec_dec v__1214 (( 1 : int): ii) (( 0 : int): ii)
         : 2 words$word)) = (0b00w : 2 words$word)))) then
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1214 (( 6 : int): ii) (( 2 : int): ii) : 5 words$word)) in
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1214 (( 6 : int): ii) (( 2 : int): ii) : 5 words$word)) in
    (case ((string_drop s5532_0 s5533_0)) of
          s_ => SOME (rdc, rsc, uimm, s_)
    ) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s5507_ : string -> maybe ((mword ty5 * mword ty6 * string))*)

val _ = Define `
 ((s5507_:string ->((5)words$word#(6)words$word#string)option) s5508_0=
    (let s5509_0 = s5508_0 in
   if ((string_startswith s5509_0 "c.fswsp")) then  
  (case ((string_drop s5509_0 ((string_length "c.fswsp")))) of
        s5510_0 =>
  (case ((spc_matches_prefix0 s5510_0)) of
        SOME ((() , s5511_0)) =>
  (case ((string_drop s5510_0 s5511_0)) of
        s5512_0 =>
  (case ((reg_name_matches_prefix s5512_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s5513_0)) =>
  (case ((string_drop s5512_0 s5513_0)) of
        s5514_0 =>
  (case ((sep_matches_prefix s5514_0)) of
        SOME ((() , s5515_0)) =>
  (case ((string_drop s5514_0 s5515_0)) of
        s5516_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s5516_0 : (( 6 words$word # ii)) option)) of
        SOME ((uimm, s5517_0)) =>
  (case ((string_drop s5516_0 s5517_0)) of   s_ => SOME (rd, uimm, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s5495_ : string -> maybe ((mword ty5 * mword ty6 * string))*)

val _ = Define `
 ((s5495_:string ->((5)words$word#(6)words$word#string)option) s5496_0=
    (let s5497_0 = s5496_0 in
   if ((string_startswith s5497_0 "c.flwsp")) then  
  (case ((string_drop s5497_0 ((string_length "c.flwsp")))) of
        s5498_0 =>
  (case ((spc_matches_prefix0 s5498_0)) of
        SOME ((() , s5499_0)) =>
  (case ((string_drop s5498_0 s5499_0)) of
        s5500_0 =>
  (case ((reg_name_matches_prefix s5500_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s5501_0)) =>
  (case ((string_drop s5500_0 s5501_0)) of
        s5502_0 =>
  (case ((sep_matches_prefix s5502_0)) of
        SOME ((() , s5503_0)) =>
  (case ((string_drop s5502_0 s5503_0)) of
        s5504_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s5504_0 : (( 6 words$word # ii)) option)) of
        SOME ((imm, s5505_0)) =>
  (case ((string_drop s5504_0 s5505_0)) of   s_ => SOME (rd, imm, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s5482_ : string -> maybe ((f_un_op_S * mword ty5 * mword ty5 * string))*)

val _ = Define `
 ((s5482_:string ->(f_un_op_S#(5)words$word#(5)words$word#string)option) s5483_0= 
  ((case s5483_0 of
         s5484_0 =>
   (case ((f_un_type_mnemonic_S_matches_prefix s5484_0)) of
         SOME ((FCLASS_S, s5485_0)) =>
   (case ((string_drop s5484_0 s5485_0)) of
         s5486_0 =>
   (case ((spc_matches_prefix0 s5486_0)) of
         SOME ((() , s5487_0)) =>
   (case ((string_drop s5486_0 s5487_0)) of
         s5488_0 =>
   (case ((reg_name_matches_prefix s5488_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s5489_0)) =>
   (case ((string_drop s5488_0 s5489_0)) of
         s5490_0 =>
   (case ((sep_matches_prefix s5490_0)) of
         SOME ((() , s5491_0)) =>
   (case ((string_drop s5490_0 s5491_0)) of
         s5492_0 =>
   (case ((freg_name_matches_prefix s5492_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s5493_0)) =>
   (case ((string_drop s5492_0 s5493_0)) of
         s_ => SOME (FCLASS_S, rd, rs1, s_)
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s5469_ : string -> maybe ((f_un_op_S * mword ty5 * mword ty5 * string))*)

val _ = Define `
 ((s5469_:string ->(f_un_op_S#(5)words$word#(5)words$word#string)option) s5470_0= 
  ((case s5470_0 of
         s5471_0 =>
   (case ((f_un_type_mnemonic_S_matches_prefix s5471_0)) of
         SOME ((FMV_W_X, s5472_0)) =>
   (case ((string_drop s5471_0 s5472_0)) of
         s5473_0 =>
   (case ((spc_matches_prefix0 s5473_0)) of
         SOME ((() , s5474_0)) =>
   (case ((string_drop s5473_0 s5474_0)) of
         s5475_0 =>
   (case ((freg_name_matches_prefix s5475_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s5476_0)) =>
   (case ((string_drop s5475_0 s5476_0)) of
         s5477_0 =>
   (case ((sep_matches_prefix s5477_0)) of
         SOME ((() , s5478_0)) =>
   (case ((string_drop s5477_0 s5478_0)) of
         s5479_0 =>
   (case ((reg_name_matches_prefix s5479_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s5480_0)) =>
   (case ((string_drop s5479_0 s5480_0)) of
         s_ => SOME (FMV_W_X, rd, rs1, s_)
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s5456_ : string -> maybe ((f_un_op_S * mword ty5 * mword ty5 * string))*)

val _ = Define `
 ((s5456_:string ->(f_un_op_S#(5)words$word#(5)words$word#string)option) s5457_0= 
  ((case s5457_0 of
         s5458_0 =>
   (case ((f_un_type_mnemonic_S_matches_prefix s5458_0)) of
         SOME ((FMV_X_W, s5459_0)) =>
   (case ((string_drop s5458_0 s5459_0)) of
         s5460_0 =>
   (case ((spc_matches_prefix0 s5460_0)) of
         SOME ((() , s5461_0)) =>
   (case ((string_drop s5460_0 s5461_0)) of
         s5462_0 =>
   (case ((reg_name_matches_prefix s5462_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s5463_0)) =>
   (case ((string_drop s5462_0 s5463_0)) of
         s5464_0 =>
   (case ((sep_matches_prefix s5464_0)) of
         SOME ((() , s5465_0)) =>
   (case ((string_drop s5464_0 s5465_0)) of
         s5466_0 =>
   (case ((freg_name_matches_prefix s5466_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s5467_0)) =>
   (case ((string_drop s5466_0 s5467_0)) of
         s_ => SOME (FMV_X_W, rd, rs1, s_)
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s5439_ : string -> maybe ((f_bin_op_S * mword ty5 * mword ty5 * mword ty5 * string))*)

val _ = Define `
 ((s5439_:string ->(f_bin_op_S#(5)words$word#(5)words$word#(5)words$word#string)option) s5440_0= 
  ((case s5440_0 of
         s5441_0 =>
   (case ((f_bin_type_mnemonic_S_matches_prefix s5441_0)) of
         SOME ((FLE_S, s5442_0)) =>
   (case ((string_drop s5441_0 s5442_0)) of
         s5443_0 =>
   (case ((spc_matches_prefix0 s5443_0)) of
         SOME ((() , s5444_0)) =>
   (case ((string_drop s5443_0 s5444_0)) of
         s5445_0 =>
   (case ((reg_name_matches_prefix s5445_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s5446_0)) =>
   (case ((string_drop s5445_0 s5446_0)) of
         s5447_0 =>
   (case ((sep_matches_prefix s5447_0)) of
         SOME ((() , s5448_0)) =>
   (case ((string_drop s5447_0 s5448_0)) of
         s5449_0 =>
   (case ((freg_name_matches_prefix s5449_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s5450_0)) =>
   (case ((string_drop s5449_0 s5450_0)) of
         s5451_0 =>
   (case ((sep_matches_prefix s5451_0)) of
         SOME ((() , s5452_0)) =>
   (case ((string_drop s5451_0 s5452_0)) of
         s5453_0 =>
   (case ((freg_name_matches_prefix s5453_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s5454_0)) =>
   (case ((string_drop s5453_0 s5454_0)) of
         s_ => SOME (FLE_S, rd, rs1, rs2, s_)
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s5422_ : string -> maybe ((f_bin_op_S * mword ty5 * mword ty5 * mword ty5 * string))*)

val _ = Define `
 ((s5422_:string ->(f_bin_op_S#(5)words$word#(5)words$word#(5)words$word#string)option) s5423_0= 
  ((case s5423_0 of
         s5424_0 =>
   (case ((f_bin_type_mnemonic_S_matches_prefix s5424_0)) of
         SOME ((FLT_S, s5425_0)) =>
   (case ((string_drop s5424_0 s5425_0)) of
         s5426_0 =>
   (case ((spc_matches_prefix0 s5426_0)) of
         SOME ((() , s5427_0)) =>
   (case ((string_drop s5426_0 s5427_0)) of
         s5428_0 =>
   (case ((reg_name_matches_prefix s5428_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s5429_0)) =>
   (case ((string_drop s5428_0 s5429_0)) of
         s5430_0 =>
   (case ((sep_matches_prefix s5430_0)) of
         SOME ((() , s5431_0)) =>
   (case ((string_drop s5430_0 s5431_0)) of
         s5432_0 =>
   (case ((freg_name_matches_prefix s5432_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s5433_0)) =>
   (case ((string_drop s5432_0 s5433_0)) of
         s5434_0 =>
   (case ((sep_matches_prefix s5434_0)) of
         SOME ((() , s5435_0)) =>
   (case ((string_drop s5434_0 s5435_0)) of
         s5436_0 =>
   (case ((freg_name_matches_prefix s5436_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s5437_0)) =>
   (case ((string_drop s5436_0 s5437_0)) of
         s_ => SOME (FLT_S, rd, rs1, rs2, s_)
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s5405_ : string -> maybe ((f_bin_op_S * mword ty5 * mword ty5 * mword ty5 * string))*)

val _ = Define `
 ((s5405_:string ->(f_bin_op_S#(5)words$word#(5)words$word#(5)words$word#string)option) s5406_0= 
  ((case s5406_0 of
         s5407_0 =>
   (case ((f_bin_type_mnemonic_S_matches_prefix s5407_0)) of
         SOME ((FEQ_S, s5408_0)) =>
   (case ((string_drop s5407_0 s5408_0)) of
         s5409_0 =>
   (case ((spc_matches_prefix0 s5409_0)) of
         SOME ((() , s5410_0)) =>
   (case ((string_drop s5409_0 s5410_0)) of
         s5411_0 =>
   (case ((reg_name_matches_prefix s5411_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s5412_0)) =>
   (case ((string_drop s5411_0 s5412_0)) of
         s5413_0 =>
   (case ((sep_matches_prefix s5413_0)) of
         SOME ((() , s5414_0)) =>
   (case ((string_drop s5413_0 s5414_0)) of
         s5415_0 =>
   (case ((freg_name_matches_prefix s5415_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s5416_0)) =>
   (case ((string_drop s5415_0 s5416_0)) of
         s5417_0 =>
   (case ((sep_matches_prefix s5417_0)) of
         SOME ((() , s5418_0)) =>
   (case ((string_drop s5417_0 s5418_0)) of
         s5419_0 =>
   (case ((freg_name_matches_prefix s5419_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s5420_0)) =>
   (case ((string_drop s5419_0 s5420_0)) of
         s_ => SOME (FEQ_S, rd, rs1, rs2, s_)
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s5388_ : string -> maybe ((f_bin_op_S * mword ty5 * mword ty5 * mword ty5 * string))*)

val _ = Define `
 ((s5388_:string ->(f_bin_op_S#(5)words$word#(5)words$word#(5)words$word#string)option) s5389_0= 
  ((case s5389_0 of
         s5390_0 =>
   (case ((f_bin_type_mnemonic_S_matches_prefix s5390_0)) of
         SOME ((FMAX_S, s5391_0)) =>
   (case ((string_drop s5390_0 s5391_0)) of
         s5392_0 =>
   (case ((spc_matches_prefix0 s5392_0)) of
         SOME ((() , s5393_0)) =>
   (case ((string_drop s5392_0 s5393_0)) of
         s5394_0 =>
   (case ((freg_name_matches_prefix s5394_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s5395_0)) =>
   (case ((string_drop s5394_0 s5395_0)) of
         s5396_0 =>
   (case ((sep_matches_prefix s5396_0)) of
         SOME ((() , s5397_0)) =>
   (case ((string_drop s5396_0 s5397_0)) of
         s5398_0 =>
   (case ((freg_name_matches_prefix s5398_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s5399_0)) =>
   (case ((string_drop s5398_0 s5399_0)) of
         s5400_0 =>
   (case ((sep_matches_prefix s5400_0)) of
         SOME ((() , s5401_0)) =>
   (case ((string_drop s5400_0 s5401_0)) of
         s5402_0 =>
   (case ((freg_name_matches_prefix s5402_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s5403_0)) =>
   (case ((string_drop s5402_0 s5403_0)) of
         s_ => SOME (FMAX_S, rd, rs1, rs2, s_)
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s5371_ : string -> maybe ((f_bin_op_S * mword ty5 * mword ty5 * mword ty5 * string))*)

val _ = Define `
 ((s5371_:string ->(f_bin_op_S#(5)words$word#(5)words$word#(5)words$word#string)option) s5372_0= 
  ((case s5372_0 of
         s5373_0 =>
   (case ((f_bin_type_mnemonic_S_matches_prefix s5373_0)) of
         SOME ((FMIN_S, s5374_0)) =>
   (case ((string_drop s5373_0 s5374_0)) of
         s5375_0 =>
   (case ((spc_matches_prefix0 s5375_0)) of
         SOME ((() , s5376_0)) =>
   (case ((string_drop s5375_0 s5376_0)) of
         s5377_0 =>
   (case ((freg_name_matches_prefix s5377_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s5378_0)) =>
   (case ((string_drop s5377_0 s5378_0)) of
         s5379_0 =>
   (case ((sep_matches_prefix s5379_0)) of
         SOME ((() , s5380_0)) =>
   (case ((string_drop s5379_0 s5380_0)) of
         s5381_0 =>
   (case ((freg_name_matches_prefix s5381_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s5382_0)) =>
   (case ((string_drop s5381_0 s5382_0)) of
         s5383_0 =>
   (case ((sep_matches_prefix s5383_0)) of
         SOME ((() , s5384_0)) =>
   (case ((string_drop s5383_0 s5384_0)) of
         s5385_0 =>
   (case ((freg_name_matches_prefix s5385_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s5386_0)) =>
   (case ((string_drop s5385_0 s5386_0)) of
         s_ => SOME (FMIN_S, rd, rs1, rs2, s_)
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s5354_ : string -> maybe ((f_bin_op_S * mword ty5 * mword ty5 * mword ty5 * string))*)

val _ = Define `
 ((s5354_:string ->(f_bin_op_S#(5)words$word#(5)words$word#(5)words$word#string)option) s5355_0= 
  ((case s5355_0 of
         s5356_0 =>
   (case ((f_bin_type_mnemonic_S_matches_prefix s5356_0)) of
         SOME ((FSGNJX_S, s5357_0)) =>
   (case ((string_drop s5356_0 s5357_0)) of
         s5358_0 =>
   (case ((spc_matches_prefix0 s5358_0)) of
         SOME ((() , s5359_0)) =>
   (case ((string_drop s5358_0 s5359_0)) of
         s5360_0 =>
   (case ((freg_name_matches_prefix s5360_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s5361_0)) =>
   (case ((string_drop s5360_0 s5361_0)) of
         s5362_0 =>
   (case ((sep_matches_prefix s5362_0)) of
         SOME ((() , s5363_0)) =>
   (case ((string_drop s5362_0 s5363_0)) of
         s5364_0 =>
   (case ((freg_name_matches_prefix s5364_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s5365_0)) =>
   (case ((string_drop s5364_0 s5365_0)) of
         s5366_0 =>
   (case ((sep_matches_prefix s5366_0)) of
         SOME ((() , s5367_0)) =>
   (case ((string_drop s5366_0 s5367_0)) of
         s5368_0 =>
   (case ((freg_name_matches_prefix s5368_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s5369_0)) =>
   (case ((string_drop s5368_0 s5369_0)) of
         s_ => SOME (FSGNJX_S, rd, rs1, rs2, s_)
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s5337_ : string -> maybe ((f_bin_op_S * mword ty5 * mword ty5 * mword ty5 * string))*)

val _ = Define `
 ((s5337_:string ->(f_bin_op_S#(5)words$word#(5)words$word#(5)words$word#string)option) s5338_0= 
  ((case s5338_0 of
         s5339_0 =>
   (case ((f_bin_type_mnemonic_S_matches_prefix s5339_0)) of
         SOME ((FSGNJN_S, s5340_0)) =>
   (case ((string_drop s5339_0 s5340_0)) of
         s5341_0 =>
   (case ((spc_matches_prefix0 s5341_0)) of
         SOME ((() , s5342_0)) =>
   (case ((string_drop s5341_0 s5342_0)) of
         s5343_0 =>
   (case ((freg_name_matches_prefix s5343_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s5344_0)) =>
   (case ((string_drop s5343_0 s5344_0)) of
         s5345_0 =>
   (case ((sep_matches_prefix s5345_0)) of
         SOME ((() , s5346_0)) =>
   (case ((string_drop s5345_0 s5346_0)) of
         s5347_0 =>
   (case ((freg_name_matches_prefix s5347_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s5348_0)) =>
   (case ((string_drop s5347_0 s5348_0)) of
         s5349_0 =>
   (case ((sep_matches_prefix s5349_0)) of
         SOME ((() , s5350_0)) =>
   (case ((string_drop s5349_0 s5350_0)) of
         s5351_0 =>
   (case ((freg_name_matches_prefix s5351_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s5352_0)) =>
   (case ((string_drop s5351_0 s5352_0)) of
         s_ => SOME (FSGNJN_S, rd, rs1, rs2, s_)
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s5320_ : string -> maybe ((f_bin_op_S * mword ty5 * mword ty5 * mword ty5 * string))*)

val _ = Define `
 ((s5320_:string ->(f_bin_op_S#(5)words$word#(5)words$word#(5)words$word#string)option) s5321_0= 
  ((case s5321_0 of
         s5322_0 =>
   (case ((f_bin_type_mnemonic_S_matches_prefix s5322_0)) of
         SOME ((FSGNJ_S, s5323_0)) =>
   (case ((string_drop s5322_0 s5323_0)) of
         s5324_0 =>
   (case ((spc_matches_prefix0 s5324_0)) of
         SOME ((() , s5325_0)) =>
   (case ((string_drop s5324_0 s5325_0)) of
         s5326_0 =>
   (case ((freg_name_matches_prefix s5326_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s5327_0)) =>
   (case ((string_drop s5326_0 s5327_0)) of
         s5328_0 =>
   (case ((sep_matches_prefix s5328_0)) of
         SOME ((() , s5329_0)) =>
   (case ((string_drop s5328_0 s5329_0)) of
         s5330_0 =>
   (case ((freg_name_matches_prefix s5330_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s5331_0)) =>
   (case ((string_drop s5330_0 s5331_0)) of
         s5332_0 =>
   (case ((sep_matches_prefix s5332_0)) of
         SOME ((() , s5333_0)) =>
   (case ((string_drop s5332_0 s5333_0)) of
         s5334_0 =>
   (case ((freg_name_matches_prefix s5334_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s5335_0)) =>
   (case ((string_drop s5334_0 s5335_0)) of
         s_ => SOME (FSGNJ_S, rd, rs1, rs2, s_)
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s5303_ : string -> maybe ((f_un_rm_op_S * mword ty5 * mword ty5 * rounding_mode * string))*)

val _ = Define `
 ((s5303_:string ->(f_un_rm_op_S#(5)words$word#(5)words$word#rounding_mode#string)option) s5304_0= 
  ((case s5304_0 of
         s5305_0 =>
   (case ((f_un_rm_type_mnemonic_S_matches_prefix s5305_0)) of
         SOME ((FCVT_S_LU, s5306_0)) =>
   (case ((string_drop s5305_0 s5306_0)) of
         s5307_0 =>
   (case ((spc_matches_prefix0 s5307_0)) of
         SOME ((() , s5308_0)) =>
   (case ((string_drop s5307_0 s5308_0)) of
         s5309_0 =>
   (case ((freg_name_matches_prefix s5309_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s5310_0)) =>
   (case ((string_drop s5309_0 s5310_0)) of
         s5311_0 =>
   (case ((sep_matches_prefix s5311_0)) of
         SOME ((() , s5312_0)) =>
   (case ((string_drop s5311_0 s5312_0)) of
         s5313_0 =>
   (case ((reg_name_matches_prefix s5313_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s5314_0)) =>
   (case ((string_drop s5313_0 s5314_0)) of
         s5315_0 =>
   (case ((sep_matches_prefix s5315_0)) of
         SOME ((() , s5316_0)) =>
   (case ((string_drop s5315_0 s5316_0)) of
         s5317_0 =>
   (case ((frm_mnemonic_matches_prefix s5317_0)) of
         SOME ((rm, s5318_0)) =>
   (case ((string_drop s5317_0 s5318_0)) of
         s_ => SOME (FCVT_S_LU, rd, rs1, rm, s_)
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s5286_ : string -> maybe ((f_un_rm_op_S * mword ty5 * mword ty5 * rounding_mode * string))*)

val _ = Define `
 ((s5286_:string ->(f_un_rm_op_S#(5)words$word#(5)words$word#rounding_mode#string)option) s5287_0= 
  ((case s5287_0 of
         s5288_0 =>
   (case ((f_un_rm_type_mnemonic_S_matches_prefix s5288_0)) of
         SOME ((FCVT_S_L, s5289_0)) =>
   (case ((string_drop s5288_0 s5289_0)) of
         s5290_0 =>
   (case ((spc_matches_prefix0 s5290_0)) of
         SOME ((() , s5291_0)) =>
   (case ((string_drop s5290_0 s5291_0)) of
         s5292_0 =>
   (case ((freg_name_matches_prefix s5292_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s5293_0)) =>
   (case ((string_drop s5292_0 s5293_0)) of
         s5294_0 =>
   (case ((sep_matches_prefix s5294_0)) of
         SOME ((() , s5295_0)) =>
   (case ((string_drop s5294_0 s5295_0)) of
         s5296_0 =>
   (case ((reg_name_matches_prefix s5296_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s5297_0)) =>
   (case ((string_drop s5296_0 s5297_0)) of
         s5298_0 =>
   (case ((sep_matches_prefix s5298_0)) of
         SOME ((() , s5299_0)) =>
   (case ((string_drop s5298_0 s5299_0)) of
         s5300_0 =>
   (case ((frm_mnemonic_matches_prefix s5300_0)) of
         SOME ((rm, s5301_0)) =>
   (case ((string_drop s5300_0 s5301_0)) of
         s_ => SOME (FCVT_S_L, rd, rs1, rm, s_)
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s5269_ : string -> maybe ((f_un_rm_op_S * mword ty5 * mword ty5 * rounding_mode * string))*)

val _ = Define `
 ((s5269_:string ->(f_un_rm_op_S#(5)words$word#(5)words$word#rounding_mode#string)option) s5270_0= 
  ((case s5270_0 of
         s5271_0 =>
   (case ((f_un_rm_type_mnemonic_S_matches_prefix s5271_0)) of
         SOME ((FCVT_LU_S, s5272_0)) =>
   (case ((string_drop s5271_0 s5272_0)) of
         s5273_0 =>
   (case ((spc_matches_prefix0 s5273_0)) of
         SOME ((() , s5274_0)) =>
   (case ((string_drop s5273_0 s5274_0)) of
         s5275_0 =>
   (case ((reg_name_matches_prefix s5275_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s5276_0)) =>
   (case ((string_drop s5275_0 s5276_0)) of
         s5277_0 =>
   (case ((sep_matches_prefix s5277_0)) of
         SOME ((() , s5278_0)) =>
   (case ((string_drop s5277_0 s5278_0)) of
         s5279_0 =>
   (case ((freg_name_matches_prefix s5279_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s5280_0)) =>
   (case ((string_drop s5279_0 s5280_0)) of
         s5281_0 =>
   (case ((sep_matches_prefix s5281_0)) of
         SOME ((() , s5282_0)) =>
   (case ((string_drop s5281_0 s5282_0)) of
         s5283_0 =>
   (case ((frm_mnemonic_matches_prefix s5283_0)) of
         SOME ((rm, s5284_0)) =>
   (case ((string_drop s5283_0 s5284_0)) of
         s_ => SOME (FCVT_LU_S, rd, rs1, rm, s_)
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s5252_ : string -> maybe ((f_un_rm_op_S * mword ty5 * mword ty5 * rounding_mode * string))*)

val _ = Define `
 ((s5252_:string ->(f_un_rm_op_S#(5)words$word#(5)words$word#rounding_mode#string)option) s5253_0= 
  ((case s5253_0 of
         s5254_0 =>
   (case ((f_un_rm_type_mnemonic_S_matches_prefix s5254_0)) of
         SOME ((FCVT_L_S, s5255_0)) =>
   (case ((string_drop s5254_0 s5255_0)) of
         s5256_0 =>
   (case ((spc_matches_prefix0 s5256_0)) of
         SOME ((() , s5257_0)) =>
   (case ((string_drop s5256_0 s5257_0)) of
         s5258_0 =>
   (case ((reg_name_matches_prefix s5258_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s5259_0)) =>
   (case ((string_drop s5258_0 s5259_0)) of
         s5260_0 =>
   (case ((sep_matches_prefix s5260_0)) of
         SOME ((() , s5261_0)) =>
   (case ((string_drop s5260_0 s5261_0)) of
         s5262_0 =>
   (case ((freg_name_matches_prefix s5262_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s5263_0)) =>
   (case ((string_drop s5262_0 s5263_0)) of
         s5264_0 =>
   (case ((sep_matches_prefix s5264_0)) of
         SOME ((() , s5265_0)) =>
   (case ((string_drop s5264_0 s5265_0)) of
         s5266_0 =>
   (case ((frm_mnemonic_matches_prefix s5266_0)) of
         SOME ((rm, s5267_0)) =>
   (case ((string_drop s5266_0 s5267_0)) of
         s_ => SOME (FCVT_L_S, rd, rs1, rm, s_)
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s5235_ : string -> maybe ((f_un_rm_op_S * mword ty5 * mword ty5 * rounding_mode * string))*)

val _ = Define `
 ((s5235_:string ->(f_un_rm_op_S#(5)words$word#(5)words$word#rounding_mode#string)option) s5236_0= 
  ((case s5236_0 of
         s5237_0 =>
   (case ((f_un_rm_type_mnemonic_S_matches_prefix s5237_0)) of
         SOME ((FCVT_S_WU, s5238_0)) =>
   (case ((string_drop s5237_0 s5238_0)) of
         s5239_0 =>
   (case ((spc_matches_prefix0 s5239_0)) of
         SOME ((() , s5240_0)) =>
   (case ((string_drop s5239_0 s5240_0)) of
         s5241_0 =>
   (case ((freg_name_matches_prefix s5241_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s5242_0)) =>
   (case ((string_drop s5241_0 s5242_0)) of
         s5243_0 =>
   (case ((sep_matches_prefix s5243_0)) of
         SOME ((() , s5244_0)) =>
   (case ((string_drop s5243_0 s5244_0)) of
         s5245_0 =>
   (case ((reg_name_matches_prefix s5245_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s5246_0)) =>
   (case ((string_drop s5245_0 s5246_0)) of
         s5247_0 =>
   (case ((sep_matches_prefix s5247_0)) of
         SOME ((() , s5248_0)) =>
   (case ((string_drop s5247_0 s5248_0)) of
         s5249_0 =>
   (case ((frm_mnemonic_matches_prefix s5249_0)) of
         SOME ((rm, s5250_0)) =>
   (case ((string_drop s5249_0 s5250_0)) of
         s_ => SOME (FCVT_S_WU, rd, rs1, rm, s_)
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s5218_ : string -> maybe ((f_un_rm_op_S * mword ty5 * mword ty5 * rounding_mode * string))*)

val _ = Define `
 ((s5218_:string ->(f_un_rm_op_S#(5)words$word#(5)words$word#rounding_mode#string)option) s5219_0= 
  ((case s5219_0 of
         s5220_0 =>
   (case ((f_un_rm_type_mnemonic_S_matches_prefix s5220_0)) of
         SOME ((FCVT_S_W, s5221_0)) =>
   (case ((string_drop s5220_0 s5221_0)) of
         s5222_0 =>
   (case ((spc_matches_prefix0 s5222_0)) of
         SOME ((() , s5223_0)) =>
   (case ((string_drop s5222_0 s5223_0)) of
         s5224_0 =>
   (case ((freg_name_matches_prefix s5224_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s5225_0)) =>
   (case ((string_drop s5224_0 s5225_0)) of
         s5226_0 =>
   (case ((sep_matches_prefix s5226_0)) of
         SOME ((() , s5227_0)) =>
   (case ((string_drop s5226_0 s5227_0)) of
         s5228_0 =>
   (case ((reg_name_matches_prefix s5228_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s5229_0)) =>
   (case ((string_drop s5228_0 s5229_0)) of
         s5230_0 =>
   (case ((sep_matches_prefix s5230_0)) of
         SOME ((() , s5231_0)) =>
   (case ((string_drop s5230_0 s5231_0)) of
         s5232_0 =>
   (case ((frm_mnemonic_matches_prefix s5232_0)) of
         SOME ((rm, s5233_0)) =>
   (case ((string_drop s5232_0 s5233_0)) of
         s_ => SOME (FCVT_S_W, rd, rs1, rm, s_)
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s5201_ : string -> maybe ((f_un_rm_op_S * mword ty5 * mword ty5 * rounding_mode * string))*)

val _ = Define `
 ((s5201_:string ->(f_un_rm_op_S#(5)words$word#(5)words$word#rounding_mode#string)option) s5202_0= 
  ((case s5202_0 of
         s5203_0 =>
   (case ((f_un_rm_type_mnemonic_S_matches_prefix s5203_0)) of
         SOME ((FCVT_WU_S, s5204_0)) =>
   (case ((string_drop s5203_0 s5204_0)) of
         s5205_0 =>
   (case ((spc_matches_prefix0 s5205_0)) of
         SOME ((() , s5206_0)) =>
   (case ((string_drop s5205_0 s5206_0)) of
         s5207_0 =>
   (case ((reg_name_matches_prefix s5207_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s5208_0)) =>
   (case ((string_drop s5207_0 s5208_0)) of
         s5209_0 =>
   (case ((sep_matches_prefix s5209_0)) of
         SOME ((() , s5210_0)) =>
   (case ((string_drop s5209_0 s5210_0)) of
         s5211_0 =>
   (case ((freg_name_matches_prefix s5211_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s5212_0)) =>
   (case ((string_drop s5211_0 s5212_0)) of
         s5213_0 =>
   (case ((sep_matches_prefix s5213_0)) of
         SOME ((() , s5214_0)) =>
   (case ((string_drop s5213_0 s5214_0)) of
         s5215_0 =>
   (case ((frm_mnemonic_matches_prefix s5215_0)) of
         SOME ((rm, s5216_0)) =>
   (case ((string_drop s5215_0 s5216_0)) of
         s_ => SOME (FCVT_WU_S, rd, rs1, rm, s_)
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s5184_ : string -> maybe ((f_un_rm_op_S * mword ty5 * mword ty5 * rounding_mode * string))*)

val _ = Define `
 ((s5184_:string ->(f_un_rm_op_S#(5)words$word#(5)words$word#rounding_mode#string)option) s5185_0= 
  ((case s5185_0 of
         s5186_0 =>
   (case ((f_un_rm_type_mnemonic_S_matches_prefix s5186_0)) of
         SOME ((FCVT_W_S, s5187_0)) =>
   (case ((string_drop s5186_0 s5187_0)) of
         s5188_0 =>
   (case ((spc_matches_prefix0 s5188_0)) of
         SOME ((() , s5189_0)) =>
   (case ((string_drop s5188_0 s5189_0)) of
         s5190_0 =>
   (case ((reg_name_matches_prefix s5190_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s5191_0)) =>
   (case ((string_drop s5190_0 s5191_0)) of
         s5192_0 =>
   (case ((sep_matches_prefix s5192_0)) of
         SOME ((() , s5193_0)) =>
   (case ((string_drop s5192_0 s5193_0)) of
         s5194_0 =>
   (case ((freg_name_matches_prefix s5194_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s5195_0)) =>
   (case ((string_drop s5194_0 s5195_0)) of
         s5196_0 =>
   (case ((sep_matches_prefix s5196_0)) of
         SOME ((() , s5197_0)) =>
   (case ((string_drop s5196_0 s5197_0)) of
         s5198_0 =>
   (case ((frm_mnemonic_matches_prefix s5198_0)) of
         SOME ((rm, s5199_0)) =>
   (case ((string_drop s5198_0 s5199_0)) of
         s_ => SOME (FCVT_W_S, rd, rs1, rm, s_)
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s5167_ : string -> maybe ((f_un_rm_op_S * mword ty5 * mword ty5 * rounding_mode * string))*)

val _ = Define `
 ((s5167_:string ->(f_un_rm_op_S#(5)words$word#(5)words$word#rounding_mode#string)option) s5168_0= 
  ((case s5168_0 of
         s5169_0 =>
   (case ((f_un_rm_type_mnemonic_S_matches_prefix s5169_0)) of
         SOME ((FSQRT_S, s5170_0)) =>
   (case ((string_drop s5169_0 s5170_0)) of
         s5171_0 =>
   (case ((spc_matches_prefix0 s5171_0)) of
         SOME ((() , s5172_0)) =>
   (case ((string_drop s5171_0 s5172_0)) of
         s5173_0 =>
   (case ((freg_name_matches_prefix s5173_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s5174_0)) =>
   (case ((string_drop s5173_0 s5174_0)) of
         s5175_0 =>
   (case ((sep_matches_prefix s5175_0)) of
         SOME ((() , s5176_0)) =>
   (case ((string_drop s5175_0 s5176_0)) of
         s5177_0 =>
   (case ((freg_name_matches_prefix s5177_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s5178_0)) =>
   (case ((string_drop s5177_0 s5178_0)) of
         s5179_0 =>
   (case ((sep_matches_prefix s5179_0)) of
         SOME ((() , s5180_0)) =>
   (case ((string_drop s5179_0 s5180_0)) of
         s5181_0 =>
   (case ((frm_mnemonic_matches_prefix s5181_0)) of
         SOME ((rm, s5182_0)) =>
   (case ((string_drop s5181_0 s5182_0)) of
         s_ => SOME (FSQRT_S, rd, rs1, rm, s_)
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s5146_ : string -> maybe ((f_bin_rm_op_S * mword ty5 * mword ty5 * mword ty5 * rounding_mode * string))*)

val _ = Define `
 ((s5146_:string ->(f_bin_rm_op_S#(5)words$word#(5)words$word#(5)words$word#rounding_mode#string)option) s5147_0= 
  ((case s5147_0 of
         s5148_0 =>
   (case ((f_bin_rm_type_mnemonic_S_matches_prefix s5148_0)) of
         SOME ((op, s5149_0)) =>
   (case ((string_drop s5148_0 s5149_0)) of
         s5150_0 =>
   (case ((spc_matches_prefix0 s5150_0)) of
         SOME ((() , s5151_0)) =>
   (case ((string_drop s5150_0 s5151_0)) of
         s5152_0 =>
   (case ((freg_name_matches_prefix s5152_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s5153_0)) =>
   (case ((string_drop s5152_0 s5153_0)) of
         s5154_0 =>
   (case ((sep_matches_prefix s5154_0)) of
         SOME ((() , s5155_0)) =>
   (case ((string_drop s5154_0 s5155_0)) of
         s5156_0 =>
   (case ((freg_name_matches_prefix s5156_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s5157_0)) =>
   (case ((string_drop s5156_0 s5157_0)) of
         s5158_0 =>
   (case ((sep_matches_prefix s5158_0)) of
         SOME ((() , s5159_0)) =>
   (case ((string_drop s5158_0 s5159_0)) of
         s5160_0 =>
   (case ((freg_name_matches_prefix s5160_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s5161_0)) =>
   (case ((string_drop s5160_0 s5161_0)) of
         s5162_0 =>
   (case ((sep_matches_prefix s5162_0)) of
         SOME ((() , s5163_0)) =>
   (case ((string_drop s5162_0 s5163_0)) of
         s5164_0 =>
   (case ((frm_mnemonic_matches_prefix s5164_0)) of
         SOME ((rm, s5165_0)) =>
   (case ((string_drop s5164_0 s5165_0)) of
         s_ => SOME (op, rd, rs1, rs2, rm, s_)
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s5121_ : string -> maybe ((f_madd_op_S * mword ty5 * mword ty5 * mword ty5 * mword ty5 * rounding_mode * string))*)

val _ = Define `
 ((s5121_:string ->(f_madd_op_S#(5)words$word#(5)words$word#(5)words$word#(5)words$word#rounding_mode#string)option) s5122_0= 
  ((case s5122_0 of
         s5123_0 =>
   (case ((f_madd_type_mnemonic_S_matches_prefix s5123_0)) of
         SOME ((op, s5124_0)) =>
   (case ((string_drop s5123_0 s5124_0)) of
         s5125_0 =>
   (case ((spc_matches_prefix0 s5125_0)) of
         SOME ((() , s5126_0)) =>
   (case ((string_drop s5125_0 s5126_0)) of
         s5127_0 =>
   (case ((freg_name_matches_prefix s5127_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s5128_0)) =>
   (case ((string_drop s5127_0 s5128_0)) of
         s5129_0 =>
   (case ((sep_matches_prefix s5129_0)) of
         SOME ((() , s5130_0)) =>
   (case ((string_drop s5129_0 s5130_0)) of
         s5131_0 =>
   (case ((freg_name_matches_prefix s5131_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s5132_0)) =>
   (case ((string_drop s5131_0 s5132_0)) of
         s5133_0 =>
   (case ((sep_matches_prefix s5133_0)) of
         SOME ((() , s5134_0)) =>
   (case ((string_drop s5133_0 s5134_0)) of
         s5135_0 =>
   (case ((freg_name_matches_prefix s5135_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s5136_0)) =>
   (case ((string_drop s5135_0 s5136_0)) of
         s5137_0 =>
   (case ((sep_matches_prefix s5137_0)) of
         SOME ((() , s5138_0)) =>
   (case ((string_drop s5137_0 s5138_0)) of
         s5139_0 =>
   (case ((freg_name_matches_prefix s5139_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs3, s5140_0)) =>
   (case ((string_drop s5139_0 s5140_0)) of
         s5141_0 =>
   (case ((sep_matches_prefix s5141_0)) of
         SOME ((() , s5142_0)) =>
   (case ((string_drop s5141_0 s5142_0)) of
         s5143_0 =>
   (case ((frm_mnemonic_matches_prefix s5143_0)) of
         SOME ((rm, s5144_0)) =>
   (case ((string_drop s5143_0 s5144_0)) of
         s_ =>
   SOME (op, rd, rs1, rs2, rs3, rm, s_)
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s5097_ : string -> maybe ((word_width * mword ty5 * mword ty12 * mword ty5 * string))*)

val _ = Define `
 ((s5097_:string ->(word_width#(5)words$word#(12)words$word#(5)words$word#string)option) s5098_0=
    (let s5099_0 = s5098_0 in
   if ((string_startswith s5099_0 "fs")) then  
  (case ((string_drop s5099_0 ((string_length "fs")))) of
        s5100_0 =>
  (case ((size_mnemonic_matches_prefix s5100_0)) of
        SOME ((width, s5101_0)) =>
  (case ((string_drop s5100_0 s5101_0)) of
        s5102_0 =>
  (case ((spc_matches_prefix0 s5102_0)) of
        SOME ((() , s5103_0)) =>
  (case ((string_drop s5102_0 s5103_0)) of
        s5104_0 =>
  (case ((freg_name_matches_prefix s5104_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s5105_0)) =>
  (case ((string_drop s5104_0 s5105_0)) of
        s5106_0 =>
  (case ((sep_matches_prefix s5106_0)) of
        SOME ((() , s5107_0)) =>
  (case ((string_drop s5106_0 s5107_0)) of
        s5108_0 =>
  (case ((hex_bits_12_matches_prefix0 s5108_0
         : (( 12 words$word # ii)) option)) of
        SOME ((imm, s5109_0)) =>
  (case ((string_drop s5108_0 s5109_0)) of
        s5110_0 =>
  (case ((opt_spc_matches_prefix0 s5110_0)) of
        SOME ((() , s5111_0)) =>
  let s5112_0 = (string_drop s5110_0 s5111_0) in
  if ((string_startswith s5112_0 "(")) then
    (case ((string_drop s5112_0 ((string_length "(")))) of
          s5113_0 =>
    (case ((opt_spc_matches_prefix0 s5113_0)) of
          SOME ((() , s5114_0)) =>
    (case ((string_drop s5113_0 s5114_0)) of
          s5115_0 =>
    (case ((reg_name_matches_prefix s5115_0 : (( 5 words$word # ii)) option)) of
          SOME ((rs1, s5116_0)) =>
    (case ((string_drop s5115_0 s5116_0)) of
          s5117_0 =>
    (case ((opt_spc_matches_prefix0 s5117_0)) of
          SOME ((() , s5118_0)) =>
    let s5119_0 = (string_drop s5117_0 s5118_0) in
    if ((string_startswith s5119_0 ")")) then
      (case ((string_drop s5119_0 ((string_length ")")))) of
            s_ =>
      SOME (width, rs2, imm, rs1, s_)
      ) else NONE
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    ) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s5073_ : string -> maybe ((word_width * mword ty5 * mword ty12 * mword ty5 * string))*)

val _ = Define `
 ((s5073_:string ->(word_width#(5)words$word#(12)words$word#(5)words$word#string)option) s5074_0=
    (let s5075_0 = s5074_0 in
   if ((string_startswith s5075_0 "fl")) then  
  (case ((string_drop s5075_0 ((string_length "fl")))) of
        s5076_0 =>
  (case ((size_mnemonic_matches_prefix s5076_0)) of
        SOME ((width, s5077_0)) =>
  (case ((string_drop s5076_0 s5077_0)) of
        s5078_0 =>
  (case ((spc_matches_prefix0 s5078_0)) of
        SOME ((() , s5079_0)) =>
  (case ((string_drop s5078_0 s5079_0)) of
        s5080_0 =>
  (case ((freg_name_matches_prefix s5080_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s5081_0)) =>
  (case ((string_drop s5080_0 s5081_0)) of
        s5082_0 =>
  (case ((sep_matches_prefix s5082_0)) of
        SOME ((() , s5083_0)) =>
  (case ((string_drop s5082_0 s5083_0)) of
        s5084_0 =>
  (case ((hex_bits_12_matches_prefix0 s5084_0
         : (( 12 words$word # ii)) option)) of
        SOME ((imm, s5085_0)) =>
  (case ((string_drop s5084_0 s5085_0)) of
        s5086_0 =>
  (case ((opt_spc_matches_prefix0 s5086_0)) of
        SOME ((() , s5087_0)) =>
  let s5088_0 = (string_drop s5086_0 s5087_0) in
  if ((string_startswith s5088_0 "(")) then
    (case ((string_drop s5088_0 ((string_length "(")))) of
          s5089_0 =>
    (case ((opt_spc_matches_prefix0 s5089_0)) of
          SOME ((() , s5090_0)) =>
    (case ((string_drop s5089_0 s5090_0)) of
          s5091_0 =>
    (case ((reg_name_matches_prefix s5091_0 : (( 5 words$word # ii)) option)) of
          SOME ((rs1, s5092_0)) =>
    (case ((string_drop s5091_0 s5092_0)) of
          s5093_0 =>
    (case ((opt_spc_matches_prefix0 s5093_0)) of
          SOME ((() , s5094_0)) =>
    let s5095_0 = (string_drop s5093_0 s5094_0) in
    if ((string_startswith s5095_0 ")")) then
      (case ((string_drop s5095_0 ((string_length ")")))) of
            s_ =>
      SOME (width, rd, imm, rs1, s_)
      ) else NONE
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    ) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s5061_ : string -> maybe ((mword ty5 * mword ty5 * mword ty12 * string))*)

val _ = Define `
 ((s5061_:string ->((5)words$word#(5)words$word#(12)words$word#string)option) s5062_0=
    (let s5063_0 = s5062_0 in
   if ((string_startswith s5063_0 "fence.i.reserved.")) then  
  (case ((string_drop s5063_0 ((string_length "fence.i.reserved.")))) of
        s5064_0 =>
  (case ((reg_name_matches_prefix s5064_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s5065_0)) =>
  let s5066_0 = (string_drop s5064_0 s5065_0) in
  if ((string_startswith s5066_0 ".")) then
    (case ((string_drop s5066_0 ((string_length ".")))) of
          s5067_0 =>
    (case ((reg_name_matches_prefix s5067_0 : (( 5 words$word # ii)) option)) of
          SOME ((rs, s5068_0)) =>
    let s5069_0 = (string_drop s5067_0 s5068_0) in
    if ((string_startswith s5069_0 ".")) then
      (case ((string_drop s5069_0 ((string_length ".")))) of
            s5070_0 =>
      (case ((hex_bits_12_matches_prefix0 s5070_0 : (( 12 words$word # ii)) option)) of
            SOME ((imm, s5071_0)) =>
      (case ((string_drop s5070_0 s5071_0)) of
            s_ => SOME (rd, rs, imm, s_)
      )
        | _ => NONE
      )
      ) else NONE
      | _ => NONE
    )
    ) else NONE
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s5043_ : string -> maybe ((mword ty4 * mword ty4 * mword ty5 * mword ty5 * mword ty4 * string))*)

val _ = Define `
 ((s5043_:string ->((4)words$word#(4)words$word#(5)words$word#(5)words$word#(4)words$word#string)option) s5044_0=
    (let s5045_0 = s5044_0 in
   if ((string_startswith s5045_0 "fence.reserved.")) then  
  (case ((string_drop s5045_0 ((string_length "fence.reserved.")))) of
        s5046_0 =>
  (case ((fence_bits_matches_prefix s5046_0 : (( 4 words$word # ii)) option)) of
        SOME ((pred, s5047_0)) =>
  let s5048_0 = (string_drop s5046_0 s5047_0) in
  if ((string_startswith s5048_0 ".")) then
    (case ((string_drop s5048_0 ((string_length ".")))) of
          s5049_0 =>
    (case ((fence_bits_matches_prefix s5049_0 : (( 4 words$word # ii)) option)) of
          SOME ((succ, s5050_0)) =>
    let s5051_0 = (string_drop s5049_0 s5050_0) in
    if ((string_startswith s5051_0 ".")) then
      (case ((string_drop s5051_0 ((string_length ".")))) of
            s5052_0 =>
      (case ((reg_name_matches_prefix s5052_0 : (( 5 words$word # ii)) option)) of
            SOME ((rs, s5053_0)) =>
      let s5054_0 = (string_drop s5052_0 s5053_0) in
      if ((string_startswith s5054_0 ".")) then
        (case ((string_drop s5054_0 ((string_length ".")))) of
              s5055_0 =>
        (case ((reg_name_matches_prefix s5055_0 : (( 5 words$word # ii)) option)) of
              SOME ((rd, s5056_0)) =>
        let s5057_0 = (string_drop s5055_0 s5056_0) in
        if ((string_startswith s5057_0 ".")) then
          (case ((string_drop s5057_0 ((string_length ".")))) of
                s5058_0 =>
          (case ((hex_bits_4_matches_prefix
                    instance_Sail2_values_Bitvector_Machine_word_mword_dict
                    s5058_0 : (( 4 words$word # ii)) option)) of
                SOME ((fm, s5059_0)) =>
          (case ((string_drop s5058_0 s5059_0)) of
                s_ => SOME (pred, succ, rs, rd, fm, s_)
          )
            | _ => NONE
          )
          ) else NONE
          | _ => NONE
        )
        ) else NONE
        | _ => NONE
      )
      ) else NONE
      | _ => NONE
    )
    ) else NONE
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s5037_ : string -> maybe ((mword ty3 * string))*)

val _ = Define `
 ((s5037_:string ->((3)words$word#string)option) s5038_0=
    (let s5039_0 = s5038_0 in
   if ((string_startswith s5039_0 "c.srai.hint.")) then  
  (case ((string_drop s5039_0 ((string_length "c.srai.hint.")))) of
        s5040_0 =>
  (case ((creg_name_matches_prefix s5040_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s5041_0)) =>
  (case ((string_drop s5040_0 s5041_0)) of   s_ => SOME (rsd, s_) )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s5031_ : string -> maybe ((mword ty3 * string))*)

val _ = Define `
 ((s5031_:string ->((3)words$word#string)option) s5032_0=
    (let s5033_0 = s5032_0 in
   if ((string_startswith s5033_0 "c.srli.hint.")) then  
  (case ((string_drop s5033_0 ((string_length "c.srli.hint.")))) of
        s5034_0 =>
  (case ((creg_name_matches_prefix s5034_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s5035_0)) =>
  (case ((string_drop s5034_0 s5035_0)) of   s_ => SOME (rsd, s_) )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s5022_ : string -> maybe ((mword ty5 * mword ty6 * string))*)

val _ = Define `
 ((s5022_:string ->((5)words$word#(6)words$word#string)option) s5023_0=
    (let s5024_0 = s5023_0 in
   if ((string_startswith s5024_0 "c.slli.hint.")) then  
  (case ((string_drop s5024_0 ((string_length "c.slli.hint.")))) of
        s5025_0 =>
  (case ((reg_name_matches_prefix s5025_0 : (( 5 words$word # ii)) option)) of
        SOME ((rsd, s5026_0)) =>
  let s5027_0 = (string_drop s5025_0 s5026_0) in
  if ((string_startswith s5027_0 ".")) then
    (case ((string_drop s5027_0 ((string_length ".")))) of
          s5028_0 =>
    (case ((hex_bits_6_matches_prefix
              instance_Sail2_values_Bitvector_Machine_word_mword_dict 
            s5028_0 : (( 6 words$word # ii)) option)) of
          SOME ((shamt, s5029_0)) =>
    (case ((string_drop s5028_0 s5029_0)) of   s_ => SOME (rsd, shamt, s_) )
      | _ => NONE
    )
    ) else NONE
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s5016_ : string -> maybe ((mword ty5 * string))*)

val _ = Define `
 ((s5016_:string ->((5)words$word#string)option) s5017_0=
    (let s5018_0 = s5017_0 in
   if ((string_startswith s5018_0 "c.add.hint.")) then  
  (case ((string_drop s5018_0 ((string_length "c.add.hint.")))) of
        s5019_0 =>
  (case ((reg_name_matches_prefix s5019_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s5020_0)) =>
  (case ((string_drop s5019_0 s5020_0)) of   s_ => SOME (rs2, s_) )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s5010_ : string -> maybe ((mword ty5 * string))*)

val _ = Define `
 ((s5010_:string ->((5)words$word#string)option) s5011_0=
    (let s5012_0 = s5011_0 in
   if ((string_startswith s5012_0 "c.mv.hint.")) then  
  (case ((string_drop s5012_0 ((string_length "c.mv.hint.")))) of
        s5013_0 =>
  (case ((reg_name_matches_prefix s5013_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s5014_0)) =>
  (case ((string_drop s5013_0 s5014_0)) of   s_ => SOME (rs2, s_) )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s5004_ : string -> maybe ((mword ty6 * string))*)

val _ = Define `
 ((s5004_:string ->((6)words$word#string)option) s5005_0=
    (let s5006_0 = s5005_0 in
   if ((string_startswith s5006_0 "c.lui.hint.")) then  
  (case ((string_drop s5006_0 ((string_length "c.lui.hint.")))) of
        s5007_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s5007_0 : (( 6 words$word # ii)) option)) of
        SOME ((imm, s5008_0)) =>
  (case ((string_drop s5007_0 s5008_0)) of   s_ => SOME (imm, s_) )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4998_ : string -> maybe ((mword ty6 * string))*)

val _ = Define `
 ((s4998_:string ->((6)words$word#string)option) s4999_0=
    (let s5000_0 = s4999_0 in
   if ((string_startswith s5000_0 "c.li.hint.")) then  
  (case ((string_drop s5000_0 ((string_length "c.li.hint.")))) of
        s5001_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s5001_0 : (( 6 words$word # ii)) option)) of
        SOME ((imm, s5002_0)) =>
  (case ((string_drop s5001_0 s5002_0)) of   s_ => SOME (imm, s_) )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4992_ : string -> maybe ((mword ty5 * string))*)

val _ = Define `
 ((s4992_:string ->((5)words$word#string)option) s4993_0=
    (let s4994_0 = s4993_0 in
   if ((string_startswith s4994_0 "c.addi.hint.")) then  
  (case ((string_drop s4994_0 ((string_length "c.addi.hint.")))) of
        s4995_0 =>
  (case ((reg_name_matches_prefix s4995_0 : (( 5 words$word # ii)) option)) of
        SOME ((rsd, s4996_0)) =>
  (case ((string_drop s4995_0 s4996_0)) of   s_ => SOME (rsd, s_) )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4986_ : string -> maybe ((mword ty6 * string))*)

val _ = Define `
 ((s4986_:string ->((6)words$word#string)option) s4987_0=
    (let s4988_0 = s4987_0 in
   if ((string_startswith s4988_0 "c.nop.hint.")) then  
  (case ((string_drop s4988_0 ((string_length "c.nop.hint.")))) of
        s4989_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s4989_0 : (( 6 words$word # ii)) option)) of
        SOME ((imm, s4990_0)) =>
  (case ((string_drop s4989_0 s4990_0)) of   s_ => SOME (imm, s_) )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4982_ : string -> maybe string*)

val _ = Define `
 ((s4982_:string ->(string)option) s4983_0=
    (let s4984_0 = s4983_0 in
   if ((string_startswith s4984_0 "uret")) then  
  (case ((string_drop s4984_0 ((string_length "uret")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s4965_ : string -> maybe ((csrop * mword ty5 * mword ty12 * mword ty5 * string))*)

val _ = Define `
 ((s4965_:string ->(csrop#(5)words$word#(12)words$word#(5)words$word#string)option) s4966_0= 
  ((case s4966_0 of
         s4967_0 =>
   (case ((csr_mnemonic_matches_prefix s4967_0)) of
         SOME ((op, s4968_0)) =>
   (case ((string_drop s4967_0 s4968_0)) of
         s4969_0 =>
   (case ((spc_matches_prefix0 s4969_0)) of
         SOME ((() , s4970_0)) =>
   (case ((string_drop s4969_0 s4970_0)) of
         s4971_0 =>
   (case ((reg_name_matches_prefix s4971_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s4972_0)) =>
   (case ((string_drop s4971_0 s4972_0)) of
         s4973_0 =>
   (case ((sep_matches_prefix s4973_0)) of
         SOME ((() , s4974_0)) =>
   (case ((string_drop s4973_0 s4974_0)) of
         s4975_0 =>
   (case ((csr_name_map_matches_prefix s4975_0
          : (( 12 words$word # ii)) option)) of
         SOME ((csr, s4976_0)) =>
   (case ((string_drop s4975_0 s4976_0)) of
         s4977_0 =>
   (case ((sep_matches_prefix s4977_0)) of
         SOME ((() , s4978_0)) =>
   (case ((string_drop s4977_0 s4978_0)) of
         s4979_0 =>
   (case ((reg_name_matches_prefix s4979_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s4980_0)) =>
   (case ((string_drop s4979_0 s4980_0)) of
         s_ => SOME (op, rd, csr, rs1, s_)
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s4947_ : string -> maybe ((csrop * mword ty5 * mword ty12 * mword ty5 * string))*)

val _ = Define `
 ((s4947_:string ->(csrop#(5)words$word#(12)words$word#(5)words$word#string)option) s4948_0= 
  ((case s4948_0 of
         s4949_0 =>
   (case ((csr_mnemonic_matches_prefix s4949_0)) of
         SOME ((op, s4950_0)) =>
   let s4951_0 = (string_drop s4949_0 s4950_0) in
   if ((string_startswith s4951_0 "i")) then
     (case ((string_drop s4951_0 ((string_length "i")))) of
           s4952_0 =>
     (case ((spc_matches_prefix0 s4952_0)) of
           SOME ((() , s4953_0)) =>
     (case ((string_drop s4952_0 s4953_0)) of
           s4954_0 =>
     (case ((reg_name_matches_prefix s4954_0 : (( 5 words$word # ii)) option)) of
           SOME ((rd, s4955_0)) =>
     (case ((string_drop s4954_0 s4955_0)) of
           s4956_0 =>
     (case ((sep_matches_prefix s4956_0)) of
           SOME ((() , s4957_0)) =>
     (case ((string_drop s4956_0 s4957_0)) of
           s4958_0 =>
     (case ((csr_name_map_matches_prefix s4958_0
            : (( 12 words$word # ii)) option)) of
           SOME ((csr, s4959_0)) =>
     (case ((string_drop s4958_0 s4959_0)) of
           s4960_0 =>
     (case ((sep_matches_prefix s4960_0)) of
           SOME ((() , s4961_0)) =>
     (case ((string_drop s4960_0 s4961_0)) of
           s4962_0 =>
     (case ((hex_bits_5_matches_prefix
               instance_Sail2_values_Bitvector_Machine_word_mword_dict
               s4962_0 : (( 5 words$word # ii)) option)) of
           SOME ((rs1, s4963_0)) =>
     (case ((string_drop s4962_0 s4963_0)) of
           s_ => SOME (op, rd, csr, rs1, s_)
     )
       | _ => NONE
     )
     )
       | _ => NONE
     )
     )
       | _ => NONE
     )
     )
       | _ => NONE
     )
     )
       | _ => NONE
     )
     )
       | _ => NONE
     )
     ) else NONE
     | _ => NONE
   )
   )))`;


(*val _s4928_ : string -> maybe ((bool * mword ty5 * mword ty5 * mword ty5 * string))*)

val _ = Define `
 ((s4928_:string ->(bool#(5)words$word#(5)words$word#(5)words$word#string)option) s4929_0=
    (let s4930_0 = s4929_0 in
   if ((string_startswith s4930_0 "rem")) then  
  (case ((string_drop s4930_0 ((string_length "rem")))) of
        s4931_0 =>
  (case ((maybe_not_u_matches_prefix s4931_0)) of
        SOME ((s, s4932_0)) =>
  let s4933_0 = (string_drop s4931_0 s4932_0) in
  if ((string_startswith s4933_0 "w")) then
    (case ((string_drop s4933_0 ((string_length "w")))) of
          s4934_0 =>
    (case ((spc_matches_prefix0 s4934_0)) of
          SOME ((() , s4935_0)) =>
    (case ((string_drop s4934_0 s4935_0)) of
          s4936_0 =>
    (case ((reg_name_matches_prefix s4936_0 : (( 5 words$word # ii)) option)) of
          SOME ((rd, s4937_0)) =>
    (case ((string_drop s4936_0 s4937_0)) of
          s4938_0 =>
    (case ((sep_matches_prefix s4938_0)) of
          SOME ((() , s4939_0)) =>
    (case ((string_drop s4938_0 s4939_0)) of
          s4940_0 =>
    (case ((reg_name_matches_prefix s4940_0 : (( 5 words$word # ii)) option)) of
          SOME ((rs1, s4941_0)) =>
    (case ((string_drop s4940_0 s4941_0)) of
          s4942_0 =>
    (case ((sep_matches_prefix s4942_0)) of
          SOME ((() , s4943_0)) =>
    (case ((string_drop s4942_0 s4943_0)) of
          s4944_0 =>
    (case ((reg_name_matches_prefix s4944_0 : (( 5 words$word # ii)) option)) of
          SOME ((rs2, s4945_0)) =>
    (case ((string_drop s4944_0 s4945_0)) of
          s_ => SOME (s, rd, rs1, rs2, s_)
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    ) else NONE
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4909_ : string -> maybe ((bool * mword ty5 * mword ty5 * mword ty5 * string))*)

val _ = Define `
 ((s4909_:string ->(bool#(5)words$word#(5)words$word#(5)words$word#string)option) s4910_0=
    (let s4911_0 = s4910_0 in
   if ((string_startswith s4911_0 "div")) then  
  (case ((string_drop s4911_0 ((string_length "div")))) of
        s4912_0 =>
  (case ((maybe_not_u_matches_prefix s4912_0)) of
        SOME ((s, s4913_0)) =>
  let s4914_0 = (string_drop s4912_0 s4913_0) in
  if ((string_startswith s4914_0 "w")) then
    (case ((string_drop s4914_0 ((string_length "w")))) of
          s4915_0 =>
    (case ((spc_matches_prefix0 s4915_0)) of
          SOME ((() , s4916_0)) =>
    (case ((string_drop s4915_0 s4916_0)) of
          s4917_0 =>
    (case ((reg_name_matches_prefix s4917_0 : (( 5 words$word # ii)) option)) of
          SOME ((rd, s4918_0)) =>
    (case ((string_drop s4917_0 s4918_0)) of
          s4919_0 =>
    (case ((sep_matches_prefix s4919_0)) of
          SOME ((() , s4920_0)) =>
    (case ((string_drop s4919_0 s4920_0)) of
          s4921_0 =>
    (case ((reg_name_matches_prefix s4921_0 : (( 5 words$word # ii)) option)) of
          SOME ((rs1, s4922_0)) =>
    (case ((string_drop s4921_0 s4922_0)) of
          s4923_0 =>
    (case ((sep_matches_prefix s4923_0)) of
          SOME ((() , s4924_0)) =>
    (case ((string_drop s4923_0 s4924_0)) of
          s4925_0 =>
    (case ((reg_name_matches_prefix s4925_0 : (( 5 words$word # ii)) option)) of
          SOME ((rs2, s4926_0)) =>
    (case ((string_drop s4925_0 s4926_0)) of
          s_ => SOME (s, rd, rs1, rs2, s_)
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    ) else NONE
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4893_ : string -> maybe ((mword ty5 * mword ty5 * mword ty5 * string))*)

val _ = Define `
 ((s4893_:string ->((5)words$word#(5)words$word#(5)words$word#string)option) s4894_0=
    (let s4895_0 = s4894_0 in
   if ((string_startswith s4895_0 "mulw")) then  
  (case ((string_drop s4895_0 ((string_length "mulw")))) of
        s4896_0 =>
  (case ((spc_matches_prefix0 s4896_0)) of
        SOME ((() , s4897_0)) =>
  (case ((string_drop s4896_0 s4897_0)) of
        s4898_0 =>
  (case ((reg_name_matches_prefix s4898_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s4899_0)) =>
  (case ((string_drop s4898_0 s4899_0)) of
        s4900_0 =>
  (case ((sep_matches_prefix s4900_0)) of
        SOME ((() , s4901_0)) =>
  (case ((string_drop s4900_0 s4901_0)) of
        s4902_0 =>
  (case ((reg_name_matches_prefix s4902_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs1, s4903_0)) =>
  (case ((string_drop s4902_0 s4903_0)) of
        s4904_0 =>
  (case ((sep_matches_prefix s4904_0)) of
        SOME ((() , s4905_0)) =>
  (case ((string_drop s4904_0 s4905_0)) of
        s4906_0 =>
  (case ((reg_name_matches_prefix s4906_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s4907_0)) =>
  (case ((string_drop s4906_0 s4907_0)) of   s_ => SOME (rd, rs1, rs2, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4875_ : string -> maybe ((bool * mword ty5 * mword ty5 * mword ty5 * string))*)

val _ = Define `
 ((s4875_:string ->(bool#(5)words$word#(5)words$word#(5)words$word#string)option) s4876_0=
    (let s4877_0 = s4876_0 in
   if ((string_startswith s4877_0 "rem")) then  
  (case ((string_drop s4877_0 ((string_length "rem")))) of
        s4878_0 =>
  (case ((maybe_not_u_matches_prefix s4878_0)) of
        SOME ((s, s4879_0)) =>
  (case ((string_drop s4878_0 s4879_0)) of
        s4880_0 =>
  (case ((spc_matches_prefix0 s4880_0)) of
        SOME ((() , s4881_0)) =>
  (case ((string_drop s4880_0 s4881_0)) of
        s4882_0 =>
  (case ((reg_name_matches_prefix s4882_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s4883_0)) =>
  (case ((string_drop s4882_0 s4883_0)) of
        s4884_0 =>
  (case ((sep_matches_prefix s4884_0)) of
        SOME ((() , s4885_0)) =>
  (case ((string_drop s4884_0 s4885_0)) of
        s4886_0 =>
  (case ((reg_name_matches_prefix s4886_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs1, s4887_0)) =>
  (case ((string_drop s4886_0 s4887_0)) of
        s4888_0 =>
  (case ((sep_matches_prefix s4888_0)) of
        SOME ((() , s4889_0)) =>
  (case ((string_drop s4888_0 s4889_0)) of
        s4890_0 =>
  (case ((reg_name_matches_prefix s4890_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s4891_0)) =>
  (case ((string_drop s4890_0 s4891_0)) of
        s_ => SOME (s, rd, rs1, rs2, s_)
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4857_ : string -> maybe ((bool * mword ty5 * mword ty5 * mword ty5 * string))*)

val _ = Define `
 ((s4857_:string ->(bool#(5)words$word#(5)words$word#(5)words$word#string)option) s4858_0=
    (let s4859_0 = s4858_0 in
   if ((string_startswith s4859_0 "div")) then  
  (case ((string_drop s4859_0 ((string_length "div")))) of
        s4860_0 =>
  (case ((maybe_not_u_matches_prefix s4860_0)) of
        SOME ((s, s4861_0)) =>
  (case ((string_drop s4860_0 s4861_0)) of
        s4862_0 =>
  (case ((spc_matches_prefix0 s4862_0)) of
        SOME ((() , s4863_0)) =>
  (case ((string_drop s4862_0 s4863_0)) of
        s4864_0 =>
  (case ((reg_name_matches_prefix s4864_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s4865_0)) =>
  (case ((string_drop s4864_0 s4865_0)) of
        s4866_0 =>
  (case ((sep_matches_prefix s4866_0)) of
        SOME ((() , s4867_0)) =>
  (case ((string_drop s4866_0 s4867_0)) of
        s4868_0 =>
  (case ((reg_name_matches_prefix s4868_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs1, s4869_0)) =>
  (case ((string_drop s4868_0 s4869_0)) of
        s4870_0 =>
  (case ((sep_matches_prefix s4870_0)) of
        SOME ((() , s4871_0)) =>
  (case ((string_drop s4870_0 s4871_0)) of
        s4872_0 =>
  (case ((reg_name_matches_prefix s4872_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s4873_0)) =>
  (case ((string_drop s4872_0 s4873_0)) of
        s_ => SOME (s, rd, rs1, rs2, s_)
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4840_ : string -> maybe ((bool * bool * bool * mword ty5 * mword ty5 * mword ty5 * string))*)

val _ = Define `
 ((s4840_:string ->(bool#bool#bool#(5)words$word#(5)words$word#(5)words$word#string)option) s4841_0= 
  ((case s4841_0 of
         s4842_0 =>
   (case ((mul_mnemonic_matches_prefix s4842_0)) of
         SOME (((high, signed1, signed2), s4843_0)) =>
   (case ((string_drop s4842_0 s4843_0)) of
         s4844_0 =>
   (case ((spc_matches_prefix0 s4844_0)) of
         SOME ((() , s4845_0)) =>
   (case ((string_drop s4844_0 s4845_0)) of
         s4846_0 =>
   (case ((reg_name_matches_prefix s4846_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s4847_0)) =>
   (case ((string_drop s4846_0 s4847_0)) of
         s4848_0 =>
   (case ((sep_matches_prefix s4848_0)) of
         SOME ((() , s4849_0)) =>
   (case ((string_drop s4848_0 s4849_0)) of
         s4850_0 =>
   (case ((reg_name_matches_prefix s4850_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s4851_0)) =>
   (case ((string_drop s4850_0 s4851_0)) of
         s4852_0 =>
   (case ((sep_matches_prefix s4852_0)) of
         SOME ((() , s4853_0)) =>
   (case ((string_drop s4852_0 s4853_0)) of
         s4854_0 =>
   (case ((reg_name_matches_prefix s4854_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s4855_0)) =>
   (case ((string_drop s4854_0 s4855_0)) of
         s_ => SOME (high, signed1, signed2, rd, rs1, rs2, s_)
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s4828_ : string -> maybe ((mword ty5 * mword ty5 * string))*)

val _ = Define `
 ((s4828_:string ->((5)words$word#(5)words$word#string)option) s4829_0=
    (let s4830_0 = s4829_0 in
   if ((string_startswith s4830_0 "c.add")) then  
  (case ((string_drop s4830_0 ((string_length "c.add")))) of
        s4831_0 =>
  (case ((spc_matches_prefix0 s4831_0)) of
        SOME ((() , s4832_0)) =>
  (case ((string_drop s4831_0 s4832_0)) of
        s4833_0 =>
  (case ((reg_name_matches_prefix s4833_0 : (( 5 words$word # ii)) option)) of
        SOME ((rsd, s4834_0)) =>
  (case ((string_drop s4833_0 s4834_0)) of
        s4835_0 =>
  (case ((sep_matches_prefix s4835_0)) of
        SOME ((() , s4836_0)) =>
  (case ((string_drop s4835_0 s4836_0)) of
        s4837_0 =>
  (case ((reg_name_matches_prefix s4837_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s4838_0)) =>
  (case ((string_drop s4837_0 s4838_0)) of   s_ => SOME (rsd, rs2, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4824_ : string -> maybe string*)

val _ = Define `
 ((s4824_:string ->(string)option) s4825_0=
    (let s4826_0 = s4825_0 in
   if ((string_startswith s4826_0 "c.ebreak")) then  
  (case ((string_drop s4826_0 ((string_length "c.ebreak")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s4812_ : string -> maybe ((mword ty5 * mword ty5 * string))*)

val _ = Define `
 ((s4812_:string ->((5)words$word#(5)words$word#string)option) s4813_0=
    (let s4814_0 = s4813_0 in
   if ((string_startswith s4814_0 "c.mv")) then  
  (case ((string_drop s4814_0 ((string_length "c.mv")))) of
        s4815_0 =>
  (case ((spc_matches_prefix0 s4815_0)) of
        SOME ((() , s4816_0)) =>
  (case ((string_drop s4815_0 s4816_0)) of
        s4817_0 =>
  (case ((reg_name_matches_prefix s4817_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s4818_0)) =>
  (case ((string_drop s4817_0 s4818_0)) of
        s4819_0 =>
  (case ((sep_matches_prefix s4819_0)) of
        SOME ((() , s4820_0)) =>
  (case ((string_drop s4819_0 s4820_0)) of
        s4821_0 =>
  (case ((reg_name_matches_prefix s4821_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s4822_0)) =>
  (case ((string_drop s4821_0 s4822_0)) of   s_ => SOME (rd, rs2, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4804_ : string -> maybe ((mword ty5 * string))*)

val _ = Define `
 ((s4804_:string ->((5)words$word#string)option) s4805_0=
    (let s4806_0 = s4805_0 in
   if ((string_startswith s4806_0 "c.jalr")) then  
  (case ((string_drop s4806_0 ((string_length "c.jalr")))) of
        s4807_0 =>
  (case ((spc_matches_prefix0 s4807_0)) of
        SOME ((() , s4808_0)) =>
  (case ((string_drop s4807_0 s4808_0)) of
        s4809_0 =>
  (case ((reg_name_matches_prefix s4809_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs1, s4810_0)) =>
  (case ((string_drop s4809_0 s4810_0)) of   s_ => SOME (rs1, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4796_ : string -> maybe ((mword ty5 * string))*)

val _ = Define `
 ((s4796_:string ->((5)words$word#string)option) s4797_0=
    (let s4798_0 = s4797_0 in
   if ((string_startswith s4798_0 "c.jr")) then  
  (case ((string_drop s4798_0 ((string_length "c.jr")))) of
        s4799_0 =>
  (case ((spc_matches_prefix0 s4799_0)) of
        SOME ((() , s4800_0)) =>
  (case ((string_drop s4799_0 s4800_0)) of
        s4801_0 =>
  (case ((reg_name_matches_prefix s4801_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs1, s4802_0)) =>
  (case ((string_drop s4801_0 s4802_0)) of   s_ => SOME (rs1, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4784_ : string -> maybe ((mword ty5 * mword ty6 * string))*)

val _ = Define `
 ((s4784_:string ->((5)words$word#(6)words$word#string)option) s4785_0=
    (let s4786_0 = s4785_0 in
   if ((string_startswith s4786_0 "c.sdsp")) then  
  (case ((string_drop s4786_0 ((string_length "c.sdsp")))) of
        s4787_0 =>
  (case ((spc_matches_prefix0 s4787_0)) of
        SOME ((() , s4788_0)) =>
  (case ((string_drop s4787_0 s4788_0)) of
        s4789_0 =>
  (case ((reg_name_matches_prefix s4789_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s4790_0)) =>
  (case ((string_drop s4789_0 s4790_0)) of
        s4791_0 =>
  (case ((sep_matches_prefix s4791_0)) of
        SOME ((() , s4792_0)) =>
  (case ((string_drop s4791_0 s4792_0)) of
        s4793_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s4793_0 : (( 6 words$word # ii)) option)) of
        SOME ((uimm, s4794_0)) =>
  (case ((string_drop s4793_0 s4794_0)) of   s_ => SOME (rs2, uimm, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4772_ : string -> maybe ((mword ty5 * mword ty6 * string))*)

val _ = Define `
 ((s4772_:string ->((5)words$word#(6)words$word#string)option) s4773_0=
    (let s4774_0 = s4773_0 in
   if ((string_startswith s4774_0 "c.swsp")) then  
  (case ((string_drop s4774_0 ((string_length "c.swsp")))) of
        s4775_0 =>
  (case ((spc_matches_prefix0 s4775_0)) of
        SOME ((() , s4776_0)) =>
  (case ((string_drop s4775_0 s4776_0)) of
        s4777_0 =>
  (case ((reg_name_matches_prefix s4777_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s4778_0)) =>
  (case ((string_drop s4777_0 s4778_0)) of
        s4779_0 =>
  (case ((sep_matches_prefix s4779_0)) of
        SOME ((() , s4780_0)) =>
  (case ((string_drop s4779_0 s4780_0)) of
        s4781_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s4781_0 : (( 6 words$word # ii)) option)) of
        SOME ((uimm, s4782_0)) =>
  (case ((string_drop s4781_0 s4782_0)) of   s_ => SOME (rd, uimm, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4760_ : string -> maybe ((mword ty5 * mword ty6 * string))*)

val _ = Define `
 ((s4760_:string ->((5)words$word#(6)words$word#string)option) s4761_0=
    (let s4762_0 = s4761_0 in
   if ((string_startswith s4762_0 "c.ldsp")) then  
  (case ((string_drop s4762_0 ((string_length "c.ldsp")))) of
        s4763_0 =>
  (case ((spc_matches_prefix0 s4763_0)) of
        SOME ((() , s4764_0)) =>
  (case ((string_drop s4763_0 s4764_0)) of
        s4765_0 =>
  (case ((reg_name_matches_prefix s4765_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s4766_0)) =>
  (case ((string_drop s4765_0 s4766_0)) of
        s4767_0 =>
  (case ((sep_matches_prefix s4767_0)) of
        SOME ((() , s4768_0)) =>
  (case ((string_drop s4767_0 s4768_0)) of
        s4769_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s4769_0 : (( 6 words$word # ii)) option)) of
        SOME ((uimm, s4770_0)) =>
  (case ((string_drop s4769_0 s4770_0)) of   s_ => SOME (rd, uimm, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4748_ : string -> maybe ((mword ty5 * mword ty6 * string))*)

val _ = Define `
 ((s4748_:string ->((5)words$word#(6)words$word#string)option) s4749_0=
    (let s4750_0 = s4749_0 in
   if ((string_startswith s4750_0 "c.lwsp")) then  
  (case ((string_drop s4750_0 ((string_length "c.lwsp")))) of
        s4751_0 =>
  (case ((spc_matches_prefix0 s4751_0)) of
        SOME ((() , s4752_0)) =>
  (case ((string_drop s4751_0 s4752_0)) of
        s4753_0 =>
  (case ((reg_name_matches_prefix s4753_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s4754_0)) =>
  (case ((string_drop s4753_0 s4754_0)) of
        s4755_0 =>
  (case ((sep_matches_prefix s4755_0)) of
        SOME ((() , s4756_0)) =>
  (case ((string_drop s4755_0 s4756_0)) of
        s4757_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s4757_0 : (( 6 words$word # ii)) option)) of
        SOME ((uimm, s4758_0)) =>
  (case ((string_drop s4757_0 s4758_0)) of   s_ => SOME (rd, uimm, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4736_ : string -> maybe ((mword ty5 * mword ty6 * string))*)

val _ = Define `
 ((s4736_:string ->((5)words$word#(6)words$word#string)option) s4737_0=
    (let s4738_0 = s4737_0 in
   if ((string_startswith s4738_0 "c.slli")) then  
  (case ((string_drop s4738_0 ((string_length "c.slli")))) of
        s4739_0 =>
  (case ((spc_matches_prefix0 s4739_0)) of
        SOME ((() , s4740_0)) =>
  (case ((string_drop s4739_0 s4740_0)) of
        s4741_0 =>
  (case ((reg_name_matches_prefix s4741_0 : (( 5 words$word # ii)) option)) of
        SOME ((rsd, s4742_0)) =>
  (case ((string_drop s4741_0 s4742_0)) of
        s4743_0 =>
  (case ((sep_matches_prefix s4743_0)) of
        SOME ((() , s4744_0)) =>
  (case ((string_drop s4743_0 s4744_0)) of
        s4745_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s4745_0 : (( 6 words$word # ii)) option)) of
        SOME ((shamt, s4746_0)) =>
  (case ((string_drop s4745_0 s4746_0)) of   s_ => SOME (rsd, shamt, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4724_ : string -> maybe ((mword ty3 * mword ty8 * string))*)

val _ = Define `
 ((s4724_:string ->((3)words$word#(8)words$word#string)option) s4725_0=
    (let s4726_0 = s4725_0 in
   if ((string_startswith s4726_0 "c.bnez")) then  
  (case ((string_drop s4726_0 ((string_length "c.bnez")))) of
        s4727_0 =>
  (case ((spc_matches_prefix0 s4727_0)) of
        SOME ((() , s4728_0)) =>
  (case ((string_drop s4727_0 s4728_0)) of
        s4729_0 =>
  (case ((creg_name_matches_prefix s4729_0 : (( 3 words$word # ii)) option)) of
        SOME ((rs, s4730_0)) =>
  (case ((string_drop s4729_0 s4730_0)) of
        s4731_0 =>
  (case ((sep_matches_prefix s4731_0)) of
        SOME ((() , s4732_0)) =>
  (case ((string_drop s4731_0 s4732_0)) of
        s4733_0 =>
  (case ((hex_bits_8_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s4733_0 : (( 8 words$word # ii)) option)) of
        SOME ((imm, s4734_0)) =>
  (case ((string_drop s4733_0 s4734_0)) of   s_ => SOME (rs, imm, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4712_ : string -> maybe ((mword ty3 * mword ty8 * string))*)

val _ = Define `
 ((s4712_:string ->((3)words$word#(8)words$word#string)option) s4713_0=
    (let s4714_0 = s4713_0 in
   if ((string_startswith s4714_0 "c.beqz")) then  
  (case ((string_drop s4714_0 ((string_length "c.beqz")))) of
        s4715_0 =>
  (case ((spc_matches_prefix0 s4715_0)) of
        SOME ((() , s4716_0)) =>
  (case ((string_drop s4715_0 s4716_0)) of
        s4717_0 =>
  (case ((creg_name_matches_prefix s4717_0 : (( 3 words$word # ii)) option)) of
        SOME ((rs, s4718_0)) =>
  (case ((string_drop s4717_0 s4718_0)) of
        s4719_0 =>
  (case ((sep_matches_prefix s4719_0)) of
        SOME ((() , s4720_0)) =>
  (case ((string_drop s4719_0 s4720_0)) of
        s4721_0 =>
  (case ((hex_bits_8_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s4721_0 : (( 8 words$word # ii)) option)) of
        SOME ((imm, s4722_0)) =>
  (case ((string_drop s4721_0 s4722_0)) of   s_ => SOME (rs, imm, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4704_ : string -> maybe ((mword ty11 * string))*)

val _ = Define `
 ((s4704_:string ->((11)words$word#string)option) s4705_0=
    (let s4706_0 = s4705_0 in
   if ((string_startswith s4706_0 "c.j")) then  
  (case ((string_drop s4706_0 ((string_length "c.j")))) of
        s4707_0 =>
  (case ((spc_matches_prefix0 s4707_0)) of
        SOME ((() , s4708_0)) =>
  (case ((string_drop s4707_0 s4708_0)) of
        s4709_0 =>
  (case ((hex_bits_11_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s4709_0 : (( 11 words$word # ii)) option)) of
        SOME ((imm, s4710_0)) =>
  (case ((string_drop s4709_0 s4710_0)) of   s_ => SOME (imm, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4692_ : string -> maybe ((mword ty3 * mword ty3 * string))*)

val _ = Define `
 ((s4692_:string ->((3)words$word#(3)words$word#string)option) s4693_0=
    (let s4694_0 = s4693_0 in
   if ((string_startswith s4694_0 "c.addw")) then  
  (case ((string_drop s4694_0 ((string_length "c.addw")))) of
        s4695_0 =>
  (case ((spc_matches_prefix0 s4695_0)) of
        SOME ((() , s4696_0)) =>
  (case ((string_drop s4695_0 s4696_0)) of
        s4697_0 =>
  (case ((creg_name_matches_prefix s4697_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s4698_0)) =>
  (case ((string_drop s4697_0 s4698_0)) of
        s4699_0 =>
  (case ((sep_matches_prefix s4699_0)) of
        SOME ((() , s4700_0)) =>
  (case ((string_drop s4699_0 s4700_0)) of
        s4701_0 =>
  (case ((creg_name_matches_prefix s4701_0 : (( 3 words$word # ii)) option)) of
        SOME ((rs2, s4702_0)) =>
  (case ((string_drop s4701_0 s4702_0)) of   s_ => SOME (rsd, rs2, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4680_ : string -> maybe ((mword ty3 * mword ty3 * string))*)

val _ = Define `
 ((s4680_:string ->((3)words$word#(3)words$word#string)option) s4681_0=
    (let s4682_0 = s4681_0 in
   if ((string_startswith s4682_0 "c.subw")) then  
  (case ((string_drop s4682_0 ((string_length "c.subw")))) of
        s4683_0 =>
  (case ((spc_matches_prefix0 s4683_0)) of
        SOME ((() , s4684_0)) =>
  (case ((string_drop s4683_0 s4684_0)) of
        s4685_0 =>
  (case ((creg_name_matches_prefix s4685_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s4686_0)) =>
  (case ((string_drop s4685_0 s4686_0)) of
        s4687_0 =>
  (case ((sep_matches_prefix s4687_0)) of
        SOME ((() , s4688_0)) =>
  (case ((string_drop s4687_0 s4688_0)) of
        s4689_0 =>
  (case ((creg_name_matches_prefix s4689_0 : (( 3 words$word # ii)) option)) of
        SOME ((rs2, s4690_0)) =>
  (case ((string_drop s4689_0 s4690_0)) of   s_ => SOME (rsd, rs2, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4668_ : string -> maybe ((mword ty3 * mword ty3 * string))*)

val _ = Define `
 ((s4668_:string ->((3)words$word#(3)words$word#string)option) s4669_0=
    (let s4670_0 = s4669_0 in
   if ((string_startswith s4670_0 "c.and")) then  
  (case ((string_drop s4670_0 ((string_length "c.and")))) of
        s4671_0 =>
  (case ((spc_matches_prefix0 s4671_0)) of
        SOME ((() , s4672_0)) =>
  (case ((string_drop s4671_0 s4672_0)) of
        s4673_0 =>
  (case ((creg_name_matches_prefix s4673_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s4674_0)) =>
  (case ((string_drop s4673_0 s4674_0)) of
        s4675_0 =>
  (case ((sep_matches_prefix s4675_0)) of
        SOME ((() , s4676_0)) =>
  (case ((string_drop s4675_0 s4676_0)) of
        s4677_0 =>
  (case ((creg_name_matches_prefix s4677_0 : (( 3 words$word # ii)) option)) of
        SOME ((rs2, s4678_0)) =>
  (case ((string_drop s4677_0 s4678_0)) of   s_ => SOME (rsd, rs2, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4656_ : string -> maybe ((mword ty3 * mword ty3 * string))*)

val _ = Define `
 ((s4656_:string ->((3)words$word#(3)words$word#string)option) s4657_0=
    (let s4658_0 = s4657_0 in
   if ((string_startswith s4658_0 "c.or")) then  
  (case ((string_drop s4658_0 ((string_length "c.or")))) of
        s4659_0 =>
  (case ((spc_matches_prefix0 s4659_0)) of
        SOME ((() , s4660_0)) =>
  (case ((string_drop s4659_0 s4660_0)) of
        s4661_0 =>
  (case ((creg_name_matches_prefix s4661_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s4662_0)) =>
  (case ((string_drop s4661_0 s4662_0)) of
        s4663_0 =>
  (case ((sep_matches_prefix s4663_0)) of
        SOME ((() , s4664_0)) =>
  (case ((string_drop s4663_0 s4664_0)) of
        s4665_0 =>
  (case ((creg_name_matches_prefix s4665_0 : (( 3 words$word # ii)) option)) of
        SOME ((rs2, s4666_0)) =>
  (case ((string_drop s4665_0 s4666_0)) of   s_ => SOME (rsd, rs2, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4644_ : string -> maybe ((mword ty3 * mword ty3 * string))*)

val _ = Define `
 ((s4644_:string ->((3)words$word#(3)words$word#string)option) s4645_0=
    (let s4646_0 = s4645_0 in
   if ((string_startswith s4646_0 "c.xor")) then  
  (case ((string_drop s4646_0 ((string_length "c.xor")))) of
        s4647_0 =>
  (case ((spc_matches_prefix0 s4647_0)) of
        SOME ((() , s4648_0)) =>
  (case ((string_drop s4647_0 s4648_0)) of
        s4649_0 =>
  (case ((creg_name_matches_prefix s4649_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s4650_0)) =>
  (case ((string_drop s4649_0 s4650_0)) of
        s4651_0 =>
  (case ((sep_matches_prefix s4651_0)) of
        SOME ((() , s4652_0)) =>
  (case ((string_drop s4651_0 s4652_0)) of
        s4653_0 =>
  (case ((creg_name_matches_prefix s4653_0 : (( 3 words$word # ii)) option)) of
        SOME ((rs2, s4654_0)) =>
  (case ((string_drop s4653_0 s4654_0)) of   s_ => SOME (rsd, rs2, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4632_ : string -> maybe ((mword ty3 * mword ty3 * string))*)

val _ = Define `
 ((s4632_:string ->((3)words$word#(3)words$word#string)option) s4633_0=
    (let s4634_0 = s4633_0 in
   if ((string_startswith s4634_0 "c.sub")) then  
  (case ((string_drop s4634_0 ((string_length "c.sub")))) of
        s4635_0 =>
  (case ((spc_matches_prefix0 s4635_0)) of
        SOME ((() , s4636_0)) =>
  (case ((string_drop s4635_0 s4636_0)) of
        s4637_0 =>
  (case ((creg_name_matches_prefix s4637_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s4638_0)) =>
  (case ((string_drop s4637_0 s4638_0)) of
        s4639_0 =>
  (case ((sep_matches_prefix s4639_0)) of
        SOME ((() , s4640_0)) =>
  (case ((string_drop s4639_0 s4640_0)) of
        s4641_0 =>
  (case ((creg_name_matches_prefix s4641_0 : (( 3 words$word # ii)) option)) of
        SOME ((rs2, s4642_0)) =>
  (case ((string_drop s4641_0 s4642_0)) of   s_ => SOME (rsd, rs2, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4620_ : string -> maybe ((mword ty3 * mword ty6 * string))*)

val _ = Define `
 ((s4620_:string ->((3)words$word#(6)words$word#string)option) s4621_0=
    (let s4622_0 = s4621_0 in
   if ((string_startswith s4622_0 "c.andi")) then  
  (case ((string_drop s4622_0 ((string_length "c.andi")))) of
        s4623_0 =>
  (case ((spc_matches_prefix0 s4623_0)) of
        SOME ((() , s4624_0)) =>
  (case ((string_drop s4623_0 s4624_0)) of
        s4625_0 =>
  (case ((creg_name_matches_prefix s4625_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s4626_0)) =>
  (case ((string_drop s4625_0 s4626_0)) of
        s4627_0 =>
  (case ((sep_matches_prefix s4627_0)) of
        SOME ((() , s4628_0)) =>
  (case ((string_drop s4627_0 s4628_0)) of
        s4629_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s4629_0 : (( 6 words$word # ii)) option)) of
        SOME ((imm, s4630_0)) =>
  (case ((string_drop s4629_0 s4630_0)) of   s_ => SOME (rsd, imm, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4608_ : string -> maybe ((mword ty3 * mword ty6 * string))*)

val _ = Define `
 ((s4608_:string ->((3)words$word#(6)words$word#string)option) s4609_0=
    (let s4610_0 = s4609_0 in
   if ((string_startswith s4610_0 "c.srai")) then  
  (case ((string_drop s4610_0 ((string_length "c.srai")))) of
        s4611_0 =>
  (case ((spc_matches_prefix0 s4611_0)) of
        SOME ((() , s4612_0)) =>
  (case ((string_drop s4611_0 s4612_0)) of
        s4613_0 =>
  (case ((creg_name_matches_prefix s4613_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s4614_0)) =>
  (case ((string_drop s4613_0 s4614_0)) of
        s4615_0 =>
  (case ((sep_matches_prefix s4615_0)) of
        SOME ((() , s4616_0)) =>
  (case ((string_drop s4615_0 s4616_0)) of
        s4617_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s4617_0 : (( 6 words$word # ii)) option)) of
        SOME ((shamt, s4618_0)) =>
  (case ((string_drop s4617_0 s4618_0)) of   s_ => SOME (rsd, shamt, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4596_ : string -> maybe ((mword ty3 * mword ty6 * string))*)

val _ = Define `
 ((s4596_:string ->((3)words$word#(6)words$word#string)option) s4597_0=
    (let s4598_0 = s4597_0 in
   if ((string_startswith s4598_0 "c.srli")) then  
  (case ((string_drop s4598_0 ((string_length "c.srli")))) of
        s4599_0 =>
  (case ((spc_matches_prefix0 s4599_0)) of
        SOME ((() , s4600_0)) =>
  (case ((string_drop s4599_0 s4600_0)) of
        s4601_0 =>
  (case ((creg_name_matches_prefix s4601_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsd, s4602_0)) =>
  (case ((string_drop s4601_0 s4602_0)) of
        s4603_0 =>
  (case ((sep_matches_prefix s4603_0)) of
        SOME ((() , s4604_0)) =>
  (case ((string_drop s4603_0 s4604_0)) of
        s4605_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s4605_0 : (( 6 words$word # ii)) option)) of
        SOME ((shamt, s4606_0)) =>
  (case ((string_drop s4605_0 s4606_0)) of   s_ => SOME (rsd, shamt, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4584_ : string -> maybe ((mword ty5 * mword ty6 * string))*)

val _ = Define `
 ((s4584_:string ->((5)words$word#(6)words$word#string)option) s4585_0=
    (let s4586_0 = s4585_0 in
   if ((string_startswith s4586_0 "c.lui")) then  
  (case ((string_drop s4586_0 ((string_length "c.lui")))) of
        s4587_0 =>
  (case ((spc_matches_prefix0 s4587_0)) of
        SOME ((() , s4588_0)) =>
  (case ((string_drop s4587_0 s4588_0)) of
        s4589_0 =>
  (case ((reg_name_matches_prefix s4589_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s4590_0)) =>
  (case ((string_drop s4589_0 s4590_0)) of
        s4591_0 =>
  (case ((sep_matches_prefix s4591_0)) of
        SOME ((() , s4592_0)) =>
  (case ((string_drop s4591_0 s4592_0)) of
        s4593_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s4593_0 : (( 6 words$word # ii)) option)) of
        SOME ((imm, s4594_0)) =>
  (case ((string_drop s4593_0 s4594_0)) of   s_ => SOME (rd, imm, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4576_ : string -> maybe ((mword ty6 * string))*)

val _ = Define `
 ((s4576_:string ->((6)words$word#string)option) s4577_0=
    (let s4578_0 = s4577_0 in
   if ((string_startswith s4578_0 "c.addi16sp")) then  
  (case ((string_drop s4578_0 ((string_length "c.addi16sp")))) of
        s4579_0 =>
  (case ((spc_matches_prefix0 s4579_0)) of
        SOME ((() , s4580_0)) =>
  (case ((string_drop s4579_0 s4580_0)) of
        s4581_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s4581_0 : (( 6 words$word # ii)) option)) of
        SOME ((imm, s4582_0)) =>
  (case ((string_drop s4581_0 s4582_0)) of   s_ => SOME (imm, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4564_ : string -> maybe ((mword ty5 * mword ty6 * string))*)

val _ = Define `
 ((s4564_:string ->((5)words$word#(6)words$word#string)option) s4565_0=
    (let s4566_0 = s4565_0 in
   if ((string_startswith s4566_0 "c.li")) then  
  (case ((string_drop s4566_0 ((string_length "c.li")))) of
        s4567_0 =>
  (case ((spc_matches_prefix0 s4567_0)) of
        SOME ((() , s4568_0)) =>
  (case ((string_drop s4567_0 s4568_0)) of
        s4569_0 =>
  (case ((reg_name_matches_prefix s4569_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s4570_0)) =>
  (case ((string_drop s4569_0 s4570_0)) of
        s4571_0 =>
  (case ((sep_matches_prefix s4571_0)) of
        SOME ((() , s4572_0)) =>
  (case ((string_drop s4571_0 s4572_0)) of
        s4573_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s4573_0 : (( 6 words$word # ii)) option)) of
        SOME ((imm, s4574_0)) =>
  (case ((string_drop s4573_0 s4574_0)) of   s_ => SOME (rd, imm, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4552_ : string -> maybe ((mword ty5 * mword ty6 * string))*)

val _ = Define `
 ((s4552_:string ->((5)words$word#(6)words$word#string)option) s4553_0=
    (let s4554_0 = s4553_0 in
   if ((string_startswith s4554_0 "c.addiw")) then  
  (case ((string_drop s4554_0 ((string_length "c.addiw")))) of
        s4555_0 =>
  (case ((spc_matches_prefix0 s4555_0)) of
        SOME ((() , s4556_0)) =>
  (case ((string_drop s4555_0 s4556_0)) of
        s4557_0 =>
  (case ((reg_name_matches_prefix s4557_0 : (( 5 words$word # ii)) option)) of
        SOME ((rsd, s4558_0)) =>
  (case ((string_drop s4557_0 s4558_0)) of
        s4559_0 =>
  (case ((sep_matches_prefix s4559_0)) of
        SOME ((() , s4560_0)) =>
  (case ((string_drop s4559_0 s4560_0)) of
        s4561_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s4561_0 : (( 6 words$word # ii)) option)) of
        SOME ((imm, s4562_0)) =>
  (case ((string_drop s4561_0 s4562_0)) of   s_ => SOME (rsd, imm, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4544_ : string -> maybe ((mword ty11 * string))*)

val _ = Define `
 ((s4544_:string ->((11)words$word#string)option) s4545_0=
    (let s4546_0 = s4545_0 in
   if ((string_startswith s4546_0 "c.jal")) then  
  (case ((string_drop s4546_0 ((string_length "c.jal")))) of
        s4547_0 =>
  (case ((spc_matches_prefix0 s4547_0)) of
        SOME ((() , s4548_0)) =>
  (case ((string_drop s4547_0 s4548_0)) of
        s4549_0 =>
  (case ((hex_bits_12_matches_prefix0 s4549_0 : (( 12 words$word # ii)) option)) of
        SOME ((v__1216, s4550_0)) =>
  if (((((subrange_vec_dec v__1216 (( 0 : int): ii) (( 0 : int): ii) : 1 words$word))
          = (0b0w : 1 words$word)))) then
    let (imm : 11 words$word) = ((subrange_vec_dec v__1216 (( 11 : int): ii)
                                    (( 1 : int): ii) : 11 words$word)) in
    let (imm : 11 words$word) = ((subrange_vec_dec v__1216 (( 11 : int): ii)
                                    (( 1 : int): ii) : 11 words$word)) in
    (case ((string_drop s4549_0 s4550_0)) of   s_ => SOME (imm, s_) ) else
    NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4532_ : string -> maybe ((mword ty5 * mword ty6 * string))*)

val _ = Define `
 ((s4532_:string ->((5)words$word#(6)words$word#string)option) s4533_0=
    (let s4534_0 = s4533_0 in
   if ((string_startswith s4534_0 "c.addi")) then  
  (case ((string_drop s4534_0 ((string_length "c.addi")))) of
        s4535_0 =>
  (case ((spc_matches_prefix0 s4535_0)) of
        SOME ((() , s4536_0)) =>
  (case ((string_drop s4535_0 s4536_0)) of
        s4537_0 =>
  (case ((reg_name_matches_prefix s4537_0 : (( 5 words$word # ii)) option)) of
        SOME ((rsd, s4538_0)) =>
  (case ((string_drop s4537_0 s4538_0)) of
        s4539_0 =>
  (case ((sep_matches_prefix s4539_0)) of
        SOME ((() , s4540_0)) =>
  (case ((string_drop s4539_0 s4540_0)) of
        s4541_0 =>
  (case ((hex_bits_6_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s4541_0 : (( 6 words$word # ii)) option)) of
        SOME ((nzi, s4542_0)) =>
  (case ((string_drop s4541_0 s4542_0)) of   s_ => SOME (rsd, nzi, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4516_ : string -> maybe ((mword ty3 * mword ty3 * mword ty5 * string))*)

val _ = Define `
 ((s4516_:string ->((3)words$word#(3)words$word#(5)words$word#string)option) s4517_0=
    (let s4518_0 = s4517_0 in
   if ((string_startswith s4518_0 "c.sd")) then  
  (case ((string_drop s4518_0 ((string_length "c.sd")))) of
        s4519_0 =>
  (case ((spc_matches_prefix0 s4519_0)) of
        SOME ((() , s4520_0)) =>
  (case ((string_drop s4519_0 s4520_0)) of
        s4521_0 =>
  (case ((creg_name_matches_prefix s4521_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsc1, s4522_0)) =>
  (case ((string_drop s4521_0 s4522_0)) of
        s4523_0 =>
  (case ((sep_matches_prefix s4523_0)) of
        SOME ((() , s4524_0)) =>
  (case ((string_drop s4523_0 s4524_0)) of
        s4525_0 =>
  (case ((creg_name_matches_prefix s4525_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsc2, s4526_0)) =>
  (case ((string_drop s4525_0 s4526_0)) of
        s4527_0 =>
  (case ((sep_matches_prefix s4527_0)) of
        SOME ((() , s4528_0)) =>
  (case ((string_drop s4527_0 s4528_0)) of
        s4529_0 =>
  (case ((hex_bits_8_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s4529_0
         : (( 8 words$word # ii)) option)) of
        SOME ((v__1218, s4530_0)) =>
  if (((((subrange_vec_dec v__1218 (( 2 : int): ii) (( 0 : int): ii)
         : 3 words$word)) = (0b000w : 3 words$word)))) then
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1218 (( 7 : int): ii) (( 3 : int): ii) : 5 words$word)) in
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1218 (( 7 : int): ii) (( 3 : int): ii) : 5 words$word)) in
    (case ((string_drop s4529_0 s4530_0)) of
          s_ => SOME (rsc1, rsc2, uimm, s_)
    ) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4500_ : string -> maybe ((mword ty3 * mword ty3 * mword ty5 * string))*)

val _ = Define `
 ((s4500_:string ->((3)words$word#(3)words$word#(5)words$word#string)option) s4501_0=
    (let s4502_0 = s4501_0 in
   if ((string_startswith s4502_0 "c.sw")) then  
  (case ((string_drop s4502_0 ((string_length "c.sw")))) of
        s4503_0 =>
  (case ((spc_matches_prefix0 s4503_0)) of
        SOME ((() , s4504_0)) =>
  (case ((string_drop s4503_0 s4504_0)) of
        s4505_0 =>
  (case ((creg_name_matches_prefix s4505_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsc1, s4506_0)) =>
  (case ((string_drop s4505_0 s4506_0)) of
        s4507_0 =>
  (case ((sep_matches_prefix s4507_0)) of
        SOME ((() , s4508_0)) =>
  (case ((string_drop s4507_0 s4508_0)) of
        s4509_0 =>
  (case ((creg_name_matches_prefix s4509_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsc2, s4510_0)) =>
  (case ((string_drop s4509_0 s4510_0)) of
        s4511_0 =>
  (case ((sep_matches_prefix s4511_0)) of
        SOME ((() , s4512_0)) =>
  (case ((string_drop s4511_0 s4512_0)) of
        s4513_0 =>
  (case ((hex_bits_7_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s4513_0
         : (( 7 words$word # ii)) option)) of
        SOME ((v__1220, s4514_0)) =>
  if (((((subrange_vec_dec v__1220 (( 1 : int): ii) (( 0 : int): ii)
         : 2 words$word)) = (0b00w : 2 words$word)))) then
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1220 (( 6 : int): ii) (( 2 : int): ii) : 5 words$word)) in
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1220 (( 6 : int): ii) (( 2 : int): ii) : 5 words$word)) in
    (case ((string_drop s4513_0 s4514_0)) of
          s_ => SOME (rsc1, rsc2, uimm, s_)
    ) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4484_ : string -> maybe ((mword ty3 * mword ty3 * mword ty5 * string))*)

val _ = Define `
 ((s4484_:string ->((3)words$word#(3)words$word#(5)words$word#string)option) s4485_0=
    (let s4486_0 = s4485_0 in
   if ((string_startswith s4486_0 "c.ld")) then  
  (case ((string_drop s4486_0 ((string_length "c.ld")))) of
        s4487_0 =>
  (case ((spc_matches_prefix0 s4487_0)) of
        SOME ((() , s4488_0)) =>
  (case ((string_drop s4487_0 s4488_0)) of
        s4489_0 =>
  (case ((creg_name_matches_prefix s4489_0 : (( 3 words$word # ii)) option)) of
        SOME ((rdc, s4490_0)) =>
  (case ((string_drop s4489_0 s4490_0)) of
        s4491_0 =>
  (case ((sep_matches_prefix s4491_0)) of
        SOME ((() , s4492_0)) =>
  (case ((string_drop s4491_0 s4492_0)) of
        s4493_0 =>
  (case ((creg_name_matches_prefix s4493_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsc, s4494_0)) =>
  (case ((string_drop s4493_0 s4494_0)) of
        s4495_0 =>
  (case ((sep_matches_prefix s4495_0)) of
        SOME ((() , s4496_0)) =>
  (case ((string_drop s4495_0 s4496_0)) of
        s4497_0 =>
  (case ((hex_bits_8_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s4497_0
         : (( 8 words$word # ii)) option)) of
        SOME ((v__1222, s4498_0)) =>
  if (((((subrange_vec_dec v__1222 (( 2 : int): ii) (( 0 : int): ii)
         : 3 words$word)) = (0b000w : 3 words$word)))) then
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1222 (( 7 : int): ii) (( 3 : int): ii) : 5 words$word)) in
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1222 (( 7 : int): ii) (( 3 : int): ii) : 5 words$word)) in
    (case ((string_drop s4497_0 s4498_0)) of
          s_ => SOME (rdc, rsc, uimm, s_)
    ) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4468_ : string -> maybe ((mword ty3 * mword ty3 * mword ty5 * string))*)

val _ = Define `
 ((s4468_:string ->((3)words$word#(3)words$word#(5)words$word#string)option) s4469_0=
    (let s4470_0 = s4469_0 in
   if ((string_startswith s4470_0 "c.lw")) then  
  (case ((string_drop s4470_0 ((string_length "c.lw")))) of
        s4471_0 =>
  (case ((spc_matches_prefix0 s4471_0)) of
        SOME ((() , s4472_0)) =>
  (case ((string_drop s4471_0 s4472_0)) of
        s4473_0 =>
  (case ((creg_name_matches_prefix s4473_0 : (( 3 words$word # ii)) option)) of
        SOME ((rdc, s4474_0)) =>
  (case ((string_drop s4473_0 s4474_0)) of
        s4475_0 =>
  (case ((sep_matches_prefix s4475_0)) of
        SOME ((() , s4476_0)) =>
  (case ((string_drop s4475_0 s4476_0)) of
        s4477_0 =>
  (case ((creg_name_matches_prefix s4477_0 : (( 3 words$word # ii)) option)) of
        SOME ((rsc, s4478_0)) =>
  (case ((string_drop s4477_0 s4478_0)) of
        s4479_0 =>
  (case ((sep_matches_prefix s4479_0)) of
        SOME ((() , s4480_0)) =>
  (case ((string_drop s4479_0 s4480_0)) of
        s4481_0 =>
  (case ((hex_bits_7_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s4481_0
         : (( 7 words$word # ii)) option)) of
        SOME ((v__1224, s4482_0)) =>
  if (((((subrange_vec_dec v__1224 (( 1 : int): ii) (( 0 : int): ii)
         : 2 words$word)) = (0b00w : 2 words$word)))) then
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1224 (( 6 : int): ii) (( 2 : int): ii) : 5 words$word)) in
    let (uimm : 5 words$word) =
        ((subrange_vec_dec v__1224 (( 6 : int): ii) (( 2 : int): ii) : 5 words$word)) in
    (case ((string_drop s4481_0 s4482_0)) of
          s_ => SOME (rdc, rsc, uimm, s_)
    ) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4456_ : string -> maybe ((mword ty3 * mword ty8 * string))*)

val _ = Define `
 ((s4456_:string ->((3)words$word#(8)words$word#string)option) s4457_0=
    (let s4458_0 = s4457_0 in
   if ((string_startswith s4458_0 "c.addi4spn")) then  
  (case ((string_drop s4458_0 ((string_length "c.addi4spn")))) of
        s4459_0 =>
  (case ((spc_matches_prefix0 s4459_0)) of
        SOME ((() , s4460_0)) =>
  (case ((string_drop s4459_0 s4460_0)) of
        s4461_0 =>
  (case ((creg_name_matches_prefix s4461_0 : (( 3 words$word # ii)) option)) of
        SOME ((rdc, s4462_0)) =>
  (case ((string_drop s4461_0 s4462_0)) of
        s4463_0 =>
  (case ((sep_matches_prefix s4463_0)) of
        SOME ((() , s4464_0)) =>
  (case ((string_drop s4463_0 s4464_0)) of
        s4465_0 =>
  (case ((hex_bits_10_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s4465_0 : (( 10 words$word # ii)) option)) of
        SOME ((v__1226, s4466_0)) =>
  if (((((subrange_vec_dec v__1226 (( 1 : int): ii) (( 0 : int): ii) : 2 words$word))
          = (0b00w : 2 words$word)))) then
    let (nzimm : 8 words$word) =
        ((subrange_vec_dec v__1226 (( 9 : int): ii) (( 2 : int): ii) : 8 words$word)) in
    let (nzimm : 8 words$word) =
        ((subrange_vec_dec v__1226 (( 9 : int): ii) (( 2 : int): ii) : 8 words$word)) in
    (case ((string_drop s4465_0 s4466_0)) of   s_ => SOME (rdc, nzimm, s_) )
  else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4452_ : string -> maybe string*)

val _ = Define `
 ((s4452_:string ->(string)option) s4453_0=
    (let s4454_0 = s4453_0 in
   if ((string_startswith s4454_0 "c.nop")) then  
  (case ((string_drop s4454_0 ((string_length "c.nop")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s4426_ : string -> maybe ((amoop * word_width * bool * bool * mword ty5 * mword ty5 * mword ty5 * string))*)

val _ = Define `
 ((s4426_:string ->(amoop#word_width#bool#bool#(5)words$word#(5)words$word#(5)words$word#string)option) s4427_0= 
  ((case s4427_0 of
         s4428_0 =>
   (case ((amo_mnemonic_matches_prefix s4428_0)) of
         SOME ((op, s4429_0)) =>
   let s4430_0 = (string_drop s4428_0 s4429_0) in
   if ((string_startswith s4430_0 ".")) then
     (case ((string_drop s4430_0 ((string_length ".")))) of
           s4431_0 =>
     (case ((size_mnemonic_matches_prefix s4431_0)) of
           SOME ((width, s4432_0)) =>
     (case ((string_drop s4431_0 s4432_0)) of
           s4433_0 =>
     (case ((maybe_aq_matches_prefix s4433_0)) of
           SOME ((aq, s4434_0)) =>
     (case ((string_drop s4433_0 s4434_0)) of
           s4435_0 =>
     (case ((maybe_rl_matches_prefix s4435_0)) of
           SOME ((rl, s4436_0)) =>
     (case ((string_drop s4435_0 s4436_0)) of
           s4437_0 =>
     (case ((spc_matches_prefix0 s4437_0)) of
           SOME ((() , s4438_0)) =>
     (case ((string_drop s4437_0 s4438_0)) of
           s4439_0 =>
     (case ((reg_name_matches_prefix s4439_0 : (( 5 words$word # ii)) option)) of
           SOME ((rd, s4440_0)) =>
     (case ((string_drop s4439_0 s4440_0)) of
           s4441_0 =>
     (case ((sep_matches_prefix s4441_0)) of
           SOME ((() , s4442_0)) =>
     (case ((string_drop s4441_0 s4442_0)) of
           s4443_0 =>
     (case ((reg_name_matches_prefix s4443_0 : (( 5 words$word # ii)) option)) of
           SOME ((rs2, s4444_0)) =>
     (case ((string_drop s4443_0 s4444_0)) of
           s4445_0 =>
     (case ((sep_matches_prefix s4445_0)) of
           SOME ((() , s4446_0)) =>
     let s4447_0 = (string_drop s4445_0 s4446_0) in
     if ((string_startswith s4447_0 "(")) then
       (case ((string_drop s4447_0 ((string_length "(")))) of
             s4448_0 =>
       (case ((reg_name_matches_prefix s4448_0
              : (( 5 words$word # ii)) option)) of
             SOME ((rs1, s4449_0)) =>
       let s4450_0 = (string_drop s4448_0 s4449_0) in
       if ((string_startswith s4450_0 ")")) then
         (case ((string_drop s4450_0 ((string_length ")")))) of
               s_ =>
         SOME (op, width, aq, rl, rd, rs2, rs1, s_)
         ) else NONE
         | _ => NONE
       )
       ) else NONE
       | _ => NONE
     )
     )
       | _ => NONE
     )
     )
       | _ => NONE
     )
     )
       | _ => NONE
     )
     )
       | _ => NONE
     )
     )
       | _ => NONE
     )
     )
       | _ => NONE
     )
     )
       | _ => NONE
     )
     ) else NONE
     | _ => NONE
   )
   )))`;


(*val _s4404_ : string -> maybe ((word_width * bool * bool * mword ty5 * mword ty5 * mword ty5 * string))*)

val _ = Define `
 ((s4404_:string ->(word_width#bool#bool#(5)words$word#(5)words$word#(5)words$word#string)option) s4405_0=
    (let s4406_0 = s4405_0 in
   if ((string_startswith s4406_0 "sc.")) then  
  (case ((string_drop s4406_0 ((string_length "sc.")))) of
        s4407_0 =>
  (case ((size_mnemonic_matches_prefix s4407_0)) of
        SOME ((size1, s4408_0)) =>
  (case ((string_drop s4407_0 s4408_0)) of
        s4409_0 =>
  (case ((maybe_aq_matches_prefix s4409_0)) of
        SOME ((aq, s4410_0)) =>
  (case ((string_drop s4409_0 s4410_0)) of
        s4411_0 =>
  (case ((maybe_rl_matches_prefix s4411_0)) of
        SOME ((rl, s4412_0)) =>
  (case ((string_drop s4411_0 s4412_0)) of
        s4413_0 =>
  (case ((spc_matches_prefix0 s4413_0)) of
        SOME ((() , s4414_0)) =>
  (case ((string_drop s4413_0 s4414_0)) of
        s4415_0 =>
  (case ((reg_name_matches_prefix s4415_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s4416_0)) =>
  (case ((string_drop s4415_0 s4416_0)) of
        s4417_0 =>
  (case ((sep_matches_prefix s4417_0)) of
        SOME ((() , s4418_0)) =>
  (case ((string_drop s4417_0 s4418_0)) of
        s4419_0 =>
  (case ((reg_name_matches_prefix s4419_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs1, s4420_0)) =>
  (case ((string_drop s4419_0 s4420_0)) of
        s4421_0 =>
  (case ((sep_matches_prefix s4421_0)) of
        SOME ((() , s4422_0)) =>
  (case ((string_drop s4421_0 s4422_0)) of
        s4423_0 =>
  (case ((reg_name_matches_prefix s4423_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s4424_0)) =>
  (case ((string_drop s4423_0 s4424_0)) of
        s_ =>
  SOME (size1, aq, rl, rd, rs1, rs2, s_)
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4386_ : string -> maybe ((word_width * bool * bool * mword ty5 * mword ty5 * string))*)

val _ = Define `
 ((s4386_:string ->(word_width#bool#bool#(5)words$word#(5)words$word#string)option) s4387_0=
    (let s4388_0 = s4387_0 in
   if ((string_startswith s4388_0 "lr.")) then  
  (case ((string_drop s4388_0 ((string_length "lr.")))) of
        s4389_0 =>
  (case ((size_mnemonic_matches_prefix s4389_0)) of
        SOME ((size1, s4390_0)) =>
  (case ((string_drop s4389_0 s4390_0)) of
        s4391_0 =>
  (case ((maybe_aq_matches_prefix s4391_0)) of
        SOME ((aq, s4392_0)) =>
  (case ((string_drop s4391_0 s4392_0)) of
        s4393_0 =>
  (case ((maybe_rl_matches_prefix s4393_0)) of
        SOME ((rl, s4394_0)) =>
  (case ((string_drop s4393_0 s4394_0)) of
        s4395_0 =>
  (case ((spc_matches_prefix0 s4395_0)) of
        SOME ((() , s4396_0)) =>
  (case ((string_drop s4395_0 s4396_0)) of
        s4397_0 =>
  (case ((reg_name_matches_prefix s4397_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s4398_0)) =>
  (case ((string_drop s4397_0 s4398_0)) of
        s4399_0 =>
  (case ((sep_matches_prefix s4399_0)) of
        SOME ((() , s4400_0)) =>
  (case ((string_drop s4399_0 s4400_0)) of
        s4401_0 =>
  (case ((reg_name_matches_prefix s4401_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs1, s4402_0)) =>
  (case ((string_drop s4401_0 s4402_0)) of
        s_ => SOME (size1, aq, rl, rd, rs1, s_)
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4374_ : string -> maybe ((mword ty5 * mword ty5 * string))*)

val _ = Define `
 ((s4374_:string ->((5)words$word#(5)words$word#string)option) s4375_0=
    (let s4376_0 = s4375_0 in
   if ((string_startswith s4376_0 "sfence.vma")) then  
  (case ((string_drop s4376_0 ((string_length "sfence.vma")))) of
        s4377_0 =>
  (case ((spc_matches_prefix0 s4377_0)) of
        SOME ((() , s4378_0)) =>
  (case ((string_drop s4377_0 s4378_0)) of
        s4379_0 =>
  (case ((reg_name_matches_prefix s4379_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs1, s4380_0)) =>
  (case ((string_drop s4379_0 s4380_0)) of
        s4381_0 =>
  (case ((sep_matches_prefix s4381_0)) of
        SOME ((() , s4382_0)) =>
  (case ((string_drop s4381_0 s4382_0)) of
        s4383_0 =>
  (case ((reg_name_matches_prefix s4383_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s4384_0)) =>
  (case ((string_drop s4383_0 s4384_0)) of   s_ => SOME (rs1, rs2, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4370_ : string -> maybe string*)

val _ = Define `
 ((s4370_:string ->(string)option) s4371_0=
    (let s4372_0 = s4371_0 in
   if ((string_startswith s4372_0 "wfi")) then  
  (case ((string_drop s4372_0 ((string_length "wfi")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s4366_ : string -> maybe string*)

val _ = Define `
 ((s4366_:string ->(string)option) s4367_0=
    (let s4368_0 = s4367_0 in
   if ((string_startswith s4368_0 "ebreak")) then  
  (case ((string_drop s4368_0 ((string_length "ebreak")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s4362_ : string -> maybe string*)

val _ = Define `
 ((s4362_:string ->(string)option) s4363_0=
    (let s4364_0 = s4363_0 in
   if ((string_startswith s4364_0 "sret")) then  
  (case ((string_drop s4364_0 ((string_length "sret")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s4358_ : string -> maybe string*)

val _ = Define `
 ((s4358_:string ->(string)option) s4359_0=
    (let s4360_0 = s4359_0 in
   if ((string_startswith s4360_0 "mret")) then  
  (case ((string_drop s4360_0 ((string_length "mret")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s4354_ : string -> maybe string*)

val _ = Define `
 ((s4354_:string ->(string)option) s4355_0=
    (let s4356_0 = s4355_0 in
   if ((string_startswith s4356_0 "ecall")) then  
  (case ((string_drop s4356_0 ((string_length "ecall")))) of   s_ => SOME s_ )
   else NONE))`;


(*val _s4350_ : string -> maybe string*)

val _ = Define `
 ((s4350_:string ->(string)option) s4351_0=
    (let s4352_0 = s4351_0 in
   if ((string_startswith s4352_0 "fence.i")) then  
  (case ((string_drop s4352_0 ((string_length "fence.i")))) of
        s_ => SOME s_
  )
   else NONE))`;


(*val _s4338_ : string -> maybe ((mword ty4 * mword ty4 * string))*)

val _ = Define `
 ((s4338_:string ->((4)words$word#(4)words$word#string)option) s4339_0=
    (let s4340_0 = s4339_0 in
   if ((string_startswith s4340_0 "fence.tso")) then  
  (case ((string_drop s4340_0 ((string_length "fence.tso")))) of
        s4341_0 =>
  (case ((spc_matches_prefix0 s4341_0)) of
        SOME ((() , s4342_0)) =>
  (case ((string_drop s4341_0 s4342_0)) of
        s4343_0 =>
  (case ((fence_bits_matches_prefix s4343_0 : (( 4 words$word # ii)) option)) of
        SOME ((pred, s4344_0)) =>
  (case ((string_drop s4343_0 s4344_0)) of
        s4345_0 =>
  (case ((sep_matches_prefix s4345_0)) of
        SOME ((() , s4346_0)) =>
  (case ((string_drop s4345_0 s4346_0)) of
        s4347_0 =>
  (case ((fence_bits_matches_prefix s4347_0 : (( 4 words$word # ii)) option)) of
        SOME ((succ, s4348_0)) =>
  (case ((string_drop s4347_0 s4348_0)) of   s_ => SOME (pred, succ, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4326_ : string -> maybe ((mword ty4 * mword ty4 * string))*)

val _ = Define `
 ((s4326_:string ->((4)words$word#(4)words$word#string)option) s4327_0=
    (let s4328_0 = s4327_0 in
   if ((string_startswith s4328_0 "fence")) then  
  (case ((string_drop s4328_0 ((string_length "fence")))) of
        s4329_0 =>
  (case ((spc_matches_prefix0 s4329_0)) of
        SOME ((() , s4330_0)) =>
  (case ((string_drop s4329_0 s4330_0)) of
        s4331_0 =>
  (case ((fence_bits_matches_prefix s4331_0 : (( 4 words$word # ii)) option)) of
        SOME ((pred, s4332_0)) =>
  (case ((string_drop s4331_0 s4332_0)) of
        s4333_0 =>
  (case ((sep_matches_prefix s4333_0)) of
        SOME ((() , s4334_0)) =>
  (case ((string_drop s4333_0 s4334_0)) of
        s4335_0 =>
  (case ((fence_bits_matches_prefix s4335_0 : (( 4 words$word # ii)) option)) of
        SOME ((succ, s4336_0)) =>
  (case ((string_drop s4335_0 s4336_0)) of   s_ => SOME (pred, succ, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4309_ : string -> maybe ((sopw * mword ty5 * mword ty5 * mword ty5 * string))*)

val _ = Define `
 ((s4309_:string ->(sopw#(5)words$word#(5)words$word#(5)words$word#string)option) s4310_0= 
  ((case s4310_0 of
         s4311_0 =>
   (case ((shiftiwop_mnemonic_matches_prefix s4311_0)) of
         SOME ((op, s4312_0)) =>
   (case ((string_drop s4311_0 s4312_0)) of
         s4313_0 =>
   (case ((spc_matches_prefix0 s4313_0)) of
         SOME ((() , s4314_0)) =>
   (case ((string_drop s4313_0 s4314_0)) of
         s4315_0 =>
   (case ((reg_name_matches_prefix s4315_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s4316_0)) =>
   (case ((string_drop s4315_0 s4316_0)) of
         s4317_0 =>
   (case ((sep_matches_prefix s4317_0)) of
         SOME ((() , s4318_0)) =>
   (case ((string_drop s4317_0 s4318_0)) of
         s4319_0 =>
   (case ((reg_name_matches_prefix s4319_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s4320_0)) =>
   (case ((string_drop s4319_0 s4320_0)) of
         s4321_0 =>
   (case ((sep_matches_prefix s4321_0)) of
         SOME ((() , s4322_0)) =>
   (case ((string_drop s4321_0 s4322_0)) of
         s4323_0 =>
   (case ((hex_bits_5_matches_prefix
             instance_Sail2_values_Bitvector_Machine_word_mword_dict 
           s4323_0 : (( 5 words$word # ii)) option)) of
         SOME ((shamt, s4324_0)) =>
   (case ((string_drop s4323_0 s4324_0)) of
         s_ => SOME (op, rd, rs1, shamt, s_)
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s4292_ : string -> maybe ((ropw * mword ty5 * mword ty5 * mword ty5 * string))*)

val _ = Define `
 ((s4292_:string ->(ropw#(5)words$word#(5)words$word#(5)words$word#string)option) s4293_0= 
  ((case s4293_0 of
         s4294_0 =>
   (case ((rtypew_mnemonic_matches_prefix s4294_0)) of
         SOME ((op, s4295_0)) =>
   (case ((string_drop s4294_0 s4295_0)) of
         s4296_0 =>
   (case ((spc_matches_prefix0 s4296_0)) of
         SOME ((() , s4297_0)) =>
   (case ((string_drop s4296_0 s4297_0)) of
         s4298_0 =>
   (case ((reg_name_matches_prefix s4298_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s4299_0)) =>
   (case ((string_drop s4298_0 s4299_0)) of
         s4300_0 =>
   (case ((sep_matches_prefix s4300_0)) of
         SOME ((() , s4301_0)) =>
   (case ((string_drop s4300_0 s4301_0)) of
         s4302_0 =>
   (case ((reg_name_matches_prefix s4302_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s4303_0)) =>
   (case ((string_drop s4302_0 s4303_0)) of
         s4304_0 =>
   (case ((sep_matches_prefix s4304_0)) of
         SOME ((() , s4305_0)) =>
   (case ((string_drop s4304_0 s4305_0)) of
         s4306_0 =>
   (case ((reg_name_matches_prefix s4306_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s4307_0)) =>
   (case ((string_drop s4306_0 s4307_0)) of
         s_ => SOME (op, rd, rs1, rs2, s_)
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s4275_ : string -> maybe ((sop * mword ty5 * mword ty5 * mword ty5 * string))*)

val _ = Define `
 ((s4275_:string ->(sop#(5)words$word#(5)words$word#(5)words$word#string)option) s4276_0= 
  ((case s4276_0 of
         s4277_0 =>
   (case ((shiftw_mnemonic_matches_prefix s4277_0)) of
         SOME ((op, s4278_0)) =>
   (case ((string_drop s4277_0 s4278_0)) of
         s4279_0 =>
   (case ((spc_matches_prefix0 s4279_0)) of
         SOME ((() , s4280_0)) =>
   (case ((string_drop s4279_0 s4280_0)) of
         s4281_0 =>
   (case ((reg_name_matches_prefix s4281_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s4282_0)) =>
   (case ((string_drop s4281_0 s4282_0)) of
         s4283_0 =>
   (case ((sep_matches_prefix s4283_0)) of
         SOME ((() , s4284_0)) =>
   (case ((string_drop s4283_0 s4284_0)) of
         s4285_0 =>
   (case ((reg_name_matches_prefix s4285_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s4286_0)) =>
   (case ((string_drop s4285_0 s4286_0)) of
         s4287_0 =>
   (case ((sep_matches_prefix s4287_0)) of
         SOME ((() , s4288_0)) =>
   (case ((string_drop s4287_0 s4288_0)) of
         s4289_0 =>
   (case ((hex_bits_5_matches_prefix
             instance_Sail2_values_Bitvector_Machine_word_mword_dict 
           s4289_0 : (( 5 words$word # ii)) option)) of
         SOME ((shamt, s4290_0)) =>
   (case ((string_drop s4289_0 s4290_0)) of
         s_ => SOME (op, rd, rs1, shamt, s_)
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s4259_ : string -> maybe ((mword ty5 * mword ty5 * mword ty12 * string))*)

val _ = Define `
 ((s4259_:string ->((5)words$word#(5)words$word#(12)words$word#string)option) s4260_0=
    (let s4261_0 = s4260_0 in
   if ((string_startswith s4261_0 "addiw")) then  
  (case ((string_drop s4261_0 ((string_length "addiw")))) of
        s4262_0 =>
  (case ((spc_matches_prefix0 s4262_0)) of
        SOME ((() , s4263_0)) =>
  (case ((string_drop s4262_0 s4263_0)) of
        s4264_0 =>
  (case ((reg_name_matches_prefix s4264_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s4265_0)) =>
  (case ((string_drop s4264_0 s4265_0)) of
        s4266_0 =>
  (case ((sep_matches_prefix s4266_0)) of
        SOME ((() , s4267_0)) =>
  (case ((string_drop s4266_0 s4267_0)) of
        s4268_0 =>
  (case ((reg_name_matches_prefix s4268_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs1, s4269_0)) =>
  (case ((string_drop s4268_0 s4269_0)) of
        s4270_0 =>
  (case ((sep_matches_prefix s4270_0)) of
        SOME ((() , s4271_0)) =>
  (case ((string_drop s4270_0 s4271_0)) of
        s4272_0 =>
  (case ((hex_bits_12_matches_prefix0 s4272_0
         : (( 12 words$word # ii)) option)) of
        SOME ((imm, s4273_0)) =>
  (case ((string_drop s4272_0 s4273_0)) of   s_ => SOME (rd, rs1, imm, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4231_ : string -> maybe ((word_width * bool * bool * mword ty5 * mword ty12 * mword ty5 * string))*)

val _ = Define `
 ((s4231_:string ->(word_width#bool#bool#(5)words$word#(12)words$word#(5)words$word#string)option) s4232_0=
    (let s4233_0 = s4232_0 in
   if ((string_startswith s4233_0 "s")) then  
  (case ((string_drop s4233_0 ((string_length "s")))) of
        s4234_0 =>
  (case ((size_mnemonic_matches_prefix s4234_0)) of
        SOME ((size1, s4235_0)) =>
  (case ((string_drop s4234_0 s4235_0)) of
        s4236_0 =>
  (case ((maybe_aq_matches_prefix s4236_0)) of
        SOME ((aq, s4237_0)) =>
  (case ((string_drop s4236_0 s4237_0)) of
        s4238_0 =>
  (case ((maybe_rl_matches_prefix s4238_0)) of
        SOME ((rl, s4239_0)) =>
  (case ((string_drop s4238_0 s4239_0)) of
        s4240_0 =>
  (case ((spc_matches_prefix0 s4240_0)) of
        SOME ((() , s4241_0)) =>
  (case ((string_drop s4240_0 s4241_0)) of
        s4242_0 =>
  (case ((reg_name_matches_prefix s4242_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs2, s4243_0)) =>
  (case ((string_drop s4242_0 s4243_0)) of
        s4244_0 =>
  (case ((sep_matches_prefix s4244_0)) of
        SOME ((() , s4245_0)) =>
  (case ((string_drop s4244_0 s4245_0)) of
        s4246_0 =>
  (case ((hex_bits_12_matches_prefix0 s4246_0
         : (( 12 words$word # ii)) option)) of
        SOME ((imm, s4247_0)) =>
  (case ((string_drop s4246_0 s4247_0)) of
        s4248_0 =>
  (case ((opt_spc_matches_prefix0 s4248_0)) of
        SOME ((() , s4249_0)) =>
  let s4250_0 = (string_drop s4248_0 s4249_0) in
  if ((string_startswith s4250_0 "(")) then
    (case ((string_drop s4250_0 ((string_length "(")))) of
          s4251_0 =>
    (case ((opt_spc_matches_prefix0 s4251_0)) of
          SOME ((() , s4252_0)) =>
    (case ((string_drop s4251_0 s4252_0)) of
          s4253_0 =>
    (case ((reg_name_matches_prefix s4253_0 : (( 5 words$word # ii)) option)) of
          SOME ((rs1, s4254_0)) =>
    (case ((string_drop s4253_0 s4254_0)) of
          s4255_0 =>
    (case ((opt_spc_matches_prefix0 s4255_0)) of
          SOME ((() , s4256_0)) =>
    let s4257_0 = (string_drop s4255_0 s4256_0) in
    if ((string_startswith s4257_0 ")")) then
      (case ((string_drop s4257_0 ((string_length ")")))) of
            s_ =>
      SOME (size1, aq, rl, rs2, imm, rs1, s_)
      ) else NONE
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    ) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4201_ : string -> maybe ((word_width * bool * bool * bool * mword ty5 * mword ty12 * mword ty5 * string))*)

val _ = Define `
 ((s4201_:string ->(word_width#bool#bool#bool#(5)words$word#(12)words$word#(5)words$word#string)option) s4202_0=
    (let s4203_0 = s4202_0 in
   if ((string_startswith s4203_0 "l")) then  
  (case ((string_drop s4203_0 ((string_length "l")))) of
        s4204_0 =>
  (case ((size_mnemonic_matches_prefix s4204_0)) of
        SOME ((size1, s4205_0)) =>
  (case ((string_drop s4204_0 s4205_0)) of
        s4206_0 =>
  (case ((maybe_u_matches_prefix s4206_0)) of
        SOME ((is_unsigned, s4207_0)) =>
  (case ((string_drop s4206_0 s4207_0)) of
        s4208_0 =>
  (case ((maybe_aq_matches_prefix s4208_0)) of
        SOME ((aq, s4209_0)) =>
  (case ((string_drop s4208_0 s4209_0)) of
        s4210_0 =>
  (case ((maybe_rl_matches_prefix s4210_0)) of
        SOME ((rl, s4211_0)) =>
  (case ((string_drop s4210_0 s4211_0)) of
        s4212_0 =>
  (case ((spc_matches_prefix0 s4212_0)) of
        SOME ((() , s4213_0)) =>
  (case ((string_drop s4212_0 s4213_0)) of
        s4214_0 =>
  (case ((reg_name_matches_prefix s4214_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s4215_0)) =>
  (case ((string_drop s4214_0 s4215_0)) of
        s4216_0 =>
  (case ((sep_matches_prefix s4216_0)) of
        SOME ((() , s4217_0)) =>
  (case ((string_drop s4216_0 s4217_0)) of
        s4218_0 =>
  (case ((hex_bits_12_matches_prefix0 s4218_0
         : (( 12 words$word # ii)) option)) of
        SOME ((imm, s4219_0)) =>
  (case ((string_drop s4218_0 s4219_0)) of
        s4220_0 =>
  (case ((opt_spc_matches_prefix0 s4220_0)) of
        SOME ((() , s4221_0)) =>
  let s4222_0 = (string_drop s4220_0 s4221_0) in
  if ((string_startswith s4222_0 "(")) then
    (case ((string_drop s4222_0 ((string_length "(")))) of
          s4223_0 =>
    (case ((opt_spc_matches_prefix0 s4223_0)) of
          SOME ((() , s4224_0)) =>
    (case ((string_drop s4223_0 s4224_0)) of
          s4225_0 =>
    (case ((reg_name_matches_prefix s4225_0 : (( 5 words$word # ii)) option)) of
          SOME ((rs1, s4226_0)) =>
    (case ((string_drop s4225_0 s4226_0)) of
          s4227_0 =>
    (case ((opt_spc_matches_prefix0 s4227_0)) of
          SOME ((() , s4228_0)) =>
    let s4229_0 = (string_drop s4227_0 s4228_0) in
    if ((string_startswith s4229_0 ")")) then
      (case ((string_drop s4229_0 ((string_length ")")))) of
            s_ =>
      SOME (size1, is_unsigned, aq, rl, rd, imm, rs1, s_)
      ) else NONE
      | _ => NONE
    )
    )
      | _ => NONE
    )
    )
      | _ => NONE
    )
    ) else NONE
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4184_ : string -> maybe ((rop * mword ty5 * mword ty5 * mword ty5 * string))*)

val _ = Define `
 ((s4184_:string ->(rop#(5)words$word#(5)words$word#(5)words$word#string)option) s4185_0= 
  ((case s4185_0 of
         s4186_0 =>
   (case ((rtype_mnemonic_matches_prefix s4186_0)) of
         SOME ((op, s4187_0)) =>
   (case ((string_drop s4186_0 s4187_0)) of
         s4188_0 =>
   (case ((spc_matches_prefix0 s4188_0)) of
         SOME ((() , s4189_0)) =>
   (case ((string_drop s4188_0 s4189_0)) of
         s4190_0 =>
   (case ((reg_name_matches_prefix s4190_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s4191_0)) =>
   (case ((string_drop s4190_0 s4191_0)) of
         s4192_0 =>
   (case ((sep_matches_prefix s4192_0)) of
         SOME ((() , s4193_0)) =>
   (case ((string_drop s4192_0 s4193_0)) of
         s4194_0 =>
   (case ((reg_name_matches_prefix s4194_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s4195_0)) =>
   (case ((string_drop s4194_0 s4195_0)) of
         s4196_0 =>
   (case ((sep_matches_prefix s4196_0)) of
         SOME ((() , s4197_0)) =>
   (case ((string_drop s4196_0 s4197_0)) of
         s4198_0 =>
   (case ((reg_name_matches_prefix s4198_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s4199_0)) =>
   (case ((string_drop s4198_0 s4199_0)) of
         s_ => SOME (op, rd, rs1, rs2, s_)
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s4167_ : string -> maybe ((sop * mword ty5 * mword ty5 * mword ty6 * string))*)

val _ = Define `
 ((s4167_:string ->(sop#(5)words$word#(5)words$word#(6)words$word#string)option) s4168_0= 
  ((case s4168_0 of
         s4169_0 =>
   (case ((shiftiop_mnemonic_matches_prefix s4169_0)) of
         SOME ((op, s4170_0)) =>
   (case ((string_drop s4169_0 s4170_0)) of
         s4171_0 =>
   (case ((spc_matches_prefix0 s4171_0)) of
         SOME ((() , s4172_0)) =>
   (case ((string_drop s4171_0 s4172_0)) of
         s4173_0 =>
   (case ((reg_name_matches_prefix s4173_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s4174_0)) =>
   (case ((string_drop s4173_0 s4174_0)) of
         s4175_0 =>
   (case ((sep_matches_prefix s4175_0)) of
         SOME ((() , s4176_0)) =>
   (case ((string_drop s4175_0 s4176_0)) of
         s4177_0 =>
   (case ((reg_name_matches_prefix s4177_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s4178_0)) =>
   (case ((string_drop s4177_0 s4178_0)) of
         s4179_0 =>
   (case ((sep_matches_prefix s4179_0)) of
         SOME ((() , s4180_0)) =>
   (case ((string_drop s4179_0 s4180_0)) of
         s4181_0 =>
   (case ((hex_bits_6_matches_prefix
             instance_Sail2_values_Bitvector_Machine_word_mword_dict 
           s4181_0 : (( 6 words$word # ii)) option)) of
         SOME ((shamt, s4182_0)) =>
   (case ((string_drop s4181_0 s4182_0)) of
         s_ => SOME (op, rd, rs1, shamt, s_)
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s4150_ : string -> maybe ((iop * mword ty5 * mword ty5 * mword ty12 * string))*)

val _ = Define `
 ((s4150_:string ->(iop#(5)words$word#(5)words$word#(12)words$word#string)option) s4151_0= 
  ((case s4151_0 of
         s4152_0 =>
   (case ((itype_mnemonic_matches_prefix s4152_0)) of
         SOME ((op, s4153_0)) =>
   (case ((string_drop s4152_0 s4153_0)) of
         s4154_0 =>
   (case ((spc_matches_prefix0 s4154_0)) of
         SOME ((() , s4155_0)) =>
   (case ((string_drop s4154_0 s4155_0)) of
         s4156_0 =>
   (case ((reg_name_matches_prefix s4156_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s4157_0)) =>
   (case ((string_drop s4156_0 s4157_0)) of
         s4158_0 =>
   (case ((sep_matches_prefix s4158_0)) of
         SOME ((() , s4159_0)) =>
   (case ((string_drop s4158_0 s4159_0)) of
         s4160_0 =>
   (case ((reg_name_matches_prefix s4160_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s4161_0)) =>
   (case ((string_drop s4160_0 s4161_0)) of
         s4162_0 =>
   (case ((sep_matches_prefix s4162_0)) of
         SOME ((() , s4163_0)) =>
   (case ((string_drop s4162_0 s4163_0)) of
         s4164_0 =>
   (case ((hex_bits_12_matches_prefix0 s4164_0
          : (( 12 words$word # ii)) option)) of
         SOME ((imm, s4165_0)) =>
   (case ((string_drop s4164_0 s4165_0)) of
         s_ => SOME (op, rd, rs1, imm, s_)
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s4133_ : string -> maybe ((bop * mword ty5 * mword ty5 * mword ty13 * string))*)

val _ = Define `
 ((s4133_:string ->(bop#(5)words$word#(5)words$word#(13)words$word#string)option) s4134_0= 
  ((case s4134_0 of
         s4135_0 =>
   (case ((btype_mnemonic_matches_prefix s4135_0)) of
         SOME ((op, s4136_0)) =>
   (case ((string_drop s4135_0 s4136_0)) of
         s4137_0 =>
   (case ((spc_matches_prefix0 s4137_0)) of
         SOME ((() , s4138_0)) =>
   (case ((string_drop s4137_0 s4138_0)) of
         s4139_0 =>
   (case ((reg_name_matches_prefix s4139_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs1, s4140_0)) =>
   (case ((string_drop s4139_0 s4140_0)) of
         s4141_0 =>
   (case ((sep_matches_prefix s4141_0)) of
         SOME ((() , s4142_0)) =>
   (case ((string_drop s4141_0 s4142_0)) of
         s4143_0 =>
   (case ((reg_name_matches_prefix s4143_0 : (( 5 words$word # ii)) option)) of
         SOME ((rs2, s4144_0)) =>
   (case ((string_drop s4143_0 s4144_0)) of
         s4145_0 =>
   (case ((sep_matches_prefix s4145_0)) of
         SOME ((() , s4146_0)) =>
   (case ((string_drop s4145_0 s4146_0)) of
         s4147_0 =>
   (case ((hex_bits_13_matches_prefix
             instance_Sail2_values_Bitvector_Machine_word_mword_dict 
           s4147_0 : (( 13 words$word # ii)) option)) of
         SOME ((imm, s4148_0)) =>
   (case ((string_drop s4147_0 s4148_0)) of
         s_ => SOME (op, rs1, rs2, imm, s_)
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


(*val _s4117_ : string -> maybe ((mword ty5 * mword ty5 * mword ty12 * string))*)

val _ = Define `
 ((s4117_:string ->((5)words$word#(5)words$word#(12)words$word#string)option) s4118_0=
    (let s4119_0 = s4118_0 in
   if ((string_startswith s4119_0 "jalr")) then  
  (case ((string_drop s4119_0 ((string_length "jalr")))) of
        s4120_0 =>
  (case ((spc_matches_prefix0 s4120_0)) of
        SOME ((() , s4121_0)) =>
  (case ((string_drop s4120_0 s4121_0)) of
        s4122_0 =>
  (case ((reg_name_matches_prefix s4122_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s4123_0)) =>
  (case ((string_drop s4122_0 s4123_0)) of
        s4124_0 =>
  (case ((sep_matches_prefix s4124_0)) of
        SOME ((() , s4125_0)) =>
  (case ((string_drop s4124_0 s4125_0)) of
        s4126_0 =>
  (case ((reg_name_matches_prefix s4126_0 : (( 5 words$word # ii)) option)) of
        SOME ((rs1, s4127_0)) =>
  (case ((string_drop s4126_0 s4127_0)) of
        s4128_0 =>
  (case ((sep_matches_prefix s4128_0)) of
        SOME ((() , s4129_0)) =>
  (case ((string_drop s4128_0 s4129_0)) of
        s4130_0 =>
  (case ((hex_bits_12_matches_prefix0 s4130_0
         : (( 12 words$word # ii)) option)) of
        SOME ((imm, s4131_0)) =>
  (case ((string_drop s4130_0 s4131_0)) of   s_ => SOME (rd, rs1, imm, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4105_ : string -> maybe ((mword ty5 * mword ty21 * string))*)

val _ = Define `
 ((s4105_:string ->((5)words$word#(21)words$word#string)option) s4106_0=
    (let s4107_0 = s4106_0 in
   if ((string_startswith s4107_0 "jal")) then  
  (case ((string_drop s4107_0 ((string_length "jal")))) of
        s4108_0 =>
  (case ((spc_matches_prefix0 s4108_0)) of
        SOME ((() , s4109_0)) =>
  (case ((string_drop s4108_0 s4109_0)) of
        s4110_0 =>
  (case ((reg_name_matches_prefix s4110_0 : (( 5 words$word # ii)) option)) of
        SOME ((rd, s4111_0)) =>
  (case ((string_drop s4110_0 s4111_0)) of
        s4112_0 =>
  (case ((sep_matches_prefix s4112_0)) of
        SOME ((() , s4113_0)) =>
  (case ((string_drop s4112_0 s4113_0)) of
        s4114_0 =>
  (case ((hex_bits_21_matches_prefix
            instance_Sail2_values_Bitvector_Machine_word_mword_dict s4114_0 : (( 21 words$word # ii)) option)) of
        SOME ((imm, s4115_0)) =>
  (case ((string_drop s4114_0 s4115_0)) of   s_ => SOME (rd, imm, s_) )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
    | _ => NONE
  )
  )
   else NONE))`;


(*val _s4092_ : string -> maybe ((uop * mword ty5 * mword ty20 * string))*)

val _ = Define `
 ((s4092_:string ->(uop#(5)words$word#(20)words$word#string)option) s4093_0= 
  ((case s4093_0 of
         s4094_0 =>
   (case ((utype_mnemonic_matches_prefix s4094_0)) of
         SOME ((op, s4095_0)) =>
   (case ((string_drop s4094_0 s4095_0)) of
         s4096_0 =>
   (case ((spc_matches_prefix0 s4096_0)) of
         SOME ((() , s4097_0)) =>
   (case ((string_drop s4096_0 s4097_0)) of
         s4098_0 =>
   (case ((reg_name_matches_prefix s4098_0 : (( 5 words$word # ii)) option)) of
         SOME ((rd, s4099_0)) =>
   (case ((string_drop s4098_0 s4099_0)) of
         s4100_0 =>
   (case ((sep_matches_prefix s4100_0)) of
         SOME ((() , s4101_0)) =>
   (case ((string_drop s4100_0 s4101_0)) of
         s4102_0 =>
   (case ((hex_bits_20_matches_prefix
             instance_Sail2_values_Bitvector_Machine_word_mword_dict 
           s4102_0 : (( 20 words$word # ii)) option)) of
         SOME ((imm, s4103_0)) =>
   (case ((string_drop s4102_0 s4103_0)) of   s_ => SOME (op, rd, imm, s_) )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )
     | _ => NONE
   )
   )))`;


val _ = Define `
 ((assembly_matches_prefix:string ->(ast#int)option) arg_=
    (let s4104_0 = arg_ in
   if ((case ((s4092_ s4104_0  :  ((uop #  5 words$word #  20 words$word # string))option)) of
       SOME ((op, rd, imm, s_)) => T
     | _ => F
     )) then  (case
 (s4092_ s4104_0 : (( uop # 5 words$word # 20 words$word # string)) option) of
     (SOME ((op, rd, imm, s_))) =>
 SOME (UTYPE (imm, rd, op), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4105_ s4104_0  :  (( 5 words$word #  21 words$word # string))option)) of
       SOME ((rd, imm, s_)) => T
     | _ => F
     )) then  (case (s4105_ s4104_0 : (( 5 words$word # 21 words$word # string)) option) of
     (SOME ((rd, imm, s_))) =>
 SOME (RISCV_JAL (imm, rd), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4117_ s4104_0  :  (( 5 words$word #  5 words$word #  12 words$word # string))option)) of
       SOME ((rd, rs1, imm, s_)) => T
     | _ => F
     )) then  (case
 (s4117_ s4104_0 : (( 5 words$word # 5 words$word # 12 words$word # string)) option) of
     (SOME ((rd, rs1, imm, s_))) =>
 SOME
   (RISCV_JALR (imm, rs1, rd), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4133_ s4104_0  :  ((bop #  5 words$word #  5 words$word #  13 words$word # string))option)) of
       SOME ((op, rs1, rs2, imm, s_)) => T
     | _ => F
     )) then  (case
 (s4133_ s4104_0 : (( bop # 5 words$word # 5 words$word # 13 words$word # string)) option) of
     (SOME ((op, rs1, rs2, imm, s_))) =>
 SOME
   (BTYPE (imm, rs2, rs1, op), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4150_ s4104_0  :  ((iop #  5 words$word #  5 words$word #  12 words$word # string))option)) of
       SOME ((op, rd, rs1, imm, s_)) => T
     | _ => F
     )) then  (case
 (s4150_ s4104_0 : (( iop # 5 words$word # 5 words$word # 12 words$word # string)) option) of
     (SOME ((op, rd, rs1, imm, s_))) =>
 SOME
   (ITYPE (imm, rs1, rd, op), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4167_ s4104_0  :  ((sop #  5 words$word #  5 words$word #  6 words$word # string))option)) of
       SOME ((op, rd, rs1, shamt, s_)) => T
     | _ => F
     )) then  (case
 (s4167_ s4104_0 : (( sop # 5 words$word # 5 words$word # 6 words$word # string)) option) of
     (SOME ((op, rd, rs1, shamt, s_))) =>
 SOME
   (SHIFTIOP (shamt, rs1, rd, op), ((string_length arg_)) -
                                     ((string_length s_)))
 )
   else if ((case ((s4184_ s4104_0  :  ((rop #  5 words$word #  5 words$word #  5 words$word # string))option)) of
       SOME ((op, rd, rs1, rs2, s_)) => T
     | _ => F
     )) then  (case
 (s4184_ s4104_0 : (( rop # 5 words$word # 5 words$word # 5 words$word # string)) option) of
     (SOME ((op, rd, rs1, rs2, s_))) =>
 SOME
   (RTYPE (rs2, rs1, rd, op), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4201_ s4104_0
                     :  ((word_width # bool # bool # bool #  5 words$word #  12 words$word #  5 words$word # string))option)) of
       SOME ((size1, is_unsigned, aq, rl, rd, imm, rs1, s_)) => T
     | _ => F
     )) then  (case
 (s4201_ s4104_0
 : (( word_width # bool # bool # bool # 5 words$word # 12 words$word # 5 words$word # string)) option) of
     (SOME ((size1, is_unsigned, aq, rl, rd, imm, rs1, s_))) =>
 SOME
   (LOAD (imm, rs1, rd, is_unsigned, size1, aq, rl),
   ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4231_ s4104_0
                     :  ((word_width # bool # bool #  5 words$word #  12 words$word #  5 words$word # string))option)) of
       SOME ((size1, aq, rl, rs2, imm, rs1, s_)) => T
     | _ => F
     )) then  (case
 (s4231_ s4104_0
 : (( word_width # bool # bool # 5 words$word # 12 words$word # 5 words$word # string)) option) of
     (SOME ((size1, aq, rl, rs2, imm, rs1, s_))) =>
 SOME
   (STORE (imm, rs2, rs1, size1, aq, rl),
   ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4259_ s4104_0  :  (( 5 words$word #  5 words$word #  12 words$word # string))option)) of
       SOME ((rd, rs1, imm, s_)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case
 (s4259_ s4104_0 : (( 5 words$word # 5 words$word # 12 words$word # string)) option) of
     (SOME ((rd, rs1, imm, s_))) =>
 SOME (ADDIW (imm, rs1, rd), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4275_ s4104_0  :  ((sop #  5 words$word #  5 words$word #  5 words$word # string))option)) of
       SOME ((op, rd, rs1, shamt, s_)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case
 (s4275_ s4104_0 : (( sop # 5 words$word # 5 words$word # 5 words$word # string)) option) of
     (SOME ((op, rd, rs1, shamt, s_))) =>
 SOME
   (SHIFTW (shamt, rs1, rd, op), ((string_length arg_)) -
                                   ((string_length s_)))
 )
   else if ((case ((s4292_ s4104_0  :  ((ropw #  5 words$word #  5 words$word #  5 words$word # string))option)) of
       SOME ((op, rd, rs1, rs2, s_)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case
 (s4292_ s4104_0 : (( ropw # 5 words$word # 5 words$word # 5 words$word # string)) option) of
     (SOME ((op, rd, rs1, rs2, s_))) =>
 SOME
   (RTYPEW (rs2, rs1, rd, op), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4309_ s4104_0  :  ((sopw #  5 words$word #  5 words$word #  5 words$word # string))option)) of
       SOME ((op, rd, rs1, shamt, s_)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case
 (s4309_ s4104_0 : (( sopw # 5 words$word # 5 words$word # 5 words$word # string)) option) of
     (SOME ((op, rd, rs1, shamt, s_))) =>
 SOME
   (SHIFTIWOP (shamt, rs1, rd, op), ((string_length arg_)) -
                                      ((string_length s_)))
 )
   else if ((case ((s4326_ s4104_0  :  (( 4 words$word #  4 words$word # string))option)) of
       SOME ((pred, succ, s_)) => T
     | _ => F
     )) then  (case (s4326_ s4104_0 : (( 4 words$word # 4 words$word # string)) option) of
     (SOME ((pred, succ, s_))) =>
 SOME (FENCE (pred, succ), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4338_ s4104_0  :  (( 4 words$word #  4 words$word # string))option)) of
       SOME ((pred, succ, s_)) => T
     | _ => F
     )) then  (case (s4338_ s4104_0 : (( 4 words$word # 4 words$word # string)) option) of
     (SOME ((pred, succ, s_))) =>
 SOME (FENCE_TSO (pred, succ), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4350_ s4104_0)) of   SOME (s_) => T | _ => F )) then  
  (case s4350_ s4104_0 of
      (SOME (s_)) =>
  SOME (FENCEI () , ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s4354_ s4104_0)) of   SOME (s_) => T | _ => F )) then  
  (case s4354_ s4104_0 of
      (SOME (s_)) =>
  SOME (ECALL () , ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s4358_ s4104_0)) of   SOME (s_) => T | _ => F )) then  
  (case s4358_ s4104_0 of
      (SOME (s_)) =>
  SOME (MRET () , ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s4362_ s4104_0)) of   SOME (s_) => T | _ => F )) then  
  (case s4362_ s4104_0 of
      (SOME (s_)) =>
  SOME (SRET () , ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s4366_ s4104_0)) of   SOME (s_) => T | _ => F )) then  
  (case s4366_ s4104_0 of
      (SOME (s_)) =>
  SOME (EBREAK () , ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s4370_ s4104_0)) of   SOME (s_) => T | _ => F )) then  
  (case s4370_ s4104_0 of
      (SOME (s_)) =>
  SOME (WFI () , ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s4374_ s4104_0  :  (( 5 words$word #  5 words$word # string))option)) of
       SOME ((rs1, rs2, s_)) => T
     | _ => F
     )) then  (case (s4374_ s4104_0 : (( 5 words$word # 5 words$word # string)) option) of
     (SOME ((rs1, rs2, s_))) =>
 SOME (SFENCE_VMA (rs1, rs2), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4386_ s4104_0
                     :  ((word_width # bool # bool #  5 words$word #  5 words$word # string))option)) of
       SOME ((size1, aq, rl, rd, rs1, s_)) => T
     | _ => F
     )) then  (case
 (s4386_ s4104_0 : (( word_width # bool # bool # 5 words$word # 5 words$word # string)) option) of
     (SOME ((size1, aq, rl, rd, rs1, s_))) =>
 SOME
   (LOADRES (aq, rl, rs1, size1, rd), ((string_length arg_)) -
                                        ((string_length s_)))
 )
   else if ((case ((s4404_ s4104_0
                     :  ((word_width # bool # bool #  5 words$word #  5 words$word #  5 words$word # string))option)) of
       SOME ((size1, aq, rl, rd, rs1, rs2, s_)) => T
     | _ => F
     )) then  (case
 (s4404_ s4104_0
 : (( word_width # bool # bool # 5 words$word # 5 words$word # 5 words$word # string)) option) of
     (SOME ((size1, aq, rl, rd, rs1, rs2, s_))) =>
 SOME
   (STORECON (aq, rl, rs2, rs1, size1, rd),
   ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4426_ s4104_0
                     :  ((amoop # word_width # bool # bool #  5 words$word #  5 words$word #  5 words$word # string))option)) of
       SOME ((op, width, aq, rl, rd, rs2, rs1, s_)) => T
     | _ => F
     )) then  (case
 (s4426_ s4104_0
 : (( amoop # word_width # bool # bool # 5 words$word # 5 words$word # 5 words$word # string)) option) of
     (SOME ((op, width, aq, rl, rd, rs2, rs1, s_))) =>
 SOME
   (AMO (op, aq, rl, rs2, rs1, width, rd),
   ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4452_ s4104_0)) of   SOME (s_) => T | _ => F )) then  
  (case s4452_ s4104_0 of
      (SOME (s_)) =>
  SOME (C_NOP () , ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s4456_ s4104_0  :  (( 3 words$word #  8 words$word # string))option)) of
       SOME ((rdc, nzimm, s_)) => (nzimm <> (0x00w :  8 words$word))
     | _ => F
     )) then  (case (s4456_ s4104_0 : (( 3 words$word # 8 words$word # string)) option) of
     (SOME ((rdc, nzimm, s_))) =>
 SOME
   (C_ADDI4SPN (rdc, nzimm), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4468_ s4104_0  :  (( 3 words$word #  3 words$word #  5 words$word # string))option)) of
       SOME ((rdc, rsc, uimm, s_)) => T
     | _ => F
     )) then  (case
 (s4468_ s4104_0 : (( 3 words$word # 3 words$word # 5 words$word # string)) option) of
     (SOME ((rdc, rsc, uimm, s_))) =>
 SOME (C_LW (uimm, rsc, rdc), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4484_ s4104_0  :  (( 3 words$word #  3 words$word #  5 words$word # string))option)) of
       SOME ((rdc, rsc, uimm, s_)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case
 (s4484_ s4104_0 : (( 3 words$word # 3 words$word # 5 words$word # string)) option) of
     (SOME ((rdc, rsc, uimm, s_))) =>
 SOME (C_LD (uimm, rsc, rdc), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4500_ s4104_0  :  (( 3 words$word #  3 words$word #  5 words$word # string))option)) of
       SOME ((rsc1, rsc2, uimm, s_)) => T
     | _ => F
     )) then  (case
 (s4500_ s4104_0 : (( 3 words$word # 3 words$word # 5 words$word # string)) option) of
     (SOME ((rsc1, rsc2, uimm, s_))) =>
 SOME
   (C_SW (uimm, rsc1, rsc2), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4516_ s4104_0  :  (( 3 words$word #  3 words$word #  5 words$word # string))option)) of
       SOME ((rsc1, rsc2, uimm, s_)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case
 (s4516_ s4104_0 : (( 3 words$word # 3 words$word # 5 words$word # string)) option) of
     (SOME ((rsc1, rsc2, uimm, s_))) =>
 SOME
   (C_SD (uimm, rsc1, rsc2), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4532_ s4104_0  :  (( 5 words$word #  6 words$word # string))option)) of
       SOME ((rsd, nzi, s_)) => ((((nzi <> (0b000000w :  6 words$word)))) /\ (((rsd <> zreg))))
     | _ => F
     )) then  (case (s4532_ s4104_0 : (( 5 words$word # 6 words$word # string)) option) of
     (SOME ((rsd, nzi, s_))) =>
 SOME (C_ADDI (nzi, rsd), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4544_ s4104_0  :  (( 11 words$word # string))option)) of
       SOME ((imm, s_)) => ((( 32 : int):ii) = (( 32 : int):ii))
     | _ => F
     )) then  (case (s4544_ s4104_0 : (( 11 words$word # string)) option) of
     (SOME ((imm, s_))) =>
 SOME (C_JAL imm, ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4552_ s4104_0  :  (( 5 words$word #  6 words$word # string))option)) of
       SOME ((rsd, imm, s_)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case (s4552_ s4104_0 : (( 5 words$word # 6 words$word # string)) option) of
     (SOME ((rsd, imm, s_))) =>
 SOME (C_ADDIW (imm, rsd), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4564_ s4104_0  :  (( 5 words$word #  6 words$word # string))option)) of
       SOME ((rd, imm, s_)) => (rd <> zreg)
     | _ => F
     )) then  (case (s4564_ s4104_0 : (( 5 words$word # 6 words$word # string)) option) of
     (SOME ((rd, imm, s_))) =>
 SOME (C_LI (imm, rd), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4576_ s4104_0  :  (( 6 words$word # string))option)) of
       SOME ((imm, s_)) => (imm <> (0b000000w :  6 words$word))
     | _ => F
     )) then  (case (s4576_ s4104_0 : (( 6 words$word # string)) option) of
     (SOME ((imm, s_))) =>
 SOME (C_ADDI16SP imm, ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4584_ s4104_0  :  (( 5 words$word #  6 words$word # string))option)) of
       SOME ((rd, imm, s_)) =>
        ((((rd <> zreg))) /\ ((((((rd <> sp))) /\ (((imm <> (0b000000w :  6 words$word))))))))
     | _ => F
     )) then  (case (s4584_ s4104_0 : (( 5 words$word # 6 words$word # string)) option) of
     (SOME ((rd, imm, s_))) =>
 SOME (C_LUI (imm, rd), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4596_ s4104_0  :  (( 3 words$word #  6 words$word # string))option)) of
       SOME ((rsd, shamt, s_)) => (shamt <> (0b000000w :  6 words$word))
     | _ => F
     )) then  (case (s4596_ s4104_0 : (( 3 words$word # 6 words$word # string)) option) of
     (SOME ((rsd, shamt, s_))) =>
 SOME (C_SRLI (shamt, rsd), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4608_ s4104_0  :  (( 3 words$word #  6 words$word # string))option)) of
       SOME ((rsd, shamt, s_)) => (shamt <> (0b000000w :  6 words$word))
     | _ => F
     )) then  (case (s4608_ s4104_0 : (( 3 words$word # 6 words$word # string)) option) of
     (SOME ((rsd, shamt, s_))) =>
 SOME (C_SRAI (shamt, rsd), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4620_ s4104_0  :  (( 3 words$word #  6 words$word # string))option)) of
       SOME ((rsd, imm, s_)) => T
     | _ => F
     )) then  (case (s4620_ s4104_0 : (( 3 words$word # 6 words$word # string)) option) of
     (SOME ((rsd, imm, s_))) =>
 SOME (C_ANDI (imm, rsd), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4632_ s4104_0  :  (( 3 words$word #  3 words$word # string))option)) of
       SOME ((rsd, rs2, s_)) => T
     | _ => F
     )) then  (case (s4632_ s4104_0 : (( 3 words$word # 3 words$word # string)) option) of
     (SOME ((rsd, rs2, s_))) =>
 SOME (C_SUB (rsd, rs2), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4644_ s4104_0  :  (( 3 words$word #  3 words$word # string))option)) of
       SOME ((rsd, rs2, s_)) => T
     | _ => F
     )) then  (case (s4644_ s4104_0 : (( 3 words$word # 3 words$word # string)) option) of
     (SOME ((rsd, rs2, s_))) =>
 SOME (C_XOR (rsd, rs2), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4656_ s4104_0  :  (( 3 words$word #  3 words$word # string))option)) of
       SOME ((rsd, rs2, s_)) => T
     | _ => F
     )) then  (case (s4656_ s4104_0 : (( 3 words$word # 3 words$word # string)) option) of
     (SOME ((rsd, rs2, s_))) =>
 SOME (C_OR (rsd, rs2), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4668_ s4104_0  :  (( 3 words$word #  3 words$word # string))option)) of
       SOME ((rsd, rs2, s_)) => T
     | _ => F
     )) then  (case (s4668_ s4104_0 : (( 3 words$word # 3 words$word # string)) option) of
     (SOME ((rsd, rs2, s_))) =>
 SOME (C_AND (rsd, rs2), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4680_ s4104_0  :  (( 3 words$word #  3 words$word # string))option)) of
       SOME ((rsd, rs2, s_)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case (s4680_ s4104_0 : (( 3 words$word # 3 words$word # string)) option) of
     (SOME ((rsd, rs2, s_))) =>
 SOME (C_SUBW (rsd, rs2), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4692_ s4104_0  :  (( 3 words$word #  3 words$word # string))option)) of
       SOME ((rsd, rs2, s_)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case (s4692_ s4104_0 : (( 3 words$word # 3 words$word # string)) option) of
     (SOME ((rsd, rs2, s_))) =>
 SOME (C_ADDW (rsd, rs2), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4704_ s4104_0  :  (( 11 words$word # string))option)) of
       SOME ((imm, s_)) => T
     | _ => F
     )) then  (case (s4704_ s4104_0 : (( 11 words$word # string)) option) of
     (SOME ((imm, s_))) =>
 SOME (C_J imm, ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4712_ s4104_0  :  (( 3 words$word #  8 words$word # string))option)) of
       SOME ((rs, imm, s_)) => T
     | _ => F
     )) then  (case (s4712_ s4104_0 : (( 3 words$word # 8 words$word # string)) option) of
     (SOME ((rs, imm, s_))) =>
 SOME (C_BEQZ (imm, rs), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4724_ s4104_0  :  (( 3 words$word #  8 words$word # string))option)) of
       SOME ((rs, imm, s_)) => T
     | _ => F
     )) then  (case (s4724_ s4104_0 : (( 3 words$word # 8 words$word # string)) option) of
     (SOME ((rs, imm, s_))) =>
 SOME (C_BNEZ (imm, rs), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4736_ s4104_0  :  (( 5 words$word #  6 words$word # string))option)) of
       SOME ((rsd, shamt, s_)) =>
        ((((shamt <> (0b000000w :  6 words$word)))) /\ (((rsd <> zreg))))
     | _ => F
     )) then  (case (s4736_ s4104_0 : (( 5 words$word # 6 words$word # string)) option) of
     (SOME ((rsd, shamt, s_))) =>
 SOME (C_SLLI (shamt, rsd), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4748_ s4104_0  :  (( 5 words$word #  6 words$word # string))option)) of
       SOME ((rd, uimm, s_)) => (rd <> zreg)
     | _ => F
     )) then  (case (s4748_ s4104_0 : (( 5 words$word # 6 words$word # string)) option) of
     (SOME ((rd, uimm, s_))) =>
 SOME (C_LWSP (uimm, rd), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4760_ s4104_0  :  (( 5 words$word #  6 words$word # string))option)) of
       SOME ((rd, uimm, s_)) => ((((rd <> zreg))) /\ ((((( 32 : int):ii) = (( 64 : int):ii)))))
     | _ => F
     )) then  (case (s4760_ s4104_0 : (( 5 words$word # 6 words$word # string)) option) of
     (SOME ((rd, uimm, s_))) =>
 SOME (C_LDSP (uimm, rd), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4772_ s4104_0  :  (( 5 words$word #  6 words$word # string))option)) of
       SOME ((rd, uimm, s_)) => T
     | _ => F
     )) then  (case (s4772_ s4104_0 : (( 5 words$word # 6 words$word # string)) option) of
     (SOME ((rd, uimm, s_))) =>
 SOME (C_SWSP (uimm, rd), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4784_ s4104_0  :  (( 5 words$word #  6 words$word # string))option)) of
       SOME ((rs2, uimm, s_)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case (s4784_ s4104_0 : (( 5 words$word # 6 words$word # string)) option) of
     (SOME ((rs2, uimm, s_))) =>
 SOME (C_SDSP (uimm, rs2), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4796_ s4104_0  :  (( 5 words$word # string))option)) of
       SOME ((rs1, s_)) => (rs1 <> zreg)
     | _ => F
     )) then  (case (s4796_ s4104_0 : (( 5 words$word # string)) option) of
     (SOME ((rs1, s_))) =>
 SOME (C_JR rs1, ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4804_ s4104_0  :  (( 5 words$word # string))option)) of
       SOME ((rs1, s_)) => (rs1 <> zreg)
     | _ => F
     )) then  (case (s4804_ s4104_0 : (( 5 words$word # string)) option) of
     (SOME ((rs1, s_))) =>
 SOME (C_JALR rs1, ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4812_ s4104_0  :  (( 5 words$word #  5 words$word # string))option)) of
       SOME ((rd, rs2, s_)) => ((((rd <> zreg))) /\ (((rs2 <> zreg))))
     | _ => F
     )) then  (case (s4812_ s4104_0 : (( 5 words$word # 5 words$word # string)) option) of
     (SOME ((rd, rs2, s_))) =>
 SOME (C_MV (rd, rs2), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4824_ s4104_0)) of   SOME (s_) => T | _ => F )) then  
  (case s4824_ s4104_0 of
      (SOME (s_)) =>
  SOME (C_EBREAK () , ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s4828_ s4104_0  :  (( 5 words$word #  5 words$word # string))option)) of
       SOME ((rsd, rs2, s_)) => ((((rsd <> zreg))) /\ (((rs2 <> zreg))))
     | _ => F
     )) then  (case (s4828_ s4104_0 : (( 5 words$word # 5 words$word # string)) option) of
     (SOME ((rsd, rs2, s_))) =>
 SOME (C_ADD (rsd, rs2), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4840_ s4104_0
                     :  ((bool # bool # bool #  5 words$word #  5 words$word #  5 words$word # string))option)) of
       SOME ((high, signed1, signed2, rd, rs1, rs2, s_)) => T
     | _ => F
     )) then  (case
 (s4840_ s4104_0 : (( bool # bool # bool # 5 words$word # 5 words$word # 5 words$word # string)) option) of
     (SOME ((high, signed1, signed2, rd, rs1, rs2, s_))) =>
 SOME
   (MUL (rs2, rs1, rd, high, signed1, signed2),
   ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4857_ s4104_0  :  ((bool #  5 words$word #  5 words$word #  5 words$word # string))option)) of
       SOME ((s, rd, rs1, rs2, s_)) => T
     | _ => F
     )) then  (case
 (s4857_ s4104_0 : (( bool # 5 words$word # 5 words$word # 5 words$word # string)) option) of
     (SOME ((s, rd, rs1, rs2, s_))) =>
 SOME (DIV0 (rs2, rs1, rd, s), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4875_ s4104_0  :  ((bool #  5 words$word #  5 words$word #  5 words$word # string))option)) of
       SOME ((s, rd, rs1, rs2, s_)) => T
     | _ => F
     )) then  (case
 (s4875_ s4104_0 : (( bool # 5 words$word # 5 words$word # 5 words$word # string)) option) of
     (SOME ((s, rd, rs1, rs2, s_))) =>
 SOME (REM (rs2, rs1, rd, s), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4893_ s4104_0  :  (( 5 words$word #  5 words$word #  5 words$word # string))option)) of
       SOME ((rd, rs1, rs2, s_)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case
 (s4893_ s4104_0 : (( 5 words$word # 5 words$word # 5 words$word # string)) option) of
     (SOME ((rd, rs1, rs2, s_))) =>
 SOME (MULW (rs2, rs1, rd), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4909_ s4104_0  :  ((bool #  5 words$word #  5 words$word #  5 words$word # string))option)) of
       SOME ((s, rd, rs1, rs2, s_)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case
 (s4909_ s4104_0 : (( bool # 5 words$word # 5 words$word # 5 words$word # string)) option) of
     (SOME ((s, rd, rs1, rs2, s_))) =>
 SOME (DIVW (rs2, rs1, rd, s), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4928_ s4104_0  :  ((bool #  5 words$word #  5 words$word #  5 words$word # string))option)) of
       SOME ((s, rd, rs1, rs2, s_)) => ((( 32 : int):ii) = (( 64 : int):ii))
     | _ => F
     )) then  (case
 (s4928_ s4104_0 : (( bool # 5 words$word # 5 words$word # 5 words$word # string)) option) of
     (SOME ((s, rd, rs1, rs2, s_))) =>
 SOME (REMW (rs2, rs1, rd, s), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4947_ s4104_0  :  ((csrop #  5 words$word #  12 words$word #  5 words$word # string))option)) of
       SOME ((op, rd, csr, rs1, s_)) => T
     | _ => F
     )) then  (case
 (s4947_ s4104_0 : (( csrop # 5 words$word # 12 words$word # 5 words$word # string)) option) of
     (SOME ((op, rd, csr, rs1, s_))) =>
 SOME
   (CSR (csr, rs1, rd, T, op), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4965_ s4104_0  :  ((csrop #  5 words$word #  12 words$word #  5 words$word # string))option)) of
       SOME ((op, rd, csr, rs1, s_)) => T
     | _ => F
     )) then  (case
 (s4965_ s4104_0 : (( csrop # 5 words$word # 12 words$word # 5 words$word # string)) option) of
     (SOME ((op, rd, csr, rs1, s_))) =>
 SOME
   (CSR (csr, rs1, rd, F, op), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4982_ s4104_0)) of   SOME (s_) => T | _ => F )) then  
  (case s4982_ s4104_0 of
      (SOME (s_)) =>
  SOME (URET () , ((string_length arg_)) - ((string_length s_)))
  )
   else if ((case ((s4986_ s4104_0  :  (( 6 words$word # string))option)) of
       SOME ((imm, s_)) => T
     | _ => F
     )) then  (case (s4986_ s4104_0 : (( 6 words$word # string)) option) of
     (SOME ((imm, s_))) =>
 SOME (C_NOP_HINT imm, ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4992_ s4104_0  :  (( 5 words$word # string))option)) of
       SOME ((rsd, s_)) => (rsd <> zreg)
     | _ => F
     )) then  (case (s4992_ s4104_0 : (( 5 words$word # string)) option) of
     (SOME ((rsd, s_))) =>
 SOME (C_ADDI_HINT rsd, ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s4998_ s4104_0  :  (( 6 words$word # string))option)) of
       SOME ((imm, s_)) => T
     | _ => F
     )) then  (case (s4998_ s4104_0 : (( 6 words$word # string)) option) of
     (SOME ((imm, s_))) =>
 SOME (C_LI_HINT imm, ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s5004_ s4104_0  :  (( 6 words$word # string))option)) of
       SOME ((imm, s_)) => (imm <> (0b000000w :  6 words$word))
     | _ => F
     )) then  (case (s5004_ s4104_0 : (( 6 words$word # string)) option) of
     (SOME ((imm, s_))) =>
 SOME (C_LUI_HINT imm, ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s5010_ s4104_0  :  (( 5 words$word # string))option)) of
       SOME ((rs2, s_)) => (rs2 <> zreg)
     | _ => F
     )) then  (case (s5010_ s4104_0 : (( 5 words$word # string)) option) of
     (SOME ((rs2, s_))) =>
 SOME (C_MV_HINT rs2, ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s5016_ s4104_0  :  (( 5 words$word # string))option)) of
       SOME ((rs2, s_)) => (rs2 <> zreg)
     | _ => F
     )) then  (case (s5016_ s4104_0 : (( 5 words$word # string)) option) of
     (SOME ((rs2, s_))) =>
 SOME (C_ADD_HINT rs2, ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s5022_ s4104_0  :  (( 5 words$word #  6 words$word # string))option)) of
       SOME ((rsd, shamt, s_)) =>
        ((((shamt = (0b000000w :  6 words$word)))) \/ (((rsd = zreg))))
     | _ => F
     )) then  (case (s5022_ s4104_0 : (( 5 words$word # 6 words$word # string)) option) of
     (SOME ((rsd, shamt, s_))) =>
 SOME
   (C_SLLI_HINT (shamt, rsd), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s5031_ s4104_0  :  (( 3 words$word # string))option)) of
       SOME ((rsd, s_)) => T
     | _ => F
     )) then  (case (s5031_ s4104_0 : (( 3 words$word # string)) option) of
     (SOME ((rsd, s_))) =>
 SOME (C_SRLI_HINT rsd, ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s5037_ s4104_0  :  (( 3 words$word # string))option)) of
       SOME ((rsd, s_)) => T
     | _ => F
     )) then  (case (s5037_ s4104_0 : (( 3 words$word # string)) option) of
     (SOME ((rsd, s_))) =>
 SOME (C_SRAI_HINT rsd, ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s5043_ s4104_0
                     :  (( 4 words$word #  4 words$word #  5 words$word #  5 words$word #  4 words$word # string))option)) of
       SOME ((pred, succ, rs, rd, fm, s_)) =>
        (((((((fm <> (0x0w :  4 words$word)))) /\ (((fm <> (0x8w :  4 words$word))))))) \/ ((((((rs <> (0b00000w :  5 words$word)))) \/ (((rd <> (0b00000w :  5 words$word))))))))
     | _ => F
     )) then  (case
 (s5043_ s4104_0
 : (( 4 words$word # 4 words$word # 5 words$word # 5 words$word # 4 words$word # string)) option) of
     (SOME ((pred, succ, rs, rd, fm, s_))) =>
 SOME
   (FENCE_RESERVED (fm, pred, succ, rs, rd),
   ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s5061_ s4104_0  :  (( 5 words$word #  5 words$word #  12 words$word # string))option)) of
       SOME ((rd, rs, imm, s_)) =>
        ((((imm <> (0x000w :  12 words$word)))) \/ ((((((rs <> zreg))) \/ (((rd <> zreg)))))))
     | _ => F
     )) then  (case
 (s5061_ s4104_0 : (( 5 words$word # 5 words$word # 12 words$word # string)) option) of
     (SOME ((rd, rs, imm, s_))) =>
 SOME
   (FENCEI_RESERVED (imm, rs, rd), ((string_length arg_)) -
                                     ((string_length s_)))
 )
   else if ((case ((s5073_ s4104_0
                     :  ((word_width #  5 words$word #  12 words$word #  5 words$word # string))option)) of
       SOME ((width, rd, imm, rs1, s_)) => T
     | _ => F
     )) then  (case
 (s5073_ s4104_0 : (( word_width # 5 words$word # 12 words$word # 5 words$word # string)) option) of
     (SOME ((width, rd, imm, rs1, s_))) =>
 SOME
   (LOAD_FP (imm, rs1, rd, width), ((string_length arg_)) -
                                     ((string_length s_)))
 )
   else if ((case ((s5097_ s4104_0
                     :  ((word_width #  5 words$word #  12 words$word #  5 words$word # string))option)) of
       SOME ((width, rs2, imm, rs1, s_)) => T
     | _ => F
     )) then  (case
 (s5097_ s4104_0 : (( word_width # 5 words$word # 12 words$word # 5 words$word # string)) option) of
     (SOME ((width, rs2, imm, rs1, s_))) =>
 SOME
   (STORE_FP (imm, rs2, rs1, width), ((string_length arg_)) -
                                       ((string_length s_)))
 )
   else if ((case ((s5121_ s4104_0
                     :  ((f_madd_op_S #  5 words$word #  5 words$word #  5 words$word #  5 words$word # rounding_mode # string))option)) of
       SOME ((op, rd, rs1, rs2, rs3, rm, s_)) => T
     | _ => F
     )) then  (case
 (s5121_ s4104_0
 : (( f_madd_op_S # 5 words$word # 5 words$word # 5 words$word # 5 words$word # rounding_mode # string)) option) of
     (SOME ((op, rd, rs1, rs2, rs3, rm, s_))) =>
 SOME
   (F_MADD_TYPE_S (rs3, rs2, rs1, rm, rd, op),
   ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s5146_ s4104_0
                     :  ((f_bin_rm_op_S #  5 words$word #  5 words$word #  5 words$word # rounding_mode # string))option)) of
       SOME ((op, rd, rs1, rs2, rm, s_)) => T
     | _ => F
     )) then  (case
 (s5146_ s4104_0
 : (( f_bin_rm_op_S # 5 words$word # 5 words$word # 5 words$word # rounding_mode # string)) option) of
     (SOME ((op, rd, rs1, rs2, rm, s_))) =>
 SOME
   (F_BIN_RM_TYPE_S (rs2, rs1, rm, rd, op),
   ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s5167_ s4104_0
                     :  ((f_un_rm_op_S #  5 words$word #  5 words$word # rounding_mode # string))option)) of
       SOME ((FSQRT_S, rd, rs1, rm, s_)) => T
     | _ => F
     )) then  (case
 (s5167_ s4104_0 : (( f_un_rm_op_S # 5 words$word # 5 words$word # rounding_mode # string)) option) of
     (SOME ((FSQRT_S, rd, rs1, rm, s_))) =>
 SOME
   (F_UN_RM_TYPE_S (rs1, rm, rd, FSQRT_S),
   ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s5184_ s4104_0
                     :  ((f_un_rm_op_S #  5 words$word #  5 words$word # rounding_mode # string))option)) of
       SOME ((FCVT_W_S, rd, rs1, rm, s_)) => T
     | _ => F
     )) then  (case
 (s5184_ s4104_0 : (( f_un_rm_op_S # 5 words$word # 5 words$word # rounding_mode # string)) option) of
     (SOME ((FCVT_W_S, rd, rs1, rm, s_))) =>
 SOME
   (F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_W_S),
   ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s5201_ s4104_0
                     :  ((f_un_rm_op_S #  5 words$word #  5 words$word # rounding_mode # string))option)) of
       SOME ((FCVT_WU_S, rd, rs1, rm, s_)) => T
     | _ => F
     )) then  (case
 (s5201_ s4104_0 : (( f_un_rm_op_S # 5 words$word # 5 words$word # rounding_mode # string)) option) of
     (SOME ((FCVT_WU_S, rd, rs1, rm, s_))) =>
 SOME
   (F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_WU_S),
   ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s5218_ s4104_0
                     :  ((f_un_rm_op_S #  5 words$word #  5 words$word # rounding_mode # string))option)) of
       SOME ((FCVT_S_W, rd, rs1, rm, s_)) => T
     | _ => F
     )) then  (case
 (s5218_ s4104_0 : (( f_un_rm_op_S # 5 words$word # 5 words$word # rounding_mode # string)) option) of
     (SOME ((FCVT_S_W, rd, rs1, rm, s_))) =>
 SOME
   (F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_S_W),
   ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s5235_ s4104_0
                     :  ((f_un_rm_op_S #  5 words$word #  5 words$word # rounding_mode # string))option)) of
       SOME ((FCVT_S_WU, rd, rs1, rm, s_)) => T
     | _ => F
     )) then  (case
 (s5235_ s4104_0 : (( f_un_rm_op_S # 5 words$word # 5 words$word # rounding_mode # string)) option) of
     (SOME ((FCVT_S_WU, rd, rs1, rm, s_))) =>
 SOME
   (F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_S_WU),
   ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s5252_ s4104_0
                     :  ((f_un_rm_op_S #  5 words$word #  5 words$word # rounding_mode # string))option)) of
       SOME ((FCVT_L_S, rd, rs1, rm, s_)) => T
     | _ => F
     )) then  (case
 (s5252_ s4104_0 : (( f_un_rm_op_S # 5 words$word # 5 words$word # rounding_mode # string)) option) of
     (SOME ((FCVT_L_S, rd, rs1, rm, s_))) =>
 SOME
   (F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_L_S),
   ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s5269_ s4104_0
                     :  ((f_un_rm_op_S #  5 words$word #  5 words$word # rounding_mode # string))option)) of
       SOME ((FCVT_LU_S, rd, rs1, rm, s_)) => T
     | _ => F
     )) then  (case
 (s5269_ s4104_0 : (( f_un_rm_op_S # 5 words$word # 5 words$word # rounding_mode # string)) option) of
     (SOME ((FCVT_LU_S, rd, rs1, rm, s_))) =>
 SOME
   (F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_LU_S),
   ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s5286_ s4104_0
                     :  ((f_un_rm_op_S #  5 words$word #  5 words$word # rounding_mode # string))option)) of
       SOME ((FCVT_S_L, rd, rs1, rm, s_)) => T
     | _ => F
     )) then  (case
 (s5286_ s4104_0 : (( f_un_rm_op_S # 5 words$word # 5 words$word # rounding_mode # string)) option) of
     (SOME ((FCVT_S_L, rd, rs1, rm, s_))) =>
 SOME
   (F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_S_L),
   ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s5303_ s4104_0
                     :  ((f_un_rm_op_S #  5 words$word #  5 words$word # rounding_mode # string))option)) of
       SOME ((FCVT_S_LU, rd, rs1, rm, s_)) => T
     | _ => F
     )) then  (case
 (s5303_ s4104_0 : (( f_un_rm_op_S # 5 words$word # 5 words$word # rounding_mode # string)) option) of
     (SOME ((FCVT_S_LU, rd, rs1, rm, s_))) =>
 SOME
   (F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_S_LU),
   ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s5320_ s4104_0
                     :  ((f_bin_op_S #  5 words$word #  5 words$word #  5 words$word # string))option)) of
       SOME ((FSGNJ_S, rd, rs1, rs2, s_)) => T
     | _ => F
     )) then  (case
 (s5320_ s4104_0 : (( f_bin_op_S # 5 words$word # 5 words$word # 5 words$word # string)) option) of
     (SOME ((FSGNJ_S, rd, rs1, rs2, s_))) =>
 SOME
   (F_BIN_TYPE_S (rs2, rs1, rd, FSGNJ_S),
   ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s5337_ s4104_0
                     :  ((f_bin_op_S #  5 words$word #  5 words$word #  5 words$word # string))option)) of
       SOME ((FSGNJN_S, rd, rs1, rs2, s_)) => T
     | _ => F
     )) then  (case
 (s5337_ s4104_0 : (( f_bin_op_S # 5 words$word # 5 words$word # 5 words$word # string)) option) of
     (SOME ((FSGNJN_S, rd, rs1, rs2, s_))) =>
 SOME
   (F_BIN_TYPE_S (rs2, rs1, rd, FSGNJN_S),
   ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s5354_ s4104_0
                     :  ((f_bin_op_S #  5 words$word #  5 words$word #  5 words$word # string))option)) of
       SOME ((FSGNJX_S, rd, rs1, rs2, s_)) => T
     | _ => F
     )) then  (case
 (s5354_ s4104_0 : (( f_bin_op_S # 5 words$word # 5 words$word # 5 words$word # string)) option) of
     (SOME ((FSGNJX_S, rd, rs1, rs2, s_))) =>
 SOME
   (F_BIN_TYPE_S (rs2, rs1, rd, FSGNJX_S),
   ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s5371_ s4104_0
                     :  ((f_bin_op_S #  5 words$word #  5 words$word #  5 words$word # string))option)) of
       SOME ((FMIN_S, rd, rs1, rs2, s_)) => T
     | _ => F
     )) then  (case
 (s5371_ s4104_0 : (( f_bin_op_S # 5 words$word # 5 words$word # 5 words$word # string)) option) of
     (SOME ((FMIN_S, rd, rs1, rs2, s_))) =>
 SOME
   (F_BIN_TYPE_S (rs2, rs1, rd, FMIN_S),
   ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s5388_ s4104_0
                     :  ((f_bin_op_S #  5 words$word #  5 words$word #  5 words$word # string))option)) of
       SOME ((FMAX_S, rd, rs1, rs2, s_)) => T
     | _ => F
     )) then  (case
 (s5388_ s4104_0 : (( f_bin_op_S # 5 words$word # 5 words$word # 5 words$word # string)) option) of
     (SOME ((FMAX_S, rd, rs1, rs2, s_))) =>
 SOME
   (F_BIN_TYPE_S (rs2, rs1, rd, FMAX_S),
   ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s5405_ s4104_0
                     :  ((f_bin_op_S #  5 words$word #  5 words$word #  5 words$word # string))option)) of
       SOME ((FEQ_S, rd, rs1, rs2, s_)) => T
     | _ => F
     )) then  (case
 (s5405_ s4104_0 : (( f_bin_op_S # 5 words$word # 5 words$word # 5 words$word # string)) option) of
     (SOME ((FEQ_S, rd, rs1, rs2, s_))) =>
 SOME
   (F_BIN_TYPE_S (rs2, rs1, rd, FEQ_S),
   ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s5422_ s4104_0
                     :  ((f_bin_op_S #  5 words$word #  5 words$word #  5 words$word # string))option)) of
       SOME ((FLT_S, rd, rs1, rs2, s_)) => T
     | _ => F
     )) then  (case
 (s5422_ s4104_0 : (( f_bin_op_S # 5 words$word # 5 words$word # 5 words$word # string)) option) of
     (SOME ((FLT_S, rd, rs1, rs2, s_))) =>
 SOME
   (F_BIN_TYPE_S (rs2, rs1, rd, FLT_S),
   ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s5439_ s4104_0
                     :  ((f_bin_op_S #  5 words$word #  5 words$word #  5 words$word # string))option)) of
       SOME ((FLE_S, rd, rs1, rs2, s_)) => T
     | _ => F
     )) then  (case
 (s5439_ s4104_0 : (( f_bin_op_S # 5 words$word # 5 words$word # 5 words$word # string)) option) of
     (SOME ((FLE_S, rd, rs1, rs2, s_))) =>
 SOME
   (F_BIN_TYPE_S (rs2, rs1, rd, FLE_S),
   ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s5456_ s4104_0  :  ((f_un_op_S #  5 words$word #  5 words$word # string))option)) of
       SOME ((FMV_X_W, rd, rs1, s_)) => T
     | _ => F
     )) then  (case
 (s5456_ s4104_0 : (( f_un_op_S # 5 words$word # 5 words$word # string)) option) of
     (SOME ((FMV_X_W, rd, rs1, s_))) =>
 SOME
   (F_UN_TYPE_S (rs1, rd, FMV_X_W), ((string_length arg_)) -
                                      ((string_length s_)))
 )
   else if ((case ((s5469_ s4104_0  :  ((f_un_op_S #  5 words$word #  5 words$word # string))option)) of
       SOME ((FMV_W_X, rd, rs1, s_)) => T
     | _ => F
     )) then  (case
 (s5469_ s4104_0 : (( f_un_op_S # 5 words$word # 5 words$word # string)) option) of
     (SOME ((FMV_W_X, rd, rs1, s_))) =>
 SOME
   (F_UN_TYPE_S (rs1, rd, FMV_W_X), ((string_length arg_)) -
                                      ((string_length s_)))
 )
   else if ((case ((s5482_ s4104_0  :  ((f_un_op_S #  5 words$word #  5 words$word # string))option)) of
       SOME ((FCLASS_S, rd, rs1, s_)) => T
     | _ => F
     )) then  (case
 (s5482_ s4104_0 : (( f_un_op_S # 5 words$word # 5 words$word # string)) option) of
     (SOME ((FCLASS_S, rd, rs1, s_))) =>
 SOME
   (F_UN_TYPE_S (rs1, rd, FCLASS_S), ((string_length arg_)) -
                                       ((string_length s_)))
 )
   else if ((case ((s5495_ s4104_0  :  (( 5 words$word #  6 words$word # string))option)) of
       SOME ((rd, imm, s_)) => ((( 32 : int):ii) = (( 32 : int):ii))
     | _ => F
     )) then  (case (s5495_ s4104_0 : (( 5 words$word # 6 words$word # string)) option) of
     (SOME ((rd, imm, s_))) =>
 SOME (C_FLWSP (imm, rd), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s5507_ s4104_0  :  (( 5 words$word #  6 words$word # string))option)) of
       SOME ((rd, uimm, s_)) => ((( 32 : int):ii) = (( 32 : int):ii))
     | _ => F
     )) then  (case (s5507_ s4104_0 : (( 5 words$word # 6 words$word # string)) option) of
     (SOME ((rd, uimm, s_))) =>
 SOME (C_FSWSP (uimm, rd), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s5519_ s4104_0  :  (( 3 words$word #  3 words$word #  5 words$word # string))option)) of
       SOME ((rdc, rsc, uimm, s_)) => ((( 32 : int):ii) = (( 32 : int):ii))
     | _ => F
     )) then  (case
 (s5519_ s4104_0 : (( 3 words$word # 3 words$word # 5 words$word # string)) option) of
     (SOME ((rdc, rsc, uimm, s_))) =>
 SOME (C_FLW (uimm, rsc, rdc), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s5535_ s4104_0  :  (( 3 words$word #  3 words$word #  5 words$word # string))option)) of
       SOME ((rsc1, rsc2, uimm, s_)) => ((( 32 : int):ii) = (( 32 : int):ii))
     | _ => F
     )) then  (case
 (s5535_ s4104_0 : (( 3 words$word # 3 words$word # 5 words$word # string)) option) of
     (SOME ((rsc1, rsc2, uimm, s_))) =>
 SOME
   (C_FSW (uimm, rsc1, rsc2), ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s5551_ s4104_0  :  (( 32 words$word # string))option)) of
       SOME ((s, s_)) => T
     | _ => F
     )) then  (case (s5551_ s4104_0 : (( 32 words$word # string)) option) of
     (SOME ((s, s_))) =>
 SOME (ILLEGAL s, ((string_length arg_)) - ((string_length s_)))
 )
   else if ((case ((s5559_ s4104_0  :  (( 16 words$word # string))option)) of
       SOME ((s, s_)) => T
     | _ => F
     )) then  (case (s5559_ s4104_0 : (( 16 words$word # string)) option) of
     (SOME ((s, s_))) =>
 SOME (C_ILLEGAL s, ((string_length arg_)) - ((string_length s_)))
 )
   else NONE))`;


val _ = Define `
 ((print_insn:ast ->(regstate)sail2_state_monad$sequential_state ->(((string),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) insn=  (assembly_forwards insn))`;


(*val decode : mword ty32 -> M ast*)

val _ = Define `
 ((decode:(32)words$word ->(regstate)sail2_state_monad$sequential_state ->(((ast),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) bv=  (encdec_backwards bv))`;


(*val decodeCompressed : mword ty16 -> M ast*)

val _ = Define `
 ((decodeCompressed:(16)words$word ->(regstate)sail2_state_monad$sequential_state ->(((ast),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) bv=  (encdec_compressed_backwards bv))`;


(*val ext_init : unit -> unit*)

val _ = Define `
 ((ext_init:unit -> unit) () =  () )`;


(*val ext_fetch_hook : FetchResult -> FetchResult*)

val _ = Define `
 ((ext_fetch_hook:FetchResult -> FetchResult) f=  f)`;


(*val ext_pre_step_hook : unit -> unit*)

val _ = Define `
 ((ext_pre_step_hook:unit -> unit) () =  () )`;


(*val ext_post_step_hook : unit -> unit*)

val _ = Define `
 ((ext_post_step_hook:unit -> unit) () =  () )`;


(*val ext_post_decode_hook : ast -> M ast*)

val _ = Define `
 ((ext_post_decode_hook:ast ->(regstate)sail2_state_monad$sequential_state ->(((ast),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) x=  (sail2_state_monad$returnS x))`;


(*val isRVC : mword ty16 -> bool*)

val _ = Define `
 ((isRVC:(16)words$word -> bool) h=  (~ (((((subrange_vec_dec h (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) = (0b11w :  2 words$word))))))`;


(*val fetch : unit -> M FetchResult*)

val _ = Define `
 ((fetch:unit ->(regstate)sail2_state_monad$sequential_state ->(((FetchResult),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$bindS
   (sail2_state_monad$read_regS PC_ref  : ( 32 words$word) M) (\ (w__0 :  32 words$word) .  sail2_state_monad$bindS
   (sail2_state_monad$read_regS PC_ref  : ( 32 words$word) M) (\ (w__1 :  32 words$word) . 
   (case ((ext_fetch_check_pc w__0 w__1)) of
     Ext_FetchAddr_Error (e) => sail2_state_monad$returnS (F_Ext_Error e)
   | Ext_FetchAddr_OK (use_pc) => sail2_state_monad$bindS
      (sail2_state$or_boolS (sail2_state_monad$returnS (((((access_vec_dec use_pc (( 0 : int):ii))) <> B0))))
        (sail2_state$and_boolS (sail2_state_monad$returnS (((((access_vec_dec use_pc (( 1 : int):ii))) <> B0))))
           ( sail2_state_monad$bindS(haveRVC () ) (\ (w__2 : bool) .  sail2_state_monad$returnS ((~ w__2)))))) (\ (w__4 : bool) . 
      if w__4 then sail2_state_monad$bindS
        (sail2_state_monad$read_regS PC_ref  : ( 32 words$word) M) (\ (w__5 :  32 words$word) . 
        sail2_state_monad$returnS (F_Error (E_Fetch_Addr_Align () , w__5)))
      else sail2_state_monad$bindS
        (translateAddr use_pc (Execute () )  : ( (( 32 words$word), ExceptionType)TR_Result) M) (\ (w__6 : (( 32 words$word), ExceptionType)
          TR_Result) . 
        (case w__6 of
          TR_Failure ((e, _)) => sail2_state_monad$bindS
           (sail2_state_monad$read_regS PC_ref  : ( 32 words$word) M) (\ (w__7 :  32 words$word) . 
           sail2_state_monad$returnS (F_Error (e, w__7)))
        | TR_Address ((ppclo, _)) => sail2_state_monad$bindS
           (mem_read (Execute () ) ppclo (( 2 : int):ii) F F F  : ( ( 16 words$word)MemoryOpResult) M) (\ (w__8 : ( 16 words$word)
             MemoryOpResult) . 
           (case w__8 of
             MemException (e) => sail2_state_monad$bindS
              (sail2_state_monad$read_regS PC_ref  : ( 32 words$word) M) (\ (w__9 :  32 words$word) . 
              sail2_state_monad$returnS (F_Error (e, w__9)))
           | MemValue (ilo) =>
              if ((isRVC ilo)) then sail2_state_monad$returnS (F_RVC ilo)
              else sail2_state_monad$bindS
                (sail2_state_monad$read_regS PC_ref  : ( 32 words$word) M) (\ (w__10 :  32 words$word) . 
                let (PC_hi : xlenbits) = ((add_vec_int w__10 (( 2 : int):ii)  :  32 words$word)) in sail2_state_monad$bindS
                (sail2_state_monad$read_regS PC_ref  : ( 32 words$word) M) (\ (w__11 :  32 words$word) . 
                (case ((ext_fetch_check_pc w__11 PC_hi)) of
                  Ext_FetchAddr_Error (e) => sail2_state_monad$returnS (F_Ext_Error e)
                | Ext_FetchAddr_OK (use_pc_hi) => sail2_state_monad$bindS
                   (translateAddr use_pc_hi (Execute () )  : ( (( 32 words$word), ExceptionType)TR_Result) M) (\ (w__12 : (( 32 words$word), ExceptionType)
                     TR_Result) . 
                   (case w__12 of
                     TR_Failure ((e, _)) => sail2_state_monad$returnS (F_Error (e, PC_hi))
                   | TR_Address ((ppchi, _)) => sail2_state_monad$bindS
                      (mem_read (Execute () ) ppchi (( 2 : int):ii) F F F
                        : ( ( 16 words$word)MemoryOpResult) M) (\ (w__13 : ( 16 words$word)
                        MemoryOpResult) . 
                      sail2_state_monad$returnS ((case w__13 of
                        MemException (e) => F_Error (e, PC_hi)
                      | MemValue (ihi) => F_Base ((concat_vec ihi ilo  :  32 words$word))
                      )))
                   ))
                )))
           ))
        )))
   )))))`;


(*val step : ii -> M bool*)

val _ = Define `
 ((step:int ->(regstate)sail2_state_monad$sequential_state ->(((bool),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) step_no=
    (let (_ : unit) = (ext_pre_step_hook () ) in sail2_state_monad$bindS (sail2_state_monad$seqS
   (sail2_state_monad$write_regS minstret_written_ref F)
   (sail2_state_monad$read_regS cur_privilege_ref)) (\ (w__0 : Privilege) .  sail2_state_monad$bindS
   (dispatchInterrupt w__0) (\ (w__1 :  ((InterruptType # Privilege))option) .  sail2_state_monad$bindS
   (case w__1 of
     SOME ((intr, priv)) =>
      let (_ : unit) =
        (if ((get_config_print_instr () )) then
          print_bits0 "Handling interrupt: " ((interruptType_to_bits intr  :  8 words$word))
        else () ) in sail2_state_monad$seqS
      (handle_interrupt intr priv) (sail2_state_monad$returnS (RETIRE_FAIL, F))
   | NONE => sail2_state_monad$bindS
      (fetch () ) (\ (w__2 : FetchResult) . 
      let (f : FetchResult) = (ext_fetch_hook w__2) in
      (case f of
        F_Ext_Error (e) =>
         let (_ : unit) = (ext_handle_fetch_check_error e) in
         sail2_state_monad$returnS (RETIRE_FAIL, F)
      | F_Error ((e, addr)) => sail2_state_monad$seqS (handle_mem_exception addr e) (sail2_state_monad$returnS (RETIRE_FAIL, F))
      | F_RVC (h) => sail2_state_monad$bindS
         (decodeCompressed h) (\ ast .  sail2_state_monad$bindS (sail2_state_monad$seqS
         (if ((get_config_print_instr () )) then sail2_state_monad$bindS
            (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__3 : Privilege) .  sail2_state_monad$bindS
            (sail2_state_monad$read_regS PC_ref  : ( 32 words$word) M) (\ (w__4 :  32 words$word) .  sail2_state_monad$bindS
            (print_insn ast) (\ (w__5 : string) . 
            sail2_state_monad$returnS ((print_dbg
                       ((STRCAT "["
                           ((STRCAT ((stringFromInteger step_no))
                               ((STRCAT "] ["
                                   ((STRCAT ((privLevel_to_str w__3))
                                       ((STRCAT "]: "
                                           ((STRCAT ((string_of_bits w__4))
                                               ((STRCAT " ("
                                                   ((STRCAT ((string_of_bits h))
                                                       ((STRCAT ") " w__5)))))))))))))))))))))))
          else sail2_state_monad$returnS () )
         (haveRVC () )) (\ (w__6 : bool) . 
         if w__6 then sail2_state_monad$bindS
           (sail2_state_monad$read_regS PC_ref  : ( 32 words$word) M) (\ (w__7 :  32 words$word) .  sail2_state_monad$bindS (sail2_state_monad$seqS
           (sail2_state_monad$write_regS nextPC_ref ((add_vec_int w__7 (( 2 : int):ii)  :  32 words$word)))
           (ext_post_decode_hook ast)) (\ (w__8 : ast) .  sail2_state_monad$bindS
           (execute w__8) (\ (w__9 : Retired) .  sail2_state_monad$returnS (w__9, T))))
         else sail2_state_monad$seqS (handle_illegal () ) (sail2_state_monad$returnS (RETIRE_FAIL, T))))
      | F_Base (w) => sail2_state_monad$bindS
         (decode w) (\ ast .  sail2_state_monad$bindS (sail2_state_monad$seqS
         (if ((get_config_print_instr () )) then sail2_state_monad$bindS
            (sail2_state_monad$read_regS cur_privilege_ref) (\ (w__11 : Privilege) .  sail2_state_monad$bindS
            (sail2_state_monad$read_regS PC_ref  : ( 32 words$word) M) (\ (w__12 :  32 words$word) .  sail2_state_monad$bindS
            (print_insn ast) (\ (w__13 : string) . 
            sail2_state_monad$returnS ((print_dbg
                       ((STRCAT "["
                           ((STRCAT ((stringFromInteger step_no))
                               ((STRCAT "] ["
                                   ((STRCAT ((privLevel_to_str w__11))
                                       ((STRCAT "]: "
                                           ((STRCAT ((string_of_bits w__12))
                                               ((STRCAT " ("
                                                   ((STRCAT ((string_of_bits w))
                                                       ((STRCAT ") " w__13)))))))))))))))))))))))
          else sail2_state_monad$returnS () )
         (sail2_state_monad$read_regS PC_ref  : ( 32 words$word) M)) (\ (w__14 :  32 words$word) .  sail2_state_monad$bindS (sail2_state_monad$seqS
         (sail2_state_monad$write_regS nextPC_ref ((add_vec_int w__14 (( 4 : int):ii)  :  32 words$word)))
         (ext_post_decode_hook ast)) (\ (w__15 : ast) .  sail2_state_monad$bindS
         (execute w__15) (\ (w__16 : Retired) .  sail2_state_monad$returnS (w__16, T)))))
      ))
   ) (\ varstup .  let ((retired : Retired), (stepped : bool)) = varstup in sail2_state_monad$seqS (sail2_state_monad$seqS
   (tick_pc () )
   (case retired of   RETIRE_SUCCESS => retire_instruction ()  | RETIRE_FAIL => sail2_state_monad$returnS ()  ))
   (let (_ : unit) = (ext_post_step_hook () ) in
   sail2_state_monad$returnS stepped))))))`;


(*val loop : unit -> M unit*)

val _ = Define `
 ((loop:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =
    (let insns_per_tick = (plat_insns_per_tick () ) in
   let (i : ii) = ((( 0 : int):ii)) in
   let (step_no : ii) = ((( 0 : int):ii)) in sail2_state_monad$bindS
   (sail2_state$whileS (i, step_no)
     (\ varstup .  let (i, step_no) = varstup in sail2_state_monad$bindS
       (sail2_state_monad$read_regS htif_done_ref) (\ (w__0 : bool) .  sail2_state_monad$returnS ((~ w__0))))
     (\ varstup .  let (i, step_no) = varstup in sail2_state_monad$bindS
       (step step_no) (\ stepped . 
       let (step_no : ii) = (if stepped then step_no + (( 1 : int):ii) else step_no) in sail2_state_monad$bindS
       (sail2_state_monad$read_regS htif_done_ref) (\ (w__1 : bool) .  sail2_state_monad$bindS
       (if w__1 then sail2_state_monad$bindS
          (sail2_state_monad$read_regS htif_exit_code_ref  : ( 64 words$word) M) (\ (w__2 :  64 words$word) . 
          let exit_val = (lem$w2ui w__2) in
          sail2_state_monad$returnS (let (_ : unit) =
            (if (((exit_val = (( 0 : int):ii)))) then print_endline "SUCCESS"
            else print_int "FAILURE: " exit_val) in
          i))
        else
          let i = (i + (( 1 : int):ii)) in
          if (((i = insns_per_tick))) then sail2_state_monad$seqS (sail2_state_monad$seqS (tick_clock () ) (tick_platform () )) (sail2_state_monad$returnS (( 0 : int):ii))
          else sail2_state_monad$returnS i) (\ (i : ii) . 
       sail2_state_monad$returnS (i, step_no)))))) (\ varstup .  let ((i : ii), (step_no : ii)) = varstup in
   sail2_state_monad$returnS () )))`;


(*val init_model : unit -> M unit*)

val _ = Define `
 ((init_model:unit ->(regstate)sail2_state_monad$sequential_state ->(((unit),(exception))sail2_state_monad$result#(regstate)sail2_state_monad$sequential_state)set) () =  (sail2_state_monad$seqS (sail2_state_monad$seqS (sail2_state_monad$seqS
   (init_platform () )
   (init_sys () ))
   (init_vmem () ))
   (let (_ : unit) = (ext_init () ) in
   ext_init_regs () )))`;



val _ = export_theory()

