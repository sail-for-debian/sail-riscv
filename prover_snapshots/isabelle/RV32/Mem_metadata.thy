chapter \<open>Generated by Lem from \<open>handwritten_support/0.11/mem_metadata.lem\<close>.\<close>

theory "Mem_metadata" 

imports
  Main
  "LEM.Lem_pervasives"
  "LEM.Lem_pervasives_extra"
  "Sail.Sail2_instr_kinds"
  "Sail.Sail2_values"
  "Sail.Sail2_operators_mwords"
  "Sail.Sail2_prompt_monad"
  "Sail.Sail2_prompt"

begin 

\<comment> \<open>\<open>open import Pervasives\<close>\<close>
\<comment> \<open>\<open>open import Pervasives_extra\<close>\<close>
\<comment> \<open>\<open>open import Sail2_instr_kinds\<close>\<close>
\<comment> \<open>\<open>open import Sail2_values\<close>\<close>
\<comment> \<open>\<open>open import Sail2_operators_mwords\<close>\<close>
\<comment> \<open>\<open>open import Sail2_prompt_monad\<close>\<close>
\<comment> \<open>\<open>open import Sail2_prompt\<close>\<close>

\<comment> \<open>\<open>val write_ram : forall 'rv 'e 'a 'n. Size 'a, Size 'n => write_kind -> mword 'a -> integer -> mword 'n -> unit -> monad 'rv bool 'e\<close>\<close>
definition write_ram  :: \<open> write_kind \<Rightarrow>('a::len)Word.word \<Rightarrow> int \<Rightarrow>('n::len)Word.word \<Rightarrow> unit \<Rightarrow>('rv,(bool),'e)monad \<close>  where 
     \<open> write_ram wk addr width data meta = (
  write_mem instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict wk ()  addr width data )\<close> 
  for  wk  :: " write_kind " 
  and  addr  :: "('a::len)Word.word " 
  and  width  :: " int " 
  and  data  :: "('n::len)Word.word " 
  and  meta  :: " unit "


\<comment> \<open>\<open>val read_ram : forall 'rv 'e 'a 'n. Size 'a, Size 'n => read_kind -> mword 'a -> integer -> bool -> monad 'rv (mword 'n * unit) 'e\<close>\<close>
definition read_ram  :: \<open> read_kind \<Rightarrow>('a::len)Word.word \<Rightarrow> int \<Rightarrow> bool \<Rightarrow>('rv,(('n::len)Word.word*unit),'e)monad \<close>  where 
     \<open> read_ram rk addr width read_tag = (
  read_mem instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict rk ()  addr width \<bind> ((\<lambda> (data :: ( 'n::len)Word.word) . 
  return (data, () ))))\<close> 
  for  rk  :: " read_kind " 
  and  addr  :: "('a::len)Word.word " 
  and  width  :: " int " 
  and  read_tag  :: " bool "

end
